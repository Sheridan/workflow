/* soapStub.h
   Generated by gSOAP 2.7.17 from ./z_soap/z_soap.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	""
#define SOAP_NAMESPACE_OF_ns3	"urn:zimbra"
#define SOAP_NAMESPACE_OF_ns4	"urn:zimbraAccount"
#define SOAP_NAMESPACE_OF_ns5	"urn:zimbraMail"
#define SOAP_NAMESPACE_OF_ns6	"urn:zimbraRepl"
#define SOAP_NAMESPACE_OF_ns7	"urn:zimbraSync"
#define SOAP_NAMESPACE_OF_ns8	"urn:zimbraVoice"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns3__zmBoolean
#define SOAP_TYPE_ns3__zmBoolean (859)
/* ns3:zmBoolean */
enum ns3__zmBoolean {ns3__zmBoolean__0 = 0, ns3__zmBoolean__1 = 1, ns3__zmBoolean__false_ = 2, ns3__zmBoolean__true_ = 3};
#endif

#ifndef SOAP_TYPE_ns3__accountBy
#define SOAP_TYPE_ns3__accountBy (860)
/* ns3:accountBy */
enum ns3__accountBy {ns3__accountBy__adminName = 0, ns3__accountBy__appAdminName = 1, ns3__accountBy__id = 2, ns3__accountBy__foreignPrincipal = 3, ns3__accountBy__name = 4, ns3__accountBy__krb5Principal = 5};
#endif

#ifndef SOAP_TYPE_ns3__galSearchType
#define SOAP_TYPE_ns3__galSearchType (861)
/* ns3:galSearchType */
enum ns3__galSearchType {ns3__galSearchType__all = 0, ns3__galSearchType__account = 1, ns3__galSearchType__resource = 2, ns3__galSearchType__group = 3};
#endif

#ifndef SOAP_TYPE_ns3__targetType
#define SOAP_TYPE_ns3__targetType (862)
/* ns3:targetType */
enum ns3__targetType {ns3__targetType__account = 0, ns3__targetType__calresource = 1, ns3__targetType__cos = 2, ns3__targetType__dl = 3, ns3__targetType__group = 4, ns3__targetType__domain = 5, ns3__targetType__server = 6, ns3__targetType__ucservice = 7, ns3__targetType__xmppcomponent = 8, ns3__targetType__zimlet = 9, ns3__targetType__config = 10, ns3__targetType__global = 11};
#endif

#ifndef SOAP_TYPE_ns3__targetBy
#define SOAP_TYPE_ns3__targetBy (863)
/* ns3:targetBy */
enum ns3__targetBy {ns3__targetBy__id = 0, ns3__targetBy__name = 1};
#endif

#ifndef SOAP_TYPE_ns3__distributionListBy
#define SOAP_TYPE_ns3__distributionListBy (864)
/* ns3:distributionListBy */
enum ns3__distributionListBy {ns3__distributionListBy__id = 0, ns3__distributionListBy__name = 1};
#endif

#ifndef SOAP_TYPE_ns3__granteeType
#define SOAP_TYPE_ns3__granteeType (865)
/* ns3:granteeType */
enum ns3__granteeType {ns3__granteeType__usr = 0, ns3__granteeType__grp = 1, ns3__granteeType__egp = 2, ns3__granteeType__all = 3, ns3__granteeType__dom = 4, ns3__granteeType__edom = 5, ns3__granteeType__gst = 6, ns3__granteeType__key = 7, ns3__granteeType__pub = 8, ns3__granteeType__email = 9};
#endif

#ifndef SOAP_TYPE_ns3__distributionListGranteeBy
#define SOAP_TYPE_ns3__distributionListGranteeBy (866)
/* ns3:distributionListGranteeBy */
enum ns3__distributionListGranteeBy {ns3__distributionListGranteeBy__id = 0, ns3__distributionListGranteeBy__name = 1};
#endif

#ifndef SOAP_TYPE_ns3__licenseStatus
#define SOAP_TYPE_ns3__licenseStatus (867)
/* ns3:licenseStatus */
enum ns3__licenseStatus {ns3__licenseStatus__NOT_USCOREINSTALLED = 0, ns3__licenseStatus__NOT_USCOREACTIVATED = 1, ns3__licenseStatus__IN_USCOREFUTURE = 2, ns3__licenseStatus__EXPIRED = 3, ns3__licenseStatus__INVALID = 4, ns3__licenseStatus__LICENSE_USCOREGRACE_USCOREPERIOD = 5, ns3__licenseStatus__ACTIVATION_USCOREGRACE_USCOREPERIOD = 6, ns3__licenseStatus__OK = 7};
#endif

#ifndef SOAP_TYPE_ns3__storeLookupOpt
#define SOAP_TYPE_ns3__storeLookupOpt (868)
/* ns3:storeLookupOpt */
enum ns3__storeLookupOpt {ns3__storeLookupOpt__ANY = 0, ns3__storeLookupOpt__ALL = 1};
#endif

#ifndef SOAP_TYPE_ns3__sourceLookupOpt
#define SOAP_TYPE_ns3__sourceLookupOpt (869)
/* ns3:sourceLookupOpt */
enum ns3__sourceLookupOpt {ns3__sourceLookupOpt__ANY = 0, ns3__sourceLookupOpt__ALL = 1};
#endif

#ifndef SOAP_TYPE_ns3__smimeStoreType
#define SOAP_TYPE_ns3__smimeStoreType (870)
/* ns3:smimeStoreType */
enum ns3__smimeStoreType {ns3__smimeStoreType__CONTACT = 0, ns3__smimeStoreType__GAL = 1, ns3__smimeStoreType__LDAP = 2};
#endif

#ifndef SOAP_TYPE_ns3__loggingLevel
#define SOAP_TYPE_ns3__loggingLevel (871)
/* ns3:loggingLevel */
enum ns3__loggingLevel {ns3__loggingLevel__error = 0, ns3__loggingLevel__warn = 1, ns3__loggingLevel__info = 2, ns3__loggingLevel__debug = 3, ns3__loggingLevel__trace = 4};
#endif

#ifndef SOAP_TYPE_ns3__autoProvPrincipalBy
#define SOAP_TYPE_ns3__autoProvPrincipalBy (872)
/* ns3:autoProvPrincipalBy */
enum ns3__autoProvPrincipalBy {ns3__autoProvPrincipalBy__dn = 0, ns3__autoProvPrincipalBy__name = 1};
#endif

#ifndef SOAP_TYPE_ns3__zeroOrOne
#define SOAP_TYPE_ns3__zeroOrOne (873)
/* ns3:zeroOrOne */
enum ns3__zeroOrOne {ns3__zeroOrOne__0 = 0, ns3__zeroOrOne__1 = 1};
#endif

#ifndef SOAP_TYPE_ns3__mailboxMoveType
#define SOAP_TYPE_ns3__mailboxMoveType (874)
/* ns3:mailboxMoveType */
enum ns3__mailboxMoveType {ns3__mailboxMoveType__out = 0, ns3__mailboxMoveType__in = 1};
#endif

#ifndef SOAP_TYPE_ns3__grantGranteeType
#define SOAP_TYPE_ns3__grantGranteeType (875)
/* ns3:grantGranteeType */
enum ns3__grantGranteeType {ns3__grantGranteeType__usr = 0, ns3__grantGranteeType__grp = 1, ns3__grantGranteeType__cos = 2, ns3__grantGranteeType__pub = 3, ns3__grantGranteeType__all = 4, ns3__grantGranteeType__dom = 5, ns3__grantGranteeType__guest = 6, ns3__grantGranteeType__key = 7};
#endif

#ifndef SOAP_TYPE_ns3__searchSortBy
#define SOAP_TYPE_ns3__searchSortBy (876)
/* ns3:searchSortBy */
enum ns3__searchSortBy {ns3__searchSortBy__dateDesc = 0, ns3__searchSortBy__dateAsc = 1, ns3__searchSortBy__subjDesc = 2, ns3__searchSortBy__subjAsc = 3, ns3__searchSortBy__nameDesc = 4, ns3__searchSortBy__nameAsc = 5, ns3__searchSortBy__durDesc = 6, ns3__searchSortBy__durAsc = 7, ns3__searchSortBy__none = 8, ns3__searchSortBy__taskDueAsc = 9, ns3__searchSortBy__taskDueDesc = 10, ns3__searchSortBy__taskStatusAsc = 11, ns3__searchSortBy__taskStatusDesc = 12, ns3__searchSortBy__taskPercCompletedAsc = 13, ns3__searchSortBy__taskPercCompletedDesc = 14};
#endif

#ifndef SOAP_TYPE_ns3__connectionType
#define SOAP_TYPE_ns3__connectionType (877)
/* ns3:connectionType */
enum ns3__connectionType {ns3__connectionType__cleartext = 0, ns3__connectionType__ssl = 1, ns3__connectionType__tls = 2, ns3__connectionType__tls_USCOREif_USCOREavailable = 3};
#endif

#ifndef SOAP_TYPE_ns3__trueOrFalse
#define SOAP_TYPE_ns3__trueOrFalse (878)
/* ns3:trueOrFalse */
enum ns3__trueOrFalse {ns3__trueOrFalse__true_ = 0, ns3__trueOrFalse__false_ = 1};
#endif

#ifndef SOAP_TYPE_ns4__checkLicenseStatus
#define SOAP_TYPE_ns4__checkLicenseStatus (883)
/* ns4:checkLicenseStatus */
enum ns4__checkLicenseStatus {ns4__checkLicenseStatus__ok = 0, ns4__checkLicenseStatus__no = 1, ns4__checkLicenseStatus__inGracePeriod = 2};
#endif

#ifndef SOAP_TYPE_ns4__operation
#define SOAP_TYPE_ns4__operation (884)
/* ns4:operation */
enum ns4__operation {ns4__operation__delete_ = 0, ns4__operation__modify = 1, ns4__operation__rename = 2, ns4__operation__addOwners = 3, ns4__operation__removeOwners = 4, ns4__operation__setOwners = 5, ns4__operation__grantRights = 6, ns4__operation__revokeRights = 7, ns4__operation__setRights = 8, ns4__operation__addMembers = 9, ns4__operation__removeMembers = 10, ns4__operation__acceptSubsReq = 11, ns4__operation__rejectSubsReq = 12};
#endif

#ifndef SOAP_TYPE_ns4__distributionListSubscribeOp
#define SOAP_TYPE_ns4__distributionListSubscribeOp (885)
/* ns4:distributionListSubscribeOp */
enum ns4__distributionListSubscribeOp {ns4__distributionListSubscribeOp__subscribe = 0, ns4__distributionListSubscribeOp__unsubscribe = 1};
#endif

#ifndef SOAP_TYPE_ns4__memberOfSelector
#define SOAP_TYPE_ns4__memberOfSelector (886)
/* ns4:memberOfSelector */
enum ns4__memberOfSelector {ns4__memberOfSelector__all = 0, ns4__memberOfSelector__directOnly = 1, ns4__memberOfSelector__none = 2};
#endif

#ifndef SOAP_TYPE_ns4__adsConnectionType
#define SOAP_TYPE_ns4__adsConnectionType (887)
/* ns4:adsConnectionType */
enum ns4__adsConnectionType {ns4__adsConnectionType__cleartext = 0, ns4__adsConnectionType__ssl = 1, ns4__adsConnectionType__tls = 2, ns4__adsConnectionType__tls_USCOREis_USCOREavailable = 3};
#endif

#ifndef SOAP_TYPE_ns4__distributionListSubscribeStatus
#define SOAP_TYPE_ns4__distributionListSubscribeStatus (888)
/* ns4:distributionListSubscribeStatus */
enum ns4__distributionListSubscribeStatus {ns4__distributionListSubscribeStatus__subscribed = 0, ns4__distributionListSubscribeStatus__unsubscribed = 1, ns4__distributionListSubscribeStatus__awaiting_USCOREapproval = 2};
#endif

#ifndef SOAP_TYPE_ns4__infoSection
#define SOAP_TYPE_ns4__infoSection (889)
/* ns4:infoSection */
enum ns4__infoSection {ns4__infoSection__mbox = 0, ns4__infoSection__prefs = 1, ns4__infoSection__attrs = 2, ns4__infoSection__zimlets = 3, ns4__infoSection__props = 4, ns4__infoSection__idents = 5, ns4__infoSection__sigs = 6, ns4__infoSection__dsrcs = 7, ns4__infoSection__children = 8};
#endif

#ifndef SOAP_TYPE_ns5__type
#define SOAP_TYPE_ns5__type (893)
/* ns5:type */
enum ns5__type {ns5__type__user = 0, ns5__type__system = 1};
#endif

#ifndef SOAP_TYPE_ns5__mdsConnectionType
#define SOAP_TYPE_ns5__mdsConnectionType (894)
/* ns5:mdsConnectionType */
enum ns5__mdsConnectionType {ns5__mdsConnectionType__cleartext = 0, ns5__mdsConnectionType__ssl = 1, ns5__mdsConnectionType__tls = 2, ns5__mdsConnectionType__tls_USCOREis_USCOREavailable = 3};
#endif

#ifndef SOAP_TYPE_ns5__view
#define SOAP_TYPE_ns5__view (895)
/* ns5:view */
enum ns5__view {ns5__view___x0000 = 0, ns5__view__search_x0020folder = 1, ns5__view__tag = 2, ns5__view__conversation = 3, ns5__view__message = 4, ns5__view__contact = 5, ns5__view__document = 6, ns5__view__appointment = 7, ns5__view__virtual_x0020conversation = 8, ns5__view__remote_x0020folder = 9, ns5__view__wiki = 10, ns5__view__task = 11, ns5__view__chat = 12};
#endif

#ifndef SOAP_TYPE_ns5__importance
#define SOAP_TYPE_ns5__importance (896)
/* ns5:importance */
enum ns5__importance {ns5__importance__high = 0, ns5__importance__normal = 1, ns5__importance__low = 2};
#endif

#ifndef SOAP_TYPE_ns5__modifyGroupMemberOperation
#define SOAP_TYPE_ns5__modifyGroupMemberOperation (897)
/* ns5:modifyGroupMemberOperation */
enum ns5__modifyGroupMemberOperation {ns5__modifyGroupMemberOperation___x002b = 0, ns5__modifyGroupMemberOperation___x002d = 1, ns5__modifyGroupMemberOperation__reset = 2};
#endif

#ifndef SOAP_TYPE_ns5__action
#define SOAP_TYPE_ns5__action (898)
/* ns5:action */
enum ns5__action {ns5__action__edit = 0, ns5__action__revoke = 1, ns5__action__expire = 2};
#endif

#ifndef SOAP_TYPE_ns5__itemType
#define SOAP_TYPE_ns5__itemType (899)
/* ns5:itemType */
enum ns5__itemType {ns5__itemType__appointment = 0, ns5__itemType__chat = 1, ns5__itemType__contact = 2, ns5__itemType__conversation = 3, ns5__itemType__document = 4, ns5__itemType__message = 5, ns5__itemType__tag = 6, ns5__itemType__task = 7, ns5__itemType__wiki = 8};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns3__namedElement
#define SOAP_TYPE_ns3__namedElement (14)
/* ns3:namedElement */
class SOAP_CMAC ns3__namedElement
{
public:
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns3__namedElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__namedElement(): name(NULL), soap(NULL) { ns3__namedElement::soap_default(NULL); }
	virtual ~ns3__namedElement() { }
};
#endif

#ifndef SOAP_TYPE_ns3__granteeChooser
#define SOAP_TYPE_ns3__granteeChooser (15)
/* ns3:granteeChooser */
class SOAP_CMAC ns3__granteeChooser
{
public:
	std::string *type;	/* optional attribute */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns3__granteeChooser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__granteeChooser(): type(NULL), id(NULL), name(NULL), soap(NULL) { ns3__granteeChooser::soap_default(NULL); }
	virtual ~ns3__granteeChooser() { }
};
#endif

#ifndef SOAP_TYPE_ns3__shareInfo
#define SOAP_TYPE_ns3__shareInfo (16)
/* ns3:shareInfo */
class SOAP_CMAC ns3__shareInfo
{
public:
	std::string ownerId;	/* required attribute */
	std::string ownerEmail;	/* required attribute */
	std::string ownerName;	/* required attribute */
	int folderId;	/* required attribute */
	std::string folderUuid;	/* required attribute */
	std::string folderPath;	/* required attribute */
	std::string view;	/* required attribute */
	std::string rights;	/* required attribute */
	std::string granteeType;	/* required attribute */
	std::string granteeId;	/* required attribute */
	std::string granteeName;	/* required attribute */
	std::string granteeDisplayName;	/* required attribute */
	std::string *mid;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns3__shareInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__shareInfo(): mid(NULL), soap(NULL) { ns3__shareInfo::soap_default(NULL); }
	virtual ~ns3__shareInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__attributeSelectorImpl
#define SOAP_TYPE_ns3__attributeSelectorImpl (18)
/* ns3:attributeSelectorImpl */
class SOAP_CMAC ns3__attributeSelectorImpl
{
public:
	std::string *attrs;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns3__attributeSelectorImpl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__attributeSelectorImpl(): attrs(NULL), soap(NULL) { ns3__attributeSelectorImpl::soap_default(NULL); }
	virtual ~ns3__attributeSelectorImpl() { }
};
#endif

#ifndef SOAP_TYPE_ns3__cursorInfo
#define SOAP_TYPE_ns3__cursorInfo (19)
/* ns3:cursorInfo */
class SOAP_CMAC ns3__cursorInfo
{
public:
	std::string *id;	/* optional attribute */
	std::string *sortVal;	/* optional attribute */
	std::string *endSortVal;	/* optional attribute */
	bool *includeOffset;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns3__cursorInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__cursorInfo(): id(NULL), sortVal(NULL), endSortVal(NULL), includeOffset(NULL), soap(NULL) { ns3__cursorInfo::soap_default(NULL); }
	virtual ~ns3__cursorInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__id
#define SOAP_TYPE_ns3__id (20)
/* ns3:id */
class SOAP_CMAC ns3__id
{
public:
	std::string *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns3__id */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__id(): id(NULL), soap(NULL) { ns3__id::soap_default(NULL); }
	virtual ~ns3__id() { }
};
#endif

#ifndef SOAP_TYPE_ns3__tzOnsetInfo
#define SOAP_TYPE_ns3__tzOnsetInfo (21)
/* ns3:tzOnsetInfo */
class SOAP_CMAC ns3__tzOnsetInfo
{
public:
	int *week;	/* optional attribute */
	int *wkday;	/* optional attribute */
	int mon;	/* required attribute */
	int *mday;	/* optional attribute */
	int hour;	/* required attribute */
	int min_;	/* required attribute */
	int sec;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns3__tzOnsetInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__tzOnsetInfo(): week(NULL), wkday(NULL), mday(NULL), soap(NULL) { ns3__tzOnsetInfo::soap_default(NULL); }
	virtual ~ns3__tzOnsetInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__waitSetAddSpec
#define SOAP_TYPE_ns3__waitSetAddSpec (22)
/* ns3:waitSetAddSpec */
class SOAP_CMAC ns3__waitSetAddSpec
{
public:
	std::string *name;	/* optional attribute */
	std::string *id;	/* optional attribute */
	std::string *token;	/* optional attribute */
	std::string *types;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns3__waitSetAddSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__waitSetAddSpec(): name(NULL), id(NULL), token(NULL), types(NULL), soap(NULL) { ns3__waitSetAddSpec::soap_default(NULL); }
	virtual ~ns3__waitSetAddSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns3__idAndType
#define SOAP_TYPE_ns3__idAndType (23)
/* ns3:idAndType */
class SOAP_CMAC ns3__idAndType
{
public:
	std::string id;	/* required attribute */
	std::string type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns3__idAndType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__idAndType(): soap(NULL) { ns3__idAndType::soap_default(NULL); }
	virtual ~ns3__idAndType() { }
};
#endif

#ifndef SOAP_TYPE_ns3__attributeName
#define SOAP_TYPE_ns3__attributeName (24)
/* ns3:attributeName */
class SOAP_CMAC ns3__attributeName
{
public:
	std::string n;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns3__attributeName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__attributeName(): soap(NULL) { ns3__attributeName::soap_default(NULL); }
	virtual ~ns3__attributeName() { }
};
#endif

#ifndef SOAP_TYPE_ns3__HeaderContext
#define SOAP_TYPE_ns3__HeaderContext (25)
/* ns3:HeaderContext */
class SOAP_CMAC ns3__HeaderContext
{
public:
	std::string *authToken;	/* optional element of type xsd:string */
	std::string *sessionId;	/* optional element of type xsd:string */
	std::string *account;	/* optional element of type xsd:string */
	std::string *change;	/* optional element of type xsd:string */
	std::string *targetServer;	/* optional element of type xsd:string */
	std::string *userAgent;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns3__HeaderContext */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__HeaderContext(): authToken(NULL), sessionId(NULL), account(NULL), change(NULL), targetServer(NULL), userAgent(NULL), soap(NULL) { ns3__HeaderContext::soap_default(NULL); }
	virtual ~ns3__HeaderContext() { }
};
#endif

#ifndef SOAP_TYPE_ns3__sectionAttr
#define SOAP_TYPE_ns3__sectionAttr (26)
/* ns3:sectionAttr */
class SOAP_CMAC ns3__sectionAttr
{
public:
	std::string section;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns3__sectionAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__sectionAttr(): soap(NULL) { ns3__sectionAttr::soap_default(NULL); }
	virtual ~ns3__sectionAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns3__wildcardExpansionQueryInfo
#define SOAP_TYPE_ns3__wildcardExpansionQueryInfo (28)
/* ns3:wildcardExpansionQueryInfo */
class SOAP_CMAC ns3__wildcardExpansionQueryInfo
{
public:
	std::string str;	/* required attribute */
	bool expanded;	/* required attribute */
	int numExpanded;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns3__wildcardExpansionQueryInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__wildcardExpansionQueryInfo(): soap(NULL) { ns3__wildcardExpansionQueryInfo::soap_default(NULL); }
	virtual ~ns3__wildcardExpansionQueryInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__simpleSearchHit
#define SOAP_TYPE_ns3__simpleSearchHit (29)
/* ns3:simpleSearchHit */
class SOAP_CMAC ns3__simpleSearchHit
{
public:
	std::string *id;	/* optional attribute */
	std::string *sf;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns3__simpleSearchHit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__simpleSearchHit(): id(NULL), sf(NULL), soap(NULL) { ns3__simpleSearchHit::soap_default(NULL); }
	virtual ~ns3__simpleSearchHit() { }
};
#endif

#ifndef SOAP_TYPE_ns3__dataSources
#define SOAP_TYPE_ns3__dataSources (30)
/* ns3:dataSources */
class SOAP_CMAC ns3__dataSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns3__dataSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__dataSources(): soap(NULL) { ns3__dataSources::soap_default(NULL); }
	virtual ~ns3__dataSources() { }
};
#endif

#ifndef SOAP_TYPE__ns4__authRequest_prefs
#define SOAP_TYPE__ns4__authRequest_prefs (908)
/* ns4:authRequest-prefs */
class SOAP_CMAC _ns4__authRequest_prefs
{
public:
	std::vector<class ns4__pref * >pref;	/* optional element of type ns4:pref */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 908; } /* = unique id SOAP_TYPE__ns4__authRequest_prefs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__authRequest_prefs(): unusedCodeGenHelper(NULL) { _ns4__authRequest_prefs::soap_default(NULL); }
	virtual ~_ns4__authRequest_prefs() { }
};
#endif

#ifndef SOAP_TYPE__ns4__authRequest_attrs
#define SOAP_TYPE__ns4__authRequest_attrs (912)
/* ns4:authRequest-attrs */
class SOAP_CMAC _ns4__authRequest_attrs
{
public:
	std::vector<class ns4__attr * >attr;	/* optional element of type ns4:attr */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 912; } /* = unique id SOAP_TYPE__ns4__authRequest_attrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__authRequest_attrs(): unusedCodeGenHelper(NULL) { _ns4__authRequest_attrs::soap_default(NULL); }
	virtual ~_ns4__authRequest_attrs() { }
};
#endif

#ifndef SOAP_TYPE_ns4__authRequest
#define SOAP_TYPE_ns4__authRequest (31)
/* ns4:authRequest */
class SOAP_CMAC ns4__authRequest
{
public:
	class ns3__accountSelector *account;	/* optional element of type ns3:accountSelector */
	std::string *password;	/* optional element of type xsd:string */
	class ns4__preAuth *preauth;	/* optional element of type ns4:preAuth */
	class ns4__authToken *authToken;	/* optional element of type ns4:authToken */
	std::string *virtualHost;	/* optional element of type xsd:string */
	_ns4__authRequest_prefs *prefs;	/* optional element of type ns4:authRequest-prefs */
	_ns4__authRequest_attrs *attrs;	/* optional element of type ns4:authRequest-attrs */
	std::string *requestedSkin;	/* optional element of type xsd:string */
	bool *persistAuthTokenCookie;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns4__authRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__authRequest(): account(NULL), password(NULL), preauth(NULL), authToken(NULL), virtualHost(NULL), prefs(NULL), attrs(NULL), requestedSkin(NULL), persistAuthTokenCookie(NULL), soap(NULL) { ns4__authRequest::soap_default(NULL); }
	virtual ~ns4__authRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns4__authResponse_prefs
#define SOAP_TYPE__ns4__authResponse_prefs (918)
/* ns4:authResponse-prefs */
class SOAP_CMAC _ns4__authResponse_prefs
{
public:
	std::vector<ns4__pref * >pref;	/* optional element of type ns4:pref */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 918; } /* = unique id SOAP_TYPE__ns4__authResponse_prefs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__authResponse_prefs(): unusedCodeGenHelper(NULL) { _ns4__authResponse_prefs::soap_default(NULL); }
	virtual ~_ns4__authResponse_prefs() { }
};
#endif

#ifndef SOAP_TYPE__ns4__authResponse_attrs
#define SOAP_TYPE__ns4__authResponse_attrs (920)
/* ns4:authResponse-attrs */
class SOAP_CMAC _ns4__authResponse_attrs
{
public:
	std::vector<ns4__attr * >attr;	/* optional element of type ns4:attr */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 920; } /* = unique id SOAP_TYPE__ns4__authResponse_attrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__authResponse_attrs(): unusedCodeGenHelper(NULL) { _ns4__authResponse_attrs::soap_default(NULL); }
	virtual ~_ns4__authResponse_attrs() { }
};
#endif

#ifndef SOAP_TYPE_ns4__authResponse
#define SOAP_TYPE_ns4__authResponse (36)
/* ns4:authResponse */
class SOAP_CMAC ns4__authResponse
{
public:
	std::string authToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	LONG64 lifetime;	/* required element of type xsd:long */
	class ns4__session *session;	/* optional element of type ns4:session */
	std::string *refer;	/* optional element of type xsd:string */
	std::string *skin;	/* optional element of type xsd:string */
	_ns4__authResponse_prefs *prefs;	/* optional element of type ns4:authResponse-prefs */
	_ns4__authResponse_attrs *attrs;	/* optional element of type ns4:authResponse-attrs */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ns4__authResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__authResponse(): session(NULL), refer(NULL), skin(NULL), prefs(NULL), attrs(NULL), soap(NULL) { ns4__authResponse::soap_default(NULL); }
	virtual ~ns4__authResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__autoCompleteGalRequest
#define SOAP_TYPE_ns4__autoCompleteGalRequest (38)
/* ns4:autoCompleteGalRequest */
class SOAP_CMAC ns4__autoCompleteGalRequest
{
public:
	bool *needExp;	/* optional attribute */
	std::string name;	/* required attribute */
	enum ns3__galSearchType *type;	/* optional attribute */
	std::string *galAcctId;	/* optional attribute */
	int *limit;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_ns4__autoCompleteGalRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__autoCompleteGalRequest(): needExp(NULL), type(NULL), galAcctId(NULL), limit(NULL), soap(NULL) { ns4__autoCompleteGalRequest::soap_default(NULL); }
	virtual ~ns4__autoCompleteGalRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__autoCompleteGalResponse
#define SOAP_TYPE_ns4__autoCompleteGalResponse (39)
/* ns4:autoCompleteGalResponse */
class SOAP_CMAC ns4__autoCompleteGalResponse
{
public:
	std::vector<class ns4__contactInfo * >cn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:contactInfo */
	bool *more;	/* optional attribute */
	bool *tokenizeKey;	/* optional attribute */
	bool *paginationSupported;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_ns4__autoCompleteGalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__autoCompleteGalResponse(): more(NULL), tokenizeKey(NULL), paginationSupported(NULL), soap(NULL) { ns4__autoCompleteGalResponse::soap_default(NULL); }
	virtual ~ns4__autoCompleteGalResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__contactInfo
#define SOAP_TYPE_ns4__contactInfo (40)
/* ns4:contactInfo */
class SOAP_CMAC ns4__contactInfo
{
public:
	std::vector<class ns4__accountCustomMetadata * >meta;	/* optional element of type ns4:accountCustomMetadata */
	std::vector<class ns3__contactAttr * >a;	/* optional element of type ns3:contactAttr */
	std::vector<class ns4__contactGroupMember * >m;	/* optional element of type ns4:contactGroupMember */
	std::string *sf;	/* optional attribute */
	bool *exp;	/* optional attribute */
	std::string id;	/* required attribute */
	std::string *l;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *ms;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	int *rev;	/* optional attribute */
	std::string *fileAsStr;	/* optional attribute */
	std::string *email;	/* optional attribute */
	std::string *email2;	/* optional attribute */
	std::string *email3;	/* optional attribute */
	std::string *type;	/* optional attribute */
	std::string *dlist;	/* optional attribute */
	std::string *ref;	/* optional attribute */
	bool *tooManyMembers;	/* optional attribute */
	bool *isOwner;	/* optional attribute */
	bool *isMember;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns4__contactInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__contactInfo(): sf(NULL), exp(NULL), l(NULL), f(NULL), t(NULL), tn(NULL), md(NULL), ms(NULL), d(NULL), rev(NULL), fileAsStr(NULL), email(NULL), email2(NULL), email3(NULL), type(NULL), dlist(NULL), ref(NULL), tooManyMembers(NULL), isOwner(NULL), isMember(NULL), soap(NULL) { ns4__contactInfo::soap_default(NULL); }
	virtual ~ns4__contactInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountKeyValuePairs
#define SOAP_TYPE_ns4__accountKeyValuePairs (42)
/* ns4:accountKeyValuePairs */
class SOAP_CMAC ns4__accountKeyValuePairs
{
public:
	std::vector<class ns3__keyValuePair * >a;	/* optional element of type ns3:keyValuePair */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_ns4__accountKeyValuePairs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountKeyValuePairs(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__accountKeyValuePairs::soap_default(NULL); }
	virtual ~ns4__accountKeyValuePairs() { }
};
#endif

#ifndef SOAP_TYPE_ns4__contactGroupMember
#define SOAP_TYPE_ns4__contactGroupMember (43)
/* ns4:contactGroupMember */
class SOAP_CMAC ns4__contactGroupMember
{
public:
	ns4__contactInfo *cn;	/* optional element of type ns4:contactInfo */
	std::string type;	/* required attribute */
	std::string value;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_ns4__contactGroupMember */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__contactGroupMember(): cn(NULL), soap(NULL) { ns4__contactGroupMember::soap_default(NULL); }
	virtual ~ns4__contactGroupMember() { }
};
#endif

#ifndef SOAP_TYPE_ns4__changePasswordRequest
#define SOAP_TYPE_ns4__changePasswordRequest (44)
/* ns4:changePasswordRequest */
class SOAP_CMAC ns4__changePasswordRequest
{
public:
	ns3__accountSelector *account;	/* required element of type ns3:accountSelector */
	std::string oldPassword;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
	std::string *virtualHost;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_ns4__changePasswordRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__changePasswordRequest(): account(NULL), virtualHost(NULL), soap(NULL) { ns4__changePasswordRequest::soap_default(NULL); }
	virtual ~ns4__changePasswordRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__changePasswordResponse
#define SOAP_TYPE_ns4__changePasswordResponse (45)
/* ns4:changePasswordResponse */
class SOAP_CMAC ns4__changePasswordResponse
{
public:
	std::string authToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	LONG64 lifetime;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ns4__changePasswordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__changePasswordResponse(): soap(NULL) { ns4__changePasswordResponse::soap_default(NULL); }
	virtual ~ns4__changePasswordResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__checkLicenseRequest
#define SOAP_TYPE_ns4__checkLicenseRequest (46)
/* ns4:checkLicenseRequest */
class SOAP_CMAC ns4__checkLicenseRequest
{
public:
	std::string feature;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns4__checkLicenseRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__checkLicenseRequest(): soap(NULL) { ns4__checkLicenseRequest::soap_default(NULL); }
	virtual ~ns4__checkLicenseRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__checkLicenseResponse
#define SOAP_TYPE_ns4__checkLicenseResponse (47)
/* ns4:checkLicenseResponse */
class SOAP_CMAC ns4__checkLicenseResponse
{
public:
	enum ns4__checkLicenseStatus status;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ns4__checkLicenseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__checkLicenseResponse(): soap(NULL) { ns4__checkLicenseResponse::soap_default(NULL); }
	virtual ~ns4__checkLicenseResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__checkRightsRequest
#define SOAP_TYPE_ns4__checkRightsRequest (48)
/* ns4:checkRightsRequest */
class SOAP_CMAC ns4__checkRightsRequest
{
public:
	std::vector<class ns4__checkRightsTargetSpec * >target;	/* required element of type ns4:checkRightsTargetSpec */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns4__checkRightsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__checkRightsRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__checkRightsRequest::soap_default(NULL); }
	virtual ~ns4__checkRightsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__checkRightsTargetSpec
#define SOAP_TYPE_ns4__checkRightsTargetSpec (49)
/* ns4:checkRightsTargetSpec */
class SOAP_CMAC ns4__checkRightsTargetSpec
{
public:
	std::vector<std::string >right;	/* required element of type xsd:string */
	enum ns3__targetType type;	/* required attribute */
	enum ns3__targetBy by;	/* required attribute */
	std::string key;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns4__checkRightsTargetSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__checkRightsTargetSpec(): soap(NULL) { ns4__checkRightsTargetSpec::soap_default(NULL); }
	virtual ~ns4__checkRightsTargetSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns4__checkRightsResponse
#define SOAP_TYPE_ns4__checkRightsResponse (50)
/* ns4:checkRightsResponse */
class SOAP_CMAC ns4__checkRightsResponse
{
public:
	std::vector<class ns4__checkRightsTargetInfo * >target;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:checkRightsTargetInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns4__checkRightsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__checkRightsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__checkRightsResponse::soap_default(NULL); }
	virtual ~ns4__checkRightsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__checkRightsTargetInfo
#define SOAP_TYPE_ns4__checkRightsTargetInfo (51)
/* ns4:checkRightsTargetInfo */
class SOAP_CMAC ns4__checkRightsTargetInfo
{
public:
	std::vector<class ns4__checkRightsRightInfo * >right;	/* required element of type ns4:checkRightsRightInfo */
	enum ns3__targetType type;	/* required attribute */
	enum ns3__targetBy by;	/* required attribute */
	std::string key;	/* required attribute */
	bool allow;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns4__checkRightsTargetInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__checkRightsTargetInfo(): soap(NULL) { ns4__checkRightsTargetInfo::soap_default(NULL); }
	virtual ~ns4__checkRightsTargetInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__createDistributionListResponse
#define SOAP_TYPE_ns4__createDistributionListResponse (54)
/* ns4:createDistributionListResponse */
class SOAP_CMAC ns4__createDistributionListResponse
{
public:
	class ns4__dlInfo *dl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:dlInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ns4__createDistributionListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__createDistributionListResponse(): dl(NULL), soap(NULL) { ns4__createDistributionListResponse::soap_default(NULL); }
	virtual ~ns4__createDistributionListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__objectInfo
#define SOAP_TYPE_ns4__objectInfo (56)
/* ns4:objectInfo */
class SOAP_CMAC ns4__objectInfo
{
public:
	std::vector<ns3__keyValuePair * >a;	/* optional element of type ns3:keyValuePair */
	std::string name;	/* required attribute */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns4__objectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__objectInfo(): soap(NULL) { ns4__objectInfo::soap_default(NULL); }
	virtual ~ns4__objectInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__createIdentityRequest
#define SOAP_TYPE_ns4__createIdentityRequest (57)
/* ns4:createIdentityRequest */
class SOAP_CMAC ns4__createIdentityRequest
{
public:
	class ns4__identity *identity;	/* required element of type ns4:identity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns4__createIdentityRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__createIdentityRequest(): identity(NULL), soap(NULL) { ns4__createIdentityRequest::soap_default(NULL); }
	virtual ~ns4__createIdentityRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__attrsImpl
#define SOAP_TYPE_ns4__attrsImpl (59)
/* ns4:attrsImpl */
class SOAP_CMAC ns4__attrsImpl
{
public:
	std::vector<ns4__attr * >a;	/* optional element of type ns4:attr */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns4__attrsImpl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__attrsImpl(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__attrsImpl::soap_default(NULL); }
	virtual ~ns4__attrsImpl() { }
};
#endif

#ifndef SOAP_TYPE_ns4__createIdentityResponse
#define SOAP_TYPE_ns4__createIdentityResponse (60)
/* ns4:createIdentityResponse */
class SOAP_CMAC ns4__createIdentityResponse
{
public:
	ns4__identity *identity;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:identity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ns4__createIdentityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__createIdentityResponse(): identity(NULL), soap(NULL) { ns4__createIdentityResponse::soap_default(NULL); }
	virtual ~ns4__createIdentityResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__createSignatureRequest
#define SOAP_TYPE_ns4__createSignatureRequest (61)
/* ns4:createSignatureRequest */
class SOAP_CMAC ns4__createSignatureRequest
{
public:
	class ns4__signature *signature;	/* required element of type ns4:signature */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ns4__createSignatureRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__createSignatureRequest(): signature(NULL), soap(NULL) { ns4__createSignatureRequest::soap_default(NULL); }
	virtual ~ns4__createSignatureRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__signature
#define SOAP_TYPE_ns4__signature (62)
/* ns4:signature */
class SOAP_CMAC ns4__signature
{
public:
	std::vector<class ns4__signatureContent * >content;	/* optional element of type ns4:signatureContent */
	std::string *cid;	/* optional element of type xsd:string */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns4__signature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__signature(): cid(NULL), id(NULL), name(NULL), soap(NULL) { ns4__signature::soap_default(NULL); }
	virtual ~ns4__signature() { }
};
#endif

#ifndef SOAP_TYPE_ns4__createSignatureResponse
#define SOAP_TYPE_ns4__createSignatureResponse (64)
/* ns4:createSignatureResponse */
class SOAP_CMAC ns4__createSignatureResponse
{
public:
	class ns4__nameId *signature;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:nameId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns4__createSignatureResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__createSignatureResponse(): signature(NULL), soap(NULL) { ns4__createSignatureResponse::soap_default(NULL); }
	virtual ~ns4__createSignatureResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__nameId
#define SOAP_TYPE_ns4__nameId (65)
/* ns4:nameId */
class SOAP_CMAC ns4__nameId
{
public:
	std::string *name;	/* optional attribute */
	std::string *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns4__nameId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__nameId(): name(NULL), id(NULL), soap(NULL) { ns4__nameId::soap_default(NULL); }
	virtual ~ns4__nameId() { }
};
#endif

#ifndef SOAP_TYPE_ns4__deleteIdentityRequest
#define SOAP_TYPE_ns4__deleteIdentityRequest (66)
/* ns4:deleteIdentityRequest */
class SOAP_CMAC ns4__deleteIdentityRequest
{
public:
	ns4__nameId *identity;	/* required element of type ns4:nameId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns4__deleteIdentityRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__deleteIdentityRequest(): identity(NULL), soap(NULL) { ns4__deleteIdentityRequest::soap_default(NULL); }
	virtual ~ns4__deleteIdentityRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__deleteIdentityResponse
#define SOAP_TYPE_ns4__deleteIdentityResponse (67)
/* ns4:deleteIdentityResponse */
class SOAP_CMAC ns4__deleteIdentityResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ns4__deleteIdentityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__deleteIdentityResponse(): soap(NULL) { ns4__deleteIdentityResponse::soap_default(NULL); }
	virtual ~ns4__deleteIdentityResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__deleteSignatureRequest
#define SOAP_TYPE_ns4__deleteSignatureRequest (68)
/* ns4:deleteSignatureRequest */
class SOAP_CMAC ns4__deleteSignatureRequest
{
public:
	ns4__nameId *signature;	/* required element of type ns4:nameId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ns4__deleteSignatureRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__deleteSignatureRequest(): signature(NULL), soap(NULL) { ns4__deleteSignatureRequest::soap_default(NULL); }
	virtual ~ns4__deleteSignatureRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__deleteSignatureResponse
#define SOAP_TYPE_ns4__deleteSignatureResponse (69)
/* ns4:deleteSignatureResponse */
class SOAP_CMAC ns4__deleteSignatureResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ns4__deleteSignatureResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__deleteSignatureResponse(): soap(NULL) { ns4__deleteSignatureResponse::soap_default(NULL); }
	virtual ~ns4__deleteSignatureResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__discoverRightsRequest
#define SOAP_TYPE_ns4__discoverRightsRequest (70)
/* ns4:discoverRightsRequest */
class SOAP_CMAC ns4__discoverRightsRequest
{
public:
	std::vector<std::string >right;	/* required element of type xsd:string */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ns4__discoverRightsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__discoverRightsRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__discoverRightsRequest::soap_default(NULL); }
	virtual ~ns4__discoverRightsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__discoverRightsResponse
#define SOAP_TYPE_ns4__discoverRightsResponse (71)
/* ns4:discoverRightsResponse */
class SOAP_CMAC ns4__discoverRightsResponse
{
public:
	std::vector<class ns4__discoverRightsInfo * >targets;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:discoverRightsInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ns4__discoverRightsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__discoverRightsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__discoverRightsResponse::soap_default(NULL); }
	virtual ~ns4__discoverRightsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__discoverRightsInfo
#define SOAP_TYPE_ns4__discoverRightsInfo (72)
/* ns4:discoverRightsInfo */
class SOAP_CMAC ns4__discoverRightsInfo
{
public:
	std::vector<class ns4__discoverRightsTarget * >target;	/* required element of type ns4:discoverRightsTarget */
	std::string right;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_ns4__discoverRightsInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__discoverRightsInfo(): soap(NULL) { ns4__discoverRightsInfo::soap_default(NULL); }
	virtual ~ns4__discoverRightsInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__discoverRightsTarget
#define SOAP_TYPE_ns4__discoverRightsTarget (73)
/* ns4:discoverRightsTarget */
class SOAP_CMAC ns4__discoverRightsTarget
{
public:
	std::vector<class ns4__discoverRightsEmail * >email;	/* optional element of type ns4:discoverRightsEmail */
	enum ns3__targetType type;	/* required attribute */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *d;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ns4__discoverRightsTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__discoverRightsTarget(): id(NULL), name(NULL), d(NULL), soap(NULL) { ns4__discoverRightsTarget::soap_default(NULL); }
	virtual ~ns4__discoverRightsTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns4__discoverRightsEmail
#define SOAP_TYPE_ns4__discoverRightsEmail (74)
/* ns4:discoverRightsEmail */
class SOAP_CMAC ns4__discoverRightsEmail
{
public:
	std::string addr;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_ns4__discoverRightsEmail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__discoverRightsEmail(): soap(NULL) { ns4__discoverRightsEmail::soap_default(NULL); }
	virtual ~ns4__discoverRightsEmail() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListRightSpec
#define SOAP_TYPE_ns4__distributionListRightSpec (78)
/* ns4:distributionListRightSpec */
class SOAP_CMAC ns4__distributionListRightSpec
{
public:
	std::vector<class ns4__distributionListGranteeSelector * >grantee;	/* optional element of type ns4:distributionListGranteeSelector */
	std::string right;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ns4__distributionListRightSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListRightSpec(): soap(NULL) { ns4__distributionListRightSpec::soap_default(NULL); }
	virtual ~ns4__distributionListRightSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListActionResponse
#define SOAP_TYPE_ns4__distributionListActionResponse (80)
/* ns4:distributionListActionResponse */
class SOAP_CMAC ns4__distributionListActionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_ns4__distributionListActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListActionResponse(): soap(NULL) { ns4__distributionListActionResponse::soap_default(NULL); }
	virtual ~ns4__distributionListActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__endSessionRequest
#define SOAP_TYPE_ns4__endSessionRequest (81)
/* ns4:endSessionRequest */
class SOAP_CMAC ns4__endSessionRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ns4__endSessionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__endSessionRequest(): soap(NULL) { ns4__endSessionRequest::soap_default(NULL); }
	virtual ~ns4__endSessionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__endSessionResponse
#define SOAP_TYPE_ns4__endSessionResponse (82)
/* ns4:endSessionResponse */
class SOAP_CMAC ns4__endSessionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_ns4__endSessionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__endSessionResponse(): soap(NULL) { ns4__endSessionResponse::soap_default(NULL); }
	virtual ~ns4__endSessionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAccountDistributionListsRequest
#define SOAP_TYPE_ns4__getAccountDistributionListsRequest (83)
/* ns4:getAccountDistributionListsRequest */
class SOAP_CMAC ns4__getAccountDistributionListsRequest
{
public:
	bool *ownerOf;	/* optional attribute */
	enum ns4__memberOfSelector *memberOf;	/* optional attribute */
	std::string *attrs;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ns4__getAccountDistributionListsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAccountDistributionListsRequest(): ownerOf(NULL), memberOf(NULL), attrs(NULL), soap(NULL) { ns4__getAccountDistributionListsRequest::soap_default(NULL); }
	virtual ~ns4__getAccountDistributionListsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAccountDistributionListsResponse
#define SOAP_TYPE_ns4__getAccountDistributionListsResponse (84)
/* ns4:getAccountDistributionListsResponse */
class SOAP_CMAC ns4__getAccountDistributionListsResponse
{
public:
	std::vector<ns4__dlInfo * >dl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:dlInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_ns4__getAccountDistributionListsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAccountDistributionListsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getAccountDistributionListsResponse::soap_default(NULL); }
	virtual ~ns4__getAccountDistributionListsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAccountInfoRequest
#define SOAP_TYPE_ns4__getAccountInfoRequest (85)
/* ns4:getAccountInfoRequest */
class SOAP_CMAC ns4__getAccountInfoRequest
{
public:
	ns3__accountSelector *account;	/* required element of type ns3:accountSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_ns4__getAccountInfoRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAccountInfoRequest(): account(NULL), soap(NULL) { ns4__getAccountInfoRequest::soap_default(NULL); }
	virtual ~ns4__getAccountInfoRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAccountInfoResponse
#define SOAP_TYPE_ns4__getAccountInfoResponse (86)
/* ns4:getAccountInfoResponse */
class SOAP_CMAC ns4__getAccountInfoResponse
{
public:
	std::string name;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::vector<class ns3__namedValue * >attr;	/* required element of type ns3:namedValue */
	std::string *soapURL;	/* optional element of type xsd:string */
	std::string *publicURL;	/* optional element of type xsd:string */
	std::string *changePasswordURL;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_ns4__getAccountInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAccountInfoResponse(): soapURL(NULL), publicURL(NULL), changePasswordURL(NULL), soap(NULL) { ns4__getAccountInfoResponse::soap_default(NULL); }
	virtual ~ns4__getAccountInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAllLocalesRequest
#define SOAP_TYPE_ns4__getAllLocalesRequest (87)
/* ns4:getAllLocalesRequest */
class SOAP_CMAC ns4__getAllLocalesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_ns4__getAllLocalesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAllLocalesRequest(): soap(NULL) { ns4__getAllLocalesRequest::soap_default(NULL); }
	virtual ~ns4__getAllLocalesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAllLocalesResponse
#define SOAP_TYPE_ns4__getAllLocalesResponse (88)
/* ns4:getAllLocalesResponse */
class SOAP_CMAC ns4__getAllLocalesResponse
{
public:
	std::vector<class ns4__localeInfo * >locale;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:localeInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_ns4__getAllLocalesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAllLocalesResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getAllLocalesResponse::soap_default(NULL); }
	virtual ~ns4__getAllLocalesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__localeInfo
#define SOAP_TYPE_ns4__localeInfo (89)
/* ns4:localeInfo */
class SOAP_CMAC ns4__localeInfo
{
public:
	std::string id;	/* required attribute */
	std::string name;	/* required attribute */
	std::string *localName;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_ns4__localeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__localeInfo(): localName(NULL), soap(NULL) { ns4__localeInfo::soap_default(NULL); }
	virtual ~ns4__localeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAvailableCsvFormatsRequest
#define SOAP_TYPE_ns4__getAvailableCsvFormatsRequest (90)
/* ns4:getAvailableCsvFormatsRequest */
class SOAP_CMAC ns4__getAvailableCsvFormatsRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_ns4__getAvailableCsvFormatsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAvailableCsvFormatsRequest(): soap(NULL) { ns4__getAvailableCsvFormatsRequest::soap_default(NULL); }
	virtual ~ns4__getAvailableCsvFormatsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAvailableCsvFormatsResponse
#define SOAP_TYPE_ns4__getAvailableCsvFormatsResponse (91)
/* ns4:getAvailableCsvFormatsResponse */
class SOAP_CMAC ns4__getAvailableCsvFormatsResponse
{
public:
	std::vector<ns3__namedElement * >csv;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:namedElement */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_ns4__getAvailableCsvFormatsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAvailableCsvFormatsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getAvailableCsvFormatsResponse::soap_default(NULL); }
	virtual ~ns4__getAvailableCsvFormatsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAvailableLocalesRequest
#define SOAP_TYPE_ns4__getAvailableLocalesRequest (92)
/* ns4:getAvailableLocalesRequest */
class SOAP_CMAC ns4__getAvailableLocalesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_ns4__getAvailableLocalesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAvailableLocalesRequest(): soap(NULL) { ns4__getAvailableLocalesRequest::soap_default(NULL); }
	virtual ~ns4__getAvailableLocalesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAvailableLocalesResponse
#define SOAP_TYPE_ns4__getAvailableLocalesResponse (93)
/* ns4:getAvailableLocalesResponse */
class SOAP_CMAC ns4__getAvailableLocalesResponse
{
public:
	std::vector<ns4__localeInfo * >locale;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:localeInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_ns4__getAvailableLocalesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAvailableLocalesResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getAvailableLocalesResponse::soap_default(NULL); }
	virtual ~ns4__getAvailableLocalesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAvailableSkinsRequest
#define SOAP_TYPE_ns4__getAvailableSkinsRequest (94)
/* ns4:getAvailableSkinsRequest */
class SOAP_CMAC ns4__getAvailableSkinsRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE_ns4__getAvailableSkinsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAvailableSkinsRequest(): soap(NULL) { ns4__getAvailableSkinsRequest::soap_default(NULL); }
	virtual ~ns4__getAvailableSkinsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getAvailableSkinsResponse
#define SOAP_TYPE_ns4__getAvailableSkinsResponse (95)
/* ns4:getAvailableSkinsResponse */
class SOAP_CMAC ns4__getAvailableSkinsResponse
{
public:
	std::vector<ns3__namedElement * >skin;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:namedElement */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_ns4__getAvailableSkinsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getAvailableSkinsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getAvailableSkinsResponse::soap_default(NULL); }
	virtual ~ns4__getAvailableSkinsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getDistributionListMembersRequest
#define SOAP_TYPE_ns4__getDistributionListMembersRequest (96)
/* ns4:getDistributionListMembersRequest */
class SOAP_CMAC ns4__getDistributionListMembersRequest
{
public:
	std::string dl;	/* required element of type xsd:string */
	int *limit;	/* optional attribute */
	int *offset;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_ns4__getDistributionListMembersRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getDistributionListMembersRequest(): limit(NULL), offset(NULL), soap(NULL) { ns4__getDistributionListMembersRequest::soap_default(NULL); }
	virtual ~ns4__getDistributionListMembersRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getDistributionListMembersResponse
#define SOAP_TYPE_ns4__getDistributionListMembersResponse (97)
/* ns4:getDistributionListMembersResponse */
class SOAP_CMAC ns4__getDistributionListMembersResponse
{
public:
	std::vector<std::string >dlm;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	bool *more;	/* optional attribute */
	int *total;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE_ns4__getDistributionListMembersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getDistributionListMembersResponse(): more(NULL), total(NULL), soap(NULL) { ns4__getDistributionListMembersResponse::soap_default(NULL); }
	virtual ~ns4__getDistributionListMembersResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getDistributionListResponse
#define SOAP_TYPE_ns4__getDistributionListResponse (99)
/* ns4:getDistributionListResponse */
class SOAP_CMAC ns4__getDistributionListResponse
{
public:
	class ns4__distributionListInfo *dl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:distributionListInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE_ns4__getDistributionListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getDistributionListResponse(): dl(NULL), soap(NULL) { ns4__getDistributionListResponse::soap_default(NULL); }
	virtual ~ns4__getDistributionListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListGranteeInfo
#define SOAP_TYPE_ns4__distributionListGranteeInfo (101)
/* ns4:distributionListGranteeInfo */
class SOAP_CMAC ns4__distributionListGranteeInfo
{
public:
	enum ns3__granteeType type;	/* required attribute */
	std::string id;	/* required attribute */
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE_ns4__distributionListGranteeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListGranteeInfo(): soap(NULL) { ns4__distributionListGranteeInfo::soap_default(NULL); }
	virtual ~ns4__distributionListGranteeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListRightInfo
#define SOAP_TYPE_ns4__distributionListRightInfo (102)
/* ns4:distributionListRightInfo */
class SOAP_CMAC ns4__distributionListRightInfo
{
public:
	std::vector<ns4__distributionListGranteeInfo * >grantee;	/* optional element of type ns4:distributionListGranteeInfo */
	std::string right;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE_ns4__distributionListRightInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListRightInfo(): soap(NULL) { ns4__distributionListRightInfo::soap_default(NULL); }
	virtual ~ns4__distributionListRightInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getIdentitiesRequest
#define SOAP_TYPE_ns4__getIdentitiesRequest (103)
/* ns4:getIdentitiesRequest */
class SOAP_CMAC ns4__getIdentitiesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE_ns4__getIdentitiesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getIdentitiesRequest(): soap(NULL) { ns4__getIdentitiesRequest::soap_default(NULL); }
	virtual ~ns4__getIdentitiesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getIdentitiesResponse
#define SOAP_TYPE_ns4__getIdentitiesResponse (104)
/* ns4:getIdentitiesResponse */
class SOAP_CMAC ns4__getIdentitiesResponse
{
public:
	std::vector<ns4__identity * >identity;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:identity */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE_ns4__getIdentitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getIdentitiesResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getIdentitiesResponse::soap_default(NULL); }
	virtual ~ns4__getIdentitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getInfoRequest
#define SOAP_TYPE_ns4__getInfoRequest (105)
/* ns4:getInfoRequest */
class SOAP_CMAC ns4__getInfoRequest
{
public:
	std::string *rights;	/* optional attribute */
	std::string *sections;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE_ns4__getInfoRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getInfoRequest(): rights(NULL), sections(NULL), soap(NULL) { ns4__getInfoRequest::soap_default(NULL); }
	virtual ~ns4__getInfoRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_prefs
#define SOAP_TYPE__ns4__getInfoResponse_prefs (968)
/* ns4:getInfoResponse-prefs */
class SOAP_CMAC _ns4__getInfoResponse_prefs
{
public:
	std::vector<ns4__pref * >pref;	/* optional element of type ns4:pref */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 968; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_prefs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_prefs(): unusedCodeGenHelper(NULL) { _ns4__getInfoResponse_prefs::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_prefs() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_attrs
#define SOAP_TYPE__ns4__getInfoResponse_attrs (970)
/* ns4:getInfoResponse-attrs */
class SOAP_CMAC _ns4__getInfoResponse_attrs
{
public:
	std::vector<ns4__attr * >attr;	/* optional element of type ns4:attr */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 970; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_attrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_attrs(): unusedCodeGenHelper(NULL) { _ns4__getInfoResponse_attrs::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_attrs() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_zimlets
#define SOAP_TYPE__ns4__getInfoResponse_zimlets (972)
/* ns4:getInfoResponse-zimlets */
class SOAP_CMAC _ns4__getInfoResponse_zimlets
{
public:
	std::vector<class ns4__accountZimletInfo * >zimlet;	/* optional element of type ns4:accountZimletInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 972; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_zimlets */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_zimlets(): unusedCodeGenHelper(NULL) { _ns4__getInfoResponse_zimlets::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_zimlets() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_props
#define SOAP_TYPE__ns4__getInfoResponse_props (976)
/* ns4:getInfoResponse-props */
class SOAP_CMAC _ns4__getInfoResponse_props
{
public:
	std::vector<class ns4__prop * >prop;	/* optional element of type ns4:prop */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 976; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_props */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_props(): unusedCodeGenHelper(NULL) { _ns4__getInfoResponse_props::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_props() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_identities
#define SOAP_TYPE__ns4__getInfoResponse_identities (980)
/* ns4:getInfoResponse-identities */
class SOAP_CMAC _ns4__getInfoResponse_identities
{
public:
	std::vector<ns4__identity * >identity;	/* optional element of type ns4:identity */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 980; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_identities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_identities(): unusedCodeGenHelper(NULL) { _ns4__getInfoResponse_identities::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_identities() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_signatures
#define SOAP_TYPE__ns4__getInfoResponse_signatures (982)
/* ns4:getInfoResponse-signatures */
class SOAP_CMAC _ns4__getInfoResponse_signatures
{
public:
	std::vector<ns4__signature * >signature;	/* optional element of type ns4:signature */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 982; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_signatures */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_signatures(): unusedCodeGenHelper(NULL) { _ns4__getInfoResponse_signatures::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_signatures() { }
};
#endif

#ifndef SOAP_TYPE__ns4__union_getInfoResponse_dataSources
#define SOAP_TYPE__ns4__union_getInfoResponse_dataSources (995)
/* xsd:choice */
union _ns4__union_getInfoResponse_dataSources
{
#define SOAP_UNION__ns4__union_getInfoResponse_dataSources_imap	(1)
	class ns4__accountImapDataSource *imap;
#define SOAP_UNION__ns4__union_getInfoResponse_dataSources_pop3	(2)
	class ns4__accountPop3DataSource *pop3;
#define SOAP_UNION__ns4__union_getInfoResponse_dataSources_caldav	(3)
	class ns4__accountCaldavDataSource *caldav;
#define SOAP_UNION__ns4__union_getInfoResponse_dataSources_yab	(4)
	class ns4__accountYabDataSource *yab;
#define SOAP_UNION__ns4__union_getInfoResponse_dataSources_rss	(5)
	class ns4__accountRssDataSource *rss;
#define SOAP_UNION__ns4__union_getInfoResponse_dataSources_gal	(6)
	class ns4__accountGalDataSource *gal;
#define SOAP_UNION__ns4__union_getInfoResponse_dataSources_cal	(7)
	class ns4__accountCalDataSource *cal;
#define SOAP_UNION__ns4__union_getInfoResponse_dataSources_unknown	(8)
	class ns4__accountUnknownDataSource *unknown;
};
#endif

#ifndef SOAP_TYPE___ns4__union_getInfoResponse_dataSources
#define SOAP_TYPE___ns4__union_getInfoResponse_dataSources (986)
/* Operation wrapper: */
class SOAP_CMAC __ns4__union_getInfoResponse_dataSources
{
public:
	int __union_getInfoResponse_dataSources;	/* union discriminant (of union defined below) */
	union _ns4__union_getInfoResponse_dataSources union_getInfoResponse_dataSources;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 986; } /* = unique id SOAP_TYPE___ns4__union_getInfoResponse_dataSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns4__union_getInfoResponse_dataSources() { __ns4__union_getInfoResponse_dataSources::soap_default(NULL); }
	virtual ~__ns4__union_getInfoResponse_dataSources() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_dataSources
#define SOAP_TYPE__ns4__getInfoResponse_dataSources (985)
/* ns4:getInfoResponse-dataSources */
class SOAP_CMAC _ns4__getInfoResponse_dataSources
{
public:
	int __size_getInfoResponse_dataSources;	/* sequence of elements <-union-getInfoResponse-dataSources> */
	__ns4__union_getInfoResponse_dataSources *__union_getInfoResponse_dataSources;
public:
	virtual int soap_type() const { return 985; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_dataSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_dataSources(): __union_getInfoResponse_dataSources(NULL) { _ns4__getInfoResponse_dataSources::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_dataSources() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_childAccounts
#define SOAP_TYPE__ns4__getInfoResponse_childAccounts (998)
/* ns4:getInfoResponse-childAccounts */
class SOAP_CMAC _ns4__getInfoResponse_childAccounts
{
public:
	std::vector<class ns4__childAccount * >childAccount;	/* optional element of type ns4:childAccount */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 998; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_childAccounts */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_childAccounts(): unusedCodeGenHelper(NULL) { _ns4__getInfoResponse_childAccounts::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_childAccounts() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getInfoResponse_rights
#define SOAP_TYPE__ns4__getInfoResponse_rights (1002)
/* ns4:getInfoResponse-rights */
class SOAP_CMAC _ns4__getInfoResponse_rights
{
public:
	std::vector<ns4__discoverRightsInfo * >targets;	/* optional element of type ns4:discoverRightsInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1002; } /* = unique id SOAP_TYPE__ns4__getInfoResponse_rights */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getInfoResponse_rights(): unusedCodeGenHelper(NULL) { _ns4__getInfoResponse_rights::soap_default(NULL); }
	virtual ~_ns4__getInfoResponse_rights() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getInfoResponse
#define SOAP_TYPE_ns4__getInfoResponse (106)
/* ns4:getInfoResponse */
class SOAP_CMAC ns4__getInfoResponse
{
public:
	std::string version;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string id;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string *crumb;	/* optional element of type xsd:string */
	LONG64 lifetime;	/* required element of type xsd:long */
	bool *adminDelegated;	/* optional element of type xsd:boolean */
	std::string *rest;	/* optional element of type xsd:string */
	LONG64 *used;	/* optional element of type xsd:long */
	LONG64 *prevSession;	/* optional element of type xsd:long */
	LONG64 *accessed;	/* optional element of type xsd:long */
	int *recent;	/* optional element of type xsd:int */
	class ns4__cos *cos;	/* optional element of type ns4:cos */
	_ns4__getInfoResponse_prefs *prefs;	/* optional element of type ns4:getInfoResponse-prefs */
	_ns4__getInfoResponse_attrs *attrs;	/* optional element of type ns4:getInfoResponse-attrs */
	_ns4__getInfoResponse_zimlets *zimlets;	/* optional element of type ns4:getInfoResponse-zimlets */
	_ns4__getInfoResponse_props *props;	/* optional element of type ns4:getInfoResponse-props */
	_ns4__getInfoResponse_identities *identities;	/* optional element of type ns4:getInfoResponse-identities */
	_ns4__getInfoResponse_signatures *signatures;	/* optional element of type ns4:getInfoResponse-signatures */
	_ns4__getInfoResponse_dataSources *dataSources;	/* optional element of type ns4:getInfoResponse-dataSources */
	_ns4__getInfoResponse_childAccounts *childAccounts;	/* optional element of type ns4:getInfoResponse-childAccounts */
	_ns4__getInfoResponse_rights *rights;	/* optional element of type ns4:getInfoResponse-rights */
	std::string *soapURL;	/* optional element of type xsd:string */
	std::string *publicURL;	/* optional element of type xsd:string */
	std::string *changePasswordURL;	/* optional element of type xsd:string */
	class ns4__licenseInfo *license;	/* optional element of type ns4:licenseInfo */
	LONG64 *attSizeLimit;	/* optional attribute */
	LONG64 *docSizeLimit;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 106; } /* = unique id SOAP_TYPE_ns4__getInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getInfoResponse(): crumb(NULL), adminDelegated(NULL), rest(NULL), used(NULL), prevSession(NULL), accessed(NULL), recent(NULL), cos(NULL), prefs(NULL), attrs(NULL), zimlets(NULL), props(NULL), identities(NULL), signatures(NULL), dataSources(NULL), childAccounts(NULL), rights(NULL), soapURL(NULL), publicURL(NULL), changePasswordURL(NULL), license(NULL), attSizeLimit(NULL), docSizeLimit(NULL), soap(NULL) { ns4__getInfoResponse::soap_default(NULL); }
	virtual ~ns4__getInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__cos
#define SOAP_TYPE_ns4__cos (107)
/* ns4:cos */
class SOAP_CMAC ns4__cos
{
public:
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE_ns4__cos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__cos(): id(NULL), name(NULL), soap(NULL) { ns4__cos::soap_default(NULL); }
	virtual ~ns4__cos() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountZimletInfo
#define SOAP_TYPE_ns4__accountZimletInfo (108)
/* ns4:accountZimletInfo */
class SOAP_CMAC ns4__accountZimletInfo
{
public:
	class ns4__accountZimletContext *zimletContext;	/* optional element of type ns4:accountZimletContext */
	class ns4__accountZimletDesc *zimlet;	/* optional element of type ns4:accountZimletDesc */
	class ns4__accountZimletConfigInfo *zimletConfig;	/* optional element of type ns4:accountZimletConfigInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE_ns4__accountZimletInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountZimletInfo(): zimletContext(NULL), zimlet(NULL), zimletConfig(NULL), soap(NULL) { ns4__accountZimletInfo::soap_default(NULL); }
	virtual ~ns4__accountZimletInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountZimletContext
#define SOAP_TYPE_ns4__accountZimletContext (109)
/* ns4:accountZimletContext */
class SOAP_CMAC ns4__accountZimletContext
{
public:
	std::string baseUrl;	/* required attribute */
	int *priority;	/* optional attribute */
	std::string presence;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE_ns4__accountZimletContext */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountZimletContext(): priority(NULL), soap(NULL) { ns4__accountZimletContext::soap_default(NULL); }
	virtual ~ns4__accountZimletContext() { }
};
#endif

#ifndef SOAP_TYPE__ns4__union_accountZimletDesc
#define SOAP_TYPE__ns4__union_accountZimletDesc (1013)
/* xsd:choice */
union _ns4__union_accountZimletDesc
{
#define SOAP_UNION__ns4__union_accountZimletDesc_serverExtension	(1)
	class ns4__zimletServerExtension *serverExtension;
#define SOAP_UNION__ns4__union_accountZimletDesc_include	(2)
	std::string *include;
#define SOAP_UNION__ns4__union_accountZimletDesc_includeCSS	(3)
	std::string *includeCSS;
#define SOAP_UNION__ns4__union_accountZimletDesc_target	(4)
	std::string *target;
};
#endif

#ifndef SOAP_TYPE___ns4__union_accountZimletDesc
#define SOAP_TYPE___ns4__union_accountZimletDesc (1008)
/* Operation wrapper: */
class SOAP_CMAC __ns4__union_accountZimletDesc
{
public:
	int __union_accountZimletDesc;	/* union discriminant (of union defined below) */
	union _ns4__union_accountZimletDesc union_accountZimletDesc;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1008; } /* = unique id SOAP_TYPE___ns4__union_accountZimletDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns4__union_accountZimletDesc() { __ns4__union_accountZimletDesc::soap_default(NULL); }
	virtual ~__ns4__union_accountZimletDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountZimletDesc
#define SOAP_TYPE_ns4__accountZimletDesc (110)
/* ns4:accountZimletDesc */
class SOAP_CMAC ns4__accountZimletDesc
{
public:
	int __size_accountZimletDesc;	/* sequence of elements <-union-accountZimletDesc> */
	__ns4__union_accountZimletDesc *__union_accountZimletDesc;
	std::string *name;	/* optional attribute */
	std::string *version;	/* optional attribute */
	std::string *description;	/* optional attribute */
	std::string *extension;	/* optional attribute */
	std::string *target;	/* optional attribute */
	std::string *label;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE_ns4__accountZimletDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountZimletDesc(): __union_accountZimletDesc(NULL), name(NULL), version(NULL), description(NULL), extension(NULL), target(NULL), label(NULL), soap(NULL) { ns4__accountZimletDesc::soap_default(NULL); }
	virtual ~ns4__accountZimletDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns4__zimletServerExtension
#define SOAP_TYPE_ns4__zimletServerExtension (111)
/* ns4:zimletServerExtension */
class SOAP_CMAC ns4__zimletServerExtension
{
public:
	std::string *hasKeyword;	/* optional attribute */
	std::string *extensionClass;	/* optional attribute */
	std::string *regex;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE_ns4__zimletServerExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__zimletServerExtension(): hasKeyword(NULL), extensionClass(NULL), regex(NULL), soap(NULL) { ns4__zimletServerExtension::soap_default(NULL); }
	virtual ~ns4__zimletServerExtension() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountZimletConfigInfo
#define SOAP_TYPE_ns4__accountZimletConfigInfo (112)
/* ns4:accountZimletConfigInfo */
class SOAP_CMAC ns4__accountZimletConfigInfo
{
public:
	class ns4__accountZimletGlobalConfigInfo *global;	/* optional element of type ns4:accountZimletGlobalConfigInfo */
	class ns4__accountZimletHostConfigInfo *host;	/* optional element of type ns4:accountZimletHostConfigInfo */
	std::string *name;	/* optional attribute */
	std::string *version;	/* optional attribute */
	std::string *description;	/* optional attribute */
	std::string *extension;	/* optional attribute */
	std::string *target;	/* optional attribute */
	std::string *label;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE_ns4__accountZimletConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountZimletConfigInfo(): global(NULL), host(NULL), name(NULL), version(NULL), description(NULL), extension(NULL), target(NULL), label(NULL), soap(NULL) { ns4__accountZimletConfigInfo::soap_default(NULL); }
	virtual ~ns4__accountZimletConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountZimletGlobalConfigInfo
#define SOAP_TYPE_ns4__accountZimletGlobalConfigInfo (113)
/* ns4:accountZimletGlobalConfigInfo */
class SOAP_CMAC ns4__accountZimletGlobalConfigInfo
{
public:
	std::vector<class ns4__accountZimletProperty * >property;	/* optional element of type ns4:accountZimletProperty */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 113; } /* = unique id SOAP_TYPE_ns4__accountZimletGlobalConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountZimletGlobalConfigInfo(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__accountZimletGlobalConfigInfo::soap_default(NULL); }
	virtual ~ns4__accountZimletGlobalConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountZimletHostConfigInfo
#define SOAP_TYPE_ns4__accountZimletHostConfigInfo (115)
/* ns4:accountZimletHostConfigInfo */
class SOAP_CMAC ns4__accountZimletHostConfigInfo
{
public:
	std::vector<ns4__accountZimletProperty * >property;	/* optional element of type ns4:accountZimletProperty */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 115; } /* = unique id SOAP_TYPE_ns4__accountZimletHostConfigInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountZimletHostConfigInfo(): name(NULL), soap(NULL) { ns4__accountZimletHostConfigInfo::soap_default(NULL); }
	virtual ~ns4__accountZimletHostConfigInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountDataSource
#define SOAP_TYPE_ns4__accountDataSource (118)
/* ns4:accountDataSource */
class SOAP_CMAC ns4__accountDataSource
{
public:
	std::string *lastError;	/* optional element of type xsd:string */
	std::vector<std::string >a;	/* optional element of type xsd:string */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *l;	/* optional attribute */
	bool *isEnabled;	/* optional attribute */
	bool *importOnly;	/* optional attribute */
	std::string *host;	/* optional attribute */
	int *port;	/* optional attribute */
	enum ns4__adsConnectionType *connectionType;	/* optional attribute */
	std::string *username;	/* optional attribute */
	std::string *password;	/* optional attribute */
	std::string *pollingInterval;	/* optional attribute */
	std::string *emailAddress;	/* optional attribute */
	bool *useAddressForForwardReply;	/* optional attribute */
	std::string *defaultSignature;	/* optional attribute */
	std::string *forwardReplySignature;	/* optional attribute */
	std::string *fromDisplay;	/* optional attribute */
	std::string *replyToAddress;	/* optional attribute */
	std::string *replyToDisplay;	/* optional attribute */
	std::string *importClass;	/* optional attribute */
	LONG64 *failingSince;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE_ns4__accountDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountDataSource(): lastError(NULL), id(NULL), name(NULL), l(NULL), isEnabled(NULL), importOnly(NULL), host(NULL), port(NULL), connectionType(NULL), username(NULL), password(NULL), pollingInterval(NULL), emailAddress(NULL), useAddressForForwardReply(NULL), defaultSignature(NULL), forwardReplySignature(NULL), fromDisplay(NULL), replyToAddress(NULL), replyToDisplay(NULL), importClass(NULL), failingSince(NULL), soap(NULL) { ns4__accountDataSource::soap_default(NULL); }
	virtual ~ns4__accountDataSource() { }
};
#endif

#ifndef SOAP_TYPE__ns4__childAccount_attrs
#define SOAP_TYPE__ns4__childAccount_attrs (1020)
/* ns4:childAccount-attrs */
class SOAP_CMAC _ns4__childAccount_attrs
{
public:
	std::vector<ns4__attr * >attr;	/* optional element of type ns4:attr */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1020; } /* = unique id SOAP_TYPE__ns4__childAccount_attrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__childAccount_attrs(): unusedCodeGenHelper(NULL) { _ns4__childAccount_attrs::soap_default(NULL); }
	virtual ~_ns4__childAccount_attrs() { }
};
#endif

#ifndef SOAP_TYPE_ns4__childAccount
#define SOAP_TYPE_ns4__childAccount (126)
/* ns4:childAccount */
class SOAP_CMAC ns4__childAccount
{
public:
	_ns4__childAccount_attrs *attrs;	/* optional element of type ns4:childAccount-attrs */
	std::string id;	/* required attribute */
	std::string name;	/* required attribute */
	bool visible;	/* required attribute */
	bool active;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 126; } /* = unique id SOAP_TYPE_ns4__childAccount */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__childAccount(): attrs(NULL), soap(NULL) { ns4__childAccount::soap_default(NULL); }
	virtual ~ns4__childAccount() { }
};
#endif

#ifndef SOAP_TYPE_ns4__licenseInfo
#define SOAP_TYPE_ns4__licenseInfo (127)
/* ns4:licenseInfo */
class SOAP_CMAC ns4__licenseInfo
{
public:
	std::vector<class ns4__licenseAttr * >attr;	/* optional element of type ns4:licenseAttr */
	enum ns3__licenseStatus status;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE_ns4__licenseInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__licenseInfo(): soap(NULL) { ns4__licenseInfo::soap_default(NULL); }
	virtual ~ns4__licenseInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getPrefsRequest
#define SOAP_TYPE_ns4__getPrefsRequest (129)
/* ns4:getPrefsRequest */
class SOAP_CMAC ns4__getPrefsRequest
{
public:
	std::vector<ns4__pref * >pref;	/* optional element of type ns4:pref */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE_ns4__getPrefsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getPrefsRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getPrefsRequest::soap_default(NULL); }
	virtual ~ns4__getPrefsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getPrefsResponse
#define SOAP_TYPE_ns4__getPrefsResponse (130)
/* ns4:getPrefsResponse */
class SOAP_CMAC ns4__getPrefsResponse
{
public:
	std::vector<ns4__pref * >pref;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:pref */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE_ns4__getPrefsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getPrefsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getPrefsResponse::soap_default(NULL); }
	virtual ~ns4__getPrefsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getRightsRequest
#define SOAP_TYPE_ns4__getRightsRequest (131)
/* ns4:getRightsRequest */
class SOAP_CMAC ns4__getRightsRequest
{
public:
	std::vector<class ns4__right * >ace;	/* optional element of type ns4:right */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE_ns4__getRightsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getRightsRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getRightsRequest::soap_default(NULL); }
	virtual ~ns4__getRightsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__right
#define SOAP_TYPE_ns4__right (132)
/* ns4:right */
class SOAP_CMAC ns4__right
{
public:
	std::string right;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE_ns4__right */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__right(): soap(NULL) { ns4__right::soap_default(NULL); }
	virtual ~ns4__right() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getRightsResponse
#define SOAP_TYPE_ns4__getRightsResponse (133)
/* ns4:getRightsResponse */
class SOAP_CMAC ns4__getRightsResponse
{
public:
	std::vector<class ns4__accountACEInfo * >ace;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:accountACEInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE_ns4__getRightsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getRightsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getRightsResponse::soap_default(NULL); }
	virtual ~ns4__getRightsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountACEInfo
#define SOAP_TYPE_ns4__accountACEInfo (134)
/* ns4:accountACEInfo */
class SOAP_CMAC ns4__accountACEInfo
{
public:
	std::string *zid;	/* optional attribute */
	enum ns3__granteeType gt;	/* required attribute */
	std::string right;	/* required attribute */
	std::string *d;	/* optional attribute */
	std::string *key;	/* optional attribute */
	std::string *pw;	/* optional attribute */
	bool *deny;	/* optional attribute */
	bool *chkgt;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE_ns4__accountACEInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountACEInfo(): zid(NULL), d(NULL), key(NULL), pw(NULL), deny(NULL), chkgt(NULL), soap(NULL) { ns4__accountACEInfo::soap_default(NULL); }
	virtual ~ns4__accountACEInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getSMIMEPublicCertsRequest
#define SOAP_TYPE_ns4__getSMIMEPublicCertsRequest (135)
/* ns4:getSMIMEPublicCertsRequest */
class SOAP_CMAC ns4__getSMIMEPublicCertsRequest
{
public:
	class ns4__smimePublicCertsStoreSpec *store;	/* required element of type ns4:smimePublicCertsStoreSpec */
	std::vector<std::string >email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE_ns4__getSMIMEPublicCertsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getSMIMEPublicCertsRequest(): store(NULL), soap(NULL) { ns4__getSMIMEPublicCertsRequest::soap_default(NULL); }
	virtual ~ns4__getSMIMEPublicCertsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getSMIMEPublicCertsResponse
#define SOAP_TYPE_ns4__getSMIMEPublicCertsResponse (137)
/* ns4:getSMIMEPublicCertsResponse */
class SOAP_CMAC ns4__getSMIMEPublicCertsResponse
{
public:
	class ns4__smimePublicCertsInfo *certs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:smimePublicCertsInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE_ns4__getSMIMEPublicCertsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getSMIMEPublicCertsResponse(): certs(NULL), soap(NULL) { ns4__getSMIMEPublicCertsResponse::soap_default(NULL); }
	virtual ~ns4__getSMIMEPublicCertsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__smimePublicCertsInfo
#define SOAP_TYPE_ns4__smimePublicCertsInfo (138)
/* ns4:smimePublicCertsInfo */
class SOAP_CMAC ns4__smimePublicCertsInfo
{
public:
	std::vector<class ns4__smimePublicCertInfo * >cert;	/* optional element of type ns4:smimePublicCertInfo */
	std::string *email;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE_ns4__smimePublicCertsInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__smimePublicCertsInfo(): email(NULL), soap(NULL) { ns4__smimePublicCertsInfo::soap_default(NULL); }
	virtual ~ns4__smimePublicCertsInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getShareInfoRequest
#define SOAP_TYPE_ns4__getShareInfoRequest (140)
/* ns4:getShareInfoRequest */
class SOAP_CMAC ns4__getShareInfoRequest
{
public:
	ns3__granteeChooser *grantee;	/* optional element of type ns3:granteeChooser */
	ns3__accountSelector *owner;	/* optional element of type ns3:accountSelector */
	bool *internal;	/* optional attribute */
	bool *includeSelf;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE_ns4__getShareInfoRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getShareInfoRequest(): grantee(NULL), owner(NULL), internal(NULL), includeSelf(NULL), soap(NULL) { ns4__getShareInfoRequest::soap_default(NULL); }
	virtual ~ns4__getShareInfoRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getShareInfoResponse
#define SOAP_TYPE_ns4__getShareInfoResponse (141)
/* ns4:getShareInfoResponse */
class SOAP_CMAC ns4__getShareInfoResponse
{
public:
	std::vector<ns3__shareInfo * >share;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:shareInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE_ns4__getShareInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getShareInfoResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getShareInfoResponse::soap_default(NULL); }
	virtual ~ns4__getShareInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getSignaturesRequest
#define SOAP_TYPE_ns4__getSignaturesRequest (142)
/* ns4:getSignaturesRequest */
class SOAP_CMAC ns4__getSignaturesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE_ns4__getSignaturesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getSignaturesRequest(): soap(NULL) { ns4__getSignaturesRequest::soap_default(NULL); }
	virtual ~ns4__getSignaturesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getSignaturesResponse
#define SOAP_TYPE_ns4__getSignaturesResponse (143)
/* ns4:getSignaturesResponse */
class SOAP_CMAC ns4__getSignaturesResponse
{
public:
	std::vector<ns4__signature * >signature;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:signature */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE_ns4__getSignaturesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getSignaturesResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__getSignaturesResponse::soap_default(NULL); }
	virtual ~ns4__getSignaturesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getVersionInfoRequest
#define SOAP_TYPE_ns4__getVersionInfoRequest (144)
/* ns4:getVersionInfoRequest */
class SOAP_CMAC ns4__getVersionInfoRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE_ns4__getVersionInfoRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getVersionInfoRequest(): soap(NULL) { ns4__getVersionInfoRequest::soap_default(NULL); }
	virtual ~ns4__getVersionInfoRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getVersionInfoResponse
#define SOAP_TYPE_ns4__getVersionInfoResponse (145)
/* ns4:getVersionInfoResponse */
class SOAP_CMAC ns4__getVersionInfoResponse
{
public:
	class ns4__versionInfo *info;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:versionInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE_ns4__getVersionInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getVersionInfoResponse(): info(NULL), soap(NULL) { ns4__getVersionInfoResponse::soap_default(NULL); }
	virtual ~ns4__getVersionInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__versionInfo
#define SOAP_TYPE_ns4__versionInfo (146)
/* ns4:versionInfo */
class SOAP_CMAC ns4__versionInfo
{
public:
	std::string version;	/* required attribute */
	std::string release;	/* required attribute */
	std::string buildDate;	/* required attribute */
	std::string host;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE_ns4__versionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__versionInfo(): soap(NULL) { ns4__versionInfo::soap_default(NULL); }
	virtual ~ns4__versionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getWhiteBlackListRequest
#define SOAP_TYPE_ns4__getWhiteBlackListRequest (147)
/* ns4:getWhiteBlackListRequest */
class SOAP_CMAC ns4__getWhiteBlackListRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE_ns4__getWhiteBlackListRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getWhiteBlackListRequest(): soap(NULL) { ns4__getWhiteBlackListRequest::soap_default(NULL); }
	virtual ~ns4__getWhiteBlackListRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getWhiteBlackListResponse_whiteList
#define SOAP_TYPE__ns4__getWhiteBlackListResponse_whiteList (1036)
/* ns4:getWhiteBlackListResponse-whiteList */
class SOAP_CMAC _ns4__getWhiteBlackListResponse_whiteList
{
public:
	std::vector<std::string >addr;	/* optional element of type xsd:string */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1036; } /* = unique id SOAP_TYPE__ns4__getWhiteBlackListResponse_whiteList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getWhiteBlackListResponse_whiteList(): unusedCodeGenHelper(NULL) { _ns4__getWhiteBlackListResponse_whiteList::soap_default(NULL); }
	virtual ~_ns4__getWhiteBlackListResponse_whiteList() { }
};
#endif

#ifndef SOAP_TYPE__ns4__getWhiteBlackListResponse_blackList
#define SOAP_TYPE__ns4__getWhiteBlackListResponse_blackList (1037)
/* ns4:getWhiteBlackListResponse-blackList */
class SOAP_CMAC _ns4__getWhiteBlackListResponse_blackList
{
public:
	std::vector<std::string >addr;	/* optional element of type xsd:string */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1037; } /* = unique id SOAP_TYPE__ns4__getWhiteBlackListResponse_blackList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__getWhiteBlackListResponse_blackList(): unusedCodeGenHelper(NULL) { _ns4__getWhiteBlackListResponse_blackList::soap_default(NULL); }
	virtual ~_ns4__getWhiteBlackListResponse_blackList() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getWhiteBlackListResponse
#define SOAP_TYPE_ns4__getWhiteBlackListResponse (148)
/* ns4:getWhiteBlackListResponse */
class SOAP_CMAC ns4__getWhiteBlackListResponse
{
public:
	_ns4__getWhiteBlackListResponse_whiteList whiteList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns4:getWhiteBlackListResponse-whiteList */
	_ns4__getWhiteBlackListResponse_blackList blackList;	/* required element of type ns4:getWhiteBlackListResponse-blackList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE_ns4__getWhiteBlackListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getWhiteBlackListResponse(): soap(NULL) { ns4__getWhiteBlackListResponse::soap_default(NULL); }
	virtual ~ns4__getWhiteBlackListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__grantRightsRequest
#define SOAP_TYPE_ns4__grantRightsRequest (149)
/* ns4:grantRightsRequest */
class SOAP_CMAC ns4__grantRightsRequest
{
public:
	std::vector<ns4__accountACEInfo * >ace;	/* optional element of type ns4:accountACEInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE_ns4__grantRightsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__grantRightsRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__grantRightsRequest::soap_default(NULL); }
	virtual ~ns4__grantRightsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__grantRightsResponse
#define SOAP_TYPE_ns4__grantRightsResponse (150)
/* ns4:grantRightsResponse */
class SOAP_CMAC ns4__grantRightsResponse
{
public:
	std::vector<ns4__accountACEInfo * >ace;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:accountACEInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE_ns4__grantRightsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__grantRightsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__grantRightsResponse::soap_default(NULL); }
	virtual ~ns4__grantRightsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyIdentityRequest
#define SOAP_TYPE_ns4__modifyIdentityRequest (151)
/* ns4:modifyIdentityRequest */
class SOAP_CMAC ns4__modifyIdentityRequest
{
public:
	ns4__identity *identity;	/* required element of type ns4:identity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE_ns4__modifyIdentityRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyIdentityRequest(): identity(NULL), soap(NULL) { ns4__modifyIdentityRequest::soap_default(NULL); }
	virtual ~ns4__modifyIdentityRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyIdentityResponse
#define SOAP_TYPE_ns4__modifyIdentityResponse (152)
/* ns4:modifyIdentityResponse */
class SOAP_CMAC ns4__modifyIdentityResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE_ns4__modifyIdentityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyIdentityResponse(): soap(NULL) { ns4__modifyIdentityResponse::soap_default(NULL); }
	virtual ~ns4__modifyIdentityResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyPrefsRequest
#define SOAP_TYPE_ns4__modifyPrefsRequest (153)
/* ns4:modifyPrefsRequest */
class SOAP_CMAC ns4__modifyPrefsRequest
{
public:
	std::vector<ns4__pref * >pref;	/* optional element of type ns4:pref */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE_ns4__modifyPrefsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyPrefsRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__modifyPrefsRequest::soap_default(NULL); }
	virtual ~ns4__modifyPrefsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyPrefsResponse
#define SOAP_TYPE_ns4__modifyPrefsResponse (154)
/* ns4:modifyPrefsResponse */
class SOAP_CMAC ns4__modifyPrefsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE_ns4__modifyPrefsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyPrefsResponse(): soap(NULL) { ns4__modifyPrefsResponse::soap_default(NULL); }
	virtual ~ns4__modifyPrefsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyPropertiesRequest
#define SOAP_TYPE_ns4__modifyPropertiesRequest (155)
/* ns4:modifyPropertiesRequest */
class SOAP_CMAC ns4__modifyPropertiesRequest
{
public:
	std::vector<ns4__prop * >prop;	/* required element of type ns4:prop */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE_ns4__modifyPropertiesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyPropertiesRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__modifyPropertiesRequest::soap_default(NULL); }
	virtual ~ns4__modifyPropertiesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyPropertiesResponse
#define SOAP_TYPE_ns4__modifyPropertiesResponse (156)
/* ns4:modifyPropertiesResponse */
class SOAP_CMAC ns4__modifyPropertiesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE_ns4__modifyPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyPropertiesResponse(): soap(NULL) { ns4__modifyPropertiesResponse::soap_default(NULL); }
	virtual ~ns4__modifyPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifySignatureRequest
#define SOAP_TYPE_ns4__modifySignatureRequest (157)
/* ns4:modifySignatureRequest */
class SOAP_CMAC ns4__modifySignatureRequest
{
public:
	ns4__signature *signature;	/* required element of type ns4:signature */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE_ns4__modifySignatureRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifySignatureRequest(): signature(NULL), soap(NULL) { ns4__modifySignatureRequest::soap_default(NULL); }
	virtual ~ns4__modifySignatureRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifySignatureResponse
#define SOAP_TYPE_ns4__modifySignatureResponse (158)
/* ns4:modifySignatureResponse */
class SOAP_CMAC ns4__modifySignatureResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE_ns4__modifySignatureResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifySignatureResponse(): soap(NULL) { ns4__modifySignatureResponse::soap_default(NULL); }
	virtual ~ns4__modifySignatureResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__modifyWhiteBlackListRequest_whiteList
#define SOAP_TYPE__ns4__modifyWhiteBlackListRequest_whiteList (1038)
/* ns4:modifyWhiteBlackListRequest-whiteList */
class SOAP_CMAC _ns4__modifyWhiteBlackListRequest_whiteList
{
public:
	std::vector<class ns3__opValue * >addr;	/* optional element of type ns3:opValue */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1038; } /* = unique id SOAP_TYPE__ns4__modifyWhiteBlackListRequest_whiteList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__modifyWhiteBlackListRequest_whiteList(): unusedCodeGenHelper(NULL) { _ns4__modifyWhiteBlackListRequest_whiteList::soap_default(NULL); }
	virtual ~_ns4__modifyWhiteBlackListRequest_whiteList() { }
};
#endif

#ifndef SOAP_TYPE__ns4__modifyWhiteBlackListRequest_blackList
#define SOAP_TYPE__ns4__modifyWhiteBlackListRequest_blackList (1042)
/* ns4:modifyWhiteBlackListRequest-blackList */
class SOAP_CMAC _ns4__modifyWhiteBlackListRequest_blackList
{
public:
	std::vector<ns3__opValue * >addr;	/* optional element of type ns3:opValue */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1042; } /* = unique id SOAP_TYPE__ns4__modifyWhiteBlackListRequest_blackList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__modifyWhiteBlackListRequest_blackList(): unusedCodeGenHelper(NULL) { _ns4__modifyWhiteBlackListRequest_blackList::soap_default(NULL); }
	virtual ~_ns4__modifyWhiteBlackListRequest_blackList() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyWhiteBlackListRequest
#define SOAP_TYPE_ns4__modifyWhiteBlackListRequest (159)
/* ns4:modifyWhiteBlackListRequest */
class SOAP_CMAC ns4__modifyWhiteBlackListRequest
{
public:
	_ns4__modifyWhiteBlackListRequest_whiteList *whiteList;	/* optional element of type ns4:modifyWhiteBlackListRequest-whiteList */
	_ns4__modifyWhiteBlackListRequest_blackList *blackList;	/* optional element of type ns4:modifyWhiteBlackListRequest-blackList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE_ns4__modifyWhiteBlackListRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyWhiteBlackListRequest(): whiteList(NULL), blackList(NULL), soap(NULL) { ns4__modifyWhiteBlackListRequest::soap_default(NULL); }
	virtual ~ns4__modifyWhiteBlackListRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyWhiteBlackListResponse
#define SOAP_TYPE_ns4__modifyWhiteBlackListResponse (160)
/* ns4:modifyWhiteBlackListResponse */
class SOAP_CMAC ns4__modifyWhiteBlackListResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE_ns4__modifyWhiteBlackListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyWhiteBlackListResponse(): soap(NULL) { ns4__modifyWhiteBlackListResponse::soap_default(NULL); }
	virtual ~ns4__modifyWhiteBlackListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyZimletPrefsRequest
#define SOAP_TYPE_ns4__modifyZimletPrefsRequest (161)
/* ns4:modifyZimletPrefsRequest */
class SOAP_CMAC ns4__modifyZimletPrefsRequest
{
public:
	std::vector<class ns4__modifyZimletPrefsSpec * >zimlet;	/* optional element of type ns4:modifyZimletPrefsSpec */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE_ns4__modifyZimletPrefsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyZimletPrefsRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__modifyZimletPrefsRequest::soap_default(NULL); }
	virtual ~ns4__modifyZimletPrefsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyZimletPrefsSpec
#define SOAP_TYPE_ns4__modifyZimletPrefsSpec (162)
/* ns4:modifyZimletPrefsSpec */
class SOAP_CMAC ns4__modifyZimletPrefsSpec
{
public:
	std::string name;	/* required attribute */
	std::string presence;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE_ns4__modifyZimletPrefsSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyZimletPrefsSpec(): soap(NULL) { ns4__modifyZimletPrefsSpec::soap_default(NULL); }
	virtual ~ns4__modifyZimletPrefsSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns4__modifyZimletPrefsResponse
#define SOAP_TYPE_ns4__modifyZimletPrefsResponse (163)
/* ns4:modifyZimletPrefsResponse */
class SOAP_CMAC ns4__modifyZimletPrefsResponse
{
public:
	std::vector<std::string >zimlet;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE_ns4__modifyZimletPrefsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__modifyZimletPrefsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__modifyZimletPrefsResponse::soap_default(NULL); }
	virtual ~ns4__modifyZimletPrefsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__revokeRightsRequest
#define SOAP_TYPE_ns4__revokeRightsRequest (164)
/* ns4:revokeRightsRequest */
class SOAP_CMAC ns4__revokeRightsRequest
{
public:
	std::vector<ns4__accountACEInfo * >ace;	/* optional element of type ns4:accountACEInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE_ns4__revokeRightsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__revokeRightsRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__revokeRightsRequest::soap_default(NULL); }
	virtual ~ns4__revokeRightsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__revokeRightsResponse
#define SOAP_TYPE_ns4__revokeRightsResponse (165)
/* ns4:revokeRightsResponse */
class SOAP_CMAC ns4__revokeRightsResponse
{
public:
	std::vector<ns4__accountACEInfo * >ace;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:accountACEInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE_ns4__revokeRightsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__revokeRightsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns4__revokeRightsResponse::soap_default(NULL); }
	virtual ~ns4__revokeRightsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns4__union_entrySearchFilterInfo
#define SOAP_TYPE__ns4__union_entrySearchFilterInfo (1048)
/* xsd:choice */
union _ns4__union_entrySearchFilterInfo
{
#define SOAP_UNION__ns4__union_entrySearchFilterInfo_conds	(1)
	class ns4__entrySearchFilterMultiCond *conds;
#define SOAP_UNION__ns4__union_entrySearchFilterInfo_cond	(2)
	class ns4__entrySearchFilterSingleCond *cond;
};
#endif

#ifndef SOAP_TYPE_ns4__entrySearchFilterInfo
#define SOAP_TYPE_ns4__entrySearchFilterInfo (167)
/* ns4:entrySearchFilterInfo */
class SOAP_CMAC ns4__entrySearchFilterInfo
{
public:
	int __union_entrySearchFilterInfo;	/* union discriminant (of union defined below) */
	union _ns4__union_entrySearchFilterInfo union_entrySearchFilterInfo;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE_ns4__entrySearchFilterInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__entrySearchFilterInfo(): soap(NULL) { ns4__entrySearchFilterInfo::soap_default(NULL); }
	virtual ~ns4__entrySearchFilterInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns4__union_entrySearchFilterMultiCond
#define SOAP_TYPE__ns4__union_entrySearchFilterMultiCond (1050)
/* xsd:choice */
union _ns4__union_entrySearchFilterMultiCond
{
#define SOAP_UNION__ns4__union_entrySearchFilterMultiCond_conds	(1)
	ns4__entrySearchFilterMultiCond *conds;
#define SOAP_UNION__ns4__union_entrySearchFilterMultiCond_cond	(2)
	ns4__entrySearchFilterSingleCond *cond;
};
#endif

#ifndef SOAP_TYPE___ns4__union_entrySearchFilterMultiCond
#define SOAP_TYPE___ns4__union_entrySearchFilterMultiCond (1049)
/* Operation wrapper: */
class SOAP_CMAC __ns4__union_entrySearchFilterMultiCond
{
public:
	int __union_entrySearchFilterMultiCond;	/* union discriminant (of union defined below) */
	union _ns4__union_entrySearchFilterMultiCond union_entrySearchFilterMultiCond;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1049; } /* = unique id SOAP_TYPE___ns4__union_entrySearchFilterMultiCond */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns4__union_entrySearchFilterMultiCond() { __ns4__union_entrySearchFilterMultiCond::soap_default(NULL); }
	virtual ~__ns4__union_entrySearchFilterMultiCond() { }
};
#endif

#ifndef SOAP_TYPE_ns4__entrySearchFilterMultiCond
#define SOAP_TYPE_ns4__entrySearchFilterMultiCond (168)
/* ns4:entrySearchFilterMultiCond */
class SOAP_CMAC ns4__entrySearchFilterMultiCond
{
public:
	int __size_entrySearchFilterMultiCond;	/* sequence of elements <-union-entrySearchFilterMultiCond> */
	__ns4__union_entrySearchFilterMultiCond *__union_entrySearchFilterMultiCond;
	bool *not_;	/* optional attribute */
	bool *or_;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE_ns4__entrySearchFilterMultiCond */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__entrySearchFilterMultiCond(): __union_entrySearchFilterMultiCond(NULL), not_(NULL), or_(NULL), soap(NULL) { ns4__entrySearchFilterMultiCond::soap_default(NULL); }
	virtual ~ns4__entrySearchFilterMultiCond() { }
};
#endif

#ifndef SOAP_TYPE_ns4__entrySearchFilterSingleCond
#define SOAP_TYPE_ns4__entrySearchFilterSingleCond (169)
/* ns4:entrySearchFilterSingleCond */
class SOAP_CMAC ns4__entrySearchFilterSingleCond
{
public:
	bool *not_;	/* optional attribute */
	std::string attr;	/* required attribute */
	std::string op;	/* required attribute */
	std::string value;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE_ns4__entrySearchFilterSingleCond */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__entrySearchFilterSingleCond(): not_(NULL), soap(NULL) { ns4__entrySearchFilterSingleCond::soap_default(NULL); }
	virtual ~ns4__entrySearchFilterSingleCond() { }
};
#endif

#ifndef SOAP_TYPE_ns4__searchCalendarResourcesResponse
#define SOAP_TYPE_ns4__searchCalendarResourcesResponse (170)
/* ns4:searchCalendarResourcesResponse */
class SOAP_CMAC ns4__searchCalendarResourcesResponse
{
public:
	std::vector<class ns4__calendarResourceInfo * >calresource;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:calendarResourceInfo */
	std::string *sortBy;	/* optional attribute */
	int *offset;	/* optional attribute */
	bool *more;	/* optional attribute */
	bool *paginationSupported;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE_ns4__searchCalendarResourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__searchCalendarResourcesResponse(): sortBy(NULL), offset(NULL), more(NULL), paginationSupported(NULL), soap(NULL) { ns4__searchCalendarResourcesResponse::soap_default(NULL); }
	virtual ~ns4__searchCalendarResourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__searchGalRequest
#define SOAP_TYPE_ns4__searchGalRequest (172)
/* ns4:searchGalRequest */
class SOAP_CMAC ns4__searchGalRequest
{
public:
	std::string *locale;	/* optional element of type xsd:string */
	ns3__cursorInfo *cursor;	/* optional element of type ns3:cursorInfo */
	ns4__entrySearchFilterInfo *searchFilter;	/* optional element of type ns4:entrySearchFilterInfo */
	std::string *ref;	/* optional attribute */
	std::string *name;	/* optional attribute */
	enum ns3__galSearchType *type;	/* optional attribute */
	bool *needExp;	/* optional attribute */
	bool *needIsOwner;	/* optional attribute */
	enum ns4__memberOfSelector *needIsMember;	/* optional attribute */
	bool *needSMIMECerts;	/* optional attribute */
	std::string *galAcctId;	/* optional attribute */
	bool *quick;	/* optional attribute */
	std::string *sortBy;	/* optional attribute */
	int *limit;	/* optional attribute */
	int *offset;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE_ns4__searchGalRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__searchGalRequest(): locale(NULL), cursor(NULL), searchFilter(NULL), ref(NULL), name(NULL), type(NULL), needExp(NULL), needIsOwner(NULL), needIsMember(NULL), needSMIMECerts(NULL), galAcctId(NULL), quick(NULL), sortBy(NULL), limit(NULL), offset(NULL), soap(NULL) { ns4__searchGalRequest::soap_default(NULL); }
	virtual ~ns4__searchGalRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__searchGalResponse
#define SOAP_TYPE_ns4__searchGalResponse (173)
/* ns4:searchGalResponse */
class SOAP_CMAC ns4__searchGalResponse
{
public:
	std::vector<ns4__contactInfo * >cn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:contactInfo */
	std::string *sortBy;	/* optional attribute */
	int *offset;	/* optional attribute */
	bool *more;	/* optional attribute */
	bool *paginationSupported;	/* optional attribute */
	bool *tokenizeKey;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE_ns4__searchGalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__searchGalResponse(): sortBy(NULL), offset(NULL), more(NULL), paginationSupported(NULL), tokenizeKey(NULL), soap(NULL) { ns4__searchGalResponse::soap_default(NULL); }
	virtual ~ns4__searchGalResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__subscribeDistributionListRequest
#define SOAP_TYPE_ns4__subscribeDistributionListRequest (174)
/* ns4:subscribeDistributionListRequest */
class SOAP_CMAC ns4__subscribeDistributionListRequest
{
public:
	class ns3__distributionListSelector *dl;	/* required element of type ns3:distributionListSelector */
	enum ns4__distributionListSubscribeOp op;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE_ns4__subscribeDistributionListRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__subscribeDistributionListRequest(): dl(NULL), soap(NULL) { ns4__subscribeDistributionListRequest::soap_default(NULL); }
	virtual ~ns4__subscribeDistributionListRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__subscribeDistributionListResponse
#define SOAP_TYPE_ns4__subscribeDistributionListResponse (175)
/* ns4:subscribeDistributionListResponse */
class SOAP_CMAC ns4__subscribeDistributionListResponse
{
public:
	enum ns4__distributionListSubscribeStatus status;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE_ns4__subscribeDistributionListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__subscribeDistributionListResponse(): soap(NULL) { ns4__subscribeDistributionListResponse::soap_default(NULL); }
	virtual ~ns4__subscribeDistributionListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__syncGalRequest
#define SOAP_TYPE_ns4__syncGalRequest (176)
/* ns4:syncGalRequest */
class SOAP_CMAC ns4__syncGalRequest
{
public:
	std::string *token;	/* optional attribute */
	std::string *galAcctId;	/* optional attribute */
	bool *idOnly;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE_ns4__syncGalRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__syncGalRequest(): token(NULL), galAcctId(NULL), idOnly(NULL), soap(NULL) { ns4__syncGalRequest::soap_default(NULL); }
	virtual ~ns4__syncGalRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns4__union_syncGalResponse
#define SOAP_TYPE__ns4__union_syncGalResponse (1059)
/* xsd:choice */
union _ns4__union_syncGalResponse
{
#define SOAP_UNION__ns4__union_syncGalResponse_cn	(1)
	ns4__contactInfo *cn;
#define SOAP_UNION__ns4__union_syncGalResponse_deleted	(2)
	ns3__id *deleted;
};
#endif

#ifndef SOAP_TYPE___ns4__union_syncGalResponse
#define SOAP_TYPE___ns4__union_syncGalResponse (1057)
/* Operation wrapper: */
class SOAP_CMAC __ns4__union_syncGalResponse
{
public:
	int __union_syncGalResponse;	/* union discriminant (of union defined below) */
	union _ns4__union_syncGalResponse union_syncGalResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1057; } /* = unique id SOAP_TYPE___ns4__union_syncGalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns4__union_syncGalResponse() { __ns4__union_syncGalResponse::soap_default(NULL); }
	virtual ~__ns4__union_syncGalResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__syncGalResponse
#define SOAP_TYPE_ns4__syncGalResponse (177)
/* ns4:syncGalResponse */
class SOAP_CMAC ns4__syncGalResponse
{
public:
	int __size_syncGalResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-syncGalResponse> */
	__ns4__union_syncGalResponse *__union_syncGalResponse;
	bool *more;	/* optional attribute */
	std::string *token;	/* optional attribute */
	std::string *galDefinitionLastModified;	/* optional attribute */
	bool *throttled;	/* optional attribute */
	bool *fullSyncRecommended;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE_ns4__syncGalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__syncGalResponse(): __union_syncGalResponse(NULL), more(NULL), token(NULL), galDefinitionLastModified(NULL), throttled(NULL), fullSyncRecommended(NULL), soap(NULL) { ns4__syncGalResponse::soap_default(NULL); }
	virtual ~ns4__syncGalResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__calTZInfo
#define SOAP_TYPE_ns4__calTZInfo (179)
/* ns4:calTZInfo */
class SOAP_CMAC ns4__calTZInfo
{
public:
	ns3__tzOnsetInfo *standard;	/* optional element of type ns3:tzOnsetInfo */
	ns3__tzOnsetInfo *daylight;	/* optional element of type ns3:tzOnsetInfo */
	std::string id;	/* required attribute */
	int *stdoff;	/* optional attribute */
	int *dayoff;	/* optional attribute */
	std::string *stdname;	/* optional attribute */
	std::string *dayname;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE_ns4__calTZInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__calTZInfo(): standard(NULL), daylight(NULL), stdoff(NULL), dayoff(NULL), stdname(NULL), dayname(NULL), soap(NULL) { ns4__calTZInfo::soap_default(NULL); }
	virtual ~ns4__calTZInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__policy
#define SOAP_TYPE_ns5__policy (180)
/* ns5:policy */
class SOAP_CMAC ns5__policy
{
public:
	enum ns5__type *type;	/* optional attribute */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *lifetime;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE_ns5__policy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__policy(): type(NULL), id(NULL), name(NULL), lifetime(NULL), soap(NULL) { ns5__policy::soap_default(NULL); }
	virtual ~ns5__policy() { }
};
#endif

#ifndef SOAP_TYPE_ns5__deviceInfo
#define SOAP_TYPE_ns5__deviceInfo (181)
/* ns5:deviceInfo */
class SOAP_CMAC ns5__deviceInfo
{
public:
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *status;	/* optional attribute */
	LONG64 *created;	/* optional attribute */
	LONG64 *accessed;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE_ns5__deviceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__deviceInfo(): id(NULL), name(NULL), status(NULL), created(NULL), accessed(NULL), soap(NULL) { ns5__deviceInfo::soap_default(NULL); }
	virtual ~ns5__deviceInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns5__retentionPolicy_keep
#define SOAP_TYPE__ns5__retentionPolicy_keep (1063)
/* ns5:retentionPolicy-keep */
class SOAP_CMAC _ns5__retentionPolicy_keep
{
public:
	std::vector<ns5__policy * >policy;	/* optional element of type ns5:policy */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1063; } /* = unique id SOAP_TYPE__ns5__retentionPolicy_keep */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__retentionPolicy_keep(): unusedCodeGenHelper(NULL) { _ns5__retentionPolicy_keep::soap_default(NULL); }
	virtual ~_ns5__retentionPolicy_keep() { }
};
#endif

#ifndef SOAP_TYPE__ns5__retentionPolicy_purge
#define SOAP_TYPE__ns5__retentionPolicy_purge (1067)
/* ns5:retentionPolicy-purge */
class SOAP_CMAC _ns5__retentionPolicy_purge
{
public:
	std::vector<ns5__policy * >policy;	/* optional element of type ns5:policy */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1067; } /* = unique id SOAP_TYPE__ns5__retentionPolicy_purge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__retentionPolicy_purge(): unusedCodeGenHelper(NULL) { _ns5__retentionPolicy_purge::soap_default(NULL); }
	virtual ~_ns5__retentionPolicy_purge() { }
};
#endif

#ifndef SOAP_TYPE_ns5__retentionPolicy
#define SOAP_TYPE_ns5__retentionPolicy (182)
/* ns5:retentionPolicy */
class SOAP_CMAC ns5__retentionPolicy
{
public:
	_ns5__retentionPolicy_keep *keep;	/* optional element of type ns5:retentionPolicy-keep */
	_ns5__retentionPolicy_purge *purge;	/* optional element of type ns5:retentionPolicy-purge */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE_ns5__retentionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__retentionPolicy(): keep(NULL), purge(NULL), soap(NULL) { ns5__retentionPolicy::soap_default(NULL); }
	virtual ~ns5__retentionPolicy() { }
};
#endif

#ifndef SOAP_TYPE_ns5__idStatus
#define SOAP_TYPE_ns5__idStatus (183)
/* ns5:idStatus */
class SOAP_CMAC ns5__idStatus
{
public:
	std::string *id;	/* optional attribute */
	std::string *status;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE_ns5__idStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__idStatus(): id(NULL), status(NULL), soap(NULL) { ns5__idStatus::soap_default(NULL); }
	virtual ~ns5__idStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setCalendarItemInfo
#define SOAP_TYPE_ns5__setCalendarItemInfo (185)
/* ns5:setCalendarItemInfo */
class SOAP_CMAC ns5__setCalendarItemInfo
{
public:
	class ns5__msg *m;	/* optional element of type ns5:msg */
	std::string *ptst;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE_ns5__setCalendarItemInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setCalendarItemInfo(): m(NULL), ptst(NULL), soap(NULL) { ns5__setCalendarItemInfo::soap_default(NULL); }
	virtual ~ns5__setCalendarItemInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__msg
#define SOAP_TYPE_ns5__msg (186)
/* ns5:msg */
class SOAP_CMAC ns5__msg
{
public:
	std::string *content;	/* optional element of type xsd:string */
	std::vector<class ns5__header * >header;	/* optional element of type ns5:header */
	class ns5__mimePartInfo *mp;	/* optional element of type ns5:mimePartInfo */
	class ns5__attachmentsInfo *attach;	/* optional element of type ns5:attachmentsInfo */
	class ns5__invitationInfo *inv;	/* optional element of type ns5:invitationInfo */
	std::vector<class ns5__emailAddrInfo * >e;	/* optional element of type ns5:emailAddrInfo */
	std::vector<class ns5__calTZInfo * >tz;	/* optional element of type ns5:calTZInfo */
	std::string *fr;	/* optional element of type xsd:string */
	std::string *aid;	/* optional attribute */
	std::string *origid;	/* optional attribute */
	std::string *rt;	/* optional attribute */
	std::string *idnt;	/* optional attribute */
	std::string *su;	/* optional attribute */
	std::string *irt;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *f;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE_ns5__msg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__msg(): content(NULL), mp(NULL), attach(NULL), inv(NULL), fr(NULL), aid(NULL), origid(NULL), rt(NULL), idnt(NULL), su(NULL), irt(NULL), l(NULL), f(NULL), soap(NULL) { ns5__msg::soap_default(NULL); }
	virtual ~ns5__msg() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mimePartInfo
#define SOAP_TYPE_ns5__mimePartInfo (188)
/* ns5:mimePartInfo */
class SOAP_CMAC ns5__mimePartInfo
{
public:
	std::vector<ns5__mimePartInfo * >mp;	/* optional element of type ns5:mimePartInfo */
	ns5__attachmentsInfo *attach;	/* optional element of type ns5:attachmentsInfo */
	std::string *ct;	/* optional attribute */
	std::string *content;	/* optional attribute */
	std::string *ci;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE_ns5__mimePartInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mimePartInfo(): attach(NULL), ct(NULL), content(NULL), ci(NULL), soap(NULL) { ns5__mimePartInfo::soap_default(NULL); }
	virtual ~ns5__mimePartInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_attachmentsInfo
#define SOAP_TYPE__ns5__union_attachmentsInfo (1085)
/* xsd:choice */
union _ns5__union_attachmentsInfo
{
#define SOAP_UNION__ns5__union_attachmentsInfo_mp	(1)
	class ns5__mimePartAttachSpec *mp;
#define SOAP_UNION__ns5__union_attachmentsInfo_m	(2)
	class ns5__msgAttachSpec *m;
#define SOAP_UNION__ns5__union_attachmentsInfo_cn	(3)
	class ns5__contactAttachSpec *cn;
#define SOAP_UNION__ns5__union_attachmentsInfo_doc	(4)
	class ns5__docAttachSpec *doc;
};
#endif

#ifndef SOAP_TYPE___ns5__union_attachmentsInfo
#define SOAP_TYPE___ns5__union_attachmentsInfo (1080)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_attachmentsInfo
{
public:
	int __union_attachmentsInfo;	/* union discriminant (of union defined below) */
	union _ns5__union_attachmentsInfo union_attachmentsInfo;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1080; } /* = unique id SOAP_TYPE___ns5__union_attachmentsInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_attachmentsInfo() { __ns5__union_attachmentsInfo::soap_default(NULL); }
	virtual ~__ns5__union_attachmentsInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__attachmentsInfo
#define SOAP_TYPE_ns5__attachmentsInfo (189)
/* ns5:attachmentsInfo */
class SOAP_CMAC ns5__attachmentsInfo
{
public:
	int __size_attachmentsInfo;	/* sequence of elements <-union-attachmentsInfo> */
	__ns5__union_attachmentsInfo *__union_attachmentsInfo;
	std::string *aid;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE_ns5__attachmentsInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__attachmentsInfo(): __union_attachmentsInfo(NULL), aid(NULL), soap(NULL) { ns5__attachmentsInfo::soap_default(NULL); }
	virtual ~ns5__attachmentsInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__attachSpec
#define SOAP_TYPE_ns5__attachSpec (191)
/* ns5:attachSpec */
class SOAP_CMAC ns5__attachSpec
{
public:
	bool *optional;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE_ns5__attachSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__attachSpec(): optional(NULL), soap(NULL) { ns5__attachSpec::soap_default(NULL); }
	virtual ~ns5__attachSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__inviteComponentCommon
#define SOAP_TYPE_ns5__inviteComponentCommon (197)
/* ns5:inviteComponentCommon */
class SOAP_CMAC ns5__inviteComponentCommon
{
public:
	std::string method;	/* required attribute */
	int compNum;	/* required attribute */
	bool rsvp;	/* required attribute */
	std::string *priority;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *loc;	/* optional attribute */
	std::string *percentComplete;	/* optional attribute */
	std::string *completed;	/* optional attribute */
	bool *noBlob;	/* optional attribute */
	std::string *fba;	/* optional attribute */
	std::string *fb;	/* optional attribute */
	std::string *transp;	/* optional attribute */
	bool *isOrg;	/* optional attribute */
	std::string *x_USCOREuid;	/* optional attribute */
	std::string *uid;	/* optional attribute */
	int *seq;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	std::string *calItemId;	/* optional attribute */
	std::string *apptId;	/* optional attribute */
	std::string *ciFolder;	/* optional attribute */
	std::string *status;	/* optional attribute */
	std::string *class_;	/* optional attribute */
	std::string *url;	/* optional attribute */
	bool *ex;	/* optional attribute */
	std::string *ridZ;	/* optional attribute */
	bool *allDay;	/* optional attribute */
	bool *draft;	/* optional attribute */
	bool *neverSent;	/* optional attribute */
	std::string *changes;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE_ns5__inviteComponentCommon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__inviteComponentCommon(): priority(NULL), name(NULL), loc(NULL), percentComplete(NULL), completed(NULL), noBlob(NULL), fba(NULL), fb(NULL), transp(NULL), isOrg(NULL), x_USCOREuid(NULL), uid(NULL), seq(NULL), d(NULL), calItemId(NULL), apptId(NULL), ciFolder(NULL), status(NULL), class_(NULL), url(NULL), ex(NULL), ridZ(NULL), allDay(NULL), draft(NULL), neverSent(NULL), changes(NULL), soap(NULL) { ns5__inviteComponentCommon::soap_default(NULL); }
	virtual ~ns5__inviteComponentCommon() { }
};
#endif

#ifndef SOAP_TYPE_ns5__geoInfo
#define SOAP_TYPE_ns5__geoInfo (199)
/* ns5:geoInfo */
class SOAP_CMAC ns5__geoInfo
{
public:
	std::string *lat;	/* optional attribute */
	std::string *lon;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE_ns5__geoInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__geoInfo(): lat(NULL), lon(NULL), soap(NULL) { ns5__geoInfo::soap_default(NULL); }
	virtual ~ns5__geoInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calendarAttendee
#define SOAP_TYPE_ns5__calendarAttendee (200)
/* ns5:calendarAttendee */
class SOAP_CMAC ns5__calendarAttendee
{
public:
	std::vector<class ns5__xParam * >xparam;	/* optional element of type ns5:xParam */
	std::string *a;	/* optional attribute */
	std::string *url;	/* optional attribute */
	std::string *d;	/* optional attribute */
	std::string *sentBy;	/* optional attribute */
	std::string *dir;	/* optional attribute */
	std::string *lang;	/* optional attribute */
	std::string *cutype;	/* optional attribute */
	std::string *role;	/* optional attribute */
	std::string *ptst;	/* optional attribute */
	bool *rsvp;	/* optional attribute */
	std::string *member;	/* optional attribute */
	std::string *delTo;	/* optional attribute */
	std::string *delFrom;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE_ns5__calendarAttendee */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calendarAttendee(): a(NULL), url(NULL), d(NULL), sentBy(NULL), dir(NULL), lang(NULL), cutype(NULL), role(NULL), ptst(NULL), rsvp(NULL), member(NULL), delTo(NULL), delFrom(NULL), soap(NULL) { ns5__calendarAttendee::soap_default(NULL); }
	virtual ~ns5__calendarAttendee() { }
};
#endif

#ifndef SOAP_TYPE_ns5__xParam
#define SOAP_TYPE_ns5__xParam (201)
/* ns5:xParam */
class SOAP_CMAC ns5__xParam
{
public:
	std::string name;	/* required attribute */
	std::string value;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE_ns5__xParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__xParam(): soap(NULL) { ns5__xParam::soap_default(NULL); }
	virtual ~ns5__xParam() { }
};
#endif

#ifndef SOAP_TYPE_ns5__alarmInfo
#define SOAP_TYPE_ns5__alarmInfo (202)
/* ns5:alarmInfo */
class SOAP_CMAC ns5__alarmInfo
{
public:
	class ns5__alarmTriggerInfo *trigger;	/* optional element of type ns5:alarmTriggerInfo */
	class ns5__durationInfo *repeat;	/* optional element of type ns5:durationInfo */
	std::string *desc;	/* optional element of type xsd:string */
	class ns5__calendarAttach *attach;	/* optional element of type ns5:calendarAttach */
	std::string *summary;	/* optional element of type xsd:string */
	std::vector<ns5__calendarAttendee * >at;	/* optional element of type ns5:calendarAttendee */
	std::vector<class ns5__xProp * >xprop;	/* optional element of type ns5:xProp */
	std::string action;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE_ns5__alarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__alarmInfo(): trigger(NULL), repeat(NULL), desc(NULL), attach(NULL), summary(NULL), soap(NULL) { ns5__alarmInfo::soap_default(NULL); }
	virtual ~ns5__alarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__alarmTriggerInfo
#define SOAP_TYPE_ns5__alarmTriggerInfo (203)
/* ns5:alarmTriggerInfo */
class SOAP_CMAC ns5__alarmTriggerInfo
{
public:
	class ns5__dateAttr *abs;	/* optional element of type ns5:dateAttr */
	ns5__durationInfo *rel;	/* optional element of type ns5:durationInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE_ns5__alarmTriggerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__alarmTriggerInfo(): abs(NULL), rel(NULL), soap(NULL) { ns5__alarmTriggerInfo::soap_default(NULL); }
	virtual ~ns5__alarmTriggerInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dateAttr
#define SOAP_TYPE_ns5__dateAttr (204)
/* ns5:dateAttr */
class SOAP_CMAC ns5__dateAttr
{
public:
	std::string d;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE_ns5__dateAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dateAttr(): soap(NULL) { ns5__dateAttr::soap_default(NULL); }
	virtual ~ns5__dateAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns5__durationInfo
#define SOAP_TYPE_ns5__durationInfo (205)
/* ns5:durationInfo */
class SOAP_CMAC ns5__durationInfo
{
public:
	bool *neg;	/* optional attribute */
	int *w;	/* optional attribute */
	int *d;	/* optional attribute */
	int *h;	/* optional attribute */
	int *m;	/* optional attribute */
	int *s;	/* optional attribute */
	std::string *related;	/* optional attribute */
	int *count;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE_ns5__durationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__durationInfo(): neg(NULL), w(NULL), d(NULL), h(NULL), m(NULL), s(NULL), related(NULL), count(NULL), soap(NULL) { ns5__durationInfo::soap_default(NULL); }
	virtual ~ns5__durationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__xProp
#define SOAP_TYPE_ns5__xProp (207)
/* ns5:xProp */
class SOAP_CMAC ns5__xProp
{
public:
	std::vector<ns5__xParam * >xparam;	/* optional element of type ns5:xParam */
	std::string name;	/* required attribute */
	std::string value;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE_ns5__xProp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__xProp(): soap(NULL) { ns5__xProp::soap_default(NULL); }
	virtual ~ns5__xProp() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calOrganizer
#define SOAP_TYPE_ns5__calOrganizer (208)
/* ns5:calOrganizer */
class SOAP_CMAC ns5__calOrganizer
{
public:
	std::vector<ns5__xParam * >xparam;	/* optional element of type ns5:xParam */
	std::string *a;	/* optional attribute */
	std::string *url;	/* optional attribute */
	std::string *d;	/* optional attribute */
	std::string *sentBy;	/* optional attribute */
	std::string *dir;	/* optional attribute */
	std::string *lang;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE_ns5__calOrganizer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calOrganizer(): a(NULL), url(NULL), d(NULL), sentBy(NULL), dir(NULL), lang(NULL), soap(NULL) { ns5__calOrganizer::soap_default(NULL); }
	virtual ~ns5__calOrganizer() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_recurrenceInfo
#define SOAP_TYPE__ns5__union_recurrenceInfo (1104)
/* xsd:choice */
union _ns5__union_recurrenceInfo
{
#define SOAP_UNION__ns5__union_recurrenceInfo_add	(1)
	class ns5__addRecurrenceInfo *add;
#define SOAP_UNION__ns5__union_recurrenceInfo_exclude	(2)
	class ns5__excludeRecurrenceInfo *exclude;
#define SOAP_UNION__ns5__union_recurrenceInfo_except	(3)
	class ns5__exceptionRuleInfo *except;
#define SOAP_UNION__ns5__union_recurrenceInfo_cancel	(4)
	class ns5__cancelRuleInfo *cancel;
#define SOAP_UNION__ns5__union_recurrenceInfo_dates	(5)
	class ns5__singleDates *dates;
#define SOAP_UNION__ns5__union_recurrenceInfo_rule	(6)
	class ns5__simpleRepeatingRule *rule;
};
#endif

#ifndef SOAP_TYPE___ns5__union_recurrenceInfo
#define SOAP_TYPE___ns5__union_recurrenceInfo (1097)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_recurrenceInfo
{
public:
	int __union_recurrenceInfo;	/* union discriminant (of union defined below) */
	union _ns5__union_recurrenceInfo union_recurrenceInfo;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1097; } /* = unique id SOAP_TYPE___ns5__union_recurrenceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_recurrenceInfo() { __ns5__union_recurrenceInfo::soap_default(NULL); }
	virtual ~__ns5__union_recurrenceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__recurrenceInfo
#define SOAP_TYPE_ns5__recurrenceInfo (209)
/* ns5:recurrenceInfo */
class SOAP_CMAC ns5__recurrenceInfo
{
public:
	int __size_recurrenceInfo;	/* sequence of elements <-union-recurrenceInfo> */
	__ns5__union_recurrenceInfo *__union_recurrenceInfo;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE_ns5__recurrenceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__recurrenceInfo(): __union_recurrenceInfo(NULL), soap(NULL) { ns5__recurrenceInfo::soap_default(NULL); }
	virtual ~ns5__recurrenceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__recurIdInfo
#define SOAP_TYPE_ns5__recurIdInfo (213)
/* ns5:recurIdInfo */
class SOAP_CMAC ns5__recurIdInfo
{
public:
	int rangeType;	/* required attribute */
	std::string recurId;	/* required attribute */
	std::string *tz;	/* optional attribute */
	std::string *ridZ;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE_ns5__recurIdInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__recurIdInfo(): tz(NULL), ridZ(NULL), soap(NULL) { ns5__recurIdInfo::soap_default(NULL); }
	virtual ~ns5__recurIdInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__singleDates
#define SOAP_TYPE_ns5__singleDates (215)
/* ns5:singleDates */
class SOAP_CMAC ns5__singleDates
{
public:
	std::vector<class ns5__dtVal * >dtval;	/* optional element of type ns5:dtVal */
	std::string *tz;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE_ns5__singleDates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__singleDates(): tz(NULL), soap(NULL) { ns5__singleDates::soap_default(NULL); }
	virtual ~ns5__singleDates() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dtVal
#define SOAP_TYPE_ns5__dtVal (216)
/* ns5:dtVal */
class SOAP_CMAC ns5__dtVal
{
public:
	class ns5__dtTimeInfo *s;	/* optional element of type ns5:dtTimeInfo */
	ns5__dtTimeInfo *e;	/* optional element of type ns5:dtTimeInfo */
	ns5__durationInfo *dur;	/* optional element of type ns5:durationInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE_ns5__dtVal */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dtVal(): s(NULL), e(NULL), dur(NULL), soap(NULL) { ns5__dtVal::soap_default(NULL); }
	virtual ~ns5__dtVal() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dtTimeInfo
#define SOAP_TYPE_ns5__dtTimeInfo (217)
/* ns5:dtTimeInfo */
class SOAP_CMAC ns5__dtTimeInfo
{
public:
	std::string *d;	/* optional attribute */
	std::string *tz;	/* optional attribute */
	LONG64 *u;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE_ns5__dtTimeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dtTimeInfo(): d(NULL), tz(NULL), u(NULL), soap(NULL) { ns5__dtTimeInfo::soap_default(NULL); }
	virtual ~ns5__dtTimeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__simpleRepeatingRule
#define SOAP_TYPE_ns5__simpleRepeatingRule (218)
/* ns5:simpleRepeatingRule */
class SOAP_CMAC ns5__simpleRepeatingRule
{
public:
	class ns5__dateTimeStringAttr *until;	/* optional element of type ns5:dateTimeStringAttr */
	class ns5__numAttr *count;	/* optional element of type ns5:numAttr */
	class ns5__intervalRule *interval;	/* optional element of type ns5:intervalRule */
	class ns5__bySecondRule *bysecond;	/* optional element of type ns5:bySecondRule */
	class ns5__byMinuteRule *byminute;	/* optional element of type ns5:byMinuteRule */
	class ns5__byHourRule *byhour;	/* optional element of type ns5:byHourRule */
	class ns5__byDayRule *byday;	/* optional element of type ns5:byDayRule */
	class ns5__byMonthDayRule *bymonthday;	/* optional element of type ns5:byMonthDayRule */
	class ns5__byYearDayRule *byyearday;	/* optional element of type ns5:byYearDayRule */
	class ns5__byWeekNoRule *byweekno;	/* optional element of type ns5:byWeekNoRule */
	class ns5__byMonthRule *bymonth;	/* optional element of type ns5:byMonthRule */
	class ns5__bySetPosRule *bysetpos;	/* optional element of type ns5:bySetPosRule */
	class ns5__wkstRule *wkst;	/* optional element of type ns5:wkstRule */
	std::vector<class ns5__xNameRule * >rule_x_name;	/* optional element of type ns5:xNameRule */
	std::string freq;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE_ns5__simpleRepeatingRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__simpleRepeatingRule(): until(NULL), count(NULL), interval(NULL), bysecond(NULL), byminute(NULL), byhour(NULL), byday(NULL), bymonthday(NULL), byyearday(NULL), byweekno(NULL), bymonth(NULL), bysetpos(NULL), wkst(NULL), soap(NULL) { ns5__simpleRepeatingRule::soap_default(NULL); }
	virtual ~ns5__simpleRepeatingRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dateTimeStringAttr
#define SOAP_TYPE_ns5__dateTimeStringAttr (219)
/* ns5:dateTimeStringAttr */
class SOAP_CMAC ns5__dateTimeStringAttr
{
public:
	std::string d;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE_ns5__dateTimeStringAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dateTimeStringAttr(): soap(NULL) { ns5__dateTimeStringAttr::soap_default(NULL); }
	virtual ~ns5__dateTimeStringAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns5__numAttr
#define SOAP_TYPE_ns5__numAttr (220)
/* ns5:numAttr */
class SOAP_CMAC ns5__numAttr
{
public:
	int num;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE_ns5__numAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__numAttr(): soap(NULL) { ns5__numAttr::soap_default(NULL); }
	virtual ~ns5__numAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns5__intervalRule
#define SOAP_TYPE_ns5__intervalRule (221)
/* ns5:intervalRule */
class SOAP_CMAC ns5__intervalRule
{
public:
	int ival;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE_ns5__intervalRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__intervalRule(): soap(NULL) { ns5__intervalRule::soap_default(NULL); }
	virtual ~ns5__intervalRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__bySecondRule
#define SOAP_TYPE_ns5__bySecondRule (222)
/* ns5:bySecondRule */
class SOAP_CMAC ns5__bySecondRule
{
public:
	std::string seclist;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE_ns5__bySecondRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__bySecondRule(): soap(NULL) { ns5__bySecondRule::soap_default(NULL); }
	virtual ~ns5__bySecondRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__byMinuteRule
#define SOAP_TYPE_ns5__byMinuteRule (223)
/* ns5:byMinuteRule */
class SOAP_CMAC ns5__byMinuteRule
{
public:
	std::string minlist;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_ns5__byMinuteRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__byMinuteRule(): soap(NULL) { ns5__byMinuteRule::soap_default(NULL); }
	virtual ~ns5__byMinuteRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__byHourRule
#define SOAP_TYPE_ns5__byHourRule (224)
/* ns5:byHourRule */
class SOAP_CMAC ns5__byHourRule
{
public:
	std::string hrlist;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE_ns5__byHourRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__byHourRule(): soap(NULL) { ns5__byHourRule::soap_default(NULL); }
	virtual ~ns5__byHourRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__byDayRule
#define SOAP_TYPE_ns5__byDayRule (225)
/* ns5:byDayRule */
class SOAP_CMAC ns5__byDayRule
{
public:
	std::vector<class ns5__wkDay * >wkday;	/* optional element of type ns5:wkDay */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE_ns5__byDayRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__byDayRule(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__byDayRule::soap_default(NULL); }
	virtual ~ns5__byDayRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__wkDay
#define SOAP_TYPE_ns5__wkDay (226)
/* ns5:wkDay */
class SOAP_CMAC ns5__wkDay
{
public:
	std::string day;	/* required attribute */
	int *ordwk;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE_ns5__wkDay */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__wkDay(): ordwk(NULL), soap(NULL) { ns5__wkDay::soap_default(NULL); }
	virtual ~ns5__wkDay() { }
};
#endif

#ifndef SOAP_TYPE_ns5__byMonthDayRule
#define SOAP_TYPE_ns5__byMonthDayRule (227)
/* ns5:byMonthDayRule */
class SOAP_CMAC ns5__byMonthDayRule
{
public:
	std::string modaylist;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE_ns5__byMonthDayRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__byMonthDayRule(): soap(NULL) { ns5__byMonthDayRule::soap_default(NULL); }
	virtual ~ns5__byMonthDayRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__byYearDayRule
#define SOAP_TYPE_ns5__byYearDayRule (228)
/* ns5:byYearDayRule */
class SOAP_CMAC ns5__byYearDayRule
{
public:
	std::string yrdaylist;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE_ns5__byYearDayRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__byYearDayRule(): soap(NULL) { ns5__byYearDayRule::soap_default(NULL); }
	virtual ~ns5__byYearDayRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__byWeekNoRule
#define SOAP_TYPE_ns5__byWeekNoRule (229)
/* ns5:byWeekNoRule */
class SOAP_CMAC ns5__byWeekNoRule
{
public:
	std::string wklist;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE_ns5__byWeekNoRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__byWeekNoRule(): soap(NULL) { ns5__byWeekNoRule::soap_default(NULL); }
	virtual ~ns5__byWeekNoRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__byMonthRule
#define SOAP_TYPE_ns5__byMonthRule (230)
/* ns5:byMonthRule */
class SOAP_CMAC ns5__byMonthRule
{
public:
	std::string molist;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 230; } /* = unique id SOAP_TYPE_ns5__byMonthRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__byMonthRule(): soap(NULL) { ns5__byMonthRule::soap_default(NULL); }
	virtual ~ns5__byMonthRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__bySetPosRule
#define SOAP_TYPE_ns5__bySetPosRule (231)
/* ns5:bySetPosRule */
class SOAP_CMAC ns5__bySetPosRule
{
public:
	std::string poslist;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 231; } /* = unique id SOAP_TYPE_ns5__bySetPosRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__bySetPosRule(): soap(NULL) { ns5__bySetPosRule::soap_default(NULL); }
	virtual ~ns5__bySetPosRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__wkstRule
#define SOAP_TYPE_ns5__wkstRule (232)
/* ns5:wkstRule */
class SOAP_CMAC ns5__wkstRule
{
public:
	std::string day;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 232; } /* = unique id SOAP_TYPE_ns5__wkstRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__wkstRule(): soap(NULL) { ns5__wkstRule::soap_default(NULL); }
	virtual ~ns5__wkstRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__xNameRule
#define SOAP_TYPE_ns5__xNameRule (233)
/* ns5:xNameRule */
class SOAP_CMAC ns5__xNameRule
{
public:
	std::string *name;	/* optional attribute */
	std::string *value;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE_ns5__xNameRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__xNameRule(): name(NULL), value(NULL), soap(NULL) { ns5__xNameRule::soap_default(NULL); }
	virtual ~ns5__xNameRule() { }
};
#endif

#ifndef SOAP_TYPE_ns5__exceptionRecurIdInfo
#define SOAP_TYPE_ns5__exceptionRecurIdInfo (234)
/* ns5:exceptionRecurIdInfo */
class SOAP_CMAC ns5__exceptionRecurIdInfo
{
public:
	std::string d;	/* required attribute */
	std::string *tz;	/* optional attribute */
	int *rangeType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE_ns5__exceptionRecurIdInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__exceptionRecurIdInfo(): tz(NULL), rangeType(NULL), soap(NULL) { ns5__exceptionRecurIdInfo::soap_default(NULL); }
	virtual ~ns5__exceptionRecurIdInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calTZInfo
#define SOAP_TYPE_ns5__calTZInfo (235)
/* ns5:calTZInfo */
class SOAP_CMAC ns5__calTZInfo
{
public:
	ns3__tzOnsetInfo *standard;	/* optional element of type ns3:tzOnsetInfo */
	ns3__tzOnsetInfo *daylight;	/* optional element of type ns3:tzOnsetInfo */
	std::string id;	/* required attribute */
	int stdoff;	/* required attribute */
	int dayoff;	/* required attribute */
	std::string *stdname;	/* optional attribute */
	std::string *dayname;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 235; } /* = unique id SOAP_TYPE_ns5__calTZInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calTZInfo(): standard(NULL), daylight(NULL), stdname(NULL), dayname(NULL), soap(NULL) { ns5__calTZInfo::soap_default(NULL); }
	virtual ~ns5__calTZInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__emailAddrInfo
#define SOAP_TYPE_ns5__emailAddrInfo (236)
/* ns5:emailAddrInfo */
class SOAP_CMAC ns5__emailAddrInfo
{
public:
	std::string a;	/* required attribute */
	std::string *t;	/* optional attribute */
	std::string *p;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 236; } /* = unique id SOAP_TYPE_ns5__emailAddrInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__emailAddrInfo(): t(NULL), p(NULL), soap(NULL) { ns5__emailAddrInfo::soap_default(NULL); }
	virtual ~ns5__emailAddrInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addAppointmentInviteResponse
#define SOAP_TYPE_ns5__addAppointmentInviteResponse (237)
/* ns5:addAppointmentInviteResponse */
class SOAP_CMAC ns5__addAppointmentInviteResponse
{
public:
	int *calItemId;	/* optional attribute */
	int *invId;	/* optional attribute */
	int *compNum;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 237; } /* = unique id SOAP_TYPE_ns5__addAppointmentInviteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addAppointmentInviteResponse(): calItemId(NULL), invId(NULL), compNum(NULL), soap(NULL) { ns5__addAppointmentInviteResponse::soap_default(NULL); }
	virtual ~ns5__addAppointmentInviteResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addCommentRequest
#define SOAP_TYPE_ns5__addCommentRequest (238)
/* ns5:addCommentRequest */
class SOAP_CMAC ns5__addCommentRequest
{
public:
	class ns5__addedComment *comment;	/* required element of type ns5:addedComment */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE_ns5__addCommentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addCommentRequest(): comment(NULL), soap(NULL) { ns5__addCommentRequest::soap_default(NULL); }
	virtual ~ns5__addCommentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addedComment
#define SOAP_TYPE_ns5__addedComment (239)
/* ns5:addedComment */
class SOAP_CMAC ns5__addedComment
{
public:
	std::string parentId;	/* required attribute */
	std::string text;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE_ns5__addedComment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addedComment(): soap(NULL) { ns5__addedComment::soap_default(NULL); }
	virtual ~ns5__addedComment() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addCommentResponse
#define SOAP_TYPE_ns5__addCommentResponse (240)
/* ns5:addCommentResponse */
class SOAP_CMAC ns5__addCommentResponse
{
public:
	ns3__id *comment;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:id */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE_ns5__addCommentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addCommentResponse(): comment(NULL), soap(NULL) { ns5__addCommentResponse::soap_default(NULL); }
	virtual ~ns5__addCommentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addMsgRequest
#define SOAP_TYPE_ns5__addMsgRequest (241)
/* ns5:addMsgRequest */
class SOAP_CMAC ns5__addMsgRequest
{
public:
	class ns5__addMsgSpec *m;	/* required element of type ns5:addMsgSpec */
	bool *filterSent;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 241; } /* = unique id SOAP_TYPE_ns5__addMsgRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addMsgRequest(): m(NULL), filterSent(NULL), soap(NULL) { ns5__addMsgRequest::soap_default(NULL); }
	virtual ~ns5__addMsgRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addMsgSpec
#define SOAP_TYPE_ns5__addMsgSpec (242)
/* ns5:addMsgSpec */
class SOAP_CMAC ns5__addMsgSpec
{
public:
	std::string *content;	/* optional element of type xsd:string */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	std::string *l;	/* optional attribute */
	bool *noICal;	/* optional attribute */
	std::string *d;	/* optional attribute */
	std::string *aid;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 242; } /* = unique id SOAP_TYPE_ns5__addMsgSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addMsgSpec(): content(NULL), f(NULL), t(NULL), tn(NULL), l(NULL), noICal(NULL), d(NULL), aid(NULL), soap(NULL) { ns5__addMsgSpec::soap_default(NULL); }
	virtual ~ns5__addMsgSpec() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_addMsgResponse
#define SOAP_TYPE__ns5__union_addMsgResponse (1130)
/* xsd:choice */
union _ns5__union_addMsgResponse
{
#define SOAP_UNION__ns5__union_addMsgResponse_chat	(1)
	class ns5__chatSummary *chat;
#define SOAP_UNION__ns5__union_addMsgResponse_m	(2)
	class ns5__messageSummary *m;
};
#endif

#ifndef SOAP_TYPE_ns5__addMsgResponse
#define SOAP_TYPE_ns5__addMsgResponse (243)
/* ns5:addMsgResponse */
class SOAP_CMAC ns5__addMsgResponse
{
public:
	int __union_addMsgResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* union discriminant (of union defined below) */
	union _ns5__union_addMsgResponse union_addMsgResponse;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE_ns5__addMsgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addMsgResponse(): soap(NULL) { ns5__addMsgResponse::soap_default(NULL); }
	virtual ~ns5__addMsgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__messageCommon
#define SOAP_TYPE_ns5__messageCommon (246)
/* ns5:messageCommon */
class SOAP_CMAC ns5__messageCommon
{
public:
	std::vector<class ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	LONG64 *s;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *cid;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	int *rev;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *ms;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 246; } /* = unique id SOAP_TYPE_ns5__messageCommon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__messageCommon(): s(NULL), d(NULL), l(NULL), cid(NULL), f(NULL), t(NULL), tn(NULL), rev(NULL), md(NULL), ms(NULL), soap(NULL) { ns5__messageCommon::soap_default(NULL); }
	virtual ~ns5__messageCommon() { }
};
#endif

#ifndef SOAP_TYPE_ns5__emailInfo
#define SOAP_TYPE_ns5__emailInfo (247)
/* ns5:emailInfo */
class SOAP_CMAC ns5__emailInfo
{
public:
	std::string *a;	/* optional attribute */
	std::string *d;	/* optional attribute */
	std::string *p;	/* optional attribute */
	std::string *t;	/* optional attribute */
	bool *isGroup;	/* optional attribute */
	bool *exp;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 247; } /* = unique id SOAP_TYPE_ns5__emailInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__emailInfo(): a(NULL), d(NULL), p(NULL), t(NULL), isGroup(NULL), exp(NULL), soap(NULL) { ns5__emailInfo::soap_default(NULL); }
	virtual ~ns5__emailInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns5__inviteInfo_replies
#define SOAP_TYPE__ns5__inviteInfo_replies (1134)
/* ns5:inviteInfo-replies */
class SOAP_CMAC _ns5__inviteInfo_replies
{
public:
	std::vector<class ns5__calendarReply * >reply;	/* optional element of type ns5:calendarReply */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1134; } /* = unique id SOAP_TYPE__ns5__inviteInfo_replies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__inviteInfo_replies(): unusedCodeGenHelper(NULL) { _ns5__inviteInfo_replies::soap_default(NULL); }
	virtual ~_ns5__inviteInfo_replies() { }
};
#endif

#ifndef SOAP_TYPE_ns5__inviteInfo
#define SOAP_TYPE_ns5__inviteInfo (248)
/* ns5:inviteInfo */
class SOAP_CMAC ns5__inviteInfo
{
public:
	std::vector<ns5__calTZInfo * >tz;	/* optional element of type ns5:calTZInfo */
	class ns5__inviteComponent *comp;	/* optional element of type ns5:inviteComponent */
	_ns5__inviteInfo_replies *replies;	/* optional element of type ns5:inviteInfo-replies */
	std::string type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE_ns5__inviteInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__inviteInfo(): comp(NULL), replies(NULL), soap(NULL) { ns5__inviteInfo::soap_default(NULL); }
	virtual ~ns5__inviteInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailKeyValuePairs
#define SOAP_TYPE_ns5__mailKeyValuePairs (251)
/* ns5:mailKeyValuePairs */
class SOAP_CMAC ns5__mailKeyValuePairs
{
public:
	std::vector<ns3__keyValuePair * >a;	/* optional element of type ns3:keyValuePair */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE_ns5__mailKeyValuePairs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailKeyValuePairs(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__mailKeyValuePairs::soap_default(NULL); }
	virtual ~ns5__mailKeyValuePairs() { }
};
#endif

#ifndef SOAP_TYPE_ns5__announceOrganizerChangeRequest
#define SOAP_TYPE_ns5__announceOrganizerChangeRequest (254)
/* ns5:announceOrganizerChangeRequest */
class SOAP_CMAC ns5__announceOrganizerChangeRequest
{
public:
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE_ns5__announceOrganizerChangeRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__announceOrganizerChangeRequest(): soap(NULL) { ns5__announceOrganizerChangeRequest::soap_default(NULL); }
	virtual ~ns5__announceOrganizerChangeRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__announceOrganizerChangeResponse
#define SOAP_TYPE_ns5__announceOrganizerChangeResponse (255)
/* ns5:announceOrganizerChangeResponse */
class SOAP_CMAC ns5__announceOrganizerChangeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 255; } /* = unique id SOAP_TYPE_ns5__announceOrganizerChangeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__announceOrganizerChangeResponse(): soap(NULL) { ns5__announceOrganizerChangeResponse::soap_default(NULL); }
	virtual ~ns5__announceOrganizerChangeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__applyFilterRulesRequest_filterRules
#define SOAP_TYPE__ns5__applyFilterRulesRequest_filterRules (1138)
/* ns5:applyFilterRulesRequest-filterRules */
class SOAP_CMAC _ns5__applyFilterRulesRequest_filterRules
{
public:
	std::vector<ns3__namedElement * >filterRule;	/* optional element of type ns3:namedElement */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1138; } /* = unique id SOAP_TYPE__ns5__applyFilterRulesRequest_filterRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__applyFilterRulesRequest_filterRules(): unusedCodeGenHelper(NULL) { _ns5__applyFilterRulesRequest_filterRules::soap_default(NULL); }
	virtual ~_ns5__applyFilterRulesRequest_filterRules() { }
};
#endif

#ifndef SOAP_TYPE_ns5__applyFilterRulesRequest
#define SOAP_TYPE_ns5__applyFilterRulesRequest (256)
/* ns5:applyFilterRulesRequest */
class SOAP_CMAC ns5__applyFilterRulesRequest
{
public:
	_ns5__applyFilterRulesRequest_filterRules filterRules;	/* required element of type ns5:applyFilterRulesRequest-filterRules */
	class ns5__idsAttr *m;	/* optional element of type ns5:idsAttr */
	std::string *query;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE_ns5__applyFilterRulesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__applyFilterRulesRequest(): m(NULL), query(NULL), soap(NULL) { ns5__applyFilterRulesRequest::soap_default(NULL); }
	virtual ~ns5__applyFilterRulesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__idsAttr
#define SOAP_TYPE_ns5__idsAttr (257)
/* ns5:idsAttr */
class SOAP_CMAC ns5__idsAttr
{
public:
	std::string ids;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE_ns5__idsAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__idsAttr(): soap(NULL) { ns5__idsAttr::soap_default(NULL); }
	virtual ~ns5__idsAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns5__applyFilterRulesResponse
#define SOAP_TYPE_ns5__applyFilterRulesResponse (258)
/* ns5:applyFilterRulesResponse */
class SOAP_CMAC ns5__applyFilterRulesResponse
{
public:
	ns5__idsAttr *m;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:idsAttr */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE_ns5__applyFilterRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__applyFilterRulesResponse(): m(NULL), soap(NULL) { ns5__applyFilterRulesResponse::soap_default(NULL); }
	virtual ~ns5__applyFilterRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__applyOutgoingFilterRulesRequest_filterRules
#define SOAP_TYPE__ns5__applyOutgoingFilterRulesRequest_filterRules (1140)
/* ns5:applyOutgoingFilterRulesRequest-filterRules */
class SOAP_CMAC _ns5__applyOutgoingFilterRulesRequest_filterRules
{
public:
	std::vector<ns3__namedElement * >filterRule;	/* optional element of type ns3:namedElement */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1140; } /* = unique id SOAP_TYPE__ns5__applyOutgoingFilterRulesRequest_filterRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__applyOutgoingFilterRulesRequest_filterRules(): unusedCodeGenHelper(NULL) { _ns5__applyOutgoingFilterRulesRequest_filterRules::soap_default(NULL); }
	virtual ~_ns5__applyOutgoingFilterRulesRequest_filterRules() { }
};
#endif

#ifndef SOAP_TYPE_ns5__applyOutgoingFilterRulesRequest
#define SOAP_TYPE_ns5__applyOutgoingFilterRulesRequest (259)
/* ns5:applyOutgoingFilterRulesRequest */
class SOAP_CMAC ns5__applyOutgoingFilterRulesRequest
{
public:
	_ns5__applyOutgoingFilterRulesRequest_filterRules filterRules;	/* required element of type ns5:applyOutgoingFilterRulesRequest-filterRules */
	ns5__idsAttr *m;	/* optional element of type ns5:idsAttr */
	std::string *query;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE_ns5__applyOutgoingFilterRulesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__applyOutgoingFilterRulesRequest(): m(NULL), query(NULL), soap(NULL) { ns5__applyOutgoingFilterRulesRequest::soap_default(NULL); }
	virtual ~ns5__applyOutgoingFilterRulesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__applyOutgoingFilterRulesResponse
#define SOAP_TYPE_ns5__applyOutgoingFilterRulesResponse (260)
/* ns5:applyOutgoingFilterRulesResponse */
class SOAP_CMAC ns5__applyOutgoingFilterRulesResponse
{
public:
	ns5__idsAttr *m;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:idsAttr */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 260; } /* = unique id SOAP_TYPE_ns5__applyOutgoingFilterRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__applyOutgoingFilterRulesResponse(): m(NULL), soap(NULL) { ns5__applyOutgoingFilterRulesResponse::soap_default(NULL); }
	virtual ~ns5__applyOutgoingFilterRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__autoCompleteRequest
#define SOAP_TYPE_ns5__autoCompleteRequest (261)
/* ns5:autoCompleteRequest */
class SOAP_CMAC ns5__autoCompleteRequest
{
public:
	std::string name;	/* required attribute */
	enum ns3__galSearchType *t;	/* optional attribute */
	bool *needExp;	/* optional attribute */
	std::string *folders;	/* optional attribute */
	bool *includeGal;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 261; } /* = unique id SOAP_TYPE_ns5__autoCompleteRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__autoCompleteRequest(): t(NULL), needExp(NULL), folders(NULL), includeGal(NULL), soap(NULL) { ns5__autoCompleteRequest::soap_default(NULL); }
	virtual ~ns5__autoCompleteRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__autoCompleteResponse
#define SOAP_TYPE_ns5__autoCompleteResponse (262)
/* ns5:autoCompleteResponse */
class SOAP_CMAC ns5__autoCompleteResponse
{
public:
	std::vector<class ns5__autoCompleteMatch * >match;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:autoCompleteMatch */
	bool *canBeCached;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE_ns5__autoCompleteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__autoCompleteResponse(): canBeCached(NULL), soap(NULL) { ns5__autoCompleteResponse::soap_default(NULL); }
	virtual ~ns5__autoCompleteResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__autoCompleteMatch
#define SOAP_TYPE_ns5__autoCompleteMatch (263)
/* ns5:autoCompleteMatch */
class SOAP_CMAC ns5__autoCompleteMatch
{
public:
	std::string *email;	/* optional attribute */
	std::string *type;	/* optional attribute */
	int *ranking;	/* optional attribute */
	bool *isGroup;	/* optional attribute */
	bool *exp;	/* optional attribute */
	std::string *id;	/* optional attribute */
	int *l;	/* optional attribute */
	std::string *display;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_ns5__autoCompleteMatch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__autoCompleteMatch(): email(NULL), type(NULL), ranking(NULL), isGroup(NULL), exp(NULL), id(NULL), l(NULL), display(NULL), soap(NULL) { ns5__autoCompleteMatch::soap_default(NULL); }
	virtual ~ns5__autoCompleteMatch() { }
};
#endif

#ifndef SOAP_TYPE_ns5__bounceMsgRequest
#define SOAP_TYPE_ns5__bounceMsgRequest (264)
/* ns5:bounceMsgRequest */
class SOAP_CMAC ns5__bounceMsgRequest
{
public:
	class ns5__bounceMsgSpec *m;	/* required element of type ns5:bounceMsgSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE_ns5__bounceMsgRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__bounceMsgRequest(): m(NULL), soap(NULL) { ns5__bounceMsgRequest::soap_default(NULL); }
	virtual ~ns5__bounceMsgRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__bounceMsgSpec
#define SOAP_TYPE_ns5__bounceMsgSpec (265)
/* ns5:bounceMsgSpec */
class SOAP_CMAC ns5__bounceMsgSpec
{
public:
	std::vector<ns5__emailAddrInfo * >e;	/* optional element of type ns5:emailAddrInfo */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 265; } /* = unique id SOAP_TYPE_ns5__bounceMsgSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__bounceMsgSpec(): soap(NULL) { ns5__bounceMsgSpec::soap_default(NULL); }
	virtual ~ns5__bounceMsgSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__bounceMsgResponse
#define SOAP_TYPE_ns5__bounceMsgResponse (266)
/* ns5:bounceMsgResponse */
class SOAP_CMAC ns5__bounceMsgResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 266; } /* = unique id SOAP_TYPE_ns5__bounceMsgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__bounceMsgResponse(): soap(NULL) { ns5__bounceMsgResponse::soap_default(NULL); }
	virtual ~ns5__bounceMsgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__browseRequest
#define SOAP_TYPE_ns5__browseRequest (267)
/* ns5:browseRequest */
class SOAP_CMAC ns5__browseRequest
{
public:
	std::string browseBy;	/* required attribute */
	std::string *regex;	/* optional attribute */
	int *maxToReturn;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE_ns5__browseRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__browseRequest(): regex(NULL), maxToReturn(NULL), soap(NULL) { ns5__browseRequest::soap_default(NULL); }
	virtual ~ns5__browseRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__browseResponse
#define SOAP_TYPE_ns5__browseResponse (268)
/* ns5:browseResponse */
class SOAP_CMAC ns5__browseResponse
{
public:
	std::vector<class ns5__browseData * >bd;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:browseData */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE_ns5__browseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__browseResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__browseResponse::soap_default(NULL); }
	virtual ~ns5__browseResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__cancelAppointmentRequest
#define SOAP_TYPE_ns5__cancelAppointmentRequest (270)
/* ns5:cancelAppointmentRequest */
class SOAP_CMAC ns5__cancelAppointmentRequest
{
public:
	class ns5__instanceRecurIdInfo *inst;	/* optional element of type ns5:instanceRecurIdInfo */
	ns5__calTZInfo *tz;	/* optional element of type ns5:calTZInfo */
	ns5__msg *m;	/* optional element of type ns5:msg */
	std::string *id;	/* optional attribute */
	int *comp;	/* optional attribute */
	int *ms;	/* optional attribute */
	int *rev;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE_ns5__cancelAppointmentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__cancelAppointmentRequest(): inst(NULL), tz(NULL), m(NULL), id(NULL), comp(NULL), ms(NULL), rev(NULL), soap(NULL) { ns5__cancelAppointmentRequest::soap_default(NULL); }
	virtual ~ns5__cancelAppointmentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__instanceRecurIdInfo
#define SOAP_TYPE_ns5__instanceRecurIdInfo (271)
/* ns5:instanceRecurIdInfo */
class SOAP_CMAC ns5__instanceRecurIdInfo
{
public:
	std::string *range;	/* optional attribute */
	std::string *d;	/* optional attribute */
	std::string *tz;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 271; } /* = unique id SOAP_TYPE_ns5__instanceRecurIdInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__instanceRecurIdInfo(): range(NULL), d(NULL), tz(NULL), soap(NULL) { ns5__instanceRecurIdInfo::soap_default(NULL); }
	virtual ~ns5__instanceRecurIdInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__cancelAppointmentResponse
#define SOAP_TYPE_ns5__cancelAppointmentResponse (272)
/* ns5:cancelAppointmentResponse */
class SOAP_CMAC ns5__cancelAppointmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE_ns5__cancelAppointmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__cancelAppointmentResponse(): soap(NULL) { ns5__cancelAppointmentResponse::soap_default(NULL); }
	virtual ~ns5__cancelAppointmentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__checkDeviceStatusRequest
#define SOAP_TYPE_ns5__checkDeviceStatusRequest (275)
/* ns5:checkDeviceStatusRequest */
class SOAP_CMAC ns5__checkDeviceStatusRequest
{
public:
	ns3__id *device;	/* required element of type ns3:id */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE_ns5__checkDeviceStatusRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__checkDeviceStatusRequest(): device(NULL), soap(NULL) { ns5__checkDeviceStatusRequest::soap_default(NULL); }
	virtual ~ns5__checkDeviceStatusRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__checkDeviceStatusResponse
#define SOAP_TYPE_ns5__checkDeviceStatusResponse (276)
/* ns5:checkDeviceStatusResponse */
class SOAP_CMAC ns5__checkDeviceStatusResponse
{
public:
	ns5__idStatus *device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:idStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE_ns5__checkDeviceStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__checkDeviceStatusResponse(): device(NULL), soap(NULL) { ns5__checkDeviceStatusResponse::soap_default(NULL); }
	virtual ~ns5__checkDeviceStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__checkPermissionRequest
#define SOAP_TYPE_ns5__checkPermissionRequest (277)
/* ns5:checkPermissionRequest */
class SOAP_CMAC ns5__checkPermissionRequest
{
public:
	class ns5__targetSpec *target;	/* optional element of type ns5:targetSpec */
	std::vector<std::string >right;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE_ns5__checkPermissionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__checkPermissionRequest(): target(NULL), soap(NULL) { ns5__checkPermissionRequest::soap_default(NULL); }
	virtual ~ns5__checkPermissionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__checkPermissionResponse
#define SOAP_TYPE_ns5__checkPermissionResponse (279)
/* ns5:checkPermissionResponse */
class SOAP_CMAC ns5__checkPermissionResponse
{
public:
	std::vector<class ns5__rightPermission * >right;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:rightPermission */
	bool allow;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 279; } /* = unique id SOAP_TYPE_ns5__checkPermissionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__checkPermissionResponse(): soap(NULL) { ns5__checkPermissionResponse::soap_default(NULL); }
	virtual ~ns5__checkPermissionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_checkRecurConflictsRequest
#define SOAP_TYPE__ns5__union_checkRecurConflictsRequest (1157)
/* xsd:choice */
union _ns5__union_checkRecurConflictsRequest
{
#define SOAP_UNION__ns5__union_checkRecurConflictsRequest_cancel	(1)
	class ns5__expandedRecurrenceCancel *cancel;
#define SOAP_UNION__ns5__union_checkRecurConflictsRequest_comp	(2)
	class ns5__expandedRecurrenceInvite *comp;
#define SOAP_UNION__ns5__union_checkRecurConflictsRequest_except	(3)
	class ns5__expandedRecurrenceException *except;
};
#endif

#ifndef SOAP_TYPE___ns5__union_checkRecurConflictsRequest
#define SOAP_TYPE___ns5__union_checkRecurConflictsRequest (1153)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_checkRecurConflictsRequest
{
public:
	int __union_checkRecurConflictsRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_checkRecurConflictsRequest union_checkRecurConflictsRequest;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1153; } /* = unique id SOAP_TYPE___ns5__union_checkRecurConflictsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_checkRecurConflictsRequest() { __ns5__union_checkRecurConflictsRequest::soap_default(NULL); }
	virtual ~__ns5__union_checkRecurConflictsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__checkRecurConflictsRequest
#define SOAP_TYPE_ns5__checkRecurConflictsRequest (281)
/* ns5:checkRecurConflictsRequest */
class SOAP_CMAC ns5__checkRecurConflictsRequest
{
public:
	std::vector<ns5__calTZInfo * >tz;	/* optional element of type ns5:calTZInfo */
	std::vector<class ns5__freeBusyUserSpec * >usr;	/* optional element of type ns5:freeBusyUserSpec */
	int __size_checkRecurConflictsRequest;	/* sequence of elements <-union-checkRecurConflictsRequest> */
	__ns5__union_checkRecurConflictsRequest *__union_checkRecurConflictsRequest;
	LONG64 *s;	/* optional attribute */
	LONG64 *e;	/* optional attribute */
	bool *all;	/* optional attribute */
	std::string *excludeUid;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE_ns5__checkRecurConflictsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__checkRecurConflictsRequest(): __union_checkRecurConflictsRequest(NULL), s(NULL), e(NULL), all(NULL), excludeUid(NULL), soap(NULL) { ns5__checkRecurConflictsRequest::soap_default(NULL); }
	virtual ~ns5__checkRecurConflictsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__expandedRecurrenceComponent
#define SOAP_TYPE_ns5__expandedRecurrenceComponent (283)
/* ns5:expandedRecurrenceComponent */
class SOAP_CMAC ns5__expandedRecurrenceComponent
{
public:
	ns5__instanceRecurIdInfo *exceptId;	/* optional element of type ns5:instanceRecurIdInfo */
	ns5__durationInfo *dur;	/* optional element of type ns5:durationInfo */
	ns5__recurrenceInfo *recur;	/* optional element of type ns5:recurrenceInfo */
	LONG64 *s;	/* optional attribute */
	LONG64 *e;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE_ns5__expandedRecurrenceComponent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__expandedRecurrenceComponent(): exceptId(NULL), dur(NULL), recur(NULL), s(NULL), e(NULL), soap(NULL) { ns5__expandedRecurrenceComponent::soap_default(NULL); }
	virtual ~ns5__expandedRecurrenceComponent() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusyUserSpec
#define SOAP_TYPE_ns5__freeBusyUserSpec (286)
/* ns5:freeBusyUserSpec */
class SOAP_CMAC ns5__freeBusyUserSpec
{
public:
	int *l;	/* optional attribute */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE_ns5__freeBusyUserSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusyUserSpec(): l(NULL), id(NULL), name(NULL), soap(NULL) { ns5__freeBusyUserSpec::soap_default(NULL); }
	virtual ~ns5__freeBusyUserSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__checkRecurConflictsResponse
#define SOAP_TYPE_ns5__checkRecurConflictsResponse (287)
/* ns5:checkRecurConflictsResponse */
class SOAP_CMAC ns5__checkRecurConflictsResponse
{
public:
	std::vector<class ns5__conflictRecurrenceInstance * >inst;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:conflictRecurrenceInstance */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE_ns5__checkRecurConflictsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__checkRecurConflictsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__checkRecurConflictsResponse::soap_default(NULL); }
	virtual ~ns5__checkRecurConflictsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__expandedRecurrenceInstance
#define SOAP_TYPE_ns5__expandedRecurrenceInstance (289)
/* ns5:expandedRecurrenceInstance */
class SOAP_CMAC ns5__expandedRecurrenceInstance
{
public:
	LONG64 *s;	/* optional attribute */
	LONG64 *dur;	/* optional attribute */
	bool *allDay;	/* optional attribute */
	int *tzo;	/* optional attribute */
	std::string *ridZ;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 289; } /* = unique id SOAP_TYPE_ns5__expandedRecurrenceInstance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__expandedRecurrenceInstance(): s(NULL), dur(NULL), allDay(NULL), tzo(NULL), ridZ(NULL), soap(NULL) { ns5__expandedRecurrenceInstance::soap_default(NULL); }
	virtual ~ns5__expandedRecurrenceInstance() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusyUserStatus
#define SOAP_TYPE_ns5__freeBusyUserStatus (290)
/* ns5:freeBusyUserStatus */
class SOAP_CMAC ns5__freeBusyUserStatus
{
public:
	std::string name;	/* required attribute */
	std::string fb;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE_ns5__freeBusyUserStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusyUserStatus(): soap(NULL) { ns5__freeBusyUserStatus::soap_default(NULL); }
	virtual ~ns5__freeBusyUserStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns5__checkSpellingResponse
#define SOAP_TYPE_ns5__checkSpellingResponse (292)
/* ns5:checkSpellingResponse */
class SOAP_CMAC ns5__checkSpellingResponse
{
public:
	std::vector<class ns5__misspelling * >misspelled;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:misspelling */
	bool available;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE_ns5__checkSpellingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__checkSpellingResponse(): soap(NULL) { ns5__checkSpellingResponse::soap_default(NULL); }
	virtual ~ns5__checkSpellingResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__misspelling
#define SOAP_TYPE_ns5__misspelling (293)
/* ns5:misspelling */
class SOAP_CMAC ns5__misspelling
{
public:
	std::string word;	/* required attribute */
	std::string *suggestions;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE_ns5__misspelling */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__misspelling(): suggestions(NULL), soap(NULL) { ns5__misspelling::soap_default(NULL); }
	virtual ~ns5__misspelling() { }
};
#endif

#ifndef SOAP_TYPE_ns5__completeTaskInstanceRequest
#define SOAP_TYPE_ns5__completeTaskInstanceRequest (294)
/* ns5:completeTaskInstanceRequest */
class SOAP_CMAC ns5__completeTaskInstanceRequest
{
public:
	ns5__dtTimeInfo *exceptId;	/* required element of type ns5:dtTimeInfo */
	ns5__calTZInfo *tz;	/* optional element of type ns5:calTZInfo */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 294; } /* = unique id SOAP_TYPE_ns5__completeTaskInstanceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__completeTaskInstanceRequest(): exceptId(NULL), tz(NULL), soap(NULL) { ns5__completeTaskInstanceRequest::soap_default(NULL); }
	virtual ~ns5__completeTaskInstanceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__completeTaskInstanceResponse
#define SOAP_TYPE_ns5__completeTaskInstanceResponse (295)
/* ns5:completeTaskInstanceResponse */
class SOAP_CMAC ns5__completeTaskInstanceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE_ns5__completeTaskInstanceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__completeTaskInstanceResponse(): soap(NULL) { ns5__completeTaskInstanceResponse::soap_default(NULL); }
	virtual ~ns5__completeTaskInstanceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contactActionRequest
#define SOAP_TYPE_ns5__contactActionRequest (296)
/* ns5:contactActionRequest */
class SOAP_CMAC ns5__contactActionRequest
{
public:
	class ns5__contactActionSelector *action;	/* required element of type ns5:contactActionSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE_ns5__contactActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contactActionRequest(): action(NULL), soap(NULL) { ns5__contactActionRequest::soap_default(NULL); }
	virtual ~ns5__contactActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__actionSelector
#define SOAP_TYPE_ns5__actionSelector (298)
/* ns5:actionSelector */
class SOAP_CMAC ns5__actionSelector
{
public:
	std::string *id;	/* optional attribute */
	std::string op;	/* required attribute */
	std::string *tcon;	/* optional attribute */
	int *tag;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *rgb;	/* optional attribute */
	char *color;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE_ns5__actionSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__actionSelector(): id(NULL), tcon(NULL), tag(NULL), l(NULL), rgb(NULL), color(NULL), name(NULL), f(NULL), t(NULL), tn(NULL), soap(NULL) { ns5__actionSelector::soap_default(NULL); }
	virtual ~ns5__actionSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns5__actionGrantSelector
#define SOAP_TYPE_ns5__actionGrantSelector (302)
/* ns5:actionGrantSelector */
class SOAP_CMAC ns5__actionGrantSelector
{
public:
	std::string perm;	/* required attribute */
	std::string gt;	/* required attribute */
	std::string *zid;	/* optional attribute */
	std::string *d;	/* optional attribute */
	std::string *args;	/* optional attribute */
	std::string *pw;	/* optional attribute */
	std::string *key;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE_ns5__actionGrantSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__actionGrantSelector(): zid(NULL), d(NULL), args(NULL), pw(NULL), key(NULL), soap(NULL) { ns5__actionGrantSelector::soap_default(NULL); }
	virtual ~ns5__actionGrantSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contactActionResponse
#define SOAP_TYPE_ns5__contactActionResponse (303)
/* ns5:contactActionResponse */
class SOAP_CMAC ns5__contactActionResponse
{
public:
	class ns5__folderActionResult *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:folderActionResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE_ns5__contactActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contactActionResponse(): action(NULL), soap(NULL) { ns5__contactActionResponse::soap_default(NULL); }
	virtual ~ns5__contactActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__idAndOperation
#define SOAP_TYPE_ns5__idAndOperation (305)
/* ns5:idAndOperation */
class SOAP_CMAC ns5__idAndOperation
{
public:
	std::string id;	/* required attribute */
	std::string op;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE_ns5__idAndOperation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__idAndOperation(): soap(NULL) { ns5__idAndOperation::soap_default(NULL); }
	virtual ~ns5__idAndOperation() { }
};
#endif

#ifndef SOAP_TYPE_ns5__convActionRequest
#define SOAP_TYPE_ns5__convActionRequest (306)
/* ns5:convActionRequest */
class SOAP_CMAC ns5__convActionRequest
{
public:
	ns5__actionSelector *action;	/* required element of type ns5:actionSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE_ns5__convActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__convActionRequest(): action(NULL), soap(NULL) { ns5__convActionRequest::soap_default(NULL); }
	virtual ~ns5__convActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__convActionResponse
#define SOAP_TYPE_ns5__convActionResponse (307)
/* ns5:convActionResponse */
class SOAP_CMAC ns5__convActionResponse
{
public:
	ns5__idAndOperation *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:idAndOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE_ns5__convActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__convActionResponse(): action(NULL), soap(NULL) { ns5__convActionResponse::soap_default(NULL); }
	virtual ~ns5__convActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__counterAppointmentRequest
#define SOAP_TYPE_ns5__counterAppointmentRequest (308)
/* ns5:counterAppointmentRequest */
class SOAP_CMAC ns5__counterAppointmentRequest
{
public:
	ns5__msg *m;	/* optional element of type ns5:msg */
	std::string *id;	/* optional attribute */
	int *comp;	/* optional attribute */
	int *ms;	/* optional attribute */
	int *rev;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE_ns5__counterAppointmentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__counterAppointmentRequest(): m(NULL), id(NULL), comp(NULL), ms(NULL), rev(NULL), soap(NULL) { ns5__counterAppointmentRequest::soap_default(NULL); }
	virtual ~ns5__counterAppointmentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__counterAppointmentResponse
#define SOAP_TYPE_ns5__counterAppointmentResponse (309)
/* ns5:counterAppointmentResponse */
class SOAP_CMAC ns5__counterAppointmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 309; } /* = unique id SOAP_TYPE_ns5__counterAppointmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__counterAppointmentResponse(): soap(NULL) { ns5__counterAppointmentResponse::soap_default(NULL); }
	virtual ~ns5__counterAppointmentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calItemRequestBase
#define SOAP_TYPE_ns5__calItemRequestBase (311)
/* ns5:calItemRequestBase */
class SOAP_CMAC ns5__calItemRequestBase
{
public:
	ns5__msg *m;	/* optional element of type ns5:msg */
	bool *echo;	/* optional attribute */
	int *max_;	/* optional attribute */
	bool *html;	/* optional attribute */
	bool *neuter;	/* optional attribute */
	bool *forcesend;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE_ns5__calItemRequestBase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calItemRequestBase(): m(NULL), echo(NULL), max_(NULL), html(NULL), neuter(NULL), forcesend(NULL), soap(NULL) { ns5__calItemRequestBase::soap_default(NULL); }
	virtual ~ns5__calItemRequestBase() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createCalendarItemResponse
#define SOAP_TYPE_ns5__createCalendarItemResponse (313)
/* ns5:createCalendarItemResponse */
class SOAP_CMAC ns5__createCalendarItemResponse
{
public:
	ns3__id *m;	/* optional element of type ns3:id */
	class ns5__calEcho *echo;	/* optional element of type ns5:calEcho */
	std::string *calItemId;	/* optional attribute */
	std::string *apptId;	/* optional attribute */
	std::string *invId;	/* optional attribute */
	int *ms;	/* optional attribute */
	int *rev;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE_ns5__createCalendarItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createCalendarItemResponse(): m(NULL), echo(NULL), calItemId(NULL), apptId(NULL), invId(NULL), ms(NULL), rev(NULL), soap(NULL) { ns5__createCalendarItemResponse::soap_default(NULL); }
	virtual ~ns5__createCalendarItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calEcho
#define SOAP_TYPE_ns5__calEcho (314)
/* ns5:calEcho */
class SOAP_CMAC ns5__calEcho
{
public:
	class ns5__inviteAsMP *m;	/* optional element of type ns5:inviteAsMP */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 314; } /* = unique id SOAP_TYPE_ns5__calEcho */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calEcho(): m(NULL), soap(NULL) { ns5__calEcho::soap_default(NULL); }
	virtual ~ns5__calEcho() { }
};
#endif

#ifndef SOAP_TYPE__ns5__mpInviteInfo_replies
#define SOAP_TYPE__ns5__mpInviteInfo_replies (1171)
/* ns5:mpInviteInfo-replies */
class SOAP_CMAC _ns5__mpInviteInfo_replies
{
public:
	std::vector<ns5__calendarReply * >reply;	/* optional element of type ns5:calendarReply */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1171; } /* = unique id SOAP_TYPE__ns5__mpInviteInfo_replies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__mpInviteInfo_replies(): unusedCodeGenHelper(NULL) { _ns5__mpInviteInfo_replies::soap_default(NULL); }
	virtual ~_ns5__mpInviteInfo_replies() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mpInviteInfo
#define SOAP_TYPE_ns5__mpInviteInfo (316)
/* ns5:mpInviteInfo */
class SOAP_CMAC ns5__mpInviteInfo
{
public:
	std::vector<ns5__calTZInfo * >tz;	/* optional element of type ns5:calTZInfo */
	_ns5__mpInviteInfo_replies *replies;	/* optional element of type ns5:mpInviteInfo-replies */
	std::vector<ns5__inviteComponent * >comp;	/* optional element of type ns5:inviteComponent */
	std::string type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE_ns5__mpInviteInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mpInviteInfo(): replies(NULL), soap(NULL) { ns5__mpInviteInfo::soap_default(NULL); }
	virtual ~ns5__mpInviteInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__partInfo
#define SOAP_TYPE_ns5__partInfo (317)
/* ns5:partInfo */
class SOAP_CMAC ns5__partInfo
{
public:
	std::string *content;	/* optional element of type xsd:string */
	std::vector<ns5__partInfo * >mp;	/* optional element of type ns5:partInfo */
	std::string part;	/* required attribute */
	std::string ct;	/* required attribute */
	int *s;	/* optional attribute */
	std::string *cd;	/* optional attribute */
	std::string *filename;	/* optional attribute */
	std::string *ci;	/* optional attribute */
	std::string *cl;	/* optional attribute */
	bool *body;	/* optional attribute */
	bool *truncated;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_ns5__partInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__partInfo(): content(NULL), s(NULL), cd(NULL), filename(NULL), ci(NULL), cl(NULL), body(NULL), truncated(NULL), soap(NULL) { ns5__partInfo::soap_default(NULL); }
	virtual ~ns5__partInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__notification
#define SOAP_TYPE_ns5__notification (319)
/* ns5:notification */
class SOAP_CMAC ns5__notification
{
public:
	std::string *content;	/* optional element of type xsd:string */
	bool *truncated;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 319; } /* = unique id SOAP_TYPE_ns5__notification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__notification(): content(NULL), truncated(NULL), soap(NULL) { ns5__notification::soap_default(NULL); }
	virtual ~ns5__notification() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createContactRequest
#define SOAP_TYPE_ns5__createContactRequest (323)
/* ns5:createContactRequest */
class SOAP_CMAC ns5__createContactRequest
{
public:
	class ns5__contactSpec *cn;	/* required element of type ns5:contactSpec */
	bool *verbose;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE_ns5__createContactRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createContactRequest(): cn(NULL), verbose(NULL), soap(NULL) { ns5__createContactRequest::soap_default(NULL); }
	virtual ~ns5__createContactRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contactSpec
#define SOAP_TYPE_ns5__contactSpec (324)
/* ns5:contactSpec */
class SOAP_CMAC ns5__contactSpec
{
public:
	class ns5__vCardInfo *vcard;	/* optional element of type ns5:vCardInfo */
	std::vector<class ns5__newContactAttr * >a;	/* optional element of type ns5:newContactAttr */
	std::vector<class ns5__newContactGroupMember * >m;	/* optional element of type ns5:newContactGroupMember */
	int *id;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 324; } /* = unique id SOAP_TYPE_ns5__contactSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contactSpec(): vcard(NULL), id(NULL), l(NULL), t(NULL), tn(NULL), soap(NULL) { ns5__contactSpec::soap_default(NULL); }
	virtual ~ns5__contactSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__newContactGroupMember
#define SOAP_TYPE_ns5__newContactGroupMember (326)
/* ns5:newContactGroupMember */
class SOAP_CMAC ns5__newContactGroupMember
{
public:
	std::string type;	/* required attribute */
	std::string value;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE_ns5__newContactGroupMember */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__newContactGroupMember(): soap(NULL) { ns5__newContactGroupMember::soap_default(NULL); }
	virtual ~ns5__newContactGroupMember() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createContactResponse
#define SOAP_TYPE_ns5__createContactResponse (327)
/* ns5:createContactResponse */
class SOAP_CMAC ns5__createContactResponse
{
public:
	class ns5__contactInfo *cn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:contactInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE_ns5__createContactResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createContactResponse(): cn(NULL), soap(NULL) { ns5__createContactResponse::soap_default(NULL); }
	virtual ~ns5__createContactResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contactInfo
#define SOAP_TYPE_ns5__contactInfo (328)
/* ns5:contactInfo */
class SOAP_CMAC ns5__contactInfo
{
public:
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	std::vector<ns3__contactAttr * >a;	/* optional element of type ns3:contactAttr */
	std::vector<class ns5__contactGroupMember * >m;	/* optional element of type ns5:contactGroupMember */
	std::string *sf;	/* optional attribute */
	bool *exp;	/* optional attribute */
	std::string id;	/* required attribute */
	std::string *l;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *ms;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	int *rev;	/* optional attribute */
	std::string *fileAsStr;	/* optional attribute */
	std::string *email;	/* optional attribute */
	std::string *email2;	/* optional attribute */
	std::string *email3;	/* optional attribute */
	std::string *type;	/* optional attribute */
	std::string *dlist;	/* optional attribute */
	std::string *ref;	/* optional attribute */
	bool *tooManyMembers;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE_ns5__contactInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contactInfo(): sf(NULL), exp(NULL), l(NULL), f(NULL), t(NULL), tn(NULL), md(NULL), ms(NULL), d(NULL), rev(NULL), fileAsStr(NULL), email(NULL), email2(NULL), email3(NULL), type(NULL), dlist(NULL), ref(NULL), tooManyMembers(NULL), soap(NULL) { ns5__contactInfo::soap_default(NULL); }
	virtual ~ns5__contactInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contactGroupMember
#define SOAP_TYPE_ns5__contactGroupMember (329)
/* ns5:contactGroupMember */
class SOAP_CMAC ns5__contactGroupMember
{
public:
	ns5__contactInfo *cn;	/* optional element of type ns5:contactInfo */
	std::string type;	/* required attribute */
	std::string value;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 329; } /* = unique id SOAP_TYPE_ns5__contactGroupMember */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contactGroupMember(): cn(NULL), soap(NULL) { ns5__contactGroupMember::soap_default(NULL); }
	virtual ~ns5__contactGroupMember() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_createDataSourceRequest
#define SOAP_TYPE__ns5__union_createDataSourceRequest (1193)
/* xsd:choice */
union _ns5__union_createDataSourceRequest
{
#define SOAP_UNION__ns5__union_createDataSourceRequest_imap	(1)
	class ns5__mailImapDataSource *imap;
#define SOAP_UNION__ns5__union_createDataSourceRequest_pop3	(2)
	class ns5__mailPop3DataSource *pop3;
#define SOAP_UNION__ns5__union_createDataSourceRequest_caldav	(3)
	class ns5__mailCaldavDataSource *caldav;
#define SOAP_UNION__ns5__union_createDataSourceRequest_yab	(4)
	class ns5__mailYabDataSource *yab;
#define SOAP_UNION__ns5__union_createDataSourceRequest_rss	(5)
	class ns5__mailRssDataSource *rss;
#define SOAP_UNION__ns5__union_createDataSourceRequest_gal	(6)
	class ns5__mailGalDataSource *gal;
#define SOAP_UNION__ns5__union_createDataSourceRequest_cal	(7)
	class ns5__mailCalDataSource *cal;
#define SOAP_UNION__ns5__union_createDataSourceRequest_unknown	(8)
	class ns5__mailUnknownDataSource *unknown;
};
#endif

#ifndef SOAP_TYPE_ns5__createDataSourceRequest
#define SOAP_TYPE_ns5__createDataSourceRequest (330)
/* ns5:createDataSourceRequest */
class SOAP_CMAC ns5__createDataSourceRequest
{
public:
	int __union_createDataSourceRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_createDataSourceRequest union_createDataSourceRequest;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 330; } /* = unique id SOAP_TYPE_ns5__createDataSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createDataSourceRequest(): soap(NULL) { ns5__createDataSourceRequest::soap_default(NULL); }
	virtual ~ns5__createDataSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailDataSource
#define SOAP_TYPE_ns5__mailDataSource (332)
/* ns5:mailDataSource */
class SOAP_CMAC ns5__mailDataSource
{
public:
	std::string *lastError;	/* optional element of type xsd:string */
	std::vector<std::string >a;	/* optional element of type xsd:string */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *l;	/* optional attribute */
	bool *isEnabled;	/* optional attribute */
	bool *importOnly;	/* optional attribute */
	std::string *host;	/* optional attribute */
	int *port;	/* optional attribute */
	enum ns5__mdsConnectionType *connectionType;	/* optional attribute */
	std::string *username;	/* optional attribute */
	std::string *password;	/* optional attribute */
	std::string *pollingInterval;	/* optional attribute */
	std::string *emailAddress;	/* optional attribute */
	bool *useAddressForForwardReply;	/* optional attribute */
	std::string *defaultSignature;	/* optional attribute */
	std::string *forwardReplySignature;	/* optional attribute */
	std::string *fromDisplay;	/* optional attribute */
	std::string *replyToAddress;	/* optional attribute */
	std::string *replyToDisplay;	/* optional attribute */
	std::string *importClass;	/* optional attribute */
	LONG64 *failingSince;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE_ns5__mailDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailDataSource(): lastError(NULL), id(NULL), name(NULL), l(NULL), isEnabled(NULL), importOnly(NULL), host(NULL), port(NULL), connectionType(NULL), username(NULL), password(NULL), pollingInterval(NULL), emailAddress(NULL), useAddressForForwardReply(NULL), defaultSignature(NULL), forwardReplySignature(NULL), fromDisplay(NULL), replyToAddress(NULL), replyToDisplay(NULL), importClass(NULL), failingSince(NULL), soap(NULL) { ns5__mailDataSource::soap_default(NULL); }
	virtual ~ns5__mailDataSource() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_createDataSourceResponse
#define SOAP_TYPE__ns5__union_createDataSourceResponse (1203)
/* xsd:choice */
union _ns5__union_createDataSourceResponse
{
#define SOAP_UNION__ns5__union_createDataSourceResponse_imap	(1)
	class ns5__imapDataSourceId *imap;
#define SOAP_UNION__ns5__union_createDataSourceResponse_pop3	(2)
	class ns5__pop3DataSourceId *pop3;
#define SOAP_UNION__ns5__union_createDataSourceResponse_caldav	(3)
	class ns5__caldavDataSourceId *caldav;
#define SOAP_UNION__ns5__union_createDataSourceResponse_yab	(4)
	class ns5__yabDataSourceId *yab;
#define SOAP_UNION__ns5__union_createDataSourceResponse_rss	(5)
	class ns5__rssDataSourceId *rss;
#define SOAP_UNION__ns5__union_createDataSourceResponse_gal	(6)
	class ns5__galDataSourceId *gal;
#define SOAP_UNION__ns5__union_createDataSourceResponse_cal	(7)
	class ns5__calDataSourceId *cal;
#define SOAP_UNION__ns5__union_createDataSourceResponse_unknown	(8)
	class ns5__unknownDataSourceId *unknown;
};
#endif

#ifndef SOAP_TYPE_ns5__createDataSourceResponse
#define SOAP_TYPE_ns5__createDataSourceResponse (340)
/* ns5:createDataSourceResponse */
class SOAP_CMAC ns5__createDataSourceResponse
{
public:
	int __union_createDataSourceResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* union discriminant (of union defined below) */
	union _ns5__union_createDataSourceResponse union_createDataSourceResponse;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 340; } /* = unique id SOAP_TYPE_ns5__createDataSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createDataSourceResponse(): soap(NULL) { ns5__createDataSourceResponse::soap_default(NULL); }
	virtual ~ns5__createDataSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createFolderRequest
#define SOAP_TYPE_ns5__createFolderRequest (349)
/* ns5:createFolderRequest */
class SOAP_CMAC ns5__createFolderRequest
{
public:
	class ns5__newFolderSpec *folder;	/* required element of type ns5:newFolderSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE_ns5__createFolderRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createFolderRequest(): folder(NULL), soap(NULL) { ns5__createFolderRequest::soap_default(NULL); }
	virtual ~ns5__createFolderRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__newFolderSpec_acl
#define SOAP_TYPE__ns5__newFolderSpec_acl (1205)
/* ns5:newFolderSpec-acl */
class SOAP_CMAC _ns5__newFolderSpec_acl
{
public:
	std::vector<ns5__actionGrantSelector * >grant;	/* optional element of type ns5:actionGrantSelector */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1205; } /* = unique id SOAP_TYPE__ns5__newFolderSpec_acl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__newFolderSpec_acl(): unusedCodeGenHelper(NULL) { _ns5__newFolderSpec_acl::soap_default(NULL); }
	virtual ~_ns5__newFolderSpec_acl() { }
};
#endif

#ifndef SOAP_TYPE_ns5__newFolderSpec
#define SOAP_TYPE_ns5__newFolderSpec (350)
/* ns5:newFolderSpec */
class SOAP_CMAC ns5__newFolderSpec
{
public:
	_ns5__newFolderSpec_acl *acl;	/* optional element of type ns5:newFolderSpec-acl */
	std::string name;	/* required attribute */
	std::string *view;	/* optional attribute */
	std::string *f;	/* optional attribute */
	char *color;	/* optional attribute */
	std::string *rgb;	/* optional attribute */
	std::string *url;	/* optional attribute */
	std::string *l;	/* optional attribute */
	bool *fie;	/* optional attribute */
	bool *sync;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 350; } /* = unique id SOAP_TYPE_ns5__newFolderSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__newFolderSpec(): acl(NULL), view(NULL), f(NULL), color(NULL), rgb(NULL), url(NULL), l(NULL), fie(NULL), sync(NULL), soap(NULL) { ns5__newFolderSpec::soap_default(NULL); }
	virtual ~ns5__newFolderSpec() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_createFolderResponse
#define SOAP_TYPE__ns5__union_createFolderResponse (1212)
/* xsd:choice */
union _ns5__union_createFolderResponse
{
#define SOAP_UNION__ns5__union_createFolderResponse_folder	(1)
	class ns5__folder *folder;
#define SOAP_UNION__ns5__union_createFolderResponse_link	(2)
	class ns5__mountpoint *link;
#define SOAP_UNION__ns5__union_createFolderResponse_search	(3)
	class ns5__searchFolder *search;
};
#endif

#ifndef SOAP_TYPE_ns5__createFolderResponse
#define SOAP_TYPE_ns5__createFolderResponse (351)
/* ns5:createFolderResponse */
class SOAP_CMAC ns5__createFolderResponse
{
public:
	int __union_createFolderResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* union discriminant (of union defined below) */
	union _ns5__union_createFolderResponse union_createFolderResponse;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 351; } /* = unique id SOAP_TYPE_ns5__createFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createFolderResponse(): soap(NULL) { ns5__createFolderResponse::soap_default(NULL); }
	virtual ~ns5__createFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_folder
#define SOAP_TYPE__ns5__union_folder (1216)
/* xsd:choice */
union _ns5__union_folder
{
#define SOAP_UNION__ns5__union_folder_folder	(1)
	ns5__folder *folder;
#define SOAP_UNION__ns5__union_folder_link	(2)
	ns5__mountpoint *link;
#define SOAP_UNION__ns5__union_folder_search	(3)
	ns5__searchFolder *search;
};
#endif

#ifndef SOAP_TYPE___ns5__union_folder
#define SOAP_TYPE___ns5__union_folder (1215)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_folder
{
public:
	int __union_folder;	/* union discriminant (of union defined below) */
	union _ns5__union_folder union_folder;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1215; } /* = unique id SOAP_TYPE___ns5__union_folder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_folder() { __ns5__union_folder::soap_default(NULL); }
	virtual ~__ns5__union_folder() { }
};
#endif

#ifndef SOAP_TYPE_ns5__folder
#define SOAP_TYPE_ns5__folder (352)
/* ns5:folder */
class SOAP_CMAC ns5__folder
{
public:
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	class ns5__acl *acl;	/* optional element of type ns5:acl */
	ns5__retentionPolicy *retentionPolicy;	/* optional element of type ns5:retentionPolicy */
	int __size_folder;	/* sequence of elements <-union-folder> */
	__ns5__union_folder *__union_folder;
	std::string id;	/* required attribute */
	std::string uuid;	/* required attribute */
	std::string *name;	/* optional attribute */
	std::string *absFolderPath;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *luuid;	/* optional attribute */
	std::string *f;	/* optional attribute */
	int *color;	/* optional attribute */
	std::string *rgb;	/* optional attribute */
	int *u;	/* optional attribute */
	int *i4u;	/* optional attribute */
	enum ns5__view *view;	/* optional attribute */
	int *rev;	/* optional attribute */
	int *ms;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *n;	/* optional attribute */
	int *i4n;	/* optional attribute */
	LONG64 *s;	/* optional attribute */
	int *i4ms;	/* optional attribute */
	int *i4next;	/* optional attribute */
	std::string *url;	/* optional attribute */
	bool *activesyncdisabled;	/* optional attribute */
	std::string *perm;	/* optional attribute */
	bool *recursive;	/* optional attribute */
	std::string *rest;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 352; } /* = unique id SOAP_TYPE_ns5__folder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__folder(): acl(NULL), retentionPolicy(NULL), __union_folder(NULL), name(NULL), absFolderPath(NULL), l(NULL), luuid(NULL), f(NULL), color(NULL), rgb(NULL), u(NULL), i4u(NULL), view(NULL), rev(NULL), ms(NULL), md(NULL), n(NULL), i4n(NULL), s(NULL), i4ms(NULL), i4next(NULL), url(NULL), activesyncdisabled(NULL), perm(NULL), recursive(NULL), rest(NULL), soap(NULL) { ns5__folder::soap_default(NULL); }
	virtual ~ns5__folder() { }
};
#endif

#ifndef SOAP_TYPE_ns5__acl
#define SOAP_TYPE_ns5__acl (353)
/* ns5:acl */
class SOAP_CMAC ns5__acl
{
public:
	std::vector<class ns5__grant * >grant;	/* optional element of type ns5:grant */
	LONG64 *internalGrantExpiry;	/* optional attribute */
	LONG64 *guestGrantExpiry;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 353; } /* = unique id SOAP_TYPE_ns5__acl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__acl(): internalGrantExpiry(NULL), guestGrantExpiry(NULL), soap(NULL) { ns5__acl::soap_default(NULL); }
	virtual ~ns5__acl() { }
};
#endif

#ifndef SOAP_TYPE_ns5__grant
#define SOAP_TYPE_ns5__grant (354)
/* ns5:grant */
class SOAP_CMAC ns5__grant
{
public:
	std::string perm;	/* required attribute */
	enum ns3__grantGranteeType gt;	/* required attribute */
	std::string zid;	/* required attribute */
	LONG64 *expiry;	/* optional attribute */
	std::string *d;	/* optional attribute */
	std::string *pw;	/* optional attribute */
	std::string *key;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE_ns5__grant */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__grant(): expiry(NULL), d(NULL), pw(NULL), key(NULL), soap(NULL) { ns5__grant::soap_default(NULL); }
	virtual ~ns5__grant() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createMountpointRequest
#define SOAP_TYPE_ns5__createMountpointRequest (357)
/* ns5:createMountpointRequest */
class SOAP_CMAC ns5__createMountpointRequest
{
public:
	class ns5__newMountpointSpec *link;	/* required element of type ns5:newMountpointSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 357; } /* = unique id SOAP_TYPE_ns5__createMountpointRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createMountpointRequest(): link(NULL), soap(NULL) { ns5__createMountpointRequest::soap_default(NULL); }
	virtual ~ns5__createMountpointRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__newMountpointSpec
#define SOAP_TYPE_ns5__newMountpointSpec (358)
/* ns5:newMountpointSpec */
class SOAP_CMAC ns5__newMountpointSpec
{
public:
	std::string name;	/* required attribute */
	std::string *view;	/* optional attribute */
	std::string *f;	/* optional attribute */
	char *color;	/* optional attribute */
	std::string *rgb;	/* optional attribute */
	std::string *url;	/* optional attribute */
	std::string *l;	/* optional attribute */
	bool *fie;	/* optional attribute */
	bool *reminder;	/* optional attribute */
	std::string *zid;	/* optional attribute */
	std::string *owner;	/* optional attribute */
	int *rid;	/* optional attribute */
	std::string *path;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 358; } /* = unique id SOAP_TYPE_ns5__newMountpointSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__newMountpointSpec(): view(NULL), f(NULL), color(NULL), rgb(NULL), url(NULL), l(NULL), fie(NULL), reminder(NULL), zid(NULL), owner(NULL), rid(NULL), path(NULL), soap(NULL) { ns5__newMountpointSpec::soap_default(NULL); }
	virtual ~ns5__newMountpointSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createMountpointResponse
#define SOAP_TYPE_ns5__createMountpointResponse (359)
/* ns5:createMountpointResponse */
class SOAP_CMAC ns5__createMountpointResponse
{
public:
	ns5__mountpoint *link;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:mountpoint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE_ns5__createMountpointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createMountpointResponse(): link(NULL), soap(NULL) { ns5__createMountpointResponse::soap_default(NULL); }
	virtual ~ns5__createMountpointResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createNoteRequest
#define SOAP_TYPE_ns5__createNoteRequest (360)
/* ns5:createNoteRequest */
class SOAP_CMAC ns5__createNoteRequest
{
public:
	class ns5__newNoteSpec *note;	/* required element of type ns5:newNoteSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE_ns5__createNoteRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createNoteRequest(): note(NULL), soap(NULL) { ns5__createNoteRequest::soap_default(NULL); }
	virtual ~ns5__createNoteRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__newNoteSpec
#define SOAP_TYPE_ns5__newNoteSpec (361)
/* ns5:newNoteSpec */
class SOAP_CMAC ns5__newNoteSpec
{
public:
	std::string l;	/* required attribute */
	std::string content;	/* required attribute */
	char *color;	/* optional attribute */
	std::string *pos;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 361; } /* = unique id SOAP_TYPE_ns5__newNoteSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__newNoteSpec(): color(NULL), pos(NULL), soap(NULL) { ns5__newNoteSpec::soap_default(NULL); }
	virtual ~ns5__newNoteSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createNoteResponse
#define SOAP_TYPE_ns5__createNoteResponse (362)
/* ns5:createNoteResponse */
class SOAP_CMAC ns5__createNoteResponse
{
public:
	class ns5__noteInfo *note;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:noteInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 362; } /* = unique id SOAP_TYPE_ns5__createNoteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createNoteResponse(): note(NULL), soap(NULL) { ns5__createNoteResponse::soap_default(NULL); }
	virtual ~ns5__createNoteResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__noteInfo
#define SOAP_TYPE_ns5__noteInfo (363)
/* ns5:noteInfo */
class SOAP_CMAC ns5__noteInfo
{
public:
	std::string *content;	/* optional element of type xsd:string */
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	std::string *id;	/* optional attribute */
	int *rev;	/* optional attribute */
	std::string *l;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	std::string *pos;	/* optional attribute */
	char *color;	/* optional attribute */
	std::string *rgb;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *ms;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 363; } /* = unique id SOAP_TYPE_ns5__noteInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__noteInfo(): content(NULL), id(NULL), rev(NULL), l(NULL), d(NULL), f(NULL), t(NULL), tn(NULL), pos(NULL), color(NULL), rgb(NULL), md(NULL), ms(NULL), soap(NULL) { ns5__noteInfo::soap_default(NULL); }
	virtual ~ns5__noteInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createSearchFolderRequest
#define SOAP_TYPE_ns5__createSearchFolderRequest (364)
/* ns5:createSearchFolderRequest */
class SOAP_CMAC ns5__createSearchFolderRequest
{
public:
	class ns5__newSearchFolderSpec *search;	/* required element of type ns5:newSearchFolderSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE_ns5__createSearchFolderRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createSearchFolderRequest(): search(NULL), soap(NULL) { ns5__createSearchFolderRequest::soap_default(NULL); }
	virtual ~ns5__createSearchFolderRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__newSearchFolderSpec
#define SOAP_TYPE_ns5__newSearchFolderSpec (365)
/* ns5:newSearchFolderSpec */
class SOAP_CMAC ns5__newSearchFolderSpec
{
public:
	std::string name;	/* required attribute */
	std::string query;	/* required attribute */
	std::string *types;	/* optional attribute */
	std::string *sortBy;	/* optional attribute */
	std::string *f;	/* optional attribute */
	char *color;	/* optional attribute */
	std::string *l;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE_ns5__newSearchFolderSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__newSearchFolderSpec(): types(NULL), sortBy(NULL), f(NULL), color(NULL), l(NULL), soap(NULL) { ns5__newSearchFolderSpec::soap_default(NULL); }
	virtual ~ns5__newSearchFolderSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createSearchFolderResponse
#define SOAP_TYPE_ns5__createSearchFolderResponse (366)
/* ns5:createSearchFolderResponse */
class SOAP_CMAC ns5__createSearchFolderResponse
{
public:
	ns5__searchFolder *search;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:searchFolder */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 366; } /* = unique id SOAP_TYPE_ns5__createSearchFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createSearchFolderResponse(): search(NULL), soap(NULL) { ns5__createSearchFolderResponse::soap_default(NULL); }
	virtual ~ns5__createSearchFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createTagRequest
#define SOAP_TYPE_ns5__createTagRequest (367)
/* ns5:createTagRequest */
class SOAP_CMAC ns5__createTagRequest
{
public:
	class ns5__tagSpec *tag;	/* optional element of type ns5:tagSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 367; } /* = unique id SOAP_TYPE_ns5__createTagRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createTagRequest(): tag(NULL), soap(NULL) { ns5__createTagRequest::soap_default(NULL); }
	virtual ~ns5__createTagRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__tagSpec
#define SOAP_TYPE_ns5__tagSpec (368)
/* ns5:tagSpec */
class SOAP_CMAC ns5__tagSpec
{
public:
	std::string name;	/* required attribute */
	std::string *rgb;	/* optional attribute */
	char *color;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 368; } /* = unique id SOAP_TYPE_ns5__tagSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__tagSpec(): rgb(NULL), color(NULL), soap(NULL) { ns5__tagSpec::soap_default(NULL); }
	virtual ~ns5__tagSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createTagResponse
#define SOAP_TYPE_ns5__createTagResponse (369)
/* ns5:createTagResponse */
class SOAP_CMAC ns5__createTagResponse
{
public:
	class ns5__tagInfo *tag;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:tagInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE_ns5__createTagResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createTagResponse(): tag(NULL), soap(NULL) { ns5__createTagResponse::soap_default(NULL); }
	virtual ~ns5__createTagResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__tagInfo
#define SOAP_TYPE_ns5__tagInfo (370)
/* ns5:tagInfo */
class SOAP_CMAC ns5__tagInfo
{
public:
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	ns5__retentionPolicy *retentionPolicy;	/* optional element of type ns5:retentionPolicy */
	std::string id;	/* required attribute */
	std::string *name;	/* optional attribute */
	char *color;	/* optional attribute */
	std::string *rgb;	/* optional attribute */
	int *u;	/* optional attribute */
	int *n;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	int *rev;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *ms;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE_ns5__tagInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__tagInfo(): retentionPolicy(NULL), name(NULL), color(NULL), rgb(NULL), u(NULL), n(NULL), d(NULL), rev(NULL), md(NULL), ms(NULL), soap(NULL) { ns5__tagInfo::soap_default(NULL); }
	virtual ~ns5__tagInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns5__createWaitSetRequest_add
#define SOAP_TYPE__ns5__createWaitSetRequest_add (1227)
/* ns5:createWaitSetRequest-add */
class SOAP_CMAC _ns5__createWaitSetRequest_add
{
public:
	std::vector<ns3__waitSetAddSpec * >a;	/* optional element of type ns3:waitSetAddSpec */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1227; } /* = unique id SOAP_TYPE__ns5__createWaitSetRequest_add */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__createWaitSetRequest_add(): unusedCodeGenHelper(NULL) { _ns5__createWaitSetRequest_add::soap_default(NULL); }
	virtual ~_ns5__createWaitSetRequest_add() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createWaitSetRequest
#define SOAP_TYPE_ns5__createWaitSetRequest (375)
/* ns5:createWaitSetRequest */
class SOAP_CMAC ns5__createWaitSetRequest
{
public:
	_ns5__createWaitSetRequest_add *add;	/* optional element of type ns5:createWaitSetRequest-add */
	std::string defTypes;	/* required attribute */
	bool *allAccounts;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE_ns5__createWaitSetRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createWaitSetRequest(): add(NULL), allAccounts(NULL), soap(NULL) { ns5__createWaitSetRequest::soap_default(NULL); }
	virtual ~ns5__createWaitSetRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createWaitSetResponse
#define SOAP_TYPE_ns5__createWaitSetResponse (376)
/* ns5:createWaitSetResponse */
class SOAP_CMAC ns5__createWaitSetResponse
{
public:
	std::vector<ns3__idAndType * >error;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:idAndType */
	std::string waitSet;	/* required attribute */
	std::string defTypes;	/* required attribute */
	int seq;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 376; } /* = unique id SOAP_TYPE_ns5__createWaitSetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createWaitSetResponse(): soap(NULL) { ns5__createWaitSetResponse::soap_default(NULL); }
	virtual ~ns5__createWaitSetResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__declineCounterAppointmentRequest
#define SOAP_TYPE_ns5__declineCounterAppointmentRequest (377)
/* ns5:declineCounterAppointmentRequest */
class SOAP_CMAC ns5__declineCounterAppointmentRequest
{
public:
	ns5__msg *m;	/* optional element of type ns5:msg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 377; } /* = unique id SOAP_TYPE_ns5__declineCounterAppointmentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__declineCounterAppointmentRequest(): m(NULL), soap(NULL) { ns5__declineCounterAppointmentRequest::soap_default(NULL); }
	virtual ~ns5__declineCounterAppointmentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__declineCounterAppointmentResponse
#define SOAP_TYPE_ns5__declineCounterAppointmentResponse (378)
/* ns5:declineCounterAppointmentResponse */
class SOAP_CMAC ns5__declineCounterAppointmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 378; } /* = unique id SOAP_TYPE_ns5__declineCounterAppointmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__declineCounterAppointmentResponse(): soap(NULL) { ns5__declineCounterAppointmentResponse::soap_default(NULL); }
	virtual ~ns5__declineCounterAppointmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_deleteDataSourceRequest
#define SOAP_TYPE__ns5__union_deleteDataSourceRequest (1242)
/* xsd:choice */
union _ns5__union_deleteDataSourceRequest
{
#define SOAP_UNION__ns5__union_deleteDataSourceRequest_imap	(1)
	class ns5__imapDataSourceNameOrId *imap;
#define SOAP_UNION__ns5__union_deleteDataSourceRequest_pop3	(2)
	class ns5__pop3DataSourceNameOrId *pop3;
#define SOAP_UNION__ns5__union_deleteDataSourceRequest_caldav	(3)
	class ns5__caldavDataSourceNameOrId *caldav;
#define SOAP_UNION__ns5__union_deleteDataSourceRequest_yab	(4)
	class ns5__yabDataSourceNameOrId *yab;
#define SOAP_UNION__ns5__union_deleteDataSourceRequest_rss	(5)
	class ns5__rssDataSourceNameOrId *rss;
#define SOAP_UNION__ns5__union_deleteDataSourceRequest_gal	(6)
	class ns5__galDataSourceNameOrId *gal;
#define SOAP_UNION__ns5__union_deleteDataSourceRequest_cal	(7)
	class ns5__calDataSourceNameOrId *cal;
#define SOAP_UNION__ns5__union_deleteDataSourceRequest_unknown	(8)
	class ns5__unknownDataSourceNameOrId *unknown;
};
#endif

#ifndef SOAP_TYPE___ns5__union_deleteDataSourceRequest
#define SOAP_TYPE___ns5__union_deleteDataSourceRequest (1233)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_deleteDataSourceRequest
{
public:
	int __union_deleteDataSourceRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_deleteDataSourceRequest union_deleteDataSourceRequest;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1233; } /* = unique id SOAP_TYPE___ns5__union_deleteDataSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_deleteDataSourceRequest() { __ns5__union_deleteDataSourceRequest::soap_default(NULL); }
	virtual ~__ns5__union_deleteDataSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__deleteDataSourceRequest
#define SOAP_TYPE_ns5__deleteDataSourceRequest (379)
/* ns5:deleteDataSourceRequest */
class SOAP_CMAC ns5__deleteDataSourceRequest
{
public:
	int __size_deleteDataSourceRequest;	/* sequence of elements <-union-deleteDataSourceRequest> */
	__ns5__union_deleteDataSourceRequest *__union_deleteDataSourceRequest;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE_ns5__deleteDataSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__deleteDataSourceRequest(): __union_deleteDataSourceRequest(NULL), soap(NULL) { ns5__deleteDataSourceRequest::soap_default(NULL); }
	virtual ~ns5__deleteDataSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__nameOrId
#define SOAP_TYPE_ns5__nameOrId (382)
/* ns5:nameOrId */
class SOAP_CMAC ns5__nameOrId
{
public:
	std::string *name;	/* optional attribute */
	std::string *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 382; } /* = unique id SOAP_TYPE_ns5__nameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__nameOrId(): name(NULL), id(NULL), soap(NULL) { ns5__nameOrId::soap_default(NULL); }
	virtual ~ns5__nameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__deleteDataSourceResponse
#define SOAP_TYPE_ns5__deleteDataSourceResponse (390)
/* ns5:deleteDataSourceResponse */
class SOAP_CMAC ns5__deleteDataSourceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE_ns5__deleteDataSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__deleteDataSourceResponse(): soap(NULL) { ns5__deleteDataSourceResponse::soap_default(NULL); }
	virtual ~ns5__deleteDataSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__deleteDeviceRequest
#define SOAP_TYPE_ns5__deleteDeviceRequest (391)
/* ns5:deleteDeviceRequest */
class SOAP_CMAC ns5__deleteDeviceRequest
{
public:
	ns3__id *device;	/* required element of type ns3:id */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 391; } /* = unique id SOAP_TYPE_ns5__deleteDeviceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__deleteDeviceRequest(): device(NULL), soap(NULL) { ns5__deleteDeviceRequest::soap_default(NULL); }
	virtual ~ns5__deleteDeviceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__deleteDeviceResponse
#define SOAP_TYPE_ns5__deleteDeviceResponse (392)
/* ns5:deleteDeviceResponse */
class SOAP_CMAC ns5__deleteDeviceResponse
{
public:
	class ns5__nameId *device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:nameId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 392; } /* = unique id SOAP_TYPE_ns5__deleteDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__deleteDeviceResponse(): device(NULL), soap(NULL) { ns5__deleteDeviceResponse::soap_default(NULL); }
	virtual ~ns5__deleteDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__nameId
#define SOAP_TYPE_ns5__nameId (393)
/* ns5:nameId */
class SOAP_CMAC ns5__nameId
{
public:
	std::string name;	/* required attribute */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 393; } /* = unique id SOAP_TYPE_ns5__nameId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__nameId(): soap(NULL) { ns5__nameId::soap_default(NULL); }
	virtual ~ns5__nameId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__destroyWaitSetRequest
#define SOAP_TYPE_ns5__destroyWaitSetRequest (394)
/* ns5:destroyWaitSetRequest */
class SOAP_CMAC ns5__destroyWaitSetRequest
{
public:
	std::string waitSet;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE_ns5__destroyWaitSetRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__destroyWaitSetRequest(): soap(NULL) { ns5__destroyWaitSetRequest::soap_default(NULL); }
	virtual ~ns5__destroyWaitSetRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__destroyWaitSetResponse
#define SOAP_TYPE_ns5__destroyWaitSetResponse (395)
/* ns5:destroyWaitSetResponse */
class SOAP_CMAC ns5__destroyWaitSetResponse
{
public:
	std::string waitSet;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE_ns5__destroyWaitSetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__destroyWaitSetResponse(): soap(NULL) { ns5__destroyWaitSetResponse::soap_default(NULL); }
	virtual ~ns5__destroyWaitSetResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__diffDocumentRequest
#define SOAP_TYPE_ns5__diffDocumentRequest (396)
/* ns5:diffDocumentRequest */
class SOAP_CMAC ns5__diffDocumentRequest
{
public:
	class ns5__diffDocumentVersionSpec *doc;	/* optional element of type ns5:diffDocumentVersionSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 396; } /* = unique id SOAP_TYPE_ns5__diffDocumentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__diffDocumentRequest(): doc(NULL), soap(NULL) { ns5__diffDocumentRequest::soap_default(NULL); }
	virtual ~ns5__diffDocumentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__diffDocumentVersionSpec
#define SOAP_TYPE_ns5__diffDocumentVersionSpec (397)
/* ns5:diffDocumentVersionSpec */
class SOAP_CMAC ns5__diffDocumentVersionSpec
{
public:
	std::string *id;	/* optional attribute */
	int *v1;	/* optional attribute */
	int *v2;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 397; } /* = unique id SOAP_TYPE_ns5__diffDocumentVersionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__diffDocumentVersionSpec(): id(NULL), v1(NULL), v2(NULL), soap(NULL) { ns5__diffDocumentVersionSpec::soap_default(NULL); }
	virtual ~ns5__diffDocumentVersionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__diffDocumentResponse
#define SOAP_TYPE_ns5__diffDocumentResponse (398)
/* ns5:diffDocumentResponse */
class SOAP_CMAC ns5__diffDocumentResponse
{
public:
	std::vector<class ns5__dispositionAndText * >chunk;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:dispositionAndText */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 398; } /* = unique id SOAP_TYPE_ns5__diffDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__diffDocumentResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__diffDocumentResponse::soap_default(NULL); }
	virtual ~ns5__diffDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_dismissCalendarItemAlarmRequest
#define SOAP_TYPE__ns5__union_dismissCalendarItemAlarmRequest (1251)
/* xsd:choice */
union _ns5__union_dismissCalendarItemAlarmRequest
{
#define SOAP_UNION__ns5__union_dismissCalendarItemAlarmRequest_appt	(1)
	class ns5__dismissAppointmentAlarm *appt;
#define SOAP_UNION__ns5__union_dismissCalendarItemAlarmRequest_task	(2)
	class ns5__dismissTaskAlarm *task;
};
#endif

#ifndef SOAP_TYPE___ns5__union_dismissCalendarItemAlarmRequest
#define SOAP_TYPE___ns5__union_dismissCalendarItemAlarmRequest (1248)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_dismissCalendarItemAlarmRequest
{
public:
	int __union_dismissCalendarItemAlarmRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_dismissCalendarItemAlarmRequest union_dismissCalendarItemAlarmRequest;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1248; } /* = unique id SOAP_TYPE___ns5__union_dismissCalendarItemAlarmRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_dismissCalendarItemAlarmRequest() { __ns5__union_dismissCalendarItemAlarmRequest::soap_default(NULL); }
	virtual ~__ns5__union_dismissCalendarItemAlarmRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dismissCalendarItemAlarmRequest
#define SOAP_TYPE_ns5__dismissCalendarItemAlarmRequest (400)
/* ns5:dismissCalendarItemAlarmRequest */
class SOAP_CMAC ns5__dismissCalendarItemAlarmRequest
{
public:
	int __size_dismissCalendarItemAlarmRequest;	/* sequence of elements <-union-dismissCalendarItemAlarmRequest> */
	__ns5__union_dismissCalendarItemAlarmRequest *__union_dismissCalendarItemAlarmRequest;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE_ns5__dismissCalendarItemAlarmRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dismissCalendarItemAlarmRequest(): __union_dismissCalendarItemAlarmRequest(NULL), soap(NULL) { ns5__dismissCalendarItemAlarmRequest::soap_default(NULL); }
	virtual ~ns5__dismissCalendarItemAlarmRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dismissAlarm
#define SOAP_TYPE_ns5__dismissAlarm (402)
/* ns5:dismissAlarm */
class SOAP_CMAC ns5__dismissAlarm
{
public:
	std::string id;	/* required attribute */
	LONG64 dismissedAt;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 402; } /* = unique id SOAP_TYPE_ns5__dismissAlarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dismissAlarm(): soap(NULL) { ns5__dismissAlarm::soap_default(NULL); }
	virtual ~ns5__dismissAlarm() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_dismissCalendarItemAlarmResponse
#define SOAP_TYPE__ns5__union_dismissCalendarItemAlarmResponse (1256)
/* xsd:choice */
union _ns5__union_dismissCalendarItemAlarmResponse
{
#define SOAP_UNION__ns5__union_dismissCalendarItemAlarmResponse_appt	(1)
	class ns5__updatedAppointmentAlarmInfo *appt;
#define SOAP_UNION__ns5__union_dismissCalendarItemAlarmResponse_task	(2)
	class ns5__updatedTaskAlarmInfo *task;
};
#endif

#ifndef SOAP_TYPE___ns5__union_dismissCalendarItemAlarmResponse
#define SOAP_TYPE___ns5__union_dismissCalendarItemAlarmResponse (1253)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_dismissCalendarItemAlarmResponse
{
public:
	int __union_dismissCalendarItemAlarmResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_dismissCalendarItemAlarmResponse union_dismissCalendarItemAlarmResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1253; } /* = unique id SOAP_TYPE___ns5__union_dismissCalendarItemAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_dismissCalendarItemAlarmResponse() { __ns5__union_dismissCalendarItemAlarmResponse::soap_default(NULL); }
	virtual ~__ns5__union_dismissCalendarItemAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dismissCalendarItemAlarmResponse
#define SOAP_TYPE_ns5__dismissCalendarItemAlarmResponse (404)
/* ns5:dismissCalendarItemAlarmResponse */
class SOAP_CMAC ns5__dismissCalendarItemAlarmResponse
{
public:
	int __size_dismissCalendarItemAlarmResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-dismissCalendarItemAlarmResponse> */
	__ns5__union_dismissCalendarItemAlarmResponse *__union_dismissCalendarItemAlarmResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE_ns5__dismissCalendarItemAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dismissCalendarItemAlarmResponse(): __union_dismissCalendarItemAlarmResponse(NULL), soap(NULL) { ns5__dismissCalendarItemAlarmResponse::soap_default(NULL); }
	virtual ~ns5__dismissCalendarItemAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__updatedAlarmInfo
#define SOAP_TYPE_ns5__updatedAlarmInfo (406)
/* ns5:updatedAlarmInfo */
class SOAP_CMAC ns5__updatedAlarmInfo
{
public:
	class ns5__alarmDataInfo *alarmData;	/* optional element of type ns5:alarmDataInfo */
	std::string calItemId;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 406; } /* = unique id SOAP_TYPE_ns5__updatedAlarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__updatedAlarmInfo(): alarmData(NULL), soap(NULL) { ns5__updatedAlarmInfo::soap_default(NULL); }
	virtual ~ns5__updatedAlarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__alarmDataInfo
#define SOAP_TYPE_ns5__alarmDataInfo (407)
/* ns5:alarmDataInfo */
class SOAP_CMAC ns5__alarmDataInfo
{
public:
	ns5__alarmInfo *alarm;	/* optional element of type ns5:alarmInfo */
	LONG64 *nextAlarm;	/* optional attribute */
	LONG64 *alarmInstStart;	/* optional attribute */
	int *invId;	/* optional attribute */
	int *compNum;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *loc;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 407; } /* = unique id SOAP_TYPE_ns5__alarmDataInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__alarmDataInfo(): alarm(NULL), nextAlarm(NULL), alarmInstStart(NULL), invId(NULL), compNum(NULL), name(NULL), loc(NULL), soap(NULL) { ns5__alarmDataInfo::soap_default(NULL); }
	virtual ~ns5__alarmDataInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__documentActionRequest
#define SOAP_TYPE_ns5__documentActionRequest (409)
/* ns5:documentActionRequest */
class SOAP_CMAC ns5__documentActionRequest
{
public:
	class ns5__documentActionSelector *action;	/* required element of type ns5:documentActionSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE_ns5__documentActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__documentActionRequest(): action(NULL), soap(NULL) { ns5__documentActionRequest::soap_default(NULL); }
	virtual ~ns5__documentActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__documentActionGrant
#define SOAP_TYPE_ns5__documentActionGrant (411)
/* ns5:documentActionGrant */
class SOAP_CMAC ns5__documentActionGrant
{
public:
	std::string perm;	/* required attribute */
	std::string gt;	/* required attribute */
	LONG64 *expiry;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 411; } /* = unique id SOAP_TYPE_ns5__documentActionGrant */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__documentActionGrant(): expiry(NULL), soap(NULL) { ns5__documentActionGrant::soap_default(NULL); }
	virtual ~ns5__documentActionGrant() { }
};
#endif

#ifndef SOAP_TYPE_ns5__documentActionResponse
#define SOAP_TYPE_ns5__documentActionResponse (412)
/* ns5:documentActionResponse */
class SOAP_CMAC ns5__documentActionResponse
{
public:
	ns5__idAndOperation *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:idAndOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 412; } /* = unique id SOAP_TYPE_ns5__documentActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__documentActionResponse(): action(NULL), soap(NULL) { ns5__documentActionResponse::soap_default(NULL); }
	virtual ~ns5__documentActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__emptyDumpsterRequest
#define SOAP_TYPE_ns5__emptyDumpsterRequest (413)
/* ns5:emptyDumpsterRequest */
class SOAP_CMAC ns5__emptyDumpsterRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 413; } /* = unique id SOAP_TYPE_ns5__emptyDumpsterRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__emptyDumpsterRequest(): soap(NULL) { ns5__emptyDumpsterRequest::soap_default(NULL); }
	virtual ~ns5__emptyDumpsterRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__emptyDumpsterResponse
#define SOAP_TYPE_ns5__emptyDumpsterResponse (414)
/* ns5:emptyDumpsterResponse */
class SOAP_CMAC ns5__emptyDumpsterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE_ns5__emptyDumpsterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__emptyDumpsterResponse(): soap(NULL) { ns5__emptyDumpsterResponse::soap_default(NULL); }
	virtual ~ns5__emptyDumpsterResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__enableSharedReminderRequest
#define SOAP_TYPE_ns5__enableSharedReminderRequest (415)
/* ns5:enableSharedReminderRequest */
class SOAP_CMAC ns5__enableSharedReminderRequest
{
public:
	class ns5__sharedReminderMount *link;	/* required element of type ns5:sharedReminderMount */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE_ns5__enableSharedReminderRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__enableSharedReminderRequest(): link(NULL), soap(NULL) { ns5__enableSharedReminderRequest::soap_default(NULL); }
	virtual ~ns5__enableSharedReminderRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sharedReminderMount
#define SOAP_TYPE_ns5__sharedReminderMount (416)
/* ns5:sharedReminderMount */
class SOAP_CMAC ns5__sharedReminderMount
{
public:
	std::string id;	/* required attribute */
	bool *reminder;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 416; } /* = unique id SOAP_TYPE_ns5__sharedReminderMount */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sharedReminderMount(): reminder(NULL), soap(NULL) { ns5__sharedReminderMount::soap_default(NULL); }
	virtual ~ns5__sharedReminderMount() { }
};
#endif

#ifndef SOAP_TYPE_ns5__enableSharedReminderResponse
#define SOAP_TYPE_ns5__enableSharedReminderResponse (417)
/* ns5:enableSharedReminderResponse */
class SOAP_CMAC ns5__enableSharedReminderResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 417; } /* = unique id SOAP_TYPE_ns5__enableSharedReminderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__enableSharedReminderResponse(): soap(NULL) { ns5__enableSharedReminderResponse::soap_default(NULL); }
	virtual ~ns5__enableSharedReminderResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_expandRecurRequest
#define SOAP_TYPE__ns5__union_expandRecurRequest (1263)
/* xsd:choice */
union _ns5__union_expandRecurRequest
{
#define SOAP_UNION__ns5__union_expandRecurRequest_comp	(1)
	ns5__expandedRecurrenceInvite *comp;
#define SOAP_UNION__ns5__union_expandRecurRequest_except	(2)
	ns5__expandedRecurrenceException *except;
#define SOAP_UNION__ns5__union_expandRecurRequest_cancel	(3)
	ns5__expandedRecurrenceCancel *cancel;
};
#endif

#ifndef SOAP_TYPE___ns5__union_expandRecurRequest
#define SOAP_TYPE___ns5__union_expandRecurRequest (1262)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_expandRecurRequest
{
public:
	int __union_expandRecurRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_expandRecurRequest union_expandRecurRequest;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1262; } /* = unique id SOAP_TYPE___ns5__union_expandRecurRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_expandRecurRequest() { __ns5__union_expandRecurRequest::soap_default(NULL); }
	virtual ~__ns5__union_expandRecurRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__expandRecurRequest
#define SOAP_TYPE_ns5__expandRecurRequest (418)
/* ns5:expandRecurRequest */
class SOAP_CMAC ns5__expandRecurRequest
{
public:
	std::vector<ns5__calTZInfo * >tz;	/* optional element of type ns5:calTZInfo */
	int __size_expandRecurRequest;	/* sequence of elements <-union-expandRecurRequest> */
	__ns5__union_expandRecurRequest *__union_expandRecurRequest;
	LONG64 s;	/* required attribute */
	LONG64 e;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 418; } /* = unique id SOAP_TYPE_ns5__expandRecurRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__expandRecurRequest(): __union_expandRecurRequest(NULL), soap(NULL) { ns5__expandRecurRequest::soap_default(NULL); }
	virtual ~ns5__expandRecurRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__expandRecurResponse
#define SOAP_TYPE_ns5__expandRecurResponse (419)
/* ns5:expandRecurResponse */
class SOAP_CMAC ns5__expandRecurResponse
{
public:
	std::vector<ns5__expandedRecurrenceInstance * >inst;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:expandedRecurrenceInstance */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE_ns5__expandRecurResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__expandRecurResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__expandRecurResponse::soap_default(NULL); }
	virtual ~ns5__expandRecurResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__exportContactsRequest
#define SOAP_TYPE_ns5__exportContactsRequest (420)
/* ns5:exportContactsRequest */
class SOAP_CMAC ns5__exportContactsRequest
{
public:
	std::string ct;	/* required attribute */
	std::string *l;	/* optional attribute */
	std::string *csvfmt;	/* optional attribute */
	std::string *csvlocale;	/* optional attribute */
	std::string *csvsep;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE_ns5__exportContactsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__exportContactsRequest(): l(NULL), csvfmt(NULL), csvlocale(NULL), csvsep(NULL), soap(NULL) { ns5__exportContactsRequest::soap_default(NULL); }
	virtual ~ns5__exportContactsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__exportContactsResponse
#define SOAP_TYPE_ns5__exportContactsResponse (421)
/* ns5:exportContactsResponse */
class SOAP_CMAC ns5__exportContactsResponse
{
public:
	std::string content;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 421; } /* = unique id SOAP_TYPE_ns5__exportContactsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__exportContactsResponse(): soap(NULL) { ns5__exportContactsResponse::soap_default(NULL); }
	virtual ~ns5__exportContactsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__folderActionRequest
#define SOAP_TYPE_ns5__folderActionRequest (422)
/* ns5:folderActionRequest */
class SOAP_CMAC ns5__folderActionRequest
{
public:
	class ns5__folderActionSelector *action;	/* required element of type ns5:folderActionSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 422; } /* = unique id SOAP_TYPE_ns5__folderActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__folderActionRequest(): action(NULL), soap(NULL) { ns5__folderActionRequest::soap_default(NULL); }
	virtual ~ns5__folderActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__folderActionResponse
#define SOAP_TYPE_ns5__folderActionResponse (423)
/* ns5:folderActionResponse */
class SOAP_CMAC ns5__folderActionResponse
{
public:
	ns5__folderActionResult *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:folderActionResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 423; } /* = unique id SOAP_TYPE_ns5__folderActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__folderActionResponse(): action(NULL), soap(NULL) { ns5__folderActionResponse::soap_default(NULL); }
	virtual ~ns5__folderActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__forwardAppointmentInviteRequest
#define SOAP_TYPE_ns5__forwardAppointmentInviteRequest (424)
/* ns5:forwardAppointmentInviteRequest */
class SOAP_CMAC ns5__forwardAppointmentInviteRequest
{
public:
	ns5__msg *m;	/* optional element of type ns5:msg */
	std::string *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE_ns5__forwardAppointmentInviteRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__forwardAppointmentInviteRequest(): m(NULL), id(NULL), soap(NULL) { ns5__forwardAppointmentInviteRequest::soap_default(NULL); }
	virtual ~ns5__forwardAppointmentInviteRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__forwardAppointmentInviteResponse
#define SOAP_TYPE_ns5__forwardAppointmentInviteResponse (425)
/* ns5:forwardAppointmentInviteResponse */
class SOAP_CMAC ns5__forwardAppointmentInviteResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE_ns5__forwardAppointmentInviteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__forwardAppointmentInviteResponse(): soap(NULL) { ns5__forwardAppointmentInviteResponse::soap_default(NULL); }
	virtual ~ns5__forwardAppointmentInviteResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__forwardAppointmentRequest
#define SOAP_TYPE_ns5__forwardAppointmentRequest (426)
/* ns5:forwardAppointmentRequest */
class SOAP_CMAC ns5__forwardAppointmentRequest
{
public:
	ns5__dtTimeInfo *exceptId;	/* optional element of type ns5:dtTimeInfo */
	ns5__calTZInfo *tz;	/* optional element of type ns5:calTZInfo */
	ns5__msg *m;	/* optional element of type ns5:msg */
	std::string *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 426; } /* = unique id SOAP_TYPE_ns5__forwardAppointmentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__forwardAppointmentRequest(): exceptId(NULL), tz(NULL), m(NULL), id(NULL), soap(NULL) { ns5__forwardAppointmentRequest::soap_default(NULL); }
	virtual ~ns5__forwardAppointmentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__forwardAppointmentResponse
#define SOAP_TYPE_ns5__forwardAppointmentResponse (427)
/* ns5:forwardAppointmentResponse */
class SOAP_CMAC ns5__forwardAppointmentResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 427; } /* = unique id SOAP_TYPE_ns5__forwardAppointmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__forwardAppointmentResponse(): soap(NULL) { ns5__forwardAppointmentResponse::soap_default(NULL); }
	virtual ~ns5__forwardAppointmentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__generateUUIDRequest
#define SOAP_TYPE_ns5__generateUUIDRequest (428)
/* ns5:generateUUIDRequest */
class SOAP_CMAC ns5__generateUUIDRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 428; } /* = unique id SOAP_TYPE_ns5__generateUUIDRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__generateUUIDRequest(): soap(NULL) { ns5__generateUUIDRequest::soap_default(NULL); }
	virtual ~ns5__generateUUIDRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getActivityStreamRequest
#define SOAP_TYPE_ns5__getActivityStreamRequest (429)
/* ns5:getActivityStreamRequest */
class SOAP_CMAC ns5__getActivityStreamRequest
{
public:
	class ns5__activityFilter *filter;	/* optional element of type ns5:activityFilter */
	std::string id;	/* required attribute */
	int *offset;	/* optional attribute */
	int *limit;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_ns5__getActivityStreamRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getActivityStreamRequest(): filter(NULL), offset(NULL), limit(NULL), soap(NULL) { ns5__getActivityStreamRequest::soap_default(NULL); }
	virtual ~ns5__getActivityStreamRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__activityFilter
#define SOAP_TYPE_ns5__activityFilter (430)
/* ns5:activityFilter */
class SOAP_CMAC ns5__activityFilter
{
public:
	std::string *account;	/* optional attribute */
	std::string *op;	/* optional attribute */
	std::string *session;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_ns5__activityFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__activityFilter(): account(NULL), op(NULL), session(NULL), soap(NULL) { ns5__activityFilter::soap_default(NULL); }
	virtual ~ns5__activityFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getActivityStreamResponse
#define SOAP_TYPE_ns5__getActivityStreamResponse (431)
/* ns5:getActivityStreamResponse */
class SOAP_CMAC ns5__getActivityStreamResponse
{
public:
	std::vector<ns3__namedElement * >op;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:namedElement */
	std::vector<class ns5__idEmailName * >user;	/* optional element of type ns5:idEmailName */
	std::vector<class ns5__activityInfo * >a;	/* optional element of type ns5:activityInfo */
	std::string *session;	/* optional attribute */
	std::string *count;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 431; } /* = unique id SOAP_TYPE_ns5__getActivityStreamResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getActivityStreamResponse(): session(NULL), count(NULL), soap(NULL) { ns5__getActivityStreamResponse::soap_default(NULL); }
	virtual ~ns5__getActivityStreamResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__idEmailName
#define SOAP_TYPE_ns5__idEmailName (432)
/* ns5:idEmailName */
class SOAP_CMAC ns5__idEmailName
{
public:
	std::string *id;	/* optional attribute */
	std::string *email;	/* optional attribute */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 432; } /* = unique id SOAP_TYPE_ns5__idEmailName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__idEmailName(): id(NULL), email(NULL), name(NULL), soap(NULL) { ns5__idEmailName::soap_default(NULL); }
	virtual ~ns5__idEmailName() { }
};
#endif

#ifndef SOAP_TYPE_ns5__activityInfo
#define SOAP_TYPE_ns5__activityInfo (433)
/* ns5:activityInfo */
class SOAP_CMAC ns5__activityInfo
{
public:
	std::vector<ns3__namedValue * >arg;	/* optional element of type ns3:namedValue */
	std::string op;	/* required attribute */
	LONG64 ts;	/* required attribute */
	std::string itemId;	/* required attribute */
	int *ver;	/* optional attribute */
	std::string *ua;	/* optional attribute */
	std::string *email;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 433; } /* = unique id SOAP_TYPE_ns5__activityInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__activityInfo(): ver(NULL), ua(NULL), email(NULL), soap(NULL) { ns5__activityInfo::soap_default(NULL); }
	virtual ~ns5__activityInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getAllDevicesRequest
#define SOAP_TYPE_ns5__getAllDevicesRequest (434)
/* ns5:getAllDevicesRequest */
class SOAP_CMAC ns5__getAllDevicesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_ns5__getAllDevicesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getAllDevicesRequest(): soap(NULL) { ns5__getAllDevicesRequest::soap_default(NULL); }
	virtual ~ns5__getAllDevicesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getAllDevicesResponse
#define SOAP_TYPE_ns5__getAllDevicesResponse (435)
/* ns5:getAllDevicesResponse */
class SOAP_CMAC ns5__getAllDevicesResponse
{
public:
	std::vector<ns5__deviceInfo * >device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:deviceInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE_ns5__getAllDevicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getAllDevicesResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getAllDevicesResponse::soap_default(NULL); }
	virtual ~ns5__getAllDevicesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getCalendarItemRequestBase
#define SOAP_TYPE_ns5__getCalendarItemRequestBase (437)
/* ns5:getCalendarItemRequestBase */
class SOAP_CMAC ns5__getCalendarItemRequestBase
{
public:
	bool *sync;	/* optional attribute */
	bool *includeContent;	/* optional attribute */
	bool *includeInvites;	/* optional attribute */
	std::string *uid;	/* optional attribute */
	std::string *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 437; } /* = unique id SOAP_TYPE_ns5__getCalendarItemRequestBase */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getCalendarItemRequestBase(): sync(NULL), includeContent(NULL), includeInvites(NULL), uid(NULL), id(NULL), soap(NULL) { ns5__getCalendarItemRequestBase::soap_default(NULL); }
	virtual ~ns5__getCalendarItemRequestBase() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getAppointmentResponse
#define SOAP_TYPE__ns5__union_getAppointmentResponse (1277)
/* xsd:choice */
union _ns5__union_getAppointmentResponse
{
#define SOAP_UNION__ns5__union_getAppointmentResponse_appt	(1)
	class ns5__calendarItemInfo *appt;
#define SOAP_UNION__ns5__union_getAppointmentResponse_task	(2)
	class ns5__taskItemInfo *task;
};
#endif

#ifndef SOAP_TYPE_ns5__getAppointmentResponse
#define SOAP_TYPE_ns5__getAppointmentResponse (438)
/* ns5:getAppointmentResponse */
class SOAP_CMAC ns5__getAppointmentResponse
{
public:
	int __union_getAppointmentResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* union discriminant (of union defined below) */
	union _ns5__union_getAppointmentResponse union_getAppointmentResponse;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 438; } /* = unique id SOAP_TYPE_ns5__getAppointmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getAppointmentResponse(): soap(NULL) { ns5__getAppointmentResponse::soap_default(NULL); }
	virtual ~ns5__getAppointmentResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__calendarItemInfo_replies
#define SOAP_TYPE__ns5__calendarItemInfo_replies (1280)
/* ns5:calendarItemInfo-replies */
class SOAP_CMAC _ns5__calendarItemInfo_replies
{
public:
	std::vector<ns5__calendarReply * >reply;	/* optional element of type ns5:calendarReply */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1280; } /* = unique id SOAP_TYPE__ns5__calendarItemInfo_replies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__calendarItemInfo_replies(): unusedCodeGenHelper(NULL) { _ns5__calendarItemInfo_replies::soap_default(NULL); }
	virtual ~_ns5__calendarItemInfo_replies() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calendarItemInfo
#define SOAP_TYPE_ns5__calendarItemInfo (439)
/* ns5:calendarItemInfo */
class SOAP_CMAC ns5__calendarItemInfo
{
public:
	std::vector<class ns5__invitation * >inv;	/* optional element of type ns5:invitation */
	_ns5__calendarItemInfo_replies *replies;	/* optional element of type ns5:calendarItemInfo-replies */
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	std::string *uid;	/* optional attribute */
	std::string *id;	/* optional attribute */
	int *rev;	/* optional attribute */
	LONG64 *s;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	std::string *l;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *ms;	/* optional attribute */
	LONG64 *nextAlarm;	/* optional attribute */
	bool *orphan;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_ns5__calendarItemInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calendarItemInfo(): replies(NULL), f(NULL), t(NULL), tn(NULL), uid(NULL), id(NULL), rev(NULL), s(NULL), d(NULL), l(NULL), md(NULL), ms(NULL), nextAlarm(NULL), orphan(NULL), soap(NULL) { ns5__calendarItemInfo::soap_default(NULL); }
	virtual ~ns5__calendarItemInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_invitation
#define SOAP_TYPE__ns5__union_invitation (1285)
/* xsd:choice */
union _ns5__union_invitation
{
#define SOAP_UNION__ns5__union_invitation_mp	(1)
	ns5__partInfo *mp;
#define SOAP_UNION__ns5__union_invitation_shr	(2)
	class ns5__shareNotification *shr;
#define SOAP_UNION__ns5__union_invitation_dlSubs	(3)
	class ns5__dlSubscriptionNotification *dlSubs;
};
#endif

#ifndef SOAP_TYPE___ns5__union_invitation
#define SOAP_TYPE___ns5__union_invitation (1282)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_invitation
{
public:
	int __union_invitation;	/* union discriminant (of union defined below) */
	union _ns5__union_invitation union_invitation;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1282; } /* = unique id SOAP_TYPE___ns5__union_invitation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_invitation() { __ns5__union_invitation::soap_default(NULL); }
	virtual ~__ns5__union_invitation() { }
};
#endif

#ifndef SOAP_TYPE_ns5__invitation
#define SOAP_TYPE_ns5__invitation (440)
/* ns5:invitation */
class SOAP_CMAC ns5__invitation
{
public:
	std::vector<ns5__calTZInfo * >tz;	/* optional element of type ns5:calTZInfo */
	ns5__inviteComponent *comp;	/* optional element of type ns5:inviteComponent */
	int __size_invitation;	/* sequence of elements <-union-invitation> */
	__ns5__union_invitation *__union_invitation;
	std::string type;	/* required attribute */
	int seq;	/* required attribute */
	int id;	/* required attribute */
	int compNum;	/* required attribute */
	std::string *recurId;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_ns5__invitation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__invitation(): comp(NULL), __union_invitation(NULL), recurId(NULL), soap(NULL) { ns5__invitation::soap_default(NULL); }
	virtual ~ns5__invitation() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getApptSummariesRequest
#define SOAP_TYPE_ns5__getApptSummariesRequest (442)
/* ns5:getApptSummariesRequest */
class SOAP_CMAC ns5__getApptSummariesRequest
{
public:
	LONG64 s;	/* required attribute */
	LONG64 e;	/* required attribute */
	std::string *l;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 442; } /* = unique id SOAP_TYPE_ns5__getApptSummariesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getApptSummariesRequest(): l(NULL), soap(NULL) { ns5__getApptSummariesRequest::soap_default(NULL); }
	virtual ~ns5__getApptSummariesRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getApptSummariesResponse
#define SOAP_TYPE__ns5__union_getApptSummariesResponse (1290)
/* xsd:choice */
union _ns5__union_getApptSummariesResponse
{
#define SOAP_UNION__ns5__union_getApptSummariesResponse_appt	(1)
	class ns5__legacyAppointmentData *appt;
#define SOAP_UNION__ns5__union_getApptSummariesResponse_task	(2)
	class ns5__legacyTaskData *task;
};
#endif

#ifndef SOAP_TYPE___ns5__union_getApptSummariesResponse
#define SOAP_TYPE___ns5__union_getApptSummariesResponse (1287)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_getApptSummariesResponse
{
public:
	int __union_getApptSummariesResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_getApptSummariesResponse union_getApptSummariesResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1287; } /* = unique id SOAP_TYPE___ns5__union_getApptSummariesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_getApptSummariesResponse() { __ns5__union_getApptSummariesResponse::soap_default(NULL); }
	virtual ~__ns5__union_getApptSummariesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getApptSummariesResponse
#define SOAP_TYPE_ns5__getApptSummariesResponse (443)
/* ns5:getApptSummariesResponse */
class SOAP_CMAC ns5__getApptSummariesResponse
{
public:
	int __size_getApptSummariesResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-getApptSummariesResponse> */
	__ns5__union_getApptSummariesResponse *__union_getApptSummariesResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 443; } /* = unique id SOAP_TYPE_ns5__getApptSummariesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getApptSummariesResponse(): __union_getApptSummariesResponse(NULL), soap(NULL) { ns5__getApptSummariesResponse::soap_default(NULL); }
	virtual ~ns5__getApptSummariesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__commonInstanceDataAttrs
#define SOAP_TYPE_ns5__commonInstanceDataAttrs (448)
/* ns5:commonInstanceDataAttrs */
class SOAP_CMAC ns5__commonInstanceDataAttrs
{
public:
	std::string *ptst;	/* optional attribute */
	std::string *ridZ;	/* optional attribute */
	LONG64 *tzo;	/* optional attribute */
	std::string *fba;	/* optional attribute */
	std::string *percentComplete;	/* optional attribute */
	bool *recur;	/* optional attribute */
	bool *hasEx;	/* optional attribute */
	std::string *priority;	/* optional attribute */
	std::string *fb;	/* optional attribute */
	std::string *transp;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *loc;	/* optional attribute */
	bool *otherAtt;	/* optional attribute */
	bool *alarm;	/* optional attribute */
	bool *isOrg;	/* optional attribute */
	std::string *invId;	/* optional attribute */
	int *compNum;	/* optional attribute */
	std::string *status;	/* optional attribute */
	std::string *class_;	/* optional attribute */
	bool *allDay;	/* optional attribute */
	bool *draft;	/* optional attribute */
	bool *neverSent;	/* optional attribute */
	LONG64 *dueDate;	/* optional attribute */
	int *tzoDue;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 448; } /* = unique id SOAP_TYPE_ns5__commonInstanceDataAttrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__commonInstanceDataAttrs(): ptst(NULL), ridZ(NULL), tzo(NULL), fba(NULL), percentComplete(NULL), recur(NULL), hasEx(NULL), priority(NULL), fb(NULL), transp(NULL), name(NULL), loc(NULL), otherAtt(NULL), alarm(NULL), isOrg(NULL), invId(NULL), compNum(NULL), status(NULL), class_(NULL), allDay(NULL), draft(NULL), neverSent(NULL), dueDate(NULL), tzoDue(NULL), soap(NULL) { ns5__commonInstanceDataAttrs::soap_default(NULL); }
	virtual ~ns5__commonInstanceDataAttrs() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getCalendarItemSummariesRequest
#define SOAP_TYPE_ns5__getCalendarItemSummariesRequest (452)
/* ns5:getCalendarItemSummariesRequest */
class SOAP_CMAC ns5__getCalendarItemSummariesRequest
{
public:
	LONG64 s;	/* required attribute */
	LONG64 e;	/* required attribute */
	std::string *l;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 452; } /* = unique id SOAP_TYPE_ns5__getCalendarItemSummariesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getCalendarItemSummariesRequest(): l(NULL), soap(NULL) { ns5__getCalendarItemSummariesRequest::soap_default(NULL); }
	virtual ~ns5__getCalendarItemSummariesRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getCalendarItemSummariesResponse
#define SOAP_TYPE__ns5__union_getCalendarItemSummariesResponse (1293)
/* xsd:choice */
union _ns5__union_getCalendarItemSummariesResponse
{
#define SOAP_UNION__ns5__union_getCalendarItemSummariesResponse_appt	(1)
	ns5__legacyAppointmentData *appt;
#define SOAP_UNION__ns5__union_getCalendarItemSummariesResponse_task	(2)
	ns5__legacyTaskData *task;
};
#endif

#ifndef SOAP_TYPE___ns5__union_getCalendarItemSummariesResponse
#define SOAP_TYPE___ns5__union_getCalendarItemSummariesResponse (1292)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_getCalendarItemSummariesResponse
{
public:
	int __union_getCalendarItemSummariesResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_getCalendarItemSummariesResponse union_getCalendarItemSummariesResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1292; } /* = unique id SOAP_TYPE___ns5__union_getCalendarItemSummariesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_getCalendarItemSummariesResponse() { __ns5__union_getCalendarItemSummariesResponse::soap_default(NULL); }
	virtual ~__ns5__union_getCalendarItemSummariesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getCalendarItemSummariesResponse
#define SOAP_TYPE_ns5__getCalendarItemSummariesResponse (453)
/* ns5:getCalendarItemSummariesResponse */
class SOAP_CMAC ns5__getCalendarItemSummariesResponse
{
public:
	int __size_getCalendarItemSummariesResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-getCalendarItemSummariesResponse> */
	__ns5__union_getCalendarItemSummariesResponse *__union_getCalendarItemSummariesResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 453; } /* = unique id SOAP_TYPE_ns5__getCalendarItemSummariesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getCalendarItemSummariesResponse(): __union_getCalendarItemSummariesResponse(NULL), soap(NULL) { ns5__getCalendarItemSummariesResponse::soap_default(NULL); }
	virtual ~ns5__getCalendarItemSummariesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getCommentsRequest
#define SOAP_TYPE_ns5__getCommentsRequest (454)
/* ns5:getCommentsRequest */
class SOAP_CMAC ns5__getCommentsRequest
{
public:
	class ns5__parentId *comment;	/* required element of type ns5:parentId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE_ns5__getCommentsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getCommentsRequest(): comment(NULL), soap(NULL) { ns5__getCommentsRequest::soap_default(NULL); }
	virtual ~ns5__getCommentsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__parentId
#define SOAP_TYPE_ns5__parentId (455)
/* ns5:parentId */
class SOAP_CMAC ns5__parentId
{
public:
	std::string parentId;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE_ns5__parentId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__parentId(): soap(NULL) { ns5__parentId::soap_default(NULL); }
	virtual ~ns5__parentId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getCommentsResponse
#define SOAP_TYPE_ns5__getCommentsResponse (456)
/* ns5:getCommentsResponse */
class SOAP_CMAC ns5__getCommentsResponse
{
public:
	std::vector<ns5__idEmailName * >user;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:idEmailName */
	std::vector<class ns5__commentInfo * >comment;	/* optional element of type ns5:commentInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 456; } /* = unique id SOAP_TYPE_ns5__getCommentsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getCommentsResponse(): soap(NULL) { ns5__getCommentsResponse::soap_default(NULL); }
	virtual ~ns5__getCommentsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__commentInfo
#define SOAP_TYPE_ns5__commentInfo (457)
/* ns5:commentInfo */
class SOAP_CMAC ns5__commentInfo
{
public:
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	std::string *parentId;	/* optional attribute */
	std::string *id;	/* optional attribute */
	std::string *uuid;	/* optional attribute */
	std::string *email;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	char *color;	/* optional attribute */
	std::string *rgb;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	char *__mixed;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 457; } /* = unique id SOAP_TYPE_ns5__commentInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__commentInfo(): parentId(NULL), id(NULL), uuid(NULL), email(NULL), f(NULL), t(NULL), tn(NULL), color(NULL), rgb(NULL), d(NULL), __mixed(NULL), soap(NULL) { ns5__commentInfo::soap_default(NULL); }
	virtual ~ns5__commentInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getContactsRequest
#define SOAP_TYPE_ns5__getContactsRequest (458)
/* ns5:getContactsRequest */
class SOAP_CMAC ns5__getContactsRequest
{
public:
	std::vector<ns3__attributeName * >a;	/* optional element of type ns3:attributeName */
	std::vector<ns3__attributeName * >ma;	/* optional element of type ns3:attributeName */
	std::vector<ns3__id * >cn;	/* optional element of type ns3:id */
	bool *sync;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *sortBy;	/* optional attribute */
	bool *derefGroupMember;	/* optional attribute */
	bool *returnHiddenAttrs;	/* optional attribute */
	LONG64 *maxMembers;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 458; } /* = unique id SOAP_TYPE_ns5__getContactsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getContactsRequest(): sync(NULL), l(NULL), sortBy(NULL), derefGroupMember(NULL), returnHiddenAttrs(NULL), maxMembers(NULL), soap(NULL) { ns5__getContactsRequest::soap_default(NULL); }
	virtual ~ns5__getContactsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getContactsResponse
#define SOAP_TYPE_ns5__getContactsResponse (459)
/* ns5:getContactsResponse */
class SOAP_CMAC ns5__getContactsResponse
{
public:
	std::vector<ns5__contactInfo * >cn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:contactInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE_ns5__getContactsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getContactsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getContactsResponse::soap_default(NULL); }
	virtual ~ns5__getContactsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getConvRequest
#define SOAP_TYPE_ns5__getConvRequest (460)
/* ns5:getConvRequest */
class SOAP_CMAC ns5__getConvRequest
{
public:
	class ns5__conversationSpec *c;	/* required element of type ns5:conversationSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_ns5__getConvRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getConvRequest(): c(NULL), soap(NULL) { ns5__getConvRequest::soap_default(NULL); }
	virtual ~ns5__getConvRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__conversationSpec
#define SOAP_TYPE_ns5__conversationSpec (461)
/* ns5:conversationSpec */
class SOAP_CMAC ns5__conversationSpec
{
public:
	std::vector<ns3__attributeName * >header;	/* optional element of type ns3:attributeName */
	std::string id;	/* required attribute */
	std::string *fetch;	/* optional attribute */
	bool *html;	/* optional attribute */
	int *max_;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 461; } /* = unique id SOAP_TYPE_ns5__conversationSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__conversationSpec(): fetch(NULL), html(NULL), max_(NULL), soap(NULL) { ns5__conversationSpec::soap_default(NULL); }
	virtual ~ns5__conversationSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getConvResponse
#define SOAP_TYPE_ns5__getConvResponse (462)
/* ns5:getConvResponse */
class SOAP_CMAC ns5__getConvResponse
{
public:
	class ns5__conversationInfo *c;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:conversationInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 462; } /* = unique id SOAP_TYPE_ns5__getConvResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getConvResponse(): c(NULL), soap(NULL) { ns5__getConvResponse::soap_default(NULL); }
	virtual ~ns5__getConvResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_conversationInfo
#define SOAP_TYPE__ns5__union_conversationInfo (1307)
/* xsd:choice */
union _ns5__union_conversationInfo
{
#define SOAP_UNION__ns5__union_conversationInfo_chat	(1)
	class ns5__chatMessageInfo *chat;
#define SOAP_UNION__ns5__union_conversationInfo_m	(2)
	class ns5__messageInfo *m;
};
#endif

#ifndef SOAP_TYPE___ns5__union_conversationInfo
#define SOAP_TYPE___ns5__union_conversationInfo (1304)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_conversationInfo
{
public:
	int __union_conversationInfo;	/* union discriminant (of union defined below) */
	union _ns5__union_conversationInfo union_conversationInfo;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1304; } /* = unique id SOAP_TYPE___ns5__union_conversationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_conversationInfo() { __ns5__union_conversationInfo::soap_default(NULL); }
	virtual ~__ns5__union_conversationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__conversationInfo
#define SOAP_TYPE_ns5__conversationInfo (463)
/* ns5:conversationInfo */
class SOAP_CMAC ns5__conversationInfo
{
public:
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	std::string *su;	/* optional element of type xsd:string */
	int __size_conversationInfo;	/* sequence of elements <-union-conversationInfo> */
	__ns5__union_conversationInfo *__union_conversationInfo;
	std::string *id;	/* optional attribute */
	int *n;	/* optional attribute */
	int *total;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 463; } /* = unique id SOAP_TYPE_ns5__conversationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__conversationInfo(): su(NULL), __union_conversationInfo(NULL), id(NULL), n(NULL), total(NULL), f(NULL), t(NULL), tn(NULL), soap(NULL) { ns5__conversationInfo::soap_default(NULL); }
	virtual ~ns5__conversationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getCustomMetadataRequest
#define SOAP_TYPE_ns5__getCustomMetadataRequest (466)
/* ns5:getCustomMetadataRequest */
class SOAP_CMAC ns5__getCustomMetadataRequest
{
public:
	ns3__sectionAttr *meta;	/* optional element of type ns3:sectionAttr */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 466; } /* = unique id SOAP_TYPE_ns5__getCustomMetadataRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getCustomMetadataRequest(): meta(NULL), soap(NULL) { ns5__getCustomMetadataRequest::soap_default(NULL); }
	virtual ~ns5__getCustomMetadataRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getCustomMetadataResponse
#define SOAP_TYPE_ns5__getCustomMetadataResponse (467)
/* ns5:getCustomMetadataResponse */
class SOAP_CMAC ns5__getCustomMetadataResponse
{
public:
	ns5__mailCustomMetadata *meta;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:mailCustomMetadata */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 467; } /* = unique id SOAP_TYPE_ns5__getCustomMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getCustomMetadataResponse(): meta(NULL), soap(NULL) { ns5__getCustomMetadataResponse::soap_default(NULL); }
	virtual ~ns5__getCustomMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getDataSourcesRequest
#define SOAP_TYPE_ns5__getDataSourcesRequest (468)
/* ns5:getDataSourcesRequest */
class SOAP_CMAC ns5__getDataSourcesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 468; } /* = unique id SOAP_TYPE_ns5__getDataSourcesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getDataSourcesRequest(): soap(NULL) { ns5__getDataSourcesRequest::soap_default(NULL); }
	virtual ~ns5__getDataSourcesRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getDataSourcesResponse
#define SOAP_TYPE__ns5__union_getDataSourcesResponse (1311)
/* xsd:choice */
union _ns5__union_getDataSourcesResponse
{
#define SOAP_UNION__ns5__union_getDataSourcesResponse_imap	(1)
	ns5__mailImapDataSource *imap;
#define SOAP_UNION__ns5__union_getDataSourcesResponse_pop3	(2)
	ns5__mailPop3DataSource *pop3;
#define SOAP_UNION__ns5__union_getDataSourcesResponse_caldav	(3)
	ns5__mailCaldavDataSource *caldav;
#define SOAP_UNION__ns5__union_getDataSourcesResponse_yab	(4)
	ns5__mailYabDataSource *yab;
#define SOAP_UNION__ns5__union_getDataSourcesResponse_rss	(5)
	ns5__mailRssDataSource *rss;
#define SOAP_UNION__ns5__union_getDataSourcesResponse_gal	(6)
	ns5__mailGalDataSource *gal;
#define SOAP_UNION__ns5__union_getDataSourcesResponse_cal	(7)
	ns5__mailCalDataSource *cal;
#define SOAP_UNION__ns5__union_getDataSourcesResponse_unknown	(8)
	ns5__mailUnknownDataSource *unknown;
};
#endif

#ifndef SOAP_TYPE___ns5__union_getDataSourcesResponse
#define SOAP_TYPE___ns5__union_getDataSourcesResponse (1310)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_getDataSourcesResponse
{
public:
	int __union_getDataSourcesResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_getDataSourcesResponse union_getDataSourcesResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1310; } /* = unique id SOAP_TYPE___ns5__union_getDataSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_getDataSourcesResponse() { __ns5__union_getDataSourcesResponse::soap_default(NULL); }
	virtual ~__ns5__union_getDataSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getDataSourcesResponse
#define SOAP_TYPE_ns5__getDataSourcesResponse (469)
/* ns5:getDataSourcesResponse */
class SOAP_CMAC ns5__getDataSourcesResponse
{
public:
	int __size_getDataSourcesResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-getDataSourcesResponse> */
	__ns5__union_getDataSourcesResponse *__union_getDataSourcesResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE_ns5__getDataSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getDataSourcesResponse(): __union_getDataSourcesResponse(NULL), soap(NULL) { ns5__getDataSourcesResponse::soap_default(NULL); }
	virtual ~ns5__getDataSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getDocumentShareURLRequest
#define SOAP_TYPE_ns5__getDocumentShareURLRequest (470)
/* ns5:getDocumentShareURLRequest */
class SOAP_CMAC ns5__getDocumentShareURLRequest
{
public:
	class ns5__itemSpec *item;	/* optional element of type ns5:itemSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE_ns5__getDocumentShareURLRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getDocumentShareURLRequest(): item(NULL), soap(NULL) { ns5__getDocumentShareURLRequest::soap_default(NULL); }
	virtual ~ns5__getDocumentShareURLRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__itemSpec
#define SOAP_TYPE_ns5__itemSpec (471)
/* ns5:itemSpec */
class SOAP_CMAC ns5__itemSpec
{
public:
	std::string *id;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *path;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 471; } /* = unique id SOAP_TYPE_ns5__itemSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__itemSpec(): id(NULL), l(NULL), name(NULL), path(NULL), soap(NULL) { ns5__itemSpec::soap_default(NULL); }
	virtual ~ns5__itemSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getEffectiveFolderPermsRequest
#define SOAP_TYPE_ns5__getEffectiveFolderPermsRequest (472)
/* ns5:getEffectiveFolderPermsRequest */
class SOAP_CMAC ns5__getEffectiveFolderPermsRequest
{
public:
	class ns5__folderSpec *folder;	/* required element of type ns5:folderSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 472; } /* = unique id SOAP_TYPE_ns5__getEffectiveFolderPermsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getEffectiveFolderPermsRequest(): folder(NULL), soap(NULL) { ns5__getEffectiveFolderPermsRequest::soap_default(NULL); }
	virtual ~ns5__getEffectiveFolderPermsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__folderSpec
#define SOAP_TYPE_ns5__folderSpec (473)
/* ns5:folderSpec */
class SOAP_CMAC ns5__folderSpec
{
public:
	std::string l;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 473; } /* = unique id SOAP_TYPE_ns5__folderSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__folderSpec(): soap(NULL) { ns5__folderSpec::soap_default(NULL); }
	virtual ~ns5__folderSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getEffectiveFolderPermsResponse
#define SOAP_TYPE_ns5__getEffectiveFolderPermsResponse (474)
/* ns5:getEffectiveFolderPermsResponse */
class SOAP_CMAC ns5__getEffectiveFolderPermsResponse
{
public:
	class ns5__rights *folder;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:rights */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE_ns5__getEffectiveFolderPermsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getEffectiveFolderPermsResponse(): folder(NULL), soap(NULL) { ns5__getEffectiveFolderPermsResponse::soap_default(NULL); }
	virtual ~ns5__getEffectiveFolderPermsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rights
#define SOAP_TYPE_ns5__rights (475)
/* ns5:rights */
class SOAP_CMAC ns5__rights
{
public:
	std::string perm;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE_ns5__rights */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rights(): soap(NULL) { ns5__rights::soap_default(NULL); }
	virtual ~ns5__rights() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getFilterRulesRequest
#define SOAP_TYPE_ns5__getFilterRulesRequest (476)
/* ns5:getFilterRulesRequest */
class SOAP_CMAC ns5__getFilterRulesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 476; } /* = unique id SOAP_TYPE_ns5__getFilterRulesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getFilterRulesRequest(): soap(NULL) { ns5__getFilterRulesRequest::soap_default(NULL); }
	virtual ~ns5__getFilterRulesRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__getFilterRulesResponse_filterRules
#define SOAP_TYPE__ns5__getFilterRulesResponse_filterRules (1316)
/* ns5:getFilterRulesResponse-filterRules */
class SOAP_CMAC _ns5__getFilterRulesResponse_filterRules
{
public:
	std::vector<class ns5__filterRule * >filterRule;	/* optional element of type ns5:filterRule */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1316; } /* = unique id SOAP_TYPE__ns5__getFilterRulesResponse_filterRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__getFilterRulesResponse_filterRules(): unusedCodeGenHelper(NULL) { _ns5__getFilterRulesResponse_filterRules::soap_default(NULL); }
	virtual ~_ns5__getFilterRulesResponse_filterRules() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getFilterRulesResponse
#define SOAP_TYPE_ns5__getFilterRulesResponse (477)
/* ns5:getFilterRulesResponse */
class SOAP_CMAC ns5__getFilterRulesResponse
{
public:
	_ns5__getFilterRulesResponse_filterRules filterRules;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:getFilterRulesResponse-filterRules */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 477; } /* = unique id SOAP_TYPE_ns5__getFilterRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getFilterRulesResponse(): soap(NULL) { ns5__getFilterRulesResponse::soap_default(NULL); }
	virtual ~ns5__getFilterRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_filterRule_filterActions
#define SOAP_TYPE__ns5__union_filterRule_filterActions (1331)
/* xsd:choice */
union _ns5__union_filterRule_filterActions
{
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionKeep	(1)
	class ns5__keepAction *actionKeep;
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionDiscard	(2)
	class ns5__discardAction *actionDiscard;
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionFileInto	(3)
	class ns5__fileIntoAction *actionFileInto;
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionFlag	(4)
	class ns5__flagAction *actionFlag;
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionTag	(5)
	class ns5__tagAction *actionTag;
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionRedirect	(6)
	class ns5__redirectAction *actionRedirect;
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionReply	(7)
	class ns5__replyAction *actionReply;
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionNotify	(8)
	class ns5__notifyAction *actionNotify;
#define SOAP_UNION__ns5__union_filterRule_filterActions_actionStop	(9)
	class ns5__stopAction *actionStop;
};
#endif

#ifndef SOAP_TYPE___ns5__union_filterRule_filterActions
#define SOAP_TYPE___ns5__union_filterRule_filterActions (1321)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_filterRule_filterActions
{
public:
	int __union_filterRule_filterActions;	/* union discriminant (of union defined below) */
	union _ns5__union_filterRule_filterActions union_filterRule_filterActions;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1321; } /* = unique id SOAP_TYPE___ns5__union_filterRule_filterActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_filterRule_filterActions() { __ns5__union_filterRule_filterActions::soap_default(NULL); }
	virtual ~__ns5__union_filterRule_filterActions() { }
};
#endif

#ifndef SOAP_TYPE__ns5__filterRule_filterActions
#define SOAP_TYPE__ns5__filterRule_filterActions (1320)
/* ns5:filterRule-filterActions */
class SOAP_CMAC _ns5__filterRule_filterActions
{
public:
	int __size_filterRule_filterActions;	/* sequence of elements <-union-filterRule-filterActions> */
	__ns5__union_filterRule_filterActions *__union_filterRule_filterActions;
public:
	virtual int soap_type() const { return 1320; } /* = unique id SOAP_TYPE__ns5__filterRule_filterActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__filterRule_filterActions(): __union_filterRule_filterActions(NULL) { _ns5__filterRule_filterActions::soap_default(NULL); }
	virtual ~_ns5__filterRule_filterActions() { }
};
#endif

#ifndef SOAP_TYPE_ns5__filterRule
#define SOAP_TYPE_ns5__filterRule (478)
/* ns5:filterRule */
class SOAP_CMAC ns5__filterRule
{
public:
	class ns5__filterTests *filterTests;	/* required element of type ns5:filterTests */
	_ns5__filterRule_filterActions *filterActions;	/* optional element of type ns5:filterRule-filterActions */
	std::string name;	/* required attribute */
	bool active;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 478; } /* = unique id SOAP_TYPE_ns5__filterRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__filterRule(): filterTests(NULL), filterActions(NULL), soap(NULL) { ns5__filterRule::soap_default(NULL); }
	virtual ~ns5__filterRule() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_filterTests
#define SOAP_TYPE__ns5__union_filterTests (1359)
/* xsd:choice */
union _ns5__union_filterTests
{
#define SOAP_UNION__ns5__union_filterTests_addressBookTest	(1)
	class ns5__addressBookTest *addressBookTest;
#define SOAP_UNION__ns5__union_filterTests_addressTest	(2)
	class ns5__addressTest *addressTest;
#define SOAP_UNION__ns5__union_filterTests_attachmentTest	(3)
	class ns5__attachmentTest *attachmentTest;
#define SOAP_UNION__ns5__union_filterTests_bodyTest	(4)
	class ns5__bodyTest *bodyTest;
#define SOAP_UNION__ns5__union_filterTests_bulkTest	(5)
	class ns5__bulkTest *bulkTest;
#define SOAP_UNION__ns5__union_filterTests_contactRankingTest	(6)
	class ns5__contactRankingTest *contactRankingTest;
#define SOAP_UNION__ns5__union_filterTests_conversationTest	(7)
	class ns5__conversationTest *conversationTest;
#define SOAP_UNION__ns5__union_filterTests_currentDayOfWeekTest	(8)
	class ns5__currentDayOfWeekTest *currentDayOfWeekTest;
#define SOAP_UNION__ns5__union_filterTests_currentTimeTest	(9)
	class ns5__currentTimeTest *currentTimeTest;
#define SOAP_UNION__ns5__union_filterTests_dateTest	(10)
	class ns5__dateTest *dateTest;
#define SOAP_UNION__ns5__union_filterTests_facebookTest	(11)
	class ns5__facebookTest *facebookTest;
#define SOAP_UNION__ns5__union_filterTests_flaggedTest	(12)
	class ns5__flaggedTest *flaggedTest;
#define SOAP_UNION__ns5__union_filterTests_headerExistsTest	(13)
	class ns5__headerExistsTest *headerExistsTest;
#define SOAP_UNION__ns5__union_filterTests_headerTest	(14)
	class ns5__headerTest *headerTest;
#define SOAP_UNION__ns5__union_filterTests_importanceTest	(15)
	class ns5__importanceTest *importanceTest;
#define SOAP_UNION__ns5__union_filterTests_inviteTest	(16)
	class ns5__inviteTest *inviteTest;
#define SOAP_UNION__ns5__union_filterTests_linkedinTest	(17)
	class ns5__linkedInTest *linkedinTest;
#define SOAP_UNION__ns5__union_filterTests_listTest	(18)
	class ns5__listTest *listTest;
#define SOAP_UNION__ns5__union_filterTests_meTest	(19)
	class ns5__meTest *meTest;
#define SOAP_UNION__ns5__union_filterTests_mimeHeaderTest	(20)
	class ns5__mimeHeaderTest *mimeHeaderTest;
#define SOAP_UNION__ns5__union_filterTests_sizeTest	(21)
	class ns5__sizeTest *sizeTest;
#define SOAP_UNION__ns5__union_filterTests_socialcastTest	(22)
	class ns5__socialcastTest *socialcastTest;
#define SOAP_UNION__ns5__union_filterTests_trueTest	(23)
	class ns5__trueTest *trueTest;
#define SOAP_UNION__ns5__union_filterTests_twitterTest	(24)
	class ns5__twitterTest *twitterTest;
};
#endif

#ifndef SOAP_TYPE___ns5__union_filterTests
#define SOAP_TYPE___ns5__union_filterTests (1334)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_filterTests
{
public:
	int __union_filterTests;	/* union discriminant (of union defined below) */
	union _ns5__union_filterTests union_filterTests;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1334; } /* = unique id SOAP_TYPE___ns5__union_filterTests */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_filterTests() { __ns5__union_filterTests::soap_default(NULL); }
	virtual ~__ns5__union_filterTests() { }
};
#endif

#ifndef SOAP_TYPE_ns5__filterTests
#define SOAP_TYPE_ns5__filterTests (479)
/* ns5:filterTests */
class SOAP_CMAC ns5__filterTests
{
public:
	int __size_filterTests;	/* sequence of elements <-union-filterTests> */
	__ns5__union_filterTests *__union_filterTests;
	std::string condition;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE_ns5__filterTests */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__filterTests(): __union_filterTests(NULL), soap(NULL) { ns5__filterTests::soap_default(NULL); }
	virtual ~ns5__filterTests() { }
};
#endif

#ifndef SOAP_TYPE_ns5__filterTest
#define SOAP_TYPE_ns5__filterTest (481)
/* ns5:filterTest */
class SOAP_CMAC ns5__filterTest
{
public:
	int index;	/* required attribute */
	bool *negative;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 481; } /* = unique id SOAP_TYPE_ns5__filterTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__filterTest(): negative(NULL), soap(NULL) { ns5__filterTest::soap_default(NULL); }
	virtual ~ns5__filterTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__filterAction
#define SOAP_TYPE_ns5__filterAction (506)
/* ns5:filterAction */
class SOAP_CMAC ns5__filterAction
{
public:
	int index;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE_ns5__filterAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__filterAction(): soap(NULL) { ns5__filterAction::soap_default(NULL); }
	virtual ~ns5__filterAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getFolderRequest
#define SOAP_TYPE_ns5__getFolderRequest (515)
/* ns5:getFolderRequest */
class SOAP_CMAC ns5__getFolderRequest
{
public:
	class ns5__getFolderSpec *folder;	/* optional element of type ns5:getFolderSpec */
	bool *visible;	/* optional attribute */
	bool *needGranteeName;	/* optional attribute */
	std::string *view;	/* optional attribute */
	int *depth;	/* optional attribute */
	bool *tr;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE_ns5__getFolderRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getFolderRequest(): folder(NULL), visible(NULL), needGranteeName(NULL), view(NULL), depth(NULL), tr(NULL), soap(NULL) { ns5__getFolderRequest::soap_default(NULL); }
	virtual ~ns5__getFolderRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getFolderSpec
#define SOAP_TYPE_ns5__getFolderSpec (516)
/* ns5:getFolderSpec */
class SOAP_CMAC ns5__getFolderSpec
{
public:
	std::string *uuid;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *path;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE_ns5__getFolderSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getFolderSpec(): uuid(NULL), l(NULL), path(NULL), soap(NULL) { ns5__getFolderSpec::soap_default(NULL); }
	virtual ~ns5__getFolderSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getFolderResponse
#define SOAP_TYPE_ns5__getFolderResponse (517)
/* ns5:getFolderResponse */
class SOAP_CMAC ns5__getFolderResponse
{
public:
	ns5__folder *folder;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:folder */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 517; } /* = unique id SOAP_TYPE_ns5__getFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getFolderResponse(): folder(NULL), soap(NULL) { ns5__getFolderResponse::soap_default(NULL); }
	virtual ~ns5__getFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getFreeBusyRequest
#define SOAP_TYPE_ns5__getFreeBusyRequest (518)
/* ns5:getFreeBusyRequest */
class SOAP_CMAC ns5__getFreeBusyRequest
{
public:
	std::vector<ns5__freeBusyUserSpec * >usr;	/* optional element of type ns5:freeBusyUserSpec */
	LONG64 s;	/* required attribute */
	LONG64 e;	/* required attribute */
	std::string *uid;	/* optional attribute */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *excludeUid;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 518; } /* = unique id SOAP_TYPE_ns5__getFreeBusyRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getFreeBusyRequest(): uid(NULL), id(NULL), name(NULL), excludeUid(NULL), soap(NULL) { ns5__getFreeBusyRequest::soap_default(NULL); }
	virtual ~ns5__getFreeBusyRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getFreeBusyResponse
#define SOAP_TYPE_ns5__getFreeBusyResponse (519)
/* ns5:getFreeBusyResponse */
class SOAP_CMAC ns5__getFreeBusyResponse
{
public:
	std::vector<class ns5__freeBusyUserInfo * >usr;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:freeBusyUserInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 519; } /* = unique id SOAP_TYPE_ns5__getFreeBusyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getFreeBusyResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getFreeBusyResponse::soap_default(NULL); }
	virtual ~ns5__getFreeBusyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_freeBusyUserInfo
#define SOAP_TYPE__ns5__union_freeBusyUserInfo (1370)
/* xsd:choice */
union _ns5__union_freeBusyUserInfo
{
#define SOAP_UNION__ns5__union_freeBusyUserInfo_f	(1)
	class ns5__freeBusyFREEslot *f;
#define SOAP_UNION__ns5__union_freeBusyUserInfo_b	(2)
	class ns5__freeBusyBUSYslot *b;
#define SOAP_UNION__ns5__union_freeBusyUserInfo_t	(3)
	class ns5__freeBusyBUSYTENTATIVEslot *t;
#define SOAP_UNION__ns5__union_freeBusyUserInfo_u	(4)
	class ns5__freeBusyBUSYUNAVAILABLEslot *u;
#define SOAP_UNION__ns5__union_freeBusyUserInfo_n	(5)
	class ns5__freeBusyNODATAslot *n;
};
#endif

#ifndef SOAP_TYPE___ns5__union_freeBusyUserInfo
#define SOAP_TYPE___ns5__union_freeBusyUserInfo (1364)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_freeBusyUserInfo
{
public:
	int __union_freeBusyUserInfo;	/* union discriminant (of union defined below) */
	union _ns5__union_freeBusyUserInfo union_freeBusyUserInfo;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1364; } /* = unique id SOAP_TYPE___ns5__union_freeBusyUserInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_freeBusyUserInfo() { __ns5__union_freeBusyUserInfo::soap_default(NULL); }
	virtual ~__ns5__union_freeBusyUserInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusyUserInfo
#define SOAP_TYPE_ns5__freeBusyUserInfo (520)
/* ns5:freeBusyUserInfo */
class SOAP_CMAC ns5__freeBusyUserInfo
{
public:
	int __size_freeBusyUserInfo;	/* sequence of elements <-union-freeBusyUserInfo> */
	__ns5__union_freeBusyUserInfo *__union_freeBusyUserInfo;
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_ns5__freeBusyUserInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusyUserInfo(): __union_freeBusyUserInfo(NULL), soap(NULL) { ns5__freeBusyUserInfo::soap_default(NULL); }
	virtual ~ns5__freeBusyUserInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusySlot
#define SOAP_TYPE_ns5__freeBusySlot (522)
/* ns5:freeBusySlot */
class SOAP_CMAC ns5__freeBusySlot
{
public:
	LONG64 s;	/* required attribute */
	LONG64 e;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 522; } /* = unique id SOAP_TYPE_ns5__freeBusySlot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusySlot(): soap(NULL) { ns5__freeBusySlot::soap_default(NULL); }
	virtual ~ns5__freeBusySlot() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getICalRequest
#define SOAP_TYPE_ns5__getICalRequest (527)
/* ns5:getICalRequest */
class SOAP_CMAC ns5__getICalRequest
{
public:
	std::string *id;	/* optional attribute */
	LONG64 *s;	/* optional attribute */
	LONG64 *e;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 527; } /* = unique id SOAP_TYPE_ns5__getICalRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getICalRequest(): id(NULL), s(NULL), e(NULL), soap(NULL) { ns5__getICalRequest::soap_default(NULL); }
	virtual ~ns5__getICalRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getICalResponse
#define SOAP_TYPE_ns5__getICalResponse (528)
/* ns5:getICalResponse */
class SOAP_CMAC ns5__getICalResponse
{
public:
	class ns5__iCalContent *ical;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:iCalContent */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 528; } /* = unique id SOAP_TYPE_ns5__getICalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getICalResponse(): ical(NULL), soap(NULL) { ns5__getICalResponse::soap_default(NULL); }
	virtual ~ns5__getICalResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getImportStatusRequest
#define SOAP_TYPE_ns5__getImportStatusRequest (530)
/* ns5:getImportStatusRequest */
class SOAP_CMAC ns5__getImportStatusRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 530; } /* = unique id SOAP_TYPE_ns5__getImportStatusRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getImportStatusRequest(): soap(NULL) { ns5__getImportStatusRequest::soap_default(NULL); }
	virtual ~ns5__getImportStatusRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getImportStatusResponse
#define SOAP_TYPE__ns5__union_getImportStatusResponse (1382)
/* xsd:choice */
union _ns5__union_getImportStatusResponse
{
#define SOAP_UNION__ns5__union_getImportStatusResponse_imap	(1)
	class ns5__imapImportStatusInfo *imap;
#define SOAP_UNION__ns5__union_getImportStatusResponse_pop3	(2)
	class ns5__pop3ImportStatusInfo *pop3;
#define SOAP_UNION__ns5__union_getImportStatusResponse_caldav	(3)
	class ns5__caldavImportStatusInfo *caldav;
#define SOAP_UNION__ns5__union_getImportStatusResponse_yab	(4)
	class ns5__yabImportStatusInfo *yab;
#define SOAP_UNION__ns5__union_getImportStatusResponse_rss	(5)
	class ns5__rssImportStatusInfo *rss;
#define SOAP_UNION__ns5__union_getImportStatusResponse_gal	(6)
	class ns5__galImportStatusInfo *gal;
#define SOAP_UNION__ns5__union_getImportStatusResponse_cal	(7)
	class ns5__calImportStatusInfo *cal;
#define SOAP_UNION__ns5__union_getImportStatusResponse_unknown	(8)
	class ns5__unknownImportStatusInfo *unknown;
};
#endif

#ifndef SOAP_TYPE___ns5__union_getImportStatusResponse
#define SOAP_TYPE___ns5__union_getImportStatusResponse (1373)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_getImportStatusResponse
{
public:
	int __union_getImportStatusResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_getImportStatusResponse union_getImportStatusResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1373; } /* = unique id SOAP_TYPE___ns5__union_getImportStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_getImportStatusResponse() { __ns5__union_getImportStatusResponse::soap_default(NULL); }
	virtual ~__ns5__union_getImportStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getImportStatusResponse
#define SOAP_TYPE_ns5__getImportStatusResponse (531)
/* ns5:getImportStatusResponse */
class SOAP_CMAC ns5__getImportStatusResponse
{
public:
	int __size_getImportStatusResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-getImportStatusResponse> */
	__ns5__union_getImportStatusResponse *__union_getImportStatusResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE_ns5__getImportStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getImportStatusResponse(): __union_getImportStatusResponse(NULL), soap(NULL) { ns5__getImportStatusResponse::soap_default(NULL); }
	virtual ~ns5__getImportStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importStatusInfo
#define SOAP_TYPE_ns5__importStatusInfo (533)
/* ns5:importStatusInfo */
class SOAP_CMAC ns5__importStatusInfo
{
public:
	std::string *id;	/* optional attribute */
	bool *isRunning;	/* optional attribute */
	bool *success;	/* optional attribute */
	std::string *error;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 533; } /* = unique id SOAP_TYPE_ns5__importStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importStatusInfo(): id(NULL), isRunning(NULL), success(NULL), error(NULL), soap(NULL) { ns5__importStatusInfo::soap_default(NULL); }
	virtual ~ns5__importStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getItemRequest
#define SOAP_TYPE_ns5__getItemRequest (541)
/* ns5:getItemRequest */
class SOAP_CMAC ns5__getItemRequest
{
public:
	ns5__itemSpec *item;	/* optional element of type ns5:itemSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 541; } /* = unique id SOAP_TYPE_ns5__getItemRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getItemRequest(): item(NULL), soap(NULL) { ns5__getItemRequest::soap_default(NULL); }
	virtual ~ns5__getItemRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getItemResponse
#define SOAP_TYPE__ns5__union_getItemResponse (1387)
/* xsd:choice */
union _ns5__union_getItemResponse
{
#define SOAP_UNION__ns5__union_getItemResponse_folder	(1)
	ns5__folder *folder;
#define SOAP_UNION__ns5__union_getItemResponse_tag	(2)
	ns5__tagInfo *tag;
#define SOAP_UNION__ns5__union_getItemResponse_note	(3)
	ns5__noteInfo *note;
#define SOAP_UNION__ns5__union_getItemResponse_cn	(4)
	ns5__contactInfo *cn;
#define SOAP_UNION__ns5__union_getItemResponse_appt	(5)
	ns5__calendarItemInfo *appt;
#define SOAP_UNION__ns5__union_getItemResponse_task	(6)
	ns5__taskItemInfo *task;
#define SOAP_UNION__ns5__union_getItemResponse_c	(7)
	class ns5__conversationSummary *c;
#define SOAP_UNION__ns5__union_getItemResponse_w	(8)
	class ns5__commonDocumentInfo *w;
#define SOAP_UNION__ns5__union_getItemResponse_doc	(9)
	class ns5__documentInfo *doc;
#define SOAP_UNION__ns5__union_getItemResponse_m	(10)
	ns5__messageSummary *m;
#define SOAP_UNION__ns5__union_getItemResponse_chat	(11)
	ns5__chatSummary *chat;
};
#endif

#ifndef SOAP_TYPE_ns5__getItemResponse
#define SOAP_TYPE_ns5__getItemResponse (542)
/* ns5:getItemResponse */
class SOAP_CMAC ns5__getItemResponse
{
public:
	int __union_getItemResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* union discriminant (of union defined below) */
	union _ns5__union_getItemResponse union_getItemResponse;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 542; } /* = unique id SOAP_TYPE_ns5__getItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getItemResponse(): soap(NULL) { ns5__getItemResponse::soap_default(NULL); }
	virtual ~ns5__getItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__conversationSummary
#define SOAP_TYPE_ns5__conversationSummary (543)
/* ns5:conversationSummary */
class SOAP_CMAC ns5__conversationSummary
{
public:
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	std::string *su;	/* optional element of type xsd:string */
	std::string *fr;	/* optional element of type xsd:string */
	std::vector<ns5__emailInfo * >e;	/* optional element of type ns5:emailInfo */
	std::string *id;	/* optional attribute */
	int *n;	/* optional attribute */
	int *total;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	bool *elided;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *ms;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 543; } /* = unique id SOAP_TYPE_ns5__conversationSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__conversationSummary(): su(NULL), fr(NULL), id(NULL), n(NULL), total(NULL), f(NULL), t(NULL), tn(NULL), d(NULL), elided(NULL), md(NULL), ms(NULL), soap(NULL) { ns5__conversationSummary::soap_default(NULL); }
	virtual ~ns5__conversationSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns5__commonDocumentInfo
#define SOAP_TYPE_ns5__commonDocumentInfo (544)
/* ns5:commonDocumentInfo */
class SOAP_CMAC ns5__commonDocumentInfo
{
public:
	std::vector<ns5__mailCustomMetadata * >meta;	/* optional element of type ns5:mailCustomMetadata */
	std::string *fr;	/* optional element of type xsd:string */
	ns5__acl *acl;	/* optional element of type ns5:acl */
	std::string *id;	/* optional attribute */
	std::string *uuid;	/* optional attribute */
	std::string *name;	/* optional attribute */
	LONG64 *s;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *luuid;	/* optional attribute */
	int *ms;	/* optional attribute */
	int *mdver;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *rev;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	std::string *desc;	/* optional attribute */
	std::string *ct;	/* optional attribute */
	bool *descEnabled;	/* optional attribute */
	int *ver;	/* optional attribute */
	std::string *leb;	/* optional attribute */
	std::string *cr;	/* optional attribute */
	LONG64 *cd;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 544; } /* = unique id SOAP_TYPE_ns5__commonDocumentInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__commonDocumentInfo(): fr(NULL), acl(NULL), id(NULL), uuid(NULL), name(NULL), s(NULL), d(NULL), l(NULL), luuid(NULL), ms(NULL), mdver(NULL), md(NULL), rev(NULL), f(NULL), t(NULL), tn(NULL), desc(NULL), ct(NULL), descEnabled(NULL), ver(NULL), leb(NULL), cr(NULL), cd(NULL), soap(NULL) { ns5__commonDocumentInfo::soap_default(NULL); }
	virtual ~ns5__commonDocumentInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getMailboxMetadataRequest
#define SOAP_TYPE_ns5__getMailboxMetadataRequest (546)
/* ns5:getMailboxMetadataRequest */
class SOAP_CMAC ns5__getMailboxMetadataRequest
{
public:
	ns3__sectionAttr *meta;	/* optional element of type ns3:sectionAttr */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 546; } /* = unique id SOAP_TYPE_ns5__getMailboxMetadataRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getMailboxMetadataRequest(): meta(NULL), soap(NULL) { ns5__getMailboxMetadataRequest::soap_default(NULL); }
	virtual ~ns5__getMailboxMetadataRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getMailboxMetadataResponse
#define SOAP_TYPE_ns5__getMailboxMetadataResponse (547)
/* ns5:getMailboxMetadataResponse */
class SOAP_CMAC ns5__getMailboxMetadataResponse
{
public:
	ns5__mailCustomMetadata *meta;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:mailCustomMetadata */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 547; } /* = unique id SOAP_TYPE_ns5__getMailboxMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getMailboxMetadataResponse(): meta(NULL), soap(NULL) { ns5__getMailboxMetadataResponse::soap_default(NULL); }
	virtual ~ns5__getMailboxMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getMiniCalRequest
#define SOAP_TYPE_ns5__getMiniCalRequest (548)
/* ns5:getMiniCalRequest */
class SOAP_CMAC ns5__getMiniCalRequest
{
public:
	std::vector<ns3__id * >folder;	/* optional element of type ns3:id */
	ns5__calTZInfo *tz;	/* optional element of type ns5:calTZInfo */
	LONG64 s;	/* required attribute */
	LONG64 e;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 548; } /* = unique id SOAP_TYPE_ns5__getMiniCalRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getMiniCalRequest(): tz(NULL), soap(NULL) { ns5__getMiniCalRequest::soap_default(NULL); }
	virtual ~ns5__getMiniCalRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getMiniCalResponse
#define SOAP_TYPE_ns5__getMiniCalResponse (549)
/* ns5:getMiniCalResponse */
class SOAP_CMAC ns5__getMiniCalResponse
{
public:
	std::vector<class ns5__miniCalError * >error;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:miniCalError */
	std::vector<std::string >date;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 549; } /* = unique id SOAP_TYPE_ns5__getMiniCalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getMiniCalResponse(): soap(NULL) { ns5__getMiniCalResponse::soap_default(NULL); }
	virtual ~ns5__getMiniCalResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getMsgMetadataRequest
#define SOAP_TYPE_ns5__getMsgMetadataRequest (551)
/* ns5:getMsgMetadataRequest */
class SOAP_CMAC ns5__getMsgMetadataRequest
{
public:
	ns5__idsAttr *m;	/* required element of type ns5:idsAttr */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 551; } /* = unique id SOAP_TYPE_ns5__getMsgMetadataRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getMsgMetadataRequest(): m(NULL), soap(NULL) { ns5__getMsgMetadataRequest::soap_default(NULL); }
	virtual ~ns5__getMsgMetadataRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getMsgMetadataResponse
#define SOAP_TYPE__ns5__union_getMsgMetadataResponse (1393)
/* xsd:choice */
union _ns5__union_getMsgMetadataResponse
{
#define SOAP_UNION__ns5__union_getMsgMetadataResponse_chat	(1)
	ns5__chatSummary *chat;
#define SOAP_UNION__ns5__union_getMsgMetadataResponse_m	(2)
	ns5__messageSummary *m;
};
#endif

#ifndef SOAP_TYPE___ns5__union_getMsgMetadataResponse
#define SOAP_TYPE___ns5__union_getMsgMetadataResponse (1392)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_getMsgMetadataResponse
{
public:
	int __union_getMsgMetadataResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_getMsgMetadataResponse union_getMsgMetadataResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1392; } /* = unique id SOAP_TYPE___ns5__union_getMsgMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_getMsgMetadataResponse() { __ns5__union_getMsgMetadataResponse::soap_default(NULL); }
	virtual ~__ns5__union_getMsgMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getMsgMetadataResponse
#define SOAP_TYPE_ns5__getMsgMetadataResponse (552)
/* ns5:getMsgMetadataResponse */
class SOAP_CMAC ns5__getMsgMetadataResponse
{
public:
	int __size_getMsgMetadataResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-getMsgMetadataResponse> */
	__ns5__union_getMsgMetadataResponse *__union_getMsgMetadataResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 552; } /* = unique id SOAP_TYPE_ns5__getMsgMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getMsgMetadataResponse(): __union_getMsgMetadataResponse(NULL), soap(NULL) { ns5__getMsgMetadataResponse::soap_default(NULL); }
	virtual ~ns5__getMsgMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getMsgRequest
#define SOAP_TYPE_ns5__getMsgRequest (553)
/* ns5:getMsgRequest */
class SOAP_CMAC ns5__getMsgRequest
{
public:
	class ns5__msgSpec *m;	/* required element of type ns5:msgSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 553; } /* = unique id SOAP_TYPE_ns5__getMsgRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getMsgRequest(): m(NULL), soap(NULL) { ns5__getMsgRequest::soap_default(NULL); }
	virtual ~ns5__getMsgRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__msgSpec
#define SOAP_TYPE_ns5__msgSpec (554)
/* ns5:msgSpec */
class SOAP_CMAC ns5__msgSpec
{
public:
	std::vector<ns3__attributeName * >header;	/* optional element of type ns3:attributeName */
	std::string id;	/* required attribute */
	std::string *part;	/* optional attribute */
	bool *raw;	/* optional attribute */
	bool *read;	/* optional attribute */
	int *max_;	/* optional attribute */
	bool *html;	/* optional attribute */
	bool *neuter;	/* optional attribute */
	std::string *ridZ;	/* optional attribute */
	bool *needExp;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 554; } /* = unique id SOAP_TYPE_ns5__msgSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__msgSpec(): part(NULL), raw(NULL), read(NULL), max_(NULL), html(NULL), neuter(NULL), ridZ(NULL), needExp(NULL), soap(NULL) { ns5__msgSpec::soap_default(NULL); }
	virtual ~ns5__msgSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getMsgResponse
#define SOAP_TYPE_ns5__getMsgResponse (555)
/* ns5:getMsgResponse */
class SOAP_CMAC ns5__getMsgResponse
{
public:
	class ns5__msgWithGroupInfo *m;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:msgWithGroupInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 555; } /* = unique id SOAP_TYPE_ns5__getMsgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getMsgResponse(): m(NULL), soap(NULL) { ns5__getMsgResponse::soap_default(NULL); }
	virtual ~ns5__getMsgResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__inviteWithGroupInfo_replies
#define SOAP_TYPE__ns5__inviteWithGroupInfo_replies (1399)
/* ns5:inviteWithGroupInfo-replies */
class SOAP_CMAC _ns5__inviteWithGroupInfo_replies
{
public:
	std::vector<ns5__calendarReply * >reply;	/* optional element of type ns5:calendarReply */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1399; } /* = unique id SOAP_TYPE__ns5__inviteWithGroupInfo_replies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__inviteWithGroupInfo_replies(): unusedCodeGenHelper(NULL) { _ns5__inviteWithGroupInfo_replies::soap_default(NULL); }
	virtual ~_ns5__inviteWithGroupInfo_replies() { }
};
#endif

#ifndef SOAP_TYPE_ns5__inviteWithGroupInfo
#define SOAP_TYPE_ns5__inviteWithGroupInfo (557)
/* ns5:inviteWithGroupInfo */
class SOAP_CMAC ns5__inviteWithGroupInfo
{
public:
	std::vector<ns5__calTZInfo * >tz;	/* optional element of type ns5:calTZInfo */
	std::vector<class ns5__inviteComponentWithGroupInfo * >comp;	/* optional element of type ns5:inviteComponentWithGroupInfo */
	_ns5__inviteWithGroupInfo_replies *replies;	/* optional element of type ns5:inviteWithGroupInfo-replies */
	std::string type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 557; } /* = unique id SOAP_TYPE_ns5__inviteWithGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__inviteWithGroupInfo(): replies(NULL), soap(NULL) { ns5__inviteWithGroupInfo::soap_default(NULL); }
	virtual ~ns5__inviteWithGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getNoteRequest
#define SOAP_TYPE_ns5__getNoteRequest (560)
/* ns5:getNoteRequest */
class SOAP_CMAC ns5__getNoteRequest
{
public:
	ns3__id *note;	/* required element of type ns3:id */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 560; } /* = unique id SOAP_TYPE_ns5__getNoteRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getNoteRequest(): note(NULL), soap(NULL) { ns5__getNoteRequest::soap_default(NULL); }
	virtual ~ns5__getNoteRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getNoteResponse
#define SOAP_TYPE_ns5__getNoteResponse (561)
/* ns5:getNoteResponse */
class SOAP_CMAC ns5__getNoteResponse
{
public:
	ns5__noteInfo *note;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:noteInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 561; } /* = unique id SOAP_TYPE_ns5__getNoteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getNoteResponse(): note(NULL), soap(NULL) { ns5__getNoteResponse::soap_default(NULL); }
	virtual ~ns5__getNoteResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getNotificationsRequest
#define SOAP_TYPE_ns5__getNotificationsRequest (562)
/* ns5:getNotificationsRequest */
class SOAP_CMAC ns5__getNotificationsRequest
{
public:
	bool *markSeen;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 562; } /* = unique id SOAP_TYPE_ns5__getNotificationsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getNotificationsRequest(): markSeen(NULL), soap(NULL) { ns5__getNotificationsRequest::soap_default(NULL); }
	virtual ~ns5__getNotificationsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getNotificationsResponse
#define SOAP_TYPE_ns5__getNotificationsResponse (563)
/* ns5:getNotificationsResponse */
class SOAP_CMAC ns5__getNotificationsResponse
{
public:
	std::vector<ns3__namedElement * >op;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:namedElement */
	std::vector<ns5__idEmailName * >user;	/* optional element of type ns5:idEmailName */
	std::vector<ns5__activityInfo * >a;	/* optional element of type ns5:activityInfo */
	LONG64 lastSeen;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 563; } /* = unique id SOAP_TYPE_ns5__getNotificationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getNotificationsResponse(): soap(NULL) { ns5__getNotificationsResponse::soap_default(NULL); }
	virtual ~ns5__getNotificationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getOutgoingFilterRulesRequest
#define SOAP_TYPE_ns5__getOutgoingFilterRulesRequest (564)
/* ns5:getOutgoingFilterRulesRequest */
class SOAP_CMAC ns5__getOutgoingFilterRulesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 564; } /* = unique id SOAP_TYPE_ns5__getOutgoingFilterRulesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getOutgoingFilterRulesRequest(): soap(NULL) { ns5__getOutgoingFilterRulesRequest::soap_default(NULL); }
	virtual ~ns5__getOutgoingFilterRulesRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__getOutgoingFilterRulesResponse_filterRules
#define SOAP_TYPE__ns5__getOutgoingFilterRulesResponse_filterRules (1401)
/* ns5:getOutgoingFilterRulesResponse-filterRules */
class SOAP_CMAC _ns5__getOutgoingFilterRulesResponse_filterRules
{
public:
	std::vector<ns5__filterRule * >filterRule;	/* optional element of type ns5:filterRule */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1401; } /* = unique id SOAP_TYPE__ns5__getOutgoingFilterRulesResponse_filterRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__getOutgoingFilterRulesResponse_filterRules(): unusedCodeGenHelper(NULL) { _ns5__getOutgoingFilterRulesResponse_filterRules::soap_default(NULL); }
	virtual ~_ns5__getOutgoingFilterRulesResponse_filterRules() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getOutgoingFilterRulesResponse
#define SOAP_TYPE_ns5__getOutgoingFilterRulesResponse (565)
/* ns5:getOutgoingFilterRulesResponse */
class SOAP_CMAC ns5__getOutgoingFilterRulesResponse
{
public:
	_ns5__getOutgoingFilterRulesResponse_filterRules filterRules;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:getOutgoingFilterRulesResponse-filterRules */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 565; } /* = unique id SOAP_TYPE_ns5__getOutgoingFilterRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getOutgoingFilterRulesResponse(): soap(NULL) { ns5__getOutgoingFilterRulesResponse::soap_default(NULL); }
	virtual ~ns5__getOutgoingFilterRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getPermissionRequest
#define SOAP_TYPE_ns5__getPermissionRequest (566)
/* ns5:getPermissionRequest */
class SOAP_CMAC ns5__getPermissionRequest
{
public:
	std::vector<class ns5__right * >ace;	/* optional element of type ns5:right */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 566; } /* = unique id SOAP_TYPE_ns5__getPermissionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getPermissionRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getPermissionRequest::soap_default(NULL); }
	virtual ~ns5__getPermissionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__right
#define SOAP_TYPE_ns5__right (567)
/* ns5:right */
class SOAP_CMAC ns5__right
{
public:
	std::string right;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 567; } /* = unique id SOAP_TYPE_ns5__right */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__right(): soap(NULL) { ns5__right::soap_default(NULL); }
	virtual ~ns5__right() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getPermissionResponse
#define SOAP_TYPE_ns5__getPermissionResponse (568)
/* ns5:getPermissionResponse */
class SOAP_CMAC ns5__getPermissionResponse
{
public:
	std::vector<class ns5__accountACEinfo * >ace;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:accountACEinfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 568; } /* = unique id SOAP_TYPE_ns5__getPermissionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getPermissionResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getPermissionResponse::soap_default(NULL); }
	virtual ~ns5__getPermissionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__accountACEinfo
#define SOAP_TYPE_ns5__accountACEinfo (569)
/* ns5:accountACEinfo */
class SOAP_CMAC ns5__accountACEinfo
{
public:
	std::string *zid;	/* optional attribute */
	enum ns3__granteeType gt;	/* required attribute */
	std::string right;	/* required attribute */
	std::string *d;	/* optional attribute */
	std::string *key;	/* optional attribute */
	std::string *pw;	/* optional attribute */
	bool *deny;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 569; } /* = unique id SOAP_TYPE_ns5__accountACEinfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__accountACEinfo(): zid(NULL), d(NULL), key(NULL), pw(NULL), deny(NULL), soap(NULL) { ns5__accountACEinfo::soap_default(NULL); }
	virtual ~ns5__accountACEinfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getRecurRequest
#define SOAP_TYPE_ns5__getRecurRequest (570)
/* ns5:getRecurRequest */
class SOAP_CMAC ns5__getRecurRequest
{
public:
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 570; } /* = unique id SOAP_TYPE_ns5__getRecurRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getRecurRequest(): soap(NULL) { ns5__getRecurRequest::soap_default(NULL); }
	virtual ~ns5__getRecurRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getRecurResponse
#define SOAP_TYPE__ns5__union_getRecurResponse (1410)
/* xsd:choice */
union _ns5__union_getRecurResponse
{
#define SOAP_UNION__ns5__union_getRecurResponse_cancel	(1)
	class ns5__cancelItemRecur *cancel;
#define SOAP_UNION__ns5__union_getRecurResponse_except	(2)
	class ns5__exceptionItemRecur *except;
#define SOAP_UNION__ns5__union_getRecurResponse_comp	(3)
	class ns5__inviteItemRecur *comp;
};
#endif

#ifndef SOAP_TYPE___ns5__union_getRecurResponse
#define SOAP_TYPE___ns5__union_getRecurResponse (1406)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_getRecurResponse
{
public:
	int __union_getRecurResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_getRecurResponse union_getRecurResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1406; } /* = unique id SOAP_TYPE___ns5__union_getRecurResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_getRecurResponse() { __ns5__union_getRecurResponse::soap_default(NULL); }
	virtual ~__ns5__union_getRecurResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getRecurResponse
#define SOAP_TYPE_ns5__getRecurResponse (571)
/* ns5:getRecurResponse */
class SOAP_CMAC ns5__getRecurResponse
{
public:
	ns5__calTZInfo *tz;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:calTZInfo */
	int __size_getRecurResponse;	/* sequence of elements <-union-getRecurResponse> */
	__ns5__union_getRecurResponse *__union_getRecurResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 571; } /* = unique id SOAP_TYPE_ns5__getRecurResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getRecurResponse(): tz(NULL), __union_getRecurResponse(NULL), soap(NULL) { ns5__getRecurResponse::soap_default(NULL); }
	virtual ~ns5__getRecurResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calendarItemRecur
#define SOAP_TYPE_ns5__calendarItemRecur (573)
/* ns5:calendarItemRecur */
class SOAP_CMAC ns5__calendarItemRecur
{
public:
	ns5__exceptionRecurIdInfo *exceptId;	/* optional element of type ns5:exceptionRecurIdInfo */
	ns5__dtTimeInfo *s;	/* optional element of type ns5:dtTimeInfo */
	ns5__dtTimeInfo *e;	/* optional element of type ns5:dtTimeInfo */
	ns5__durationInfo *dur;	/* optional element of type ns5:durationInfo */
	ns5__recurrenceInfo *recur;	/* optional element of type ns5:recurrenceInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 573; } /* = unique id SOAP_TYPE_ns5__calendarItemRecur */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calendarItemRecur(): exceptId(NULL), s(NULL), e(NULL), dur(NULL), recur(NULL), soap(NULL) { ns5__calendarItemRecur::soap_default(NULL); }
	virtual ~ns5__calendarItemRecur() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getSearchFolderRequest
#define SOAP_TYPE_ns5__getSearchFolderRequest (576)
/* ns5:getSearchFolderRequest */
class SOAP_CMAC ns5__getSearchFolderRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 576; } /* = unique id SOAP_TYPE_ns5__getSearchFolderRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getSearchFolderRequest(): soap(NULL) { ns5__getSearchFolderRequest::soap_default(NULL); }
	virtual ~ns5__getSearchFolderRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getSearchFolderResponse
#define SOAP_TYPE_ns5__getSearchFolderResponse (577)
/* ns5:getSearchFolderResponse */
class SOAP_CMAC ns5__getSearchFolderResponse
{
public:
	std::vector<ns5__searchFolder * >search;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:searchFolder */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 577; } /* = unique id SOAP_TYPE_ns5__getSearchFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getSearchFolderResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getSearchFolderResponse::soap_default(NULL); }
	virtual ~ns5__getSearchFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getShareDetailsRequest
#define SOAP_TYPE_ns5__getShareDetailsRequest (578)
/* ns5:getShareDetailsRequest */
class SOAP_CMAC ns5__getShareDetailsRequest
{
public:
	ns3__id *item;	/* required element of type ns3:id */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 578; } /* = unique id SOAP_TYPE_ns5__getShareDetailsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getShareDetailsRequest(): item(NULL), soap(NULL) { ns5__getShareDetailsRequest::soap_default(NULL); }
	virtual ~ns5__getShareDetailsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getShareDetailsResponse
#define SOAP_TYPE_ns5__getShareDetailsResponse (579)
/* ns5:getShareDetailsResponse */
class SOAP_CMAC ns5__getShareDetailsResponse
{
public:
	class ns5__shareDetails *item;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:shareDetails */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 579; } /* = unique id SOAP_TYPE_ns5__getShareDetailsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getShareDetailsResponse(): item(NULL), soap(NULL) { ns5__getShareDetailsResponse::soap_default(NULL); }
	virtual ~ns5__getShareDetailsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__shareDetails
#define SOAP_TYPE_ns5__shareDetails (580)
/* ns5:shareDetails */
class SOAP_CMAC ns5__shareDetails
{
public:
	std::vector<class ns5__shareGrantee * >grantee;	/* optional element of type ns5:shareGrantee */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 580; } /* = unique id SOAP_TYPE_ns5__shareDetails */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__shareDetails(): soap(NULL) { ns5__shareDetails::soap_default(NULL); }
	virtual ~ns5__shareDetails() { }
};
#endif

#ifndef SOAP_TYPE_ns5__shareGrantee
#define SOAP_TYPE_ns5__shareGrantee (581)
/* ns5:shareGrantee */
class SOAP_CMAC ns5__shareGrantee
{
public:
	std::string perm;	/* required attribute */
	enum ns3__grantGranteeType gt;	/* required attribute */
	std::string *name;	/* optional attribute */
	std::string *email;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 581; } /* = unique id SOAP_TYPE_ns5__shareGrantee */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__shareGrantee(): name(NULL), email(NULL), soap(NULL) { ns5__shareGrantee::soap_default(NULL); }
	virtual ~ns5__shareGrantee() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getShareNotificationsRequest
#define SOAP_TYPE_ns5__getShareNotificationsRequest (582)
/* ns5:getShareNotificationsRequest */
class SOAP_CMAC ns5__getShareNotificationsRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 582; } /* = unique id SOAP_TYPE_ns5__getShareNotificationsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getShareNotificationsRequest(): soap(NULL) { ns5__getShareNotificationsRequest::soap_default(NULL); }
	virtual ~ns5__getShareNotificationsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getShareNotificationsResponse
#define SOAP_TYPE_ns5__getShareNotificationsResponse (583)
/* ns5:getShareNotificationsResponse */
class SOAP_CMAC ns5__getShareNotificationsResponse
{
public:
	std::vector<class ns5__shareNotificationInfo * >share;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:shareNotificationInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 583; } /* = unique id SOAP_TYPE_ns5__getShareNotificationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getShareNotificationsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getShareNotificationsResponse::soap_default(NULL); }
	virtual ~ns5__getShareNotificationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__shareNotificationInfo
#define SOAP_TYPE_ns5__shareNotificationInfo (584)
/* ns5:shareNotificationInfo */
class SOAP_CMAC ns5__shareNotificationInfo
{
public:
	class ns5__grantor *grantor;	/* required element of type ns5:grantor */
	class ns5__linkInfo *link;	/* required element of type ns5:linkInfo */
	std::string status;	/* required attribute */
	std::string id;	/* required attribute */
	LONG64 d;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 584; } /* = unique id SOAP_TYPE_ns5__shareNotificationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__shareNotificationInfo(): grantor(NULL), link(NULL), soap(NULL) { ns5__shareNotificationInfo::soap_default(NULL); }
	virtual ~ns5__shareNotificationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__grantor
#define SOAP_TYPE_ns5__grantor (585)
/* ns5:grantor */
class SOAP_CMAC ns5__grantor
{
public:
	std::string id;	/* required attribute */
	std::string email;	/* required attribute */
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 585; } /* = unique id SOAP_TYPE_ns5__grantor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__grantor(): soap(NULL) { ns5__grantor::soap_default(NULL); }
	virtual ~ns5__grantor() { }
};
#endif

#ifndef SOAP_TYPE_ns5__linkInfo
#define SOAP_TYPE_ns5__linkInfo (586)
/* ns5:linkInfo */
class SOAP_CMAC ns5__linkInfo
{
public:
	std::string id;	/* required attribute */
	std::string uuid;	/* required attribute */
	std::string name;	/* required attribute */
	std::string view;	/* required attribute */
	std::string *perm;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 586; } /* = unique id SOAP_TYPE_ns5__linkInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__linkInfo(): perm(NULL), soap(NULL) { ns5__linkInfo::soap_default(NULL); }
	virtual ~ns5__linkInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getSpellDictionariesRequest
#define SOAP_TYPE_ns5__getSpellDictionariesRequest (587)
/* ns5:getSpellDictionariesRequest */
class SOAP_CMAC ns5__getSpellDictionariesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 587; } /* = unique id SOAP_TYPE_ns5__getSpellDictionariesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getSpellDictionariesRequest(): soap(NULL) { ns5__getSpellDictionariesRequest::soap_default(NULL); }
	virtual ~ns5__getSpellDictionariesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getSpellDictionariesResponse
#define SOAP_TYPE_ns5__getSpellDictionariesResponse (588)
/* ns5:getSpellDictionariesResponse */
class SOAP_CMAC ns5__getSpellDictionariesResponse
{
public:
	std::vector<std::string >dictionary;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 588; } /* = unique id SOAP_TYPE_ns5__getSpellDictionariesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getSpellDictionariesResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getSpellDictionariesResponse::soap_default(NULL); }
	virtual ~ns5__getSpellDictionariesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getSystemRetentionPolicyRequest
#define SOAP_TYPE_ns5__getSystemRetentionPolicyRequest (589)
/* ns5:getSystemRetentionPolicyRequest */
class SOAP_CMAC ns5__getSystemRetentionPolicyRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 589; } /* = unique id SOAP_TYPE_ns5__getSystemRetentionPolicyRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getSystemRetentionPolicyRequest(): soap(NULL) { ns5__getSystemRetentionPolicyRequest::soap_default(NULL); }
	virtual ~ns5__getSystemRetentionPolicyRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getSystemRetentionPolicyResponse
#define SOAP_TYPE_ns5__getSystemRetentionPolicyResponse (590)
/* ns5:getSystemRetentionPolicyResponse */
class SOAP_CMAC ns5__getSystemRetentionPolicyResponse
{
public:
	ns5__retentionPolicy *retentionPolicy;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:retentionPolicy */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 590; } /* = unique id SOAP_TYPE_ns5__getSystemRetentionPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getSystemRetentionPolicyResponse(): retentionPolicy(NULL), soap(NULL) { ns5__getSystemRetentionPolicyResponse::soap_default(NULL); }
	virtual ~ns5__getSystemRetentionPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getTagRequest
#define SOAP_TYPE_ns5__getTagRequest (591)
/* ns5:getTagRequest */
class SOAP_CMAC ns5__getTagRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 591; } /* = unique id SOAP_TYPE_ns5__getTagRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getTagRequest(): soap(NULL) { ns5__getTagRequest::soap_default(NULL); }
	virtual ~ns5__getTagRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getTagResponse
#define SOAP_TYPE_ns5__getTagResponse (592)
/* ns5:getTagResponse */
class SOAP_CMAC ns5__getTagResponse
{
public:
	std::vector<ns5__tagInfo * >tag;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:tagInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 592; } /* = unique id SOAP_TYPE_ns5__getTagResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getTagResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getTagResponse::soap_default(NULL); }
	virtual ~ns5__getTagResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getTaskResponse
#define SOAP_TYPE__ns5__union_getTaskResponse (1422)
/* xsd:choice */
union _ns5__union_getTaskResponse
{
#define SOAP_UNION__ns5__union_getTaskResponse_appt	(1)
	ns5__calendarItemInfo *appt;
#define SOAP_UNION__ns5__union_getTaskResponse_task	(2)
	ns5__taskItemInfo *task;
};
#endif

#ifndef SOAP_TYPE_ns5__getTaskResponse
#define SOAP_TYPE_ns5__getTaskResponse (594)
/* ns5:getTaskResponse */
class SOAP_CMAC ns5__getTaskResponse
{
public:
	int __union_getTaskResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* union discriminant (of union defined below) */
	union _ns5__union_getTaskResponse union_getTaskResponse;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 594; } /* = unique id SOAP_TYPE_ns5__getTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getTaskResponse(): soap(NULL) { ns5__getTaskResponse::soap_default(NULL); }
	virtual ~ns5__getTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getTaskSummariesRequest
#define SOAP_TYPE_ns5__getTaskSummariesRequest (595)
/* ns5:getTaskSummariesRequest */
class SOAP_CMAC ns5__getTaskSummariesRequest
{
public:
	LONG64 s;	/* required attribute */
	LONG64 e;	/* required attribute */
	std::string *l;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 595; } /* = unique id SOAP_TYPE_ns5__getTaskSummariesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getTaskSummariesRequest(): l(NULL), soap(NULL) { ns5__getTaskSummariesRequest::soap_default(NULL); }
	virtual ~ns5__getTaskSummariesRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_getTaskSummariesResponse
#define SOAP_TYPE__ns5__union_getTaskSummariesResponse (1424)
/* xsd:choice */
union _ns5__union_getTaskSummariesResponse
{
#define SOAP_UNION__ns5__union_getTaskSummariesResponse_appt	(1)
	ns5__legacyAppointmentData *appt;
#define SOAP_UNION__ns5__union_getTaskSummariesResponse_task	(2)
	ns5__legacyTaskData *task;
};
#endif

#ifndef SOAP_TYPE___ns5__union_getTaskSummariesResponse
#define SOAP_TYPE___ns5__union_getTaskSummariesResponse (1423)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_getTaskSummariesResponse
{
public:
	int __union_getTaskSummariesResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_getTaskSummariesResponse union_getTaskSummariesResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1423; } /* = unique id SOAP_TYPE___ns5__union_getTaskSummariesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_getTaskSummariesResponse() { __ns5__union_getTaskSummariesResponse::soap_default(NULL); }
	virtual ~__ns5__union_getTaskSummariesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getTaskSummariesResponse
#define SOAP_TYPE_ns5__getTaskSummariesResponse (596)
/* ns5:getTaskSummariesResponse */
class SOAP_CMAC ns5__getTaskSummariesResponse
{
public:
	int __size_getTaskSummariesResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-getTaskSummariesResponse> */
	__ns5__union_getTaskSummariesResponse *__union_getTaskSummariesResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 596; } /* = unique id SOAP_TYPE_ns5__getTaskSummariesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getTaskSummariesResponse(): __union_getTaskSummariesResponse(NULL), soap(NULL) { ns5__getTaskSummariesResponse::soap_default(NULL); }
	virtual ~ns5__getTaskSummariesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getWatchersRequest
#define SOAP_TYPE_ns5__getWatchersRequest (597)
/* ns5:getWatchersRequest */
class SOAP_CMAC ns5__getWatchersRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 597; } /* = unique id SOAP_TYPE_ns5__getWatchersRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getWatchersRequest(): soap(NULL) { ns5__getWatchersRequest::soap_default(NULL); }
	virtual ~ns5__getWatchersRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getWatchersResponse
#define SOAP_TYPE_ns5__getWatchersResponse (598)
/* ns5:getWatchersResponse */
class SOAP_CMAC ns5__getWatchersResponse
{
public:
	std::vector<class ns5__watcherInfo * >watcher;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:watcherInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 598; } /* = unique id SOAP_TYPE_ns5__getWatchersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getWatchersResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getWatchersResponse::soap_default(NULL); }
	virtual ~ns5__getWatchersResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__watcherInfo
#define SOAP_TYPE_ns5__watcherInfo (599)
/* ns5:watcherInfo */
class SOAP_CMAC ns5__watcherInfo
{
public:
	std::vector<class ns5__integerIdAttr * >item;	/* optional element of type ns5:integerIdAttr */
	std::string id;	/* required attribute */
	std::string email;	/* required attribute */
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 599; } /* = unique id SOAP_TYPE_ns5__watcherInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__watcherInfo(): soap(NULL) { ns5__watcherInfo::soap_default(NULL); }
	virtual ~ns5__watcherInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__integerIdAttr
#define SOAP_TYPE_ns5__integerIdAttr (600)
/* ns5:integerIdAttr */
class SOAP_CMAC ns5__integerIdAttr
{
public:
	int id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 600; } /* = unique id SOAP_TYPE_ns5__integerIdAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__integerIdAttr(): soap(NULL) { ns5__integerIdAttr::soap_default(NULL); }
	virtual ~ns5__integerIdAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getWatchingItemsRequest
#define SOAP_TYPE_ns5__getWatchingItemsRequest (601)
/* ns5:getWatchingItemsRequest */
class SOAP_CMAC ns5__getWatchingItemsRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 601; } /* = unique id SOAP_TYPE_ns5__getWatchingItemsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getWatchingItemsRequest(): soap(NULL) { ns5__getWatchingItemsRequest::soap_default(NULL); }
	virtual ~ns5__getWatchingItemsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getWatchingItemsResponse
#define SOAP_TYPE_ns5__getWatchingItemsResponse (602)
/* ns5:getWatchingItemsResponse */
class SOAP_CMAC ns5__getWatchingItemsResponse
{
public:
	std::vector<class ns5__watchingTarget * >target;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:watchingTarget */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 602; } /* = unique id SOAP_TYPE_ns5__getWatchingItemsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getWatchingItemsResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getWatchingItemsResponse::soap_default(NULL); }
	virtual ~ns5__getWatchingItemsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__watchingTarget
#define SOAP_TYPE_ns5__watchingTarget (603)
/* ns5:watchingTarget */
class SOAP_CMAC ns5__watchingTarget
{
public:
	std::vector<ns3__id * >item;	/* optional element of type ns3:id */
	std::string id;	/* required attribute */
	std::string email;	/* required attribute */
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 603; } /* = unique id SOAP_TYPE_ns5__watchingTarget */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__watchingTarget(): soap(NULL) { ns5__watchingTarget::soap_default(NULL); }
	virtual ~ns5__watchingTarget() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getWorkingHoursRequest
#define SOAP_TYPE_ns5__getWorkingHoursRequest (604)
/* ns5:getWorkingHoursRequest */
class SOAP_CMAC ns5__getWorkingHoursRequest
{
public:
	LONG64 s;	/* required attribute */
	LONG64 e;	/* required attribute */
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 604; } /* = unique id SOAP_TYPE_ns5__getWorkingHoursRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getWorkingHoursRequest(): id(NULL), name(NULL), soap(NULL) { ns5__getWorkingHoursRequest::soap_default(NULL); }
	virtual ~ns5__getWorkingHoursRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getWorkingHoursResponse
#define SOAP_TYPE_ns5__getWorkingHoursResponse (605)
/* ns5:getWorkingHoursResponse */
class SOAP_CMAC ns5__getWorkingHoursResponse
{
public:
	std::vector<ns5__freeBusyUserInfo * >usr;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:freeBusyUserInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 605; } /* = unique id SOAP_TYPE_ns5__getWorkingHoursResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getWorkingHoursResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__getWorkingHoursResponse::soap_default(NULL); }
	virtual ~ns5__getWorkingHoursResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getYahooAuthTokenRequest
#define SOAP_TYPE_ns5__getYahooAuthTokenRequest (606)
/* ns5:getYahooAuthTokenRequest */
class SOAP_CMAC ns5__getYahooAuthTokenRequest
{
public:
	std::string user;	/* required attribute */
	std::string password;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 606; } /* = unique id SOAP_TYPE_ns5__getYahooAuthTokenRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getYahooAuthTokenRequest(): soap(NULL) { ns5__getYahooAuthTokenRequest::soap_default(NULL); }
	virtual ~ns5__getYahooAuthTokenRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getYahooAuthTokenResponse
#define SOAP_TYPE_ns5__getYahooAuthTokenResponse (607)
/* ns5:getYahooAuthTokenResponse */
class SOAP_CMAC ns5__getYahooAuthTokenResponse
{
public:
	bool *failed;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 607; } /* = unique id SOAP_TYPE_ns5__getYahooAuthTokenResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getYahooAuthTokenResponse(): failed(NULL), soap(NULL) { ns5__getYahooAuthTokenResponse::soap_default(NULL); }
	virtual ~ns5__getYahooAuthTokenResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getYahooCookieRequest
#define SOAP_TYPE_ns5__getYahooCookieRequest (608)
/* ns5:getYahooCookieRequest */
class SOAP_CMAC ns5__getYahooCookieRequest
{
public:
	std::string user;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 608; } /* = unique id SOAP_TYPE_ns5__getYahooCookieRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getYahooCookieRequest(): soap(NULL) { ns5__getYahooCookieRequest::soap_default(NULL); }
	virtual ~ns5__getYahooCookieRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getYahooCookieResponse
#define SOAP_TYPE_ns5__getYahooCookieResponse (609)
/* ns5:getYahooCookieResponse */
class SOAP_CMAC ns5__getYahooCookieResponse
{
public:
	std::string *error;	/* optional attribute */
	std::string *crumb;	/* optional attribute */
	std::string *y;	/* optional attribute */
	std::string *t;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 609; } /* = unique id SOAP_TYPE_ns5__getYahooCookieResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getYahooCookieResponse(): error(NULL), crumb(NULL), y(NULL), t(NULL), soap(NULL) { ns5__getYahooCookieResponse::soap_default(NULL); }
	virtual ~ns5__getYahooCookieResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__grantPermissionRequest
#define SOAP_TYPE_ns5__grantPermissionRequest (610)
/* ns5:grantPermissionRequest */
class SOAP_CMAC ns5__grantPermissionRequest
{
public:
	std::vector<ns5__accountACEinfo * >ace;	/* optional element of type ns5:accountACEinfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 610; } /* = unique id SOAP_TYPE_ns5__grantPermissionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__grantPermissionRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__grantPermissionRequest::soap_default(NULL); }
	virtual ~ns5__grantPermissionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__grantPermissionResponse
#define SOAP_TYPE_ns5__grantPermissionResponse (611)
/* ns5:grantPermissionResponse */
class SOAP_CMAC ns5__grantPermissionResponse
{
public:
	std::vector<ns5__accountACEinfo * >ace;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:accountACEinfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 611; } /* = unique id SOAP_TYPE_ns5__grantPermissionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__grantPermissionResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__grantPermissionResponse::soap_default(NULL); }
	virtual ~ns5__grantPermissionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__iCalReplyRequest
#define SOAP_TYPE_ns5__iCalReplyRequest (612)
/* ns5:iCalReplyRequest */
class SOAP_CMAC ns5__iCalReplyRequest
{
public:
	std::string ical;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 612; } /* = unique id SOAP_TYPE_ns5__iCalReplyRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__iCalReplyRequest(): soap(NULL) { ns5__iCalReplyRequest::soap_default(NULL); }
	virtual ~ns5__iCalReplyRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__iCalReplyResponse
#define SOAP_TYPE_ns5__iCalReplyResponse (613)
/* ns5:iCalReplyResponse */
class SOAP_CMAC ns5__iCalReplyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 613; } /* = unique id SOAP_TYPE_ns5__iCalReplyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__iCalReplyResponse(): soap(NULL) { ns5__iCalReplyResponse::soap_default(NULL); }
	virtual ~ns5__iCalReplyResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importAppointmentsRequest
#define SOAP_TYPE_ns5__importAppointmentsRequest (614)
/* ns5:importAppointmentsRequest */
class SOAP_CMAC ns5__importAppointmentsRequest
{
public:
	class ns5__contentSpec *content;	/* required element of type ns5:contentSpec */
	std::string *l;	/* optional attribute */
	std::string ct;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 614; } /* = unique id SOAP_TYPE_ns5__importAppointmentsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importAppointmentsRequest(): content(NULL), l(NULL), soap(NULL) { ns5__importAppointmentsRequest::soap_default(NULL); }
	virtual ~ns5__importAppointmentsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importAppointmentsResponse
#define SOAP_TYPE_ns5__importAppointmentsResponse (616)
/* ns5:importAppointmentsResponse */
class SOAP_CMAC ns5__importAppointmentsResponse
{
public:
	std::string ids;	/* required attribute */
	int n;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 616; } /* = unique id SOAP_TYPE_ns5__importAppointmentsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importAppointmentsResponse(): soap(NULL) { ns5__importAppointmentsResponse::soap_default(NULL); }
	virtual ~ns5__importAppointmentsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importContactsRequest
#define SOAP_TYPE_ns5__importContactsRequest (617)
/* ns5:importContactsRequest */
class SOAP_CMAC ns5__importContactsRequest
{
public:
	class ns5__content *content;	/* required element of type ns5:content */
	std::string ct;	/* required attribute */
	std::string *l;	/* optional attribute */
	std::string *csvfmt;	/* optional attribute */
	std::string *csvlocale;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 617; } /* = unique id SOAP_TYPE_ns5__importContactsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importContactsRequest(): content(NULL), l(NULL), csvfmt(NULL), csvlocale(NULL), soap(NULL) { ns5__importContactsRequest::soap_default(NULL); }
	virtual ~ns5__importContactsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importContactsResponse
#define SOAP_TYPE_ns5__importContactsResponse (619)
/* ns5:importContactsResponse */
class SOAP_CMAC ns5__importContactsResponse
{
public:
	class ns5__importContact *cn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:importContact */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 619; } /* = unique id SOAP_TYPE_ns5__importContactsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importContactsResponse(): cn(NULL), soap(NULL) { ns5__importContactsResponse::soap_default(NULL); }
	virtual ~ns5__importContactsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importContact
#define SOAP_TYPE_ns5__importContact (620)
/* ns5:importContact */
class SOAP_CMAC ns5__importContact
{
public:
	LONG64 n;	/* required attribute */
	std::string ids;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 620; } /* = unique id SOAP_TYPE_ns5__importContact */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importContact(): soap(NULL) { ns5__importContact::soap_default(NULL); }
	virtual ~ns5__importContact() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_importDataRequest
#define SOAP_TYPE__ns5__union_importDataRequest (1436)
/* xsd:choice */
union _ns5__union_importDataRequest
{
#define SOAP_UNION__ns5__union_importDataRequest_imap	(1)
	ns5__imapDataSourceNameOrId *imap;
#define SOAP_UNION__ns5__union_importDataRequest_pop3	(2)
	ns5__pop3DataSourceNameOrId *pop3;
#define SOAP_UNION__ns5__union_importDataRequest_caldav	(3)
	ns5__caldavDataSourceNameOrId *caldav;
#define SOAP_UNION__ns5__union_importDataRequest_yab	(4)
	ns5__yabDataSourceNameOrId *yab;
#define SOAP_UNION__ns5__union_importDataRequest_rss	(5)
	ns5__rssDataSourceNameOrId *rss;
#define SOAP_UNION__ns5__union_importDataRequest_gal	(6)
	ns5__galDataSourceNameOrId *gal;
#define SOAP_UNION__ns5__union_importDataRequest_cal	(7)
	ns5__calDataSourceNameOrId *cal;
#define SOAP_UNION__ns5__union_importDataRequest_unknown	(8)
	ns5__unknownDataSourceNameOrId *unknown;
};
#endif

#ifndef SOAP_TYPE___ns5__union_importDataRequest
#define SOAP_TYPE___ns5__union_importDataRequest (1435)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_importDataRequest
{
public:
	int __union_importDataRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_importDataRequest union_importDataRequest;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1435; } /* = unique id SOAP_TYPE___ns5__union_importDataRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_importDataRequest() { __ns5__union_importDataRequest::soap_default(NULL); }
	virtual ~__ns5__union_importDataRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importDataRequest
#define SOAP_TYPE_ns5__importDataRequest (621)
/* ns5:importDataRequest */
class SOAP_CMAC ns5__importDataRequest
{
public:
	int __size_importDataRequest;	/* sequence of elements <-union-importDataRequest> */
	__ns5__union_importDataRequest *__union_importDataRequest;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 621; } /* = unique id SOAP_TYPE_ns5__importDataRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importDataRequest(): __union_importDataRequest(NULL), soap(NULL) { ns5__importDataRequest::soap_default(NULL); }
	virtual ~ns5__importDataRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importDataResponse
#define SOAP_TYPE_ns5__importDataResponse (622)
/* ns5:importDataResponse */
class SOAP_CMAC ns5__importDataResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 622; } /* = unique id SOAP_TYPE_ns5__importDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importDataResponse(): soap(NULL) { ns5__importDataResponse::soap_default(NULL); }
	virtual ~ns5__importDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__invalidateReminderDeviceRequest
#define SOAP_TYPE_ns5__invalidateReminderDeviceRequest (623)
/* ns5:invalidateReminderDeviceRequest */
class SOAP_CMAC ns5__invalidateReminderDeviceRequest
{
public:
	std::string a;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 623; } /* = unique id SOAP_TYPE_ns5__invalidateReminderDeviceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__invalidateReminderDeviceRequest(): soap(NULL) { ns5__invalidateReminderDeviceRequest::soap_default(NULL); }
	virtual ~ns5__invalidateReminderDeviceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__invalidateReminderDeviceResponse
#define SOAP_TYPE_ns5__invalidateReminderDeviceResponse (624)
/* ns5:invalidateReminderDeviceResponse */
class SOAP_CMAC ns5__invalidateReminderDeviceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 624; } /* = unique id SOAP_TYPE_ns5__invalidateReminderDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__invalidateReminderDeviceResponse(): soap(NULL) { ns5__invalidateReminderDeviceResponse::soap_default(NULL); }
	virtual ~ns5__invalidateReminderDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__itemActionRequest
#define SOAP_TYPE_ns5__itemActionRequest (625)
/* ns5:itemActionRequest */
class SOAP_CMAC ns5__itemActionRequest
{
public:
	ns5__actionSelector *action;	/* required element of type ns5:actionSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 625; } /* = unique id SOAP_TYPE_ns5__itemActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__itemActionRequest(): action(NULL), soap(NULL) { ns5__itemActionRequest::soap_default(NULL); }
	virtual ~ns5__itemActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__itemActionResponse
#define SOAP_TYPE_ns5__itemActionResponse (626)
/* ns5:itemActionResponse */
class SOAP_CMAC ns5__itemActionResponse
{
public:
	ns5__idAndOperation *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:idAndOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 626; } /* = unique id SOAP_TYPE_ns5__itemActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__itemActionResponse(): action(NULL), soap(NULL) { ns5__itemActionResponse::soap_default(NULL); }
	virtual ~ns5__itemActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__listDocumentRevisionsRequest
#define SOAP_TYPE_ns5__listDocumentRevisionsRequest (627)
/* ns5:listDocumentRevisionsRequest */
class SOAP_CMAC ns5__listDocumentRevisionsRequest
{
public:
	class ns5__listDocumentRevisionsSpec *doc;	/* required element of type ns5:listDocumentRevisionsSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 627; } /* = unique id SOAP_TYPE_ns5__listDocumentRevisionsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__listDocumentRevisionsRequest(): doc(NULL), soap(NULL) { ns5__listDocumentRevisionsRequest::soap_default(NULL); }
	virtual ~ns5__listDocumentRevisionsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__listDocumentRevisionsSpec
#define SOAP_TYPE_ns5__listDocumentRevisionsSpec (628)
/* ns5:listDocumentRevisionsSpec */
class SOAP_CMAC ns5__listDocumentRevisionsSpec
{
public:
	std::string id;	/* required attribute */
	int *ver;	/* optional attribute */
	int *count;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 628; } /* = unique id SOAP_TYPE_ns5__listDocumentRevisionsSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__listDocumentRevisionsSpec(): ver(NULL), count(NULL), soap(NULL) { ns5__listDocumentRevisionsSpec::soap_default(NULL); }
	virtual ~ns5__listDocumentRevisionsSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__listDocumentRevisionsResponse
#define SOAP_TYPE_ns5__listDocumentRevisionsResponse (629)
/* ns5:listDocumentRevisionsResponse */
class SOAP_CMAC ns5__listDocumentRevisionsResponse
{
public:
	std::vector<ns5__documentInfo * >doc;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:documentInfo */
	std::vector<ns5__idEmailName * >user;	/* optional element of type ns5:idEmailName */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 629; } /* = unique id SOAP_TYPE_ns5__listDocumentRevisionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__listDocumentRevisionsResponse(): soap(NULL) { ns5__listDocumentRevisionsResponse::soap_default(NULL); }
	virtual ~ns5__listDocumentRevisionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyContactRequest
#define SOAP_TYPE_ns5__modifyContactRequest (632)
/* ns5:modifyContactRequest */
class SOAP_CMAC ns5__modifyContactRequest
{
public:
	class ns5__modifyContactSpec *cn;	/* required element of type ns5:modifyContactSpec */
	bool *replace;	/* optional attribute */
	bool *verbose;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 632; } /* = unique id SOAP_TYPE_ns5__modifyContactRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyContactRequest(): cn(NULL), replace(NULL), verbose(NULL), soap(NULL) { ns5__modifyContactRequest::soap_default(NULL); }
	virtual ~ns5__modifyContactRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyContactSpec
#define SOAP_TYPE_ns5__modifyContactSpec (633)
/* ns5:modifyContactSpec */
class SOAP_CMAC ns5__modifyContactSpec
{
public:
	std::vector<class ns5__modifyContactAttr * >a;	/* optional element of type ns5:modifyContactAttr */
	std::vector<class ns5__modifyContactGroupMember * >m;	/* optional element of type ns5:modifyContactGroupMember */
	int *id;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 633; } /* = unique id SOAP_TYPE_ns5__modifyContactSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyContactSpec(): id(NULL), tn(NULL), soap(NULL) { ns5__modifyContactSpec::soap_default(NULL); }
	virtual ~ns5__modifyContactSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyContactGroupMember
#define SOAP_TYPE_ns5__modifyContactGroupMember (635)
/* ns5:modifyContactGroupMember */
class SOAP_CMAC ns5__modifyContactGroupMember
{
public:
	enum ns5__modifyGroupMemberOperation *op;	/* optional attribute */
	std::string type;	/* required attribute */
	std::string value;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 635; } /* = unique id SOAP_TYPE_ns5__modifyContactGroupMember */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyContactGroupMember(): op(NULL), soap(NULL) { ns5__modifyContactGroupMember::soap_default(NULL); }
	virtual ~ns5__modifyContactGroupMember() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyContactResponse
#define SOAP_TYPE_ns5__modifyContactResponse (636)
/* ns5:modifyContactResponse */
class SOAP_CMAC ns5__modifyContactResponse
{
public:
	ns5__contactInfo *cn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:contactInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 636; } /* = unique id SOAP_TYPE_ns5__modifyContactResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyContactResponse(): cn(NULL), soap(NULL) { ns5__modifyContactResponse::soap_default(NULL); }
	virtual ~ns5__modifyContactResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_modifyDataSourceRequest
#define SOAP_TYPE__ns5__union_modifyDataSourceRequest (1446)
/* xsd:choice */
union _ns5__union_modifyDataSourceRequest
{
#define SOAP_UNION__ns5__union_modifyDataSourceRequest_imap	(1)
	ns5__mailImapDataSource *imap;
#define SOAP_UNION__ns5__union_modifyDataSourceRequest_pop3	(2)
	ns5__mailPop3DataSource *pop3;
#define SOAP_UNION__ns5__union_modifyDataSourceRequest_caldav	(3)
	ns5__mailCaldavDataSource *caldav;
#define SOAP_UNION__ns5__union_modifyDataSourceRequest_yab	(4)
	ns5__mailYabDataSource *yab;
#define SOAP_UNION__ns5__union_modifyDataSourceRequest_rss	(5)
	ns5__mailRssDataSource *rss;
#define SOAP_UNION__ns5__union_modifyDataSourceRequest_gal	(6)
	ns5__mailGalDataSource *gal;
#define SOAP_UNION__ns5__union_modifyDataSourceRequest_cal	(7)
	ns5__mailCalDataSource *cal;
#define SOAP_UNION__ns5__union_modifyDataSourceRequest_unknown	(8)
	ns5__mailUnknownDataSource *unknown;
};
#endif

#ifndef SOAP_TYPE_ns5__modifyDataSourceRequest
#define SOAP_TYPE_ns5__modifyDataSourceRequest (637)
/* ns5:modifyDataSourceRequest */
class SOAP_CMAC ns5__modifyDataSourceRequest
{
public:
	int __union_modifyDataSourceRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_modifyDataSourceRequest union_modifyDataSourceRequest;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 637; } /* = unique id SOAP_TYPE_ns5__modifyDataSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyDataSourceRequest(): soap(NULL) { ns5__modifyDataSourceRequest::soap_default(NULL); }
	virtual ~ns5__modifyDataSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyDataSourceResponse
#define SOAP_TYPE_ns5__modifyDataSourceResponse (638)
/* ns5:modifyDataSourceResponse */
class SOAP_CMAC ns5__modifyDataSourceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 638; } /* = unique id SOAP_TYPE_ns5__modifyDataSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyDataSourceResponse(): soap(NULL) { ns5__modifyDataSourceResponse::soap_default(NULL); }
	virtual ~ns5__modifyDataSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__modifyFilterRulesRequest_filterRules
#define SOAP_TYPE__ns5__modifyFilterRulesRequest_filterRules (1447)
/* ns5:modifyFilterRulesRequest-filterRules */
class SOAP_CMAC _ns5__modifyFilterRulesRequest_filterRules
{
public:
	std::vector<ns5__filterRule * >filterRule;	/* optional element of type ns5:filterRule */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1447; } /* = unique id SOAP_TYPE__ns5__modifyFilterRulesRequest_filterRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__modifyFilterRulesRequest_filterRules(): unusedCodeGenHelper(NULL) { _ns5__modifyFilterRulesRequest_filterRules::soap_default(NULL); }
	virtual ~_ns5__modifyFilterRulesRequest_filterRules() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyFilterRulesRequest
#define SOAP_TYPE_ns5__modifyFilterRulesRequest (639)
/* ns5:modifyFilterRulesRequest */
class SOAP_CMAC ns5__modifyFilterRulesRequest
{
public:
	_ns5__modifyFilterRulesRequest_filterRules filterRules;	/* required element of type ns5:modifyFilterRulesRequest-filterRules */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 639; } /* = unique id SOAP_TYPE_ns5__modifyFilterRulesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyFilterRulesRequest(): soap(NULL) { ns5__modifyFilterRulesRequest::soap_default(NULL); }
	virtual ~ns5__modifyFilterRulesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyFilterRulesResponse
#define SOAP_TYPE_ns5__modifyFilterRulesResponse (640)
/* ns5:modifyFilterRulesResponse */
class SOAP_CMAC ns5__modifyFilterRulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 640; } /* = unique id SOAP_TYPE_ns5__modifyFilterRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyFilterRulesResponse(): soap(NULL) { ns5__modifyFilterRulesResponse::soap_default(NULL); }
	virtual ~ns5__modifyFilterRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyMailboxMetadataRequest
#define SOAP_TYPE_ns5__modifyMailboxMetadataRequest (641)
/* ns5:modifyMailboxMetadataRequest */
class SOAP_CMAC ns5__modifyMailboxMetadataRequest
{
public:
	ns5__mailCustomMetadata *meta;	/* optional element of type ns5:mailCustomMetadata */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 641; } /* = unique id SOAP_TYPE_ns5__modifyMailboxMetadataRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyMailboxMetadataRequest(): meta(NULL), soap(NULL) { ns5__modifyMailboxMetadataRequest::soap_default(NULL); }
	virtual ~ns5__modifyMailboxMetadataRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyMailboxMetadataResponse
#define SOAP_TYPE_ns5__modifyMailboxMetadataResponse (642)
/* ns5:modifyMailboxMetadataResponse */
class SOAP_CMAC ns5__modifyMailboxMetadataResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 642; } /* = unique id SOAP_TYPE_ns5__modifyMailboxMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyMailboxMetadataResponse(): soap(NULL) { ns5__modifyMailboxMetadataResponse::soap_default(NULL); }
	virtual ~ns5__modifyMailboxMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__modifyOutgoingFilterRulesRequest_filterRules
#define SOAP_TYPE__ns5__modifyOutgoingFilterRulesRequest_filterRules (1448)
/* ns5:modifyOutgoingFilterRulesRequest-filterRules */
class SOAP_CMAC _ns5__modifyOutgoingFilterRulesRequest_filterRules
{
public:
	std::vector<ns5__filterRule * >filterRule;	/* optional element of type ns5:filterRule */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1448; } /* = unique id SOAP_TYPE__ns5__modifyOutgoingFilterRulesRequest_filterRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__modifyOutgoingFilterRulesRequest_filterRules(): unusedCodeGenHelper(NULL) { _ns5__modifyOutgoingFilterRulesRequest_filterRules::soap_default(NULL); }
	virtual ~_ns5__modifyOutgoingFilterRulesRequest_filterRules() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyOutgoingFilterRulesRequest
#define SOAP_TYPE_ns5__modifyOutgoingFilterRulesRequest (643)
/* ns5:modifyOutgoingFilterRulesRequest */
class SOAP_CMAC ns5__modifyOutgoingFilterRulesRequest
{
public:
	_ns5__modifyOutgoingFilterRulesRequest_filterRules filterRules;	/* required element of type ns5:modifyOutgoingFilterRulesRequest-filterRules */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 643; } /* = unique id SOAP_TYPE_ns5__modifyOutgoingFilterRulesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyOutgoingFilterRulesRequest(): soap(NULL) { ns5__modifyOutgoingFilterRulesRequest::soap_default(NULL); }
	virtual ~ns5__modifyOutgoingFilterRulesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyOutgoingFilterRulesResponse
#define SOAP_TYPE_ns5__modifyOutgoingFilterRulesResponse (644)
/* ns5:modifyOutgoingFilterRulesResponse */
class SOAP_CMAC ns5__modifyOutgoingFilterRulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 644; } /* = unique id SOAP_TYPE_ns5__modifyOutgoingFilterRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyOutgoingFilterRulesResponse(): soap(NULL) { ns5__modifyOutgoingFilterRulesResponse::soap_default(NULL); }
	virtual ~ns5__modifyOutgoingFilterRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifySearchFolderRequest
#define SOAP_TYPE_ns5__modifySearchFolderRequest (645)
/* ns5:modifySearchFolderRequest */
class SOAP_CMAC ns5__modifySearchFolderRequest
{
public:
	class ns5__modifySearchFolderSpec *search;	/* required element of type ns5:modifySearchFolderSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 645; } /* = unique id SOAP_TYPE_ns5__modifySearchFolderRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifySearchFolderRequest(): search(NULL), soap(NULL) { ns5__modifySearchFolderRequest::soap_default(NULL); }
	virtual ~ns5__modifySearchFolderRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifySearchFolderSpec
#define SOAP_TYPE_ns5__modifySearchFolderSpec (646)
/* ns5:modifySearchFolderSpec */
class SOAP_CMAC ns5__modifySearchFolderSpec
{
public:
	std::string id;	/* required attribute */
	std::string query;	/* required attribute */
	std::string *types;	/* optional attribute */
	std::string *sortBy;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 646; } /* = unique id SOAP_TYPE_ns5__modifySearchFolderSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifySearchFolderSpec(): types(NULL), sortBy(NULL), soap(NULL) { ns5__modifySearchFolderSpec::soap_default(NULL); }
	virtual ~ns5__modifySearchFolderSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifySearchFolderResponse
#define SOAP_TYPE_ns5__modifySearchFolderResponse (647)
/* ns5:modifySearchFolderResponse */
class SOAP_CMAC ns5__modifySearchFolderResponse
{
public:
	ns5__searchFolder *search;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:searchFolder */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 647; } /* = unique id SOAP_TYPE_ns5__modifySearchFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifySearchFolderResponse(): search(NULL), soap(NULL) { ns5__modifySearchFolderResponse::soap_default(NULL); }
	virtual ~ns5__modifySearchFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__msgActionRequest
#define SOAP_TYPE_ns5__msgActionRequest (650)
/* ns5:msgActionRequest */
class SOAP_CMAC ns5__msgActionRequest
{
public:
	ns5__actionSelector *action;	/* required element of type ns5:actionSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 650; } /* = unique id SOAP_TYPE_ns5__msgActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__msgActionRequest(): action(NULL), soap(NULL) { ns5__msgActionRequest::soap_default(NULL); }
	virtual ~ns5__msgActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__msgActionResponse
#define SOAP_TYPE_ns5__msgActionResponse (651)
/* ns5:msgActionResponse */
class SOAP_CMAC ns5__msgActionResponse
{
public:
	ns5__idAndOperation *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:idAndOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 651; } /* = unique id SOAP_TYPE_ns5__msgActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__msgActionResponse(): action(NULL), soap(NULL) { ns5__msgActionResponse::soap_default(NULL); }
	virtual ~ns5__msgActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__noOpRequest
#define SOAP_TYPE_ns5__noOpRequest (652)
/* ns5:noOpRequest */
class SOAP_CMAC ns5__noOpRequest
{
public:
	bool *wait;	/* optional attribute */
	bool *delegate;	/* optional attribute */
	bool *limitToOneBlocked;	/* optional attribute */
	LONG64 *timeout;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 652; } /* = unique id SOAP_TYPE_ns5__noOpRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__noOpRequest(): wait(NULL), delegate(NULL), limitToOneBlocked(NULL), timeout(NULL), soap(NULL) { ns5__noOpRequest::soap_default(NULL); }
	virtual ~ns5__noOpRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__noOpResponse
#define SOAP_TYPE_ns5__noOpResponse (653)
/* ns5:noOpResponse */
class SOAP_CMAC ns5__noOpResponse
{
public:
	bool *waitDisallowed;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 653; } /* = unique id SOAP_TYPE_ns5__noOpResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__noOpResponse(): waitDisallowed(NULL), soap(NULL) { ns5__noOpResponse::soap_default(NULL); }
	virtual ~ns5__noOpResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__noteActionRequest
#define SOAP_TYPE_ns5__noteActionRequest (654)
/* ns5:noteActionRequest */
class SOAP_CMAC ns5__noteActionRequest
{
public:
	class ns5__noteActionSelector *action;	/* required element of type ns5:noteActionSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 654; } /* = unique id SOAP_TYPE_ns5__noteActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__noteActionRequest(): action(NULL), soap(NULL) { ns5__noteActionRequest::soap_default(NULL); }
	virtual ~ns5__noteActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__noteActionResponse
#define SOAP_TYPE_ns5__noteActionResponse (655)
/* ns5:noteActionResponse */
class SOAP_CMAC ns5__noteActionResponse
{
public:
	ns5__idAndOperation *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:idAndOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 655; } /* = unique id SOAP_TYPE_ns5__noteActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__noteActionResponse(): action(NULL), soap(NULL) { ns5__noteActionResponse::soap_default(NULL); }
	virtual ~ns5__noteActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__purgeRevisionRequest
#define SOAP_TYPE_ns5__purgeRevisionRequest (656)
/* ns5:purgeRevisionRequest */
class SOAP_CMAC ns5__purgeRevisionRequest
{
public:
	class ns5__purgeRevisionSpec *revision;	/* required element of type ns5:purgeRevisionSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 656; } /* = unique id SOAP_TYPE_ns5__purgeRevisionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__purgeRevisionRequest(): revision(NULL), soap(NULL) { ns5__purgeRevisionRequest::soap_default(NULL); }
	virtual ~ns5__purgeRevisionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__purgeRevisionSpec
#define SOAP_TYPE_ns5__purgeRevisionSpec (657)
/* ns5:purgeRevisionSpec */
class SOAP_CMAC ns5__purgeRevisionSpec
{
public:
	std::string id;	/* required attribute */
	int ver;	/* required attribute */
	bool *includeOlderRevisions;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 657; } /* = unique id SOAP_TYPE_ns5__purgeRevisionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__purgeRevisionSpec(): includeOlderRevisions(NULL), soap(NULL) { ns5__purgeRevisionSpec::soap_default(NULL); }
	virtual ~ns5__purgeRevisionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__purgeRevisionResponse
#define SOAP_TYPE_ns5__purgeRevisionResponse (658)
/* ns5:purgeRevisionResponse */
class SOAP_CMAC ns5__purgeRevisionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 658; } /* = unique id SOAP_TYPE_ns5__purgeRevisionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__purgeRevisionResponse(): soap(NULL) { ns5__purgeRevisionResponse::soap_default(NULL); }
	virtual ~ns5__purgeRevisionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rankingActionRequest
#define SOAP_TYPE_ns5__rankingActionRequest (659)
/* ns5:rankingActionRequest */
class SOAP_CMAC ns5__rankingActionRequest
{
public:
	class ns5__rankingActionSpec *action;	/* required element of type ns5:rankingActionSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 659; } /* = unique id SOAP_TYPE_ns5__rankingActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rankingActionRequest(): action(NULL), soap(NULL) { ns5__rankingActionRequest::soap_default(NULL); }
	virtual ~ns5__rankingActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rankingActionSpec
#define SOAP_TYPE_ns5__rankingActionSpec (660)
/* ns5:rankingActionSpec */
class SOAP_CMAC ns5__rankingActionSpec
{
public:
	std::string op;	/* required attribute */
	std::string *email;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 660; } /* = unique id SOAP_TYPE_ns5__rankingActionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rankingActionSpec(): email(NULL), soap(NULL) { ns5__rankingActionSpec::soap_default(NULL); }
	virtual ~ns5__rankingActionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rankingActionResponse
#define SOAP_TYPE_ns5__rankingActionResponse (661)
/* ns5:rankingActionResponse */
class SOAP_CMAC ns5__rankingActionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 661; } /* = unique id SOAP_TYPE_ns5__rankingActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rankingActionResponse(): soap(NULL) { ns5__rankingActionResponse::soap_default(NULL); }
	virtual ~ns5__rankingActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__registerDeviceRequest
#define SOAP_TYPE_ns5__registerDeviceRequest (662)
/* ns5:registerDeviceRequest */
class SOAP_CMAC ns5__registerDeviceRequest
{
public:
	ns3__namedElement *device;	/* required element of type ns3:namedElement */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 662; } /* = unique id SOAP_TYPE_ns5__registerDeviceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__registerDeviceRequest(): device(NULL), soap(NULL) { ns5__registerDeviceRequest::soap_default(NULL); }
	virtual ~ns5__registerDeviceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__registerDeviceResponse
#define SOAP_TYPE_ns5__registerDeviceResponse (663)
/* ns5:registerDeviceResponse */
class SOAP_CMAC ns5__registerDeviceResponse
{
public:
	ns5__nameId *device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:nameId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 663; } /* = unique id SOAP_TYPE_ns5__registerDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__registerDeviceResponse(): device(NULL), soap(NULL) { ns5__registerDeviceResponse::soap_default(NULL); }
	virtual ~ns5__registerDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__removeAttachmentsRequest
#define SOAP_TYPE_ns5__removeAttachmentsRequest (664)
/* ns5:removeAttachmentsRequest */
class SOAP_CMAC ns5__removeAttachmentsRequest
{
public:
	class ns5__msgPartIds *m;	/* required element of type ns5:msgPartIds */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 664; } /* = unique id SOAP_TYPE_ns5__removeAttachmentsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__removeAttachmentsRequest(): m(NULL), soap(NULL) { ns5__removeAttachmentsRequest::soap_default(NULL); }
	virtual ~ns5__removeAttachmentsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__msgPartIds
#define SOAP_TYPE_ns5__msgPartIds (665)
/* ns5:msgPartIds */
class SOAP_CMAC ns5__msgPartIds
{
public:
	std::string id;	/* required attribute */
	std::string part;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 665; } /* = unique id SOAP_TYPE_ns5__msgPartIds */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__msgPartIds(): soap(NULL) { ns5__msgPartIds::soap_default(NULL); }
	virtual ~ns5__msgPartIds() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_removeAttachmentsResponse
#define SOAP_TYPE__ns5__union_removeAttachmentsResponse (1454)
/* xsd:choice */
union _ns5__union_removeAttachmentsResponse
{
#define SOAP_UNION__ns5__union_removeAttachmentsResponse_chat	(1)
	ns5__chatMessageInfo *chat;
#define SOAP_UNION__ns5__union_removeAttachmentsResponse_m	(2)
	ns5__messageInfo *m;
};
#endif

#ifndef SOAP_TYPE_ns5__removeAttachmentsResponse
#define SOAP_TYPE_ns5__removeAttachmentsResponse (666)
/* ns5:removeAttachmentsResponse */
class SOAP_CMAC ns5__removeAttachmentsResponse
{
public:
	int __union_removeAttachmentsResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* union discriminant (of union defined below) */
	union _ns5__union_removeAttachmentsResponse union_removeAttachmentsResponse;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 666; } /* = unique id SOAP_TYPE_ns5__removeAttachmentsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__removeAttachmentsResponse(): soap(NULL) { ns5__removeAttachmentsResponse::soap_default(NULL); }
	virtual ~ns5__removeAttachmentsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__revokePermissionRequest
#define SOAP_TYPE_ns5__revokePermissionRequest (667)
/* ns5:revokePermissionRequest */
class SOAP_CMAC ns5__revokePermissionRequest
{
public:
	std::vector<ns5__accountACEinfo * >ace;	/* optional element of type ns5:accountACEinfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 667; } /* = unique id SOAP_TYPE_ns5__revokePermissionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__revokePermissionRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__revokePermissionRequest::soap_default(NULL); }
	virtual ~ns5__revokePermissionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__revokePermissionResponse
#define SOAP_TYPE_ns5__revokePermissionResponse (668)
/* ns5:revokePermissionResponse */
class SOAP_CMAC ns5__revokePermissionResponse
{
public:
	std::vector<ns5__accountACEinfo * >ace;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:accountACEinfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 668; } /* = unique id SOAP_TYPE_ns5__revokePermissionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__revokePermissionResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns5__revokePermissionResponse::soap_default(NULL); }
	virtual ~ns5__revokePermissionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__saveDocumentRequest
#define SOAP_TYPE_ns5__saveDocumentRequest (669)
/* ns5:saveDocumentRequest */
class SOAP_CMAC ns5__saveDocumentRequest
{
public:
	class ns5__documentSpec *doc;	/* required element of type ns5:documentSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 669; } /* = unique id SOAP_TYPE_ns5__saveDocumentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__saveDocumentRequest(): doc(NULL), soap(NULL) { ns5__saveDocumentRequest::soap_default(NULL); }
	virtual ~ns5__saveDocumentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__documentSpec
#define SOAP_TYPE_ns5__documentSpec (670)
/* ns5:documentSpec */
class SOAP_CMAC ns5__documentSpec
{
public:
	ns3__id *upload;	/* optional element of type ns3:id */
	class ns5__messagePartSpec *m;	/* optional element of type ns5:messagePartSpec */
	class ns5__idVersion *doc;	/* optional element of type ns5:idVersion */
	std::string *name;	/* optional attribute */
	std::string *ct;	/* optional attribute */
	std::string *desc;	/* optional attribute */
	std::string *l;	/* optional attribute */
	std::string *id;	/* optional attribute */
	int *ver;	/* optional attribute */
	std::string *content;	/* optional attribute */
	bool *descEnabled;	/* optional attribute */
	std::string *f;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 670; } /* = unique id SOAP_TYPE_ns5__documentSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__documentSpec(): upload(NULL), m(NULL), doc(NULL), name(NULL), ct(NULL), desc(NULL), l(NULL), id(NULL), ver(NULL), content(NULL), descEnabled(NULL), f(NULL), soap(NULL) { ns5__documentSpec::soap_default(NULL); }
	virtual ~ns5__documentSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__messagePartSpec
#define SOAP_TYPE_ns5__messagePartSpec (671)
/* ns5:messagePartSpec */
class SOAP_CMAC ns5__messagePartSpec
{
public:
	std::string id;	/* required attribute */
	std::string part;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 671; } /* = unique id SOAP_TYPE_ns5__messagePartSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__messagePartSpec(): soap(NULL) { ns5__messagePartSpec::soap_default(NULL); }
	virtual ~ns5__messagePartSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__idVersion
#define SOAP_TYPE_ns5__idVersion (672)
/* ns5:idVersion */
class SOAP_CMAC ns5__idVersion
{
public:
	std::string id;	/* required attribute */
	int *ver;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 672; } /* = unique id SOAP_TYPE_ns5__idVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__idVersion(): ver(NULL), soap(NULL) { ns5__idVersion::soap_default(NULL); }
	virtual ~ns5__idVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns5__saveDocumentResponse
#define SOAP_TYPE_ns5__saveDocumentResponse (673)
/* ns5:saveDocumentResponse */
class SOAP_CMAC ns5__saveDocumentResponse
{
public:
	class ns5__idVersionName *doc;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:idVersionName */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 673; } /* = unique id SOAP_TYPE_ns5__saveDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__saveDocumentResponse(): doc(NULL), soap(NULL) { ns5__saveDocumentResponse::soap_default(NULL); }
	virtual ~ns5__saveDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__idVersionName
#define SOAP_TYPE_ns5__idVersionName (674)
/* ns5:idVersionName */
class SOAP_CMAC ns5__idVersionName
{
public:
	std::string id;	/* required attribute */
	int ver;	/* required attribute */
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 674; } /* = unique id SOAP_TYPE_ns5__idVersionName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__idVersionName(): soap(NULL) { ns5__idVersionName::soap_default(NULL); }
	virtual ~ns5__idVersionName() { }
};
#endif

#ifndef SOAP_TYPE_ns5__saveDraftRequest
#define SOAP_TYPE_ns5__saveDraftRequest (675)
/* ns5:saveDraftRequest */
class SOAP_CMAC ns5__saveDraftRequest
{
public:
	class ns5__saveDraftMsg *m;	/* optional element of type ns5:saveDraftMsg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 675; } /* = unique id SOAP_TYPE_ns5__saveDraftRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__saveDraftRequest(): m(NULL), soap(NULL) { ns5__saveDraftRequest::soap_default(NULL); }
	virtual ~ns5__saveDraftRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_saveDraftResponse
#define SOAP_TYPE__ns5__union_saveDraftResponse (1460)
/* xsd:choice */
union _ns5__union_saveDraftResponse
{
#define SOAP_UNION__ns5__union_saveDraftResponse_chat	(1)
	ns5__chatMessageInfo *chat;
#define SOAP_UNION__ns5__union_saveDraftResponse_m	(2)
	ns5__messageInfo *m;
};
#endif

#ifndef SOAP_TYPE_ns5__saveDraftResponse
#define SOAP_TYPE_ns5__saveDraftResponse (677)
/* ns5:saveDraftResponse */
class SOAP_CMAC ns5__saveDraftResponse
{
public:
	int __union_saveDraftResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* union discriminant (of union defined below) */
	union _ns5__union_saveDraftResponse union_saveDraftResponse;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 677; } /* = unique id SOAP_TYPE_ns5__saveDraftResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__saveDraftResponse(): soap(NULL) { ns5__saveDraftResponse::soap_default(NULL); }
	virtual ~ns5__saveDraftResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailSearchParams
#define SOAP_TYPE_ns5__mailSearchParams (679)
/* ns5:mailSearchParams */
class SOAP_CMAC ns5__mailSearchParams
{
public:
	std::string *query;	/* optional element of type xsd:string */
	std::vector<ns3__attributeName * >header;	/* optional element of type ns3:attributeName */
	ns5__calTZInfo *tz;	/* optional element of type ns5:calTZInfo */
	std::string *locale;	/* optional element of type xsd:string */
	ns3__cursorInfo *cursor;	/* optional element of type ns3:cursorInfo */
	bool *includeTagDeleted;	/* optional attribute */
	bool *includeTagMuted;	/* optional attribute */
	std::string *allowableTaskStatus;	/* optional attribute */
	LONG64 *calExpandInstStart;	/* optional attribute */
	LONG64 *calExpandInstEnd;	/* optional attribute */
	bool *inDumpster;	/* optional attribute */
	std::string *types;	/* optional attribute */
	std::string *groupBy;	/* optional attribute */
	bool *quick;	/* optional attribute */
	std::string *sortBy;	/* optional attribute */
	std::string *fetch;	/* optional attribute */
	bool *read;	/* optional attribute */
	int *max_;	/* optional attribute */
	bool *html;	/* optional attribute */
	bool *needExp;	/* optional attribute */
	bool *neuter;	/* optional attribute */
	bool *recip;	/* optional attribute */
	bool *prefetch;	/* optional attribute */
	std::string *resultMode;	/* optional attribute */
	std::string *field;	/* optional attribute */
	int *limit;	/* optional attribute */
	int *offset;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 679; } /* = unique id SOAP_TYPE_ns5__mailSearchParams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailSearchParams(): query(NULL), tz(NULL), locale(NULL), cursor(NULL), includeTagDeleted(NULL), includeTagMuted(NULL), allowableTaskStatus(NULL), calExpandInstStart(NULL), calExpandInstEnd(NULL), inDumpster(NULL), types(NULL), groupBy(NULL), quick(NULL), sortBy(NULL), fetch(NULL), read(NULL), max_(NULL), html(NULL), needExp(NULL), neuter(NULL), recip(NULL), prefetch(NULL), resultMode(NULL), field(NULL), limit(NULL), offset(NULL), soap(NULL) { ns5__mailSearchParams::soap_default(NULL); }
	virtual ~ns5__mailSearchParams() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_searchConvResponse_info
#define SOAP_TYPE__ns5__union_searchConvResponse_info (1468)
/* xsd:choice */
union _ns5__union_searchConvResponse_info
{
#define SOAP_UNION__ns5__union_searchConvResponse_info_suggest	(1)
	std::string *suggest;
#define SOAP_UNION__ns5__union_searchConvResponse_info_wildcard	(2)
	ns3__wildcardExpansionQueryInfo *wildcard;
};
#endif

#ifndef SOAP_TYPE___ns5__union_searchConvResponse_info
#define SOAP_TYPE___ns5__union_searchConvResponse_info (1465)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_searchConvResponse_info
{
public:
	int __union_searchConvResponse_info;	/* union discriminant (of union defined below) */
	union _ns5__union_searchConvResponse_info union_searchConvResponse_info;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1465; } /* = unique id SOAP_TYPE___ns5__union_searchConvResponse_info */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_searchConvResponse_info() { __ns5__union_searchConvResponse_info::soap_default(NULL); }
	virtual ~__ns5__union_searchConvResponse_info() { }
};
#endif

#ifndef SOAP_TYPE__ns5__searchConvResponse_info
#define SOAP_TYPE__ns5__searchConvResponse_info (1464)
/* ns5:searchConvResponse-info */
class SOAP_CMAC _ns5__searchConvResponse_info
{
public:
	int __size_searchConvResponse_info;	/* sequence of elements <-union-searchConvResponse-info> */
	__ns5__union_searchConvResponse_info *__union_searchConvResponse_info;
public:
	virtual int soap_type() const { return 1464; } /* = unique id SOAP_TYPE__ns5__searchConvResponse_info */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__searchConvResponse_info(): __union_searchConvResponse_info(NULL) { _ns5__searchConvResponse_info::soap_default(NULL); }
	virtual ~_ns5__searchConvResponse_info() { }
};
#endif

#ifndef SOAP_TYPE_ns5__searchConvResponse
#define SOAP_TYPE_ns5__searchConvResponse (680)
/* ns5:searchConvResponse */
class SOAP_CMAC ns5__searchConvResponse
{
public:
	class ns5__nestedSearchConversation *c;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:nestedSearchConversation */
	std::vector<class ns5__messageHitInfo * >m;	/* optional element of type ns5:messageHitInfo */
	_ns5__searchConvResponse_info *info;	/* optional element of type ns5:searchConvResponse-info */
	std::string *sortBy;	/* optional attribute */
	int *offset;	/* optional attribute */
	bool *more;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 680; } /* = unique id SOAP_TYPE_ns5__searchConvResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__searchConvResponse(): c(NULL), info(NULL), sortBy(NULL), offset(NULL), more(NULL), soap(NULL) { ns5__searchConvResponse::soap_default(NULL); }
	virtual ~ns5__searchConvResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_nestedSearchConversation_info
#define SOAP_TYPE__ns5__union_nestedSearchConversation_info (1473)
/* xsd:choice */
union _ns5__union_nestedSearchConversation_info
{
#define SOAP_UNION__ns5__union_nestedSearchConversation_info_suggest	(1)
	std::string *suggest;
#define SOAP_UNION__ns5__union_nestedSearchConversation_info_wildcard	(2)
	ns3__wildcardExpansionQueryInfo *wildcard;
};
#endif

#ifndef SOAP_TYPE___ns5__union_nestedSearchConversation_info
#define SOAP_TYPE___ns5__union_nestedSearchConversation_info (1472)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_nestedSearchConversation_info
{
public:
	int __union_nestedSearchConversation_info;	/* union discriminant (of union defined below) */
	union _ns5__union_nestedSearchConversation_info union_nestedSearchConversation_info;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1472; } /* = unique id SOAP_TYPE___ns5__union_nestedSearchConversation_info */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_nestedSearchConversation_info() { __ns5__union_nestedSearchConversation_info::soap_default(NULL); }
	virtual ~__ns5__union_nestedSearchConversation_info() { }
};
#endif

#ifndef SOAP_TYPE__ns5__nestedSearchConversation_info
#define SOAP_TYPE__ns5__nestedSearchConversation_info (1471)
/* ns5:nestedSearchConversation-info */
class SOAP_CMAC _ns5__nestedSearchConversation_info
{
public:
	int __size_nestedSearchConversation_info;	/* sequence of elements <-union-nestedSearchConversation-info> */
	__ns5__union_nestedSearchConversation_info *__union_nestedSearchConversation_info;
public:
	virtual int soap_type() const { return 1471; } /* = unique id SOAP_TYPE__ns5__nestedSearchConversation_info */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__nestedSearchConversation_info(): __union_nestedSearchConversation_info(NULL) { _ns5__nestedSearchConversation_info::soap_default(NULL); }
	virtual ~_ns5__nestedSearchConversation_info() { }
};
#endif

#ifndef SOAP_TYPE_ns5__nestedSearchConversation
#define SOAP_TYPE_ns5__nestedSearchConversation (681)
/* ns5:nestedSearchConversation */
class SOAP_CMAC ns5__nestedSearchConversation
{
public:
	std::vector<ns5__messageHitInfo * >m;	/* optional element of type ns5:messageHitInfo */
	_ns5__nestedSearchConversation_info *info;	/* optional element of type ns5:nestedSearchConversation-info */
	std::string *id;	/* optional attribute */
	int *n;	/* optional attribute */
	int *total;	/* optional attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 681; } /* = unique id SOAP_TYPE_ns5__nestedSearchConversation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__nestedSearchConversation(): info(NULL), id(NULL), n(NULL), total(NULL), f(NULL), t(NULL), tn(NULL), soap(NULL) { ns5__nestedSearchConversation::soap_default(NULL); }
	virtual ~ns5__nestedSearchConversation() { }
};
#endif

#ifndef SOAP_TYPE_ns5__part
#define SOAP_TYPE_ns5__part (683)
/* ns5:part */
class SOAP_CMAC ns5__part
{
public:
	std::string part;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 683; } /* = unique id SOAP_TYPE_ns5__part */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__part(): soap(NULL) { ns5__part::soap_default(NULL); }
	virtual ~ns5__part() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_searchResponse_info
#define SOAP_TYPE__ns5__union_searchResponse_info (1478)
/* xsd:choice */
union _ns5__union_searchResponse_info
{
#define SOAP_UNION__ns5__union_searchResponse_info_suggest	(1)
	std::string *suggest;
#define SOAP_UNION__ns5__union_searchResponse_info_wildcard	(2)
	ns3__wildcardExpansionQueryInfo *wildcard;
};
#endif

#ifndef SOAP_TYPE___ns5__union_searchResponse_info
#define SOAP_TYPE___ns5__union_searchResponse_info (1477)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_searchResponse_info
{
public:
	int __union_searchResponse_info;	/* union discriminant (of union defined below) */
	union _ns5__union_searchResponse_info union_searchResponse_info;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1477; } /* = unique id SOAP_TYPE___ns5__union_searchResponse_info */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_searchResponse_info() { __ns5__union_searchResponse_info::soap_default(NULL); }
	virtual ~__ns5__union_searchResponse_info() { }
};
#endif

#ifndef SOAP_TYPE__ns5__searchResponse_info
#define SOAP_TYPE__ns5__searchResponse_info (1476)
/* ns5:searchResponse-info */
class SOAP_CMAC _ns5__searchResponse_info
{
public:
	int __size_searchResponse_info;	/* sequence of elements <-union-searchResponse-info> */
	__ns5__union_searchResponse_info *__union_searchResponse_info;
public:
	virtual int soap_type() const { return 1476; } /* = unique id SOAP_TYPE__ns5__searchResponse_info */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__searchResponse_info(): __union_searchResponse_info(NULL) { _ns5__searchResponse_info::soap_default(NULL); }
	virtual ~_ns5__searchResponse_info() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_searchResponse
#define SOAP_TYPE__ns5__union_searchResponse (1491)
/* xsd:choice */
union _ns5__union_searchResponse
{
#define SOAP_UNION__ns5__union_searchResponse_hit	(1)
	ns3__simpleSearchHit *hit;
#define SOAP_UNION__ns5__union_searchResponse_c	(2)
	class ns5__conversationHitInfo *c;
#define SOAP_UNION__ns5__union_searchResponse_m	(3)
	ns5__messageHitInfo *m;
#define SOAP_UNION__ns5__union_searchResponse_chat	(4)
	class ns5__chatHitInfo *chat;
#define SOAP_UNION__ns5__union_searchResponse_mp	(5)
	class ns5__messagePartHitInfo *mp;
#define SOAP_UNION__ns5__union_searchResponse_cn	(6)
	ns5__contactInfo *cn;
#define SOAP_UNION__ns5__union_searchResponse_note	(7)
	class ns5__noteHitInfo *note;
#define SOAP_UNION__ns5__union_searchResponse_doc	(8)
	class ns5__documentHitInfo *doc;
#define SOAP_UNION__ns5__union_searchResponse_w	(9)
	class ns5__wikiHitInfo *w;
#define SOAP_UNION__ns5__union_searchResponse_appt	(10)
	class ns5__appointmentHitInfo *appt;
#define SOAP_UNION__ns5__union_searchResponse_task	(11)
	class ns5__taskHitInfo *task;
};
#endif

#ifndef SOAP_TYPE___ns5__union_searchResponse
#define SOAP_TYPE___ns5__union_searchResponse (1481)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_searchResponse
{
public:
	int __union_searchResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_searchResponse union_searchResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1481; } /* = unique id SOAP_TYPE___ns5__union_searchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_searchResponse() { __ns5__union_searchResponse::soap_default(NULL); }
	virtual ~__ns5__union_searchResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__searchResponse
#define SOAP_TYPE_ns5__searchResponse (685)
/* ns5:searchResponse */
class SOAP_CMAC ns5__searchResponse
{
public:
	_ns5__searchResponse_info *info;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:searchResponse-info */
	int __size_searchResponse;	/* sequence of elements <-union-searchResponse> */
	__ns5__union_searchResponse *__union_searchResponse;
	std::string *sortBy;	/* optional attribute */
	int *offset;	/* optional attribute */
	bool *more;	/* optional attribute */
	LONG64 *total;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 685; } /* = unique id SOAP_TYPE_ns5__searchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__searchResponse(): info(NULL), __union_searchResponse(NULL), sortBy(NULL), offset(NULL), more(NULL), total(NULL), soap(NULL) { ns5__searchResponse::soap_default(NULL); }
	virtual ~ns5__searchResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__conversationMsgHitInfo
#define SOAP_TYPE_ns5__conversationMsgHitInfo (687)
/* ns5:conversationMsgHitInfo */
class SOAP_CMAC ns5__conversationMsgHitInfo
{
public:
	std::string id;	/* required attribute */
	LONG64 *s;	/* optional attribute */
	int *l;	/* optional attribute */
	LONG64 *autoSendTime;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 687; } /* = unique id SOAP_TYPE_ns5__conversationMsgHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__conversationMsgHitInfo(): s(NULL), l(NULL), autoSendTime(NULL), soap(NULL) { ns5__conversationMsgHitInfo::soap_default(NULL); }
	virtual ~ns5__conversationMsgHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__messagePartHitInfo
#define SOAP_TYPE_ns5__messagePartHitInfo (689)
/* ns5:messagePartHitInfo */
class SOAP_CMAC ns5__messagePartHitInfo
{
public:
	ns5__emailInfo *e;	/* optional element of type ns5:emailInfo */
	std::string *su;	/* optional element of type xsd:string */
	std::string *id;	/* optional attribute */
	std::string *sf;	/* optional attribute */
	LONG64 *s;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
	int *cid;	/* optional attribute */
	int *mid;	/* optional attribute */
	std::string *ct;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *part;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 689; } /* = unique id SOAP_TYPE_ns5__messagePartHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__messagePartHitInfo(): e(NULL), su(NULL), id(NULL), sf(NULL), s(NULL), d(NULL), cid(NULL), mid(NULL), ct(NULL), name(NULL), part(NULL), soap(NULL) { ns5__messagePartHitInfo::soap_default(NULL); }
	virtual ~ns5__messagePartHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendDeliveryReportRequest
#define SOAP_TYPE_ns5__sendDeliveryReportRequest (698)
/* ns5:sendDeliveryReportRequest */
class SOAP_CMAC ns5__sendDeliveryReportRequest
{
public:
	std::string mid;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 698; } /* = unique id SOAP_TYPE_ns5__sendDeliveryReportRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendDeliveryReportRequest(): soap(NULL) { ns5__sendDeliveryReportRequest::soap_default(NULL); }
	virtual ~ns5__sendDeliveryReportRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendDeliveryReportResponse
#define SOAP_TYPE_ns5__sendDeliveryReportResponse (699)
/* ns5:sendDeliveryReportResponse */
class SOAP_CMAC ns5__sendDeliveryReportResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 699; } /* = unique id SOAP_TYPE_ns5__sendDeliveryReportResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendDeliveryReportResponse(): soap(NULL) { ns5__sendDeliveryReportResponse::soap_default(NULL); }
	virtual ~ns5__sendDeliveryReportResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendInviteReplyRequest
#define SOAP_TYPE_ns5__sendInviteReplyRequest (700)
/* ns5:sendInviteReplyRequest */
class SOAP_CMAC ns5__sendInviteReplyRequest
{
public:
	ns5__dtTimeInfo *exceptId;	/* optional element of type ns5:dtTimeInfo */
	ns5__calTZInfo *tz;	/* optional element of type ns5:calTZInfo */
	ns5__msg *m;	/* optional element of type ns5:msg */
	std::string id;	/* required attribute */
	int compNum;	/* required attribute */
	std::string verb;	/* required attribute */
	bool *updateOrganizer;	/* optional attribute */
	std::string *idnt;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 700; } /* = unique id SOAP_TYPE_ns5__sendInviteReplyRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendInviteReplyRequest(): exceptId(NULL), tz(NULL), m(NULL), updateOrganizer(NULL), idnt(NULL), soap(NULL) { ns5__sendInviteReplyRequest::soap_default(NULL); }
	virtual ~ns5__sendInviteReplyRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendMsgRequest
#define SOAP_TYPE_ns5__sendMsgRequest (702)
/* ns5:sendMsgRequest */
class SOAP_CMAC ns5__sendMsgRequest
{
public:
	class ns5__msgToSend *m;	/* optional element of type ns5:msgToSend */
	bool *needCalendarSentByFixup;	/* optional attribute */
	bool *isCalendarForward;	/* optional attribute */
	bool *noSave;	/* optional attribute */
	std::string *suid;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 702; } /* = unique id SOAP_TYPE_ns5__sendMsgRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendMsgRequest(): m(NULL), needCalendarSentByFixup(NULL), isCalendarForward(NULL), noSave(NULL), suid(NULL), soap(NULL) { ns5__sendMsgRequest::soap_default(NULL); }
	virtual ~ns5__sendMsgRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendMsgResponse
#define SOAP_TYPE_ns5__sendMsgResponse (704)
/* ns5:sendMsgResponse */
class SOAP_CMAC ns5__sendMsgResponse
{
public:
	ns3__id *m;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:id */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 704; } /* = unique id SOAP_TYPE_ns5__sendMsgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendMsgResponse(): m(NULL), soap(NULL) { ns5__sendMsgResponse::soap_default(NULL); }
	virtual ~ns5__sendMsgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendShareNotificationRequest
#define SOAP_TYPE_ns5__sendShareNotificationRequest (705)
/* ns5:sendShareNotificationRequest */
class SOAP_CMAC ns5__sendShareNotificationRequest
{
public:
	ns3__id *item;	/* optional element of type ns3:id */
	std::vector<ns5__emailAddrInfo * >e;	/* optional element of type ns5:emailAddrInfo */
	std::string *notes;	/* optional element of type xsd:string */
	enum ns5__action *action;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 705; } /* = unique id SOAP_TYPE_ns5__sendShareNotificationRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendShareNotificationRequest(): item(NULL), notes(NULL), action(NULL), soap(NULL) { ns5__sendShareNotificationRequest::soap_default(NULL); }
	virtual ~ns5__sendShareNotificationRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendShareNotificationResponse
#define SOAP_TYPE_ns5__sendShareNotificationResponse (706)
/* ns5:sendShareNotificationResponse */
class SOAP_CMAC ns5__sendShareNotificationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 706; } /* = unique id SOAP_TYPE_ns5__sendShareNotificationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendShareNotificationResponse(): soap(NULL) { ns5__sendShareNotificationResponse::soap_default(NULL); }
	virtual ~ns5__sendShareNotificationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendVerificationCodeRequest
#define SOAP_TYPE_ns5__sendVerificationCodeRequest (707)
/* ns5:sendVerificationCodeRequest */
class SOAP_CMAC ns5__sendVerificationCodeRequest
{
public:
	std::string *a;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 707; } /* = unique id SOAP_TYPE_ns5__sendVerificationCodeRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendVerificationCodeRequest(): a(NULL), soap(NULL) { ns5__sendVerificationCodeRequest::soap_default(NULL); }
	virtual ~ns5__sendVerificationCodeRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendVerificationCodeResponse
#define SOAP_TYPE_ns5__sendVerificationCodeResponse (708)
/* ns5:sendVerificationCodeResponse */
class SOAP_CMAC ns5__sendVerificationCodeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 708; } /* = unique id SOAP_TYPE_ns5__sendVerificationCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendVerificationCodeResponse(): soap(NULL) { ns5__sendVerificationCodeResponse::soap_default(NULL); }
	virtual ~ns5__sendVerificationCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__setAppointmentRequest_replies
#define SOAP_TYPE__ns5__setAppointmentRequest_replies (1497)
/* ns5:setAppointmentRequest-replies */
class SOAP_CMAC _ns5__setAppointmentRequest_replies
{
public:
	std::vector<class ns5__calReply * >reply;	/* optional element of type ns5:calReply */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1497; } /* = unique id SOAP_TYPE__ns5__setAppointmentRequest_replies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__setAppointmentRequest_replies(): unusedCodeGenHelper(NULL) { _ns5__setAppointmentRequest_replies::soap_default(NULL); }
	virtual ~_ns5__setAppointmentRequest_replies() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setAppointmentRequest
#define SOAP_TYPE_ns5__setAppointmentRequest (709)
/* ns5:setAppointmentRequest */
class SOAP_CMAC ns5__setAppointmentRequest
{
public:
	ns5__setCalendarItemInfo *default_;	/* optional element of type ns5:setCalendarItemInfo */
	std::vector<ns5__setCalendarItemInfo * >except;	/* optional element of type ns5:setCalendarItemInfo */
	std::vector<ns5__setCalendarItemInfo * >cancel;	/* optional element of type ns5:setCalendarItemInfo */
	_ns5__setAppointmentRequest_replies *replies;	/* optional element of type ns5:setAppointmentRequest-replies */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	std::string *l;	/* optional attribute */
	bool *noNextAlarm;	/* optional attribute */
	LONG64 *nextAlarm;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 709; } /* = unique id SOAP_TYPE_ns5__setAppointmentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setAppointmentRequest(): default_(NULL), replies(NULL), f(NULL), t(NULL), tn(NULL), l(NULL), noNextAlarm(NULL), nextAlarm(NULL), soap(NULL) { ns5__setAppointmentRequest::soap_default(NULL); }
	virtual ~ns5__setAppointmentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setAppointmentResponse
#define SOAP_TYPE_ns5__setAppointmentResponse (710)
/* ns5:setAppointmentResponse */
class SOAP_CMAC ns5__setAppointmentResponse
{
public:
	ns3__id *default_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:id */
	std::vector<class ns5__exceptIdInfo * >except;	/* optional element of type ns5:exceptIdInfo */
	std::string *calItemId;	/* optional attribute */
	std::string *apptId;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 710; } /* = unique id SOAP_TYPE_ns5__setAppointmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setAppointmentResponse(): default_(NULL), calItemId(NULL), apptId(NULL), soap(NULL) { ns5__setAppointmentResponse::soap_default(NULL); }
	virtual ~ns5__setAppointmentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__exceptIdInfo
#define SOAP_TYPE_ns5__exceptIdInfo (711)
/* ns5:exceptIdInfo */
class SOAP_CMAC ns5__exceptIdInfo
{
public:
	std::string recurId;	/* required attribute */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 711; } /* = unique id SOAP_TYPE_ns5__exceptIdInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__exceptIdInfo(): soap(NULL) { ns5__exceptIdInfo::soap_default(NULL); }
	virtual ~ns5__exceptIdInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setCustomMetadataRequest
#define SOAP_TYPE_ns5__setCustomMetadataRequest (712)
/* ns5:setCustomMetadataRequest */
class SOAP_CMAC ns5__setCustomMetadataRequest
{
public:
	ns5__mailCustomMetadata *meta;	/* optional element of type ns5:mailCustomMetadata */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 712; } /* = unique id SOAP_TYPE_ns5__setCustomMetadataRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setCustomMetadataRequest(): meta(NULL), soap(NULL) { ns5__setCustomMetadataRequest::soap_default(NULL); }
	virtual ~ns5__setCustomMetadataRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setCustomMetadataResponse
#define SOAP_TYPE_ns5__setCustomMetadataResponse (713)
/* ns5:setCustomMetadataResponse */
class SOAP_CMAC ns5__setCustomMetadataResponse
{
public:
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 713; } /* = unique id SOAP_TYPE_ns5__setCustomMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setCustomMetadataResponse(): soap(NULL) { ns5__setCustomMetadataResponse::soap_default(NULL); }
	virtual ~ns5__setCustomMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setMailboxMetadataRequest
#define SOAP_TYPE_ns5__setMailboxMetadataRequest (714)
/* ns5:setMailboxMetadataRequest */
class SOAP_CMAC ns5__setMailboxMetadataRequest
{
public:
	ns5__mailCustomMetadata *meta;	/* optional element of type ns5:mailCustomMetadata */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 714; } /* = unique id SOAP_TYPE_ns5__setMailboxMetadataRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setMailboxMetadataRequest(): meta(NULL), soap(NULL) { ns5__setMailboxMetadataRequest::soap_default(NULL); }
	virtual ~ns5__setMailboxMetadataRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setMailboxMetadataResponse
#define SOAP_TYPE_ns5__setMailboxMetadataResponse (715)
/* ns5:setMailboxMetadataResponse */
class SOAP_CMAC ns5__setMailboxMetadataResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 715; } /* = unique id SOAP_TYPE_ns5__setMailboxMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setMailboxMetadataResponse(): soap(NULL) { ns5__setMailboxMetadataResponse::soap_default(NULL); }
	virtual ~ns5__setMailboxMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_snoozeCalendarItemAlarmRequest
#define SOAP_TYPE__ns5__union_snoozeCalendarItemAlarmRequest (1506)
/* xsd:choice */
union _ns5__union_snoozeCalendarItemAlarmRequest
{
#define SOAP_UNION__ns5__union_snoozeCalendarItemAlarmRequest_appt	(1)
	class ns5__snoozeAppointmentAlarm *appt;
#define SOAP_UNION__ns5__union_snoozeCalendarItemAlarmRequest_task	(2)
	class ns5__snoozeTaskAlarm *task;
};
#endif

#ifndef SOAP_TYPE___ns5__union_snoozeCalendarItemAlarmRequest
#define SOAP_TYPE___ns5__union_snoozeCalendarItemAlarmRequest (1503)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_snoozeCalendarItemAlarmRequest
{
public:
	int __union_snoozeCalendarItemAlarmRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_snoozeCalendarItemAlarmRequest union_snoozeCalendarItemAlarmRequest;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1503; } /* = unique id SOAP_TYPE___ns5__union_snoozeCalendarItemAlarmRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_snoozeCalendarItemAlarmRequest() { __ns5__union_snoozeCalendarItemAlarmRequest::soap_default(NULL); }
	virtual ~__ns5__union_snoozeCalendarItemAlarmRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__snoozeCalendarItemAlarmRequest
#define SOAP_TYPE_ns5__snoozeCalendarItemAlarmRequest (718)
/* ns5:snoozeCalendarItemAlarmRequest */
class SOAP_CMAC ns5__snoozeCalendarItemAlarmRequest
{
public:
	int __size_snoozeCalendarItemAlarmRequest;	/* sequence of elements <-union-snoozeCalendarItemAlarmRequest> */
	__ns5__union_snoozeCalendarItemAlarmRequest *__union_snoozeCalendarItemAlarmRequest;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 718; } /* = unique id SOAP_TYPE_ns5__snoozeCalendarItemAlarmRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__snoozeCalendarItemAlarmRequest(): __union_snoozeCalendarItemAlarmRequest(NULL), soap(NULL) { ns5__snoozeCalendarItemAlarmRequest::soap_default(NULL); }
	virtual ~ns5__snoozeCalendarItemAlarmRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__snoozeAlarm
#define SOAP_TYPE_ns5__snoozeAlarm (720)
/* ns5:snoozeAlarm */
class SOAP_CMAC ns5__snoozeAlarm
{
public:
	std::string id;	/* required attribute */
	LONG64 until;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 720; } /* = unique id SOAP_TYPE_ns5__snoozeAlarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__snoozeAlarm(): soap(NULL) { ns5__snoozeAlarm::soap_default(NULL); }
	virtual ~ns5__snoozeAlarm() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_snoozeCalendarItemAlarmResponse
#define SOAP_TYPE__ns5__union_snoozeCalendarItemAlarmResponse (1509)
/* xsd:choice */
union _ns5__union_snoozeCalendarItemAlarmResponse
{
#define SOAP_UNION__ns5__union_snoozeCalendarItemAlarmResponse_appt	(1)
	ns5__updatedAppointmentAlarmInfo *appt;
#define SOAP_UNION__ns5__union_snoozeCalendarItemAlarmResponse_task	(2)
	ns5__updatedTaskAlarmInfo *task;
};
#endif

#ifndef SOAP_TYPE___ns5__union_snoozeCalendarItemAlarmResponse
#define SOAP_TYPE___ns5__union_snoozeCalendarItemAlarmResponse (1508)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_snoozeCalendarItemAlarmResponse
{
public:
	int __union_snoozeCalendarItemAlarmResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_snoozeCalendarItemAlarmResponse union_snoozeCalendarItemAlarmResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1508; } /* = unique id SOAP_TYPE___ns5__union_snoozeCalendarItemAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_snoozeCalendarItemAlarmResponse() { __ns5__union_snoozeCalendarItemAlarmResponse::soap_default(NULL); }
	virtual ~__ns5__union_snoozeCalendarItemAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__snoozeCalendarItemAlarmResponse
#define SOAP_TYPE_ns5__snoozeCalendarItemAlarmResponse (722)
/* ns5:snoozeCalendarItemAlarmResponse */
class SOAP_CMAC ns5__snoozeCalendarItemAlarmResponse
{
public:
	int __size_snoozeCalendarItemAlarmResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <-union-snoozeCalendarItemAlarmResponse> */
	__ns5__union_snoozeCalendarItemAlarmResponse *__union_snoozeCalendarItemAlarmResponse;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 722; } /* = unique id SOAP_TYPE_ns5__snoozeCalendarItemAlarmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__snoozeCalendarItemAlarmResponse(): __union_snoozeCalendarItemAlarmResponse(NULL), soap(NULL) { ns5__snoozeCalendarItemAlarmResponse::soap_default(NULL); }
	virtual ~ns5__snoozeCalendarItemAlarmResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__syncRequest
#define SOAP_TYPE_ns5__syncRequest (723)
/* ns5:syncRequest */
class SOAP_CMAC ns5__syncRequest
{
public:
	std::string *token;	/* optional attribute */
	LONG64 *calCutoff;	/* optional attribute */
	std::string *l;	/* optional attribute */
	bool *typed;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 723; } /* = unique id SOAP_TYPE_ns5__syncRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__syncRequest(): token(NULL), calCutoff(NULL), l(NULL), typed(NULL), soap(NULL) { ns5__syncRequest::soap_default(NULL); }
	virtual ~ns5__syncRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_syncResponse
#define SOAP_TYPE__ns5__union_syncResponse (1513)
/* xsd:choice */
union _ns5__union_syncResponse
{
#define SOAP_UNION__ns5__union_syncResponse_folder	(1)
	ns5__folder *folder;
#define SOAP_UNION__ns5__union_syncResponse_tag	(2)
	ns5__tagInfo *tag;
#define SOAP_UNION__ns5__union_syncResponse_note	(3)
	ns5__noteInfo *note;
#define SOAP_UNION__ns5__union_syncResponse_cn	(4)
	ns5__contactInfo *cn;
#define SOAP_UNION__ns5__union_syncResponse_appt	(5)
	ns5__calendarItemInfo *appt;
#define SOAP_UNION__ns5__union_syncResponse_task	(6)
	ns5__taskItemInfo *task;
#define SOAP_UNION__ns5__union_syncResponse_c	(7)
	ns5__conversationSummary *c;
#define SOAP_UNION__ns5__union_syncResponse_w	(8)
	ns5__commonDocumentInfo *w;
#define SOAP_UNION__ns5__union_syncResponse_doc	(9)
	ns5__documentInfo *doc;
#define SOAP_UNION__ns5__union_syncResponse_m	(10)
	ns5__messageSummary *m;
#define SOAP_UNION__ns5__union_syncResponse_chat	(11)
	ns5__chatSummary *chat;
};
#endif

#ifndef SOAP_TYPE___ns5__union_syncResponse
#define SOAP_TYPE___ns5__union_syncResponse (1512)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_syncResponse
{
public:
	int __union_syncResponse;	/* union discriminant (of union defined below) */
	union _ns5__union_syncResponse union_syncResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1512; } /* = unique id SOAP_TYPE___ns5__union_syncResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_syncResponse() { __ns5__union_syncResponse::soap_default(NULL); }
	virtual ~__ns5__union_syncResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__syncResponse
#define SOAP_TYPE_ns5__syncResponse (724)
/* ns5:syncResponse */
class SOAP_CMAC ns5__syncResponse
{
public:
	class ns5__syncDeletedInfo *deleted;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:syncDeletedInfo */
	int __size_syncResponse;	/* sequence of elements <-union-syncResponse> */
	__ns5__union_syncResponse *__union_syncResponse;
	LONG64 md;	/* required attribute */
	std::string *token;	/* optional attribute */
	LONG64 *s;	/* optional attribute */
	bool *more;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 724; } /* = unique id SOAP_TYPE_ns5__syncResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__syncResponse(): deleted(NULL), __union_syncResponse(NULL), token(NULL), s(NULL), more(NULL), soap(NULL) { ns5__syncResponse::soap_default(NULL); }
	virtual ~ns5__syncResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_syncDeletedInfo
#define SOAP_TYPE__ns5__union_syncDeletedInfo (1516)
/* xsd:choice */
union _ns5__union_syncDeletedInfo
{
#define SOAP_UNION__ns5__union_syncDeletedInfo_folder	(1)
	ns5__idsAttr *folder;
#define SOAP_UNION__ns5__union_syncDeletedInfo_search	(2)
	ns5__idsAttr *search;
#define SOAP_UNION__ns5__union_syncDeletedInfo_link	(3)
	ns5__idsAttr *link;
#define SOAP_UNION__ns5__union_syncDeletedInfo_tag	(4)
	ns5__idsAttr *tag;
#define SOAP_UNION__ns5__union_syncDeletedInfo_c	(5)
	ns5__idsAttr *c;
#define SOAP_UNION__ns5__union_syncDeletedInfo_chat	(6)
	ns5__idsAttr *chat;
#define SOAP_UNION__ns5__union_syncDeletedInfo_m	(7)
	ns5__idsAttr *m;
#define SOAP_UNION__ns5__union_syncDeletedInfo_cn	(8)
	ns5__idsAttr *cn;
#define SOAP_UNION__ns5__union_syncDeletedInfo_appt	(9)
	ns5__idsAttr *appt;
#define SOAP_UNION__ns5__union_syncDeletedInfo_task	(10)
	ns5__idsAttr *task;
#define SOAP_UNION__ns5__union_syncDeletedInfo_notes	(11)
	ns5__idsAttr *notes;
#define SOAP_UNION__ns5__union_syncDeletedInfo_w	(12)
	ns5__idsAttr *w;
#define SOAP_UNION__ns5__union_syncDeletedInfo_doc	(13)
	ns5__idsAttr *doc;
};
#endif

#ifndef SOAP_TYPE___ns5__union_syncDeletedInfo
#define SOAP_TYPE___ns5__union_syncDeletedInfo (1515)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_syncDeletedInfo
{
public:
	int __union_syncDeletedInfo;	/* union discriminant (of union defined below) */
	union _ns5__union_syncDeletedInfo union_syncDeletedInfo;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1515; } /* = unique id SOAP_TYPE___ns5__union_syncDeletedInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_syncDeletedInfo() { __ns5__union_syncDeletedInfo::soap_default(NULL); }
	virtual ~__ns5__union_syncDeletedInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__syncDeletedInfo
#define SOAP_TYPE_ns5__syncDeletedInfo (725)
/* ns5:syncDeletedInfo */
class SOAP_CMAC ns5__syncDeletedInfo
{
public:
	int __size_syncDeletedInfo;	/* sequence of elements <-union-syncDeletedInfo> */
	__ns5__union_syncDeletedInfo *__union_syncDeletedInfo;
	std::string ids;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 725; } /* = unique id SOAP_TYPE_ns5__syncDeletedInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__syncDeletedInfo(): __union_syncDeletedInfo(NULL), soap(NULL) { ns5__syncDeletedInfo::soap_default(NULL); }
	virtual ~ns5__syncDeletedInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__tagActionRequest
#define SOAP_TYPE_ns5__tagActionRequest (726)
/* ns5:tagActionRequest */
class SOAP_CMAC ns5__tagActionRequest
{
public:
	class ns5__tagActionSelector *action;	/* required element of type ns5:tagActionSelector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 726; } /* = unique id SOAP_TYPE_ns5__tagActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__tagActionRequest(): action(NULL), soap(NULL) { ns5__tagActionRequest::soap_default(NULL); }
	virtual ~ns5__tagActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__tagActionResponse
#define SOAP_TYPE_ns5__tagActionResponse (728)
/* ns5:tagActionResponse */
class SOAP_CMAC ns5__tagActionResponse
{
public:
	class ns5__tagActionInfo *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:tagActionInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 728; } /* = unique id SOAP_TYPE_ns5__tagActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__tagActionResponse(): action(NULL), soap(NULL) { ns5__tagActionResponse::soap_default(NULL); }
	virtual ~ns5__tagActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__tagActionInfo
#define SOAP_TYPE_ns5__tagActionInfo (729)
/* ns5:tagActionInfo */
class SOAP_CMAC ns5__tagActionInfo
{
public:
	std::string id;	/* required attribute */
	std::string *tn;	/* optional attribute */
	std::string op;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 729; } /* = unique id SOAP_TYPE_ns5__tagActionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__tagActionInfo(): tn(NULL), soap(NULL) { ns5__tagActionInfo::soap_default(NULL); }
	virtual ~ns5__tagActionInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_testDataSourceRequest
#define SOAP_TYPE__ns5__union_testDataSourceRequest (1520)
/* xsd:choice */
union _ns5__union_testDataSourceRequest
{
#define SOAP_UNION__ns5__union_testDataSourceRequest_imap	(1)
	ns5__mailImapDataSource *imap;
#define SOAP_UNION__ns5__union_testDataSourceRequest_pop3	(2)
	ns5__mailPop3DataSource *pop3;
#define SOAP_UNION__ns5__union_testDataSourceRequest_caldav	(3)
	ns5__mailCaldavDataSource *caldav;
#define SOAP_UNION__ns5__union_testDataSourceRequest_yab	(4)
	ns5__mailYabDataSource *yab;
#define SOAP_UNION__ns5__union_testDataSourceRequest_rss	(5)
	ns5__mailRssDataSource *rss;
#define SOAP_UNION__ns5__union_testDataSourceRequest_gal	(6)
	ns5__mailGalDataSource *gal;
#define SOAP_UNION__ns5__union_testDataSourceRequest_cal	(7)
	ns5__mailCalDataSource *cal;
#define SOAP_UNION__ns5__union_testDataSourceRequest_unknown	(8)
	ns5__mailUnknownDataSource *unknown;
};
#endif

#ifndef SOAP_TYPE_ns5__testDataSourceRequest
#define SOAP_TYPE_ns5__testDataSourceRequest (730)
/* ns5:testDataSourceRequest */
class SOAP_CMAC ns5__testDataSourceRequest
{
public:
	int __union_testDataSourceRequest;	/* union discriminant (of union defined below) */
	union _ns5__union_testDataSourceRequest union_testDataSourceRequest;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 730; } /* = unique id SOAP_TYPE_ns5__testDataSourceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__testDataSourceRequest(): soap(NULL) { ns5__testDataSourceRequest::soap_default(NULL); }
	virtual ~ns5__testDataSourceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__testDataSourceResponse
#define SOAP_TYPE_ns5__testDataSourceResponse (731)
/* ns5:testDataSourceResponse */
class SOAP_CMAC ns5__testDataSourceResponse
{
public:
	bool success;	/* required attribute */
	std::string *error;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 731; } /* = unique id SOAP_TYPE_ns5__testDataSourceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__testDataSourceResponse(): error(NULL), soap(NULL) { ns5__testDataSourceResponse::soap_default(NULL); }
	virtual ~ns5__testDataSourceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__updateDeviceStatusRequest
#define SOAP_TYPE_ns5__updateDeviceStatusRequest (732)
/* ns5:updateDeviceStatusRequest */
class SOAP_CMAC ns5__updateDeviceStatusRequest
{
public:
	ns5__idStatus *device;	/* required element of type ns5:idStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 732; } /* = unique id SOAP_TYPE_ns5__updateDeviceStatusRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__updateDeviceStatusRequest(): device(NULL), soap(NULL) { ns5__updateDeviceStatusRequest::soap_default(NULL); }
	virtual ~ns5__updateDeviceStatusRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__updateDeviceStatusResponse
#define SOAP_TYPE_ns5__updateDeviceStatusResponse (733)
/* ns5:updateDeviceStatusResponse */
class SOAP_CMAC ns5__updateDeviceStatusResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 733; } /* = unique id SOAP_TYPE_ns5__updateDeviceStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__updateDeviceStatusResponse(): soap(NULL) { ns5__updateDeviceStatusResponse::soap_default(NULL); }
	virtual ~ns5__updateDeviceStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__verifyCodeRequest
#define SOAP_TYPE_ns5__verifyCodeRequest (734)
/* ns5:verifyCodeRequest */
class SOAP_CMAC ns5__verifyCodeRequest
{
public:
	std::string *a;	/* optional attribute */
	std::string *code;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 734; } /* = unique id SOAP_TYPE_ns5__verifyCodeRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__verifyCodeRequest(): a(NULL), code(NULL), soap(NULL) { ns5__verifyCodeRequest::soap_default(NULL); }
	virtual ~ns5__verifyCodeRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__verifyCodeResponse
#define SOAP_TYPE_ns5__verifyCodeResponse (735)
/* ns5:verifyCodeResponse */
class SOAP_CMAC ns5__verifyCodeResponse
{
public:
	bool success;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 735; } /* = unique id SOAP_TYPE_ns5__verifyCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__verifyCodeResponse(): soap(NULL) { ns5__verifyCodeResponse::soap_default(NULL); }
	virtual ~ns5__verifyCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__waitSetRequest_add
#define SOAP_TYPE__ns5__waitSetRequest_add (1521)
/* ns5:waitSetRequest-add */
class SOAP_CMAC _ns5__waitSetRequest_add
{
public:
	std::vector<ns3__waitSetAddSpec * >a;	/* optional element of type ns3:waitSetAddSpec */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1521; } /* = unique id SOAP_TYPE__ns5__waitSetRequest_add */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__waitSetRequest_add(): unusedCodeGenHelper(NULL) { _ns5__waitSetRequest_add::soap_default(NULL); }
	virtual ~_ns5__waitSetRequest_add() { }
};
#endif

#ifndef SOAP_TYPE__ns5__waitSetRequest_update
#define SOAP_TYPE__ns5__waitSetRequest_update (1523)
/* ns5:waitSetRequest-update */
class SOAP_CMAC _ns5__waitSetRequest_update
{
public:
	std::vector<ns3__waitSetAddSpec * >a;	/* optional element of type ns3:waitSetAddSpec */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1523; } /* = unique id SOAP_TYPE__ns5__waitSetRequest_update */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__waitSetRequest_update(): unusedCodeGenHelper(NULL) { _ns5__waitSetRequest_update::soap_default(NULL); }
	virtual ~_ns5__waitSetRequest_update() { }
};
#endif

#ifndef SOAP_TYPE__ns5__waitSetRequest_remove
#define SOAP_TYPE__ns5__waitSetRequest_remove (1525)
/* ns5:waitSetRequest-remove */
class SOAP_CMAC _ns5__waitSetRequest_remove
{
public:
	std::vector<ns3__id * >a;	/* optional element of type ns3:id */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1525; } /* = unique id SOAP_TYPE__ns5__waitSetRequest_remove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__waitSetRequest_remove(): unusedCodeGenHelper(NULL) { _ns5__waitSetRequest_remove::soap_default(NULL); }
	virtual ~_ns5__waitSetRequest_remove() { }
};
#endif

#ifndef SOAP_TYPE_ns5__waitSetRequest
#define SOAP_TYPE_ns5__waitSetRequest (736)
/* ns5:waitSetRequest */
class SOAP_CMAC ns5__waitSetRequest
{
public:
	_ns5__waitSetRequest_add *add;	/* optional element of type ns5:waitSetRequest-add */
	_ns5__waitSetRequest_update *update;	/* optional element of type ns5:waitSetRequest-update */
	_ns5__waitSetRequest_remove *remove;	/* optional element of type ns5:waitSetRequest-remove */
	std::string waitSet;	/* required attribute */
	std::string seq;	/* required attribute */
	bool *block;	/* optional attribute */
	std::string *defTypes;	/* optional attribute */
	LONG64 *timeout;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 736; } /* = unique id SOAP_TYPE_ns5__waitSetRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__waitSetRequest(): add(NULL), update(NULL), remove(NULL), block(NULL), defTypes(NULL), timeout(NULL), soap(NULL) { ns5__waitSetRequest::soap_default(NULL); }
	virtual ~ns5__waitSetRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__waitSetResponse
#define SOAP_TYPE_ns5__waitSetResponse (737)
/* ns5:waitSetResponse */
class SOAP_CMAC ns5__waitSetResponse
{
public:
	std::vector<ns3__id * >a;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:id */
	std::vector<ns3__idAndType * >error;	/* optional element of type ns3:idAndType */
	std::string waitSet;	/* required attribute */
	bool *canceled;	/* optional attribute */
	std::string *seq;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 737; } /* = unique id SOAP_TYPE_ns5__waitSetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__waitSetResponse(): canceled(NULL), seq(NULL), soap(NULL) { ns5__waitSetResponse::soap_default(NULL); }
	virtual ~ns5__waitSetResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__itemIdSpec
#define SOAP_TYPE_ns5__itemIdSpec (740)
/* ns5:itemIdSpec */
class SOAP_CMAC ns5__itemIdSpec
{
public:
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 740; } /* = unique id SOAP_TYPE_ns5__itemIdSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__itemIdSpec(): soap(NULL) { ns5__itemIdSpec::soap_default(NULL); }
	virtual ~ns5__itemIdSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns6__becomeMasterRequest
#define SOAP_TYPE_ns6__becomeMasterRequest (742)
/* ns6:becomeMasterRequest */
class SOAP_CMAC ns6__becomeMasterRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 742; } /* = unique id SOAP_TYPE_ns6__becomeMasterRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__becomeMasterRequest(): soap(NULL) { ns6__becomeMasterRequest::soap_default(NULL); }
	virtual ~ns6__becomeMasterRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__becomeMasterResponse
#define SOAP_TYPE_ns6__becomeMasterResponse (743)
/* ns6:becomeMasterResponse */
class SOAP_CMAC ns6__becomeMasterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 743; } /* = unique id SOAP_TYPE_ns6__becomeMasterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__becomeMasterResponse(): soap(NULL) { ns6__becomeMasterResponse::soap_default(NULL); }
	virtual ~ns6__becomeMasterResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__bringDownServiceIPRequest
#define SOAP_TYPE_ns6__bringDownServiceIPRequest (744)
/* ns6:bringDownServiceIPRequest */
class SOAP_CMAC ns6__bringDownServiceIPRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 744; } /* = unique id SOAP_TYPE_ns6__bringDownServiceIPRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__bringDownServiceIPRequest(): soap(NULL) { ns6__bringDownServiceIPRequest::soap_default(NULL); }
	virtual ~ns6__bringDownServiceIPRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__bringDownServiceIPResponse
#define SOAP_TYPE_ns6__bringDownServiceIPResponse (745)
/* ns6:bringDownServiceIPResponse */
class SOAP_CMAC ns6__bringDownServiceIPResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 745; } /* = unique id SOAP_TYPE_ns6__bringDownServiceIPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__bringDownServiceIPResponse(): soap(NULL) { ns6__bringDownServiceIPResponse::soap_default(NULL); }
	virtual ~ns6__bringDownServiceIPResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__bringUpServiceIPRequest
#define SOAP_TYPE_ns6__bringUpServiceIPRequest (746)
/* ns6:bringUpServiceIPRequest */
class SOAP_CMAC ns6__bringUpServiceIPRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 746; } /* = unique id SOAP_TYPE_ns6__bringUpServiceIPRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__bringUpServiceIPRequest(): soap(NULL) { ns6__bringUpServiceIPRequest::soap_default(NULL); }
	virtual ~ns6__bringUpServiceIPRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__bringUpServiceIPResponse
#define SOAP_TYPE_ns6__bringUpServiceIPResponse (747)
/* ns6:bringUpServiceIPResponse */
class SOAP_CMAC ns6__bringUpServiceIPResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 747; } /* = unique id SOAP_TYPE_ns6__bringUpServiceIPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__bringUpServiceIPResponse(): soap(NULL) { ns6__bringUpServiceIPResponse::soap_default(NULL); }
	virtual ~ns6__bringUpServiceIPResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__replicationStatusRequest
#define SOAP_TYPE_ns6__replicationStatusRequest (748)
/* ns6:replicationStatusRequest */
class SOAP_CMAC ns6__replicationStatusRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 748; } /* = unique id SOAP_TYPE_ns6__replicationStatusRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__replicationStatusRequest(): soap(NULL) { ns6__replicationStatusRequest::soap_default(NULL); }
	virtual ~ns6__replicationStatusRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__replicationStatusResponse
#define SOAP_TYPE_ns6__replicationStatusResponse (749)
/* ns6:replicationStatusResponse */
class SOAP_CMAC ns6__replicationStatusResponse
{
public:
	class ns6__replicationMasterStatus *masterStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns6:replicationMasterStatus */
	class ns6__replicationSlaveStatus *slaveStatus;	/* optional element of type ns6:replicationSlaveStatus */
	bool replicationEnabled;	/* required attribute */
	std::string *currentRole;	/* optional attribute */
	std::string *originalRole;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 749; } /* = unique id SOAP_TYPE_ns6__replicationStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__replicationStatusResponse(): masterStatus(NULL), slaveStatus(NULL), currentRole(NULL), originalRole(NULL), soap(NULL) { ns6__replicationStatusResponse::soap_default(NULL); }
	virtual ~ns6__replicationStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__replicationMasterStatus
#define SOAP_TYPE_ns6__replicationMasterStatus (750)
/* ns6:replicationMasterStatus */
class SOAP_CMAC ns6__replicationMasterStatus
{
public:
	class ns6__replicationMasterCatchupStatus *catchupStatus;	/* optional element of type ns6:replicationMasterCatchupStatus */
	std::string masterOperatingMode;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 750; } /* = unique id SOAP_TYPE_ns6__replicationMasterStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__replicationMasterStatus(): catchupStatus(NULL), soap(NULL) { ns6__replicationMasterStatus::soap_default(NULL); }
	virtual ~ns6__replicationMasterStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns6__replicationMasterCatchupStatus
#define SOAP_TYPE_ns6__replicationMasterCatchupStatus (751)
/* ns6:replicationMasterCatchupStatus */
class SOAP_CMAC ns6__replicationMasterCatchupStatus
{
public:
	int remainingFiles;	/* required attribute */
	LONG64 remainingBytes;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 751; } /* = unique id SOAP_TYPE_ns6__replicationMasterCatchupStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__replicationMasterCatchupStatus(): soap(NULL) { ns6__replicationMasterCatchupStatus::soap_default(NULL); }
	virtual ~ns6__replicationMasterCatchupStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns6__replicationSlaveStatus
#define SOAP_TYPE_ns6__replicationSlaveStatus (752)
/* ns6:replicationSlaveStatus */
class SOAP_CMAC ns6__replicationSlaveStatus
{
public:
	class ns6__replicationSlaveCatchupStatus *catchupStatus;	/* optional element of type ns6:replicationSlaveCatchupStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 752; } /* = unique id SOAP_TYPE_ns6__replicationSlaveStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__replicationSlaveStatus(): catchupStatus(NULL), soap(NULL) { ns6__replicationSlaveStatus::soap_default(NULL); }
	virtual ~ns6__replicationSlaveStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns6__replicationSlaveCatchupStatus
#define SOAP_TYPE_ns6__replicationSlaveCatchupStatus (753)
/* ns6:replicationSlaveCatchupStatus */
class SOAP_CMAC ns6__replicationSlaveCatchupStatus
{
public:
	int remainingOps;	/* required attribute */
	int remainingFiles;	/* required attribute */
	LONG64 remainingBytes;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 753; } /* = unique id SOAP_TYPE_ns6__replicationSlaveCatchupStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__replicationSlaveCatchupStatus(): soap(NULL) { ns6__replicationSlaveCatchupStatus::soap_default(NULL); }
	virtual ~ns6__replicationSlaveCatchupStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns6__startCatchupRequest
#define SOAP_TYPE_ns6__startCatchupRequest (754)
/* ns6:startCatchupRequest */
class SOAP_CMAC ns6__startCatchupRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 754; } /* = unique id SOAP_TYPE_ns6__startCatchupRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__startCatchupRequest(): soap(NULL) { ns6__startCatchupRequest::soap_default(NULL); }
	virtual ~ns6__startCatchupRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__startCatchupResponse
#define SOAP_TYPE_ns6__startCatchupResponse (755)
/* ns6:startCatchupResponse */
class SOAP_CMAC ns6__startCatchupResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 755; } /* = unique id SOAP_TYPE_ns6__startCatchupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__startCatchupResponse(): soap(NULL) { ns6__startCatchupResponse::soap_default(NULL); }
	virtual ~ns6__startCatchupResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__startFailoverClientRequest
#define SOAP_TYPE_ns6__startFailoverClientRequest (756)
/* ns6:startFailoverClientRequest */
class SOAP_CMAC ns6__startFailoverClientRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 756; } /* = unique id SOAP_TYPE_ns6__startFailoverClientRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__startFailoverClientRequest(): soap(NULL) { ns6__startFailoverClientRequest::soap_default(NULL); }
	virtual ~ns6__startFailoverClientRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__startFailoverClientResponse
#define SOAP_TYPE_ns6__startFailoverClientResponse (757)
/* ns6:startFailoverClientResponse */
class SOAP_CMAC ns6__startFailoverClientResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 757; } /* = unique id SOAP_TYPE_ns6__startFailoverClientResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__startFailoverClientResponse(): soap(NULL) { ns6__startFailoverClientResponse::soap_default(NULL); }
	virtual ~ns6__startFailoverClientResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__startFailoverDaemonRequest
#define SOAP_TYPE_ns6__startFailoverDaemonRequest (758)
/* ns6:startFailoverDaemonRequest */
class SOAP_CMAC ns6__startFailoverDaemonRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 758; } /* = unique id SOAP_TYPE_ns6__startFailoverDaemonRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__startFailoverDaemonRequest(): soap(NULL) { ns6__startFailoverDaemonRequest::soap_default(NULL); }
	virtual ~ns6__startFailoverDaemonRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__startFailoverDaemonResponse
#define SOAP_TYPE_ns6__startFailoverDaemonResponse (759)
/* ns6:startFailoverDaemonResponse */
class SOAP_CMAC ns6__startFailoverDaemonResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 759; } /* = unique id SOAP_TYPE_ns6__startFailoverDaemonResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__startFailoverDaemonResponse(): soap(NULL) { ns6__startFailoverDaemonResponse::soap_default(NULL); }
	virtual ~ns6__startFailoverDaemonResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__stopFailoverClientRequest
#define SOAP_TYPE_ns6__stopFailoverClientRequest (760)
/* ns6:stopFailoverClientRequest */
class SOAP_CMAC ns6__stopFailoverClientRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 760; } /* = unique id SOAP_TYPE_ns6__stopFailoverClientRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__stopFailoverClientRequest(): soap(NULL) { ns6__stopFailoverClientRequest::soap_default(NULL); }
	virtual ~ns6__stopFailoverClientRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__stopFailoverClientResponse
#define SOAP_TYPE_ns6__stopFailoverClientResponse (761)
/* ns6:stopFailoverClientResponse */
class SOAP_CMAC ns6__stopFailoverClientResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 761; } /* = unique id SOAP_TYPE_ns6__stopFailoverClientResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__stopFailoverClientResponse(): soap(NULL) { ns6__stopFailoverClientResponse::soap_default(NULL); }
	virtual ~ns6__stopFailoverClientResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__stopFailoverDaemonRequest
#define SOAP_TYPE_ns6__stopFailoverDaemonRequest (762)
/* ns6:stopFailoverDaemonRequest */
class SOAP_CMAC ns6__stopFailoverDaemonRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 762; } /* = unique id SOAP_TYPE_ns6__stopFailoverDaemonRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__stopFailoverDaemonRequest(): soap(NULL) { ns6__stopFailoverDaemonRequest::soap_default(NULL); }
	virtual ~ns6__stopFailoverDaemonRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns6__stopFailoverDaemonResponse
#define SOAP_TYPE_ns6__stopFailoverDaemonResponse (763)
/* ns6:stopFailoverDaemonResponse */
class SOAP_CMAC ns6__stopFailoverDaemonResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 763; } /* = unique id SOAP_TYPE_ns6__stopFailoverDaemonResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__stopFailoverDaemonResponse(): soap(NULL) { ns6__stopFailoverDaemonResponse::soap_default(NULL); }
	virtual ~ns6__stopFailoverDaemonResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns7__cancelPendingRemoteWipeRequest
#define SOAP_TYPE_ns7__cancelPendingRemoteWipeRequest (764)
/* ns7:cancelPendingRemoteWipeRequest */
class SOAP_CMAC ns7__cancelPendingRemoteWipeRequest
{
public:
	class ns7__deviceId *device;	/* required element of type ns7:deviceId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 764; } /* = unique id SOAP_TYPE_ns7__cancelPendingRemoteWipeRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__cancelPendingRemoteWipeRequest(): device(NULL), soap(NULL) { ns7__cancelPendingRemoteWipeRequest::soap_default(NULL); }
	virtual ~ns7__cancelPendingRemoteWipeRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns7__deviceId
#define SOAP_TYPE_ns7__deviceId (765)
/* ns7:deviceId */
class SOAP_CMAC ns7__deviceId
{
public:
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 765; } /* = unique id SOAP_TYPE_ns7__deviceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__deviceId(): soap(NULL) { ns7__deviceId::soap_default(NULL); }
	virtual ~ns7__deviceId() { }
};
#endif

#ifndef SOAP_TYPE_ns7__cancelPendingRemoteWipeResponse
#define SOAP_TYPE_ns7__cancelPendingRemoteWipeResponse (766)
/* ns7:cancelPendingRemoteWipeResponse */
class SOAP_CMAC ns7__cancelPendingRemoteWipeResponse
{
public:
	class ns7__deviceStatusInfo *device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:deviceStatusInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 766; } /* = unique id SOAP_TYPE_ns7__cancelPendingRemoteWipeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__cancelPendingRemoteWipeResponse(): device(NULL), soap(NULL) { ns7__cancelPendingRemoteWipeResponse::soap_default(NULL); }
	virtual ~ns7__cancelPendingRemoteWipeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns7__deviceStatusInfo
#define SOAP_TYPE_ns7__deviceStatusInfo (767)
/* ns7:deviceStatusInfo */
class SOAP_CMAC ns7__deviceStatusInfo
{
public:
	bool provisionable;	/* required element of type xsd:boolean */
	char status;	/* required element of type xsd:byte */
	int firstReqReceived;	/* required element of type xsd:int */
	int *lastPolicyUpdate;	/* optional element of type xsd:int */
	int *remoteWipeReqTime;	/* optional element of type xsd:int */
	int *remoteWipeAckTime;	/* optional element of type xsd:int */
	std::string *recoveryPassword;	/* optional element of type xsd:string */
	std::string *lastUsedDate;	/* optional element of type xsd:string */
	std::string id;	/* required attribute */
	std::string type;	/* required attribute */
	std::string *ua;	/* optional attribute */
	std::string *protocol;	/* optional attribute */
	std::string *model;	/* optional attribute */
	std::string *imei;	/* optional attribute */
	std::string *friendly_USCOREname;	/* optional attribute */
	std::string *os;	/* optional attribute */
	std::string *os_USCORElanguage;	/* optional attribute */
	std::string *phone_USCOREnumber;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 767; } /* = unique id SOAP_TYPE_ns7__deviceStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__deviceStatusInfo(): lastPolicyUpdate(NULL), remoteWipeReqTime(NULL), remoteWipeAckTime(NULL), recoveryPassword(NULL), lastUsedDate(NULL), ua(NULL), protocol(NULL), model(NULL), imei(NULL), friendly_USCOREname(NULL), os(NULL), os_USCORElanguage(NULL), phone_USCOREnumber(NULL), soap(NULL) { ns7__deviceStatusInfo::soap_default(NULL); }
	virtual ~ns7__deviceStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns7__getDeviceStatusRequest
#define SOAP_TYPE_ns7__getDeviceStatusRequest (768)
/* ns7:getDeviceStatusRequest */
class SOAP_CMAC ns7__getDeviceStatusRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 768; } /* = unique id SOAP_TYPE_ns7__getDeviceStatusRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__getDeviceStatusRequest(): soap(NULL) { ns7__getDeviceStatusRequest::soap_default(NULL); }
	virtual ~ns7__getDeviceStatusRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns7__getDeviceStatusResponse
#define SOAP_TYPE_ns7__getDeviceStatusResponse (769)
/* ns7:getDeviceStatusResponse */
class SOAP_CMAC ns7__getDeviceStatusResponse
{
public:
	std::vector<ns7__deviceStatusInfo * >device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:deviceStatusInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 769; } /* = unique id SOAP_TYPE_ns7__getDeviceStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__getDeviceStatusResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns7__getDeviceStatusResponse::soap_default(NULL); }
	virtual ~ns7__getDeviceStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns7__remoteWipeRequest
#define SOAP_TYPE_ns7__remoteWipeRequest (770)
/* ns7:remoteWipeRequest */
class SOAP_CMAC ns7__remoteWipeRequest
{
public:
	ns7__deviceId *device;	/* required element of type ns7:deviceId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 770; } /* = unique id SOAP_TYPE_ns7__remoteWipeRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__remoteWipeRequest(): device(NULL), soap(NULL) { ns7__remoteWipeRequest::soap_default(NULL); }
	virtual ~ns7__remoteWipeRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns7__remoteWipeResponse
#define SOAP_TYPE_ns7__remoteWipeResponse (771)
/* ns7:remoteWipeResponse */
class SOAP_CMAC ns7__remoteWipeResponse
{
public:
	ns7__deviceStatusInfo *device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:deviceStatusInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 771; } /* = unique id SOAP_TYPE_ns7__remoteWipeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__remoteWipeResponse(): device(NULL), soap(NULL) { ns7__remoteWipeResponse::soap_default(NULL); }
	virtual ~ns7__remoteWipeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns7__removeDeviceRequest
#define SOAP_TYPE_ns7__removeDeviceRequest (772)
/* ns7:removeDeviceRequest */
class SOAP_CMAC ns7__removeDeviceRequest
{
public:
	ns7__deviceId *device;	/* required element of type ns7:deviceId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 772; } /* = unique id SOAP_TYPE_ns7__removeDeviceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__removeDeviceRequest(): device(NULL), soap(NULL) { ns7__removeDeviceRequest::soap_default(NULL); }
	virtual ~ns7__removeDeviceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns7__removeDeviceResponse
#define SOAP_TYPE_ns7__removeDeviceResponse (773)
/* ns7:removeDeviceResponse */
class SOAP_CMAC ns7__removeDeviceResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 773; } /* = unique id SOAP_TYPE_ns7__removeDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__removeDeviceResponse(): soap(NULL) { ns7__removeDeviceResponse::soap_default(NULL); }
	virtual ~ns7__removeDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns7__resumeDeviceRequest
#define SOAP_TYPE_ns7__resumeDeviceRequest (774)
/* ns7:resumeDeviceRequest */
class SOAP_CMAC ns7__resumeDeviceRequest
{
public:
	ns7__deviceId *device;	/* required element of type ns7:deviceId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 774; } /* = unique id SOAP_TYPE_ns7__resumeDeviceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__resumeDeviceRequest(): device(NULL), soap(NULL) { ns7__resumeDeviceRequest::soap_default(NULL); }
	virtual ~ns7__resumeDeviceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns7__resumeDeviceResponse
#define SOAP_TYPE_ns7__resumeDeviceResponse (775)
/* ns7:resumeDeviceResponse */
class SOAP_CMAC ns7__resumeDeviceResponse
{
public:
	ns7__deviceStatusInfo *device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:deviceStatusInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 775; } /* = unique id SOAP_TYPE_ns7__resumeDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__resumeDeviceResponse(): device(NULL), soap(NULL) { ns7__resumeDeviceResponse::soap_default(NULL); }
	virtual ~ns7__resumeDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns7__suspendDeviceRequest
#define SOAP_TYPE_ns7__suspendDeviceRequest (776)
/* ns7:suspendDeviceRequest */
class SOAP_CMAC ns7__suspendDeviceRequest
{
public:
	ns7__deviceId *device;	/* required element of type ns7:deviceId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 776; } /* = unique id SOAP_TYPE_ns7__suspendDeviceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__suspendDeviceRequest(): device(NULL), soap(NULL) { ns7__suspendDeviceRequest::soap_default(NULL); }
	virtual ~ns7__suspendDeviceRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns7__suspendDeviceResponse
#define SOAP_TYPE_ns7__suspendDeviceResponse (777)
/* ns7:suspendDeviceResponse */
class SOAP_CMAC ns7__suspendDeviceResponse
{
public:
	ns7__deviceStatusInfo *device;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns7:deviceStatusInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 777; } /* = unique id SOAP_TYPE_ns7__suspendDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__suspendDeviceResponse(): device(NULL), soap(NULL) { ns7__suspendDeviceResponse::soap_default(NULL); }
	virtual ~ns7__suspendDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__changeUCPasswordRequest
#define SOAP_TYPE_ns8__changeUCPasswordRequest (778)
/* ns8:changeUCPasswordRequest */
class SOAP_CMAC ns8__changeUCPasswordRequest
{
public:
	std::string password;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 778; } /* = unique id SOAP_TYPE_ns8__changeUCPasswordRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__changeUCPasswordRequest(): soap(NULL) { ns8__changeUCPasswordRequest::soap_default(NULL); }
	virtual ~ns8__changeUCPasswordRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__changeUCPasswordResponse
#define SOAP_TYPE_ns8__changeUCPasswordResponse (779)
/* ns8:changeUCPasswordResponse */
class SOAP_CMAC ns8__changeUCPasswordResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 779; } /* = unique id SOAP_TYPE_ns8__changeUCPasswordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__changeUCPasswordResponse(): soap(NULL) { ns8__changeUCPasswordResponse::soap_default(NULL); }
	virtual ~ns8__changeUCPasswordResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getUCInfoRequest
#define SOAP_TYPE_ns8__getUCInfoRequest (780)
/* ns8:getUCInfoRequest */
class SOAP_CMAC ns8__getUCInfoRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 780; } /* = unique id SOAP_TYPE_ns8__getUCInfoRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getUCInfoRequest(): soap(NULL) { ns8__getUCInfoRequest::soap_default(NULL); }
	virtual ~ns8__getUCInfoRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns8__getUCInfoResponse_attrs
#define SOAP_TYPE__ns8__getUCInfoResponse_attrs (1534)
/* ns8:getUCInfoResponse-attrs */
class SOAP_CMAC _ns8__getUCInfoResponse_attrs
{
public:
	std::vector<class ns8__attr * >attr;	/* optional element of type ns8:attr */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1534; } /* = unique id SOAP_TYPE__ns8__getUCInfoResponse_attrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__getUCInfoResponse_attrs(): unusedCodeGenHelper(NULL) { _ns8__getUCInfoResponse_attrs::soap_default(NULL); }
	virtual ~_ns8__getUCInfoResponse_attrs() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getUCInfoResponse
#define SOAP_TYPE_ns8__getUCInfoResponse (781)
/* ns8:getUCInfoResponse */
class SOAP_CMAC ns8__getUCInfoResponse
{
public:
	_ns8__getUCInfoResponse_attrs *attrs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:getUCInfoResponse-attrs */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 781; } /* = unique id SOAP_TYPE_ns8__getUCInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getUCInfoResponse(): attrs(NULL), soap(NULL) { ns8__getUCInfoResponse::soap_default(NULL); }
	virtual ~ns8__getUCInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getVoiceFeaturesRequest
#define SOAP_TYPE_ns8__getVoiceFeaturesRequest (783)
/* ns8:getVoiceFeaturesRequest */
class SOAP_CMAC ns8__getVoiceFeaturesRequest
{
public:
	class ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	class ns8__phoneVoiceFeaturesSpec *phone;	/* optional element of type ns8:phoneVoiceFeaturesSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 783; } /* = unique id SOAP_TYPE_ns8__getVoiceFeaturesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getVoiceFeaturesRequest(): storeprincipal(NULL), phone(NULL), soap(NULL) { ns8__getVoiceFeaturesRequest::soap_default(NULL); }
	virtual ~ns8__getVoiceFeaturesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__storePrincipalSpec
#define SOAP_TYPE_ns8__storePrincipalSpec (784)
/* ns8:storePrincipalSpec */
class SOAP_CMAC ns8__storePrincipalSpec
{
public:
	std::string *id;	/* optional attribute */
	std::string *name;	/* optional attribute */
	std::string *accountNumber;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 784; } /* = unique id SOAP_TYPE_ns8__storePrincipalSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__storePrincipalSpec(): id(NULL), name(NULL), accountNumber(NULL), soap(NULL) { ns8__storePrincipalSpec::soap_default(NULL); }
	virtual ~ns8__storePrincipalSpec() { }
};
#endif

#ifndef SOAP_TYPE__ns8__union_phoneVoiceFeaturesSpec
#define SOAP_TYPE__ns8__union_phoneVoiceFeaturesSpec (1551)
/* xsd:choice */
union _ns8__union_phoneVoiceFeaturesSpec
{
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_voicemailprefs	(1)
	class ns8__voiceMailPrefsReq *voicemailprefs;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_anoncallrejection	(2)
	class ns8__anonCallRejectionReq *anoncallrejection;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_calleridblocking	(3)
	class ns8__callerIdBlockingReq *calleridblocking;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_callforward	(4)
	class ns8__callForwardReq *callforward;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_callforwardbusyline	(5)
	class ns8__callForwardBusyLineReq *callforwardbusyline;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_callforwardnoanswer	(6)
	class ns8__callForwardNoAnswerReq *callforwardnoanswer;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_callwaiting	(7)
	class ns8__callWaitingReq *callwaiting;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_selectivecallforward	(8)
	class ns8__selectiveCallForwardReq *selectivecallforward;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_selectivecallacceptance	(9)
	class ns8__selectiveCallAcceptanceReq *selectivecallacceptance;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_selectivecallrejection	(10)
	class ns8__selectiveCallRejectionReq *selectivecallrejection;
};
#endif

#ifndef SOAP_TYPE___ns8__union_phoneVoiceFeaturesSpec
#define SOAP_TYPE___ns8__union_phoneVoiceFeaturesSpec (1540)
/* Operation wrapper: */
class SOAP_CMAC __ns8__union_phoneVoiceFeaturesSpec
{
public:
	int __union_phoneVoiceFeaturesSpec;	/* union discriminant (of union defined below) */
	union _ns8__union_phoneVoiceFeaturesSpec union_phoneVoiceFeaturesSpec;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1540; } /* = unique id SOAP_TYPE___ns8__union_phoneVoiceFeaturesSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns8__union_phoneVoiceFeaturesSpec() { __ns8__union_phoneVoiceFeaturesSpec::soap_default(NULL); }
	virtual ~__ns8__union_phoneVoiceFeaturesSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__phoneVoiceFeaturesSpec
#define SOAP_TYPE_ns8__phoneVoiceFeaturesSpec (785)
/* ns8:phoneVoiceFeaturesSpec */
class SOAP_CMAC ns8__phoneVoiceFeaturesSpec
{
public:
	int __size_phoneVoiceFeaturesSpec;	/* sequence of elements <-union-phoneVoiceFeaturesSpec> */
	__ns8__union_phoneVoiceFeaturesSpec *__union_phoneVoiceFeaturesSpec;
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 785; } /* = unique id SOAP_TYPE_ns8__phoneVoiceFeaturesSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__phoneVoiceFeaturesSpec(): __union_phoneVoiceFeaturesSpec(NULL), soap(NULL) { ns8__phoneVoiceFeaturesSpec::soap_default(NULL); }
	virtual ~ns8__phoneVoiceFeaturesSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMailPrefsReq
#define SOAP_TYPE_ns8__voiceMailPrefsReq (786)
/* ns8:voiceMailPrefsReq */
class SOAP_CMAC ns8__voiceMailPrefsReq
{
public:
	std::vector<class ns8__voiceMailPrefName * >pref;	/* optional element of type ns8:voiceMailPrefName */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 786; } /* = unique id SOAP_TYPE_ns8__voiceMailPrefsReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMailPrefsReq(): unusedCodeGenHelper(NULL), soap(NULL) { ns8__voiceMailPrefsReq::soap_default(NULL); }
	virtual ~ns8__voiceMailPrefsReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMailPrefName
#define SOAP_TYPE_ns8__voiceMailPrefName (787)
/* ns8:voiceMailPrefName */
class SOAP_CMAC ns8__voiceMailPrefName
{
public:
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 787; } /* = unique id SOAP_TYPE_ns8__voiceMailPrefName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMailPrefName(): soap(NULL) { ns8__voiceMailPrefName::soap_default(NULL); }
	virtual ~ns8__voiceMailPrefName() { }
};
#endif

#ifndef SOAP_TYPE_ns8__anonCallRejectionReq
#define SOAP_TYPE_ns8__anonCallRejectionReq (788)
/* ns8:anonCallRejectionReq */
class SOAP_CMAC ns8__anonCallRejectionReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 788; } /* = unique id SOAP_TYPE_ns8__anonCallRejectionReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__anonCallRejectionReq(): soap(NULL) { ns8__anonCallRejectionReq::soap_default(NULL); }
	virtual ~ns8__anonCallRejectionReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callerIdBlockingReq
#define SOAP_TYPE_ns8__callerIdBlockingReq (789)
/* ns8:callerIdBlockingReq */
class SOAP_CMAC ns8__callerIdBlockingReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 789; } /* = unique id SOAP_TYPE_ns8__callerIdBlockingReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callerIdBlockingReq(): soap(NULL) { ns8__callerIdBlockingReq::soap_default(NULL); }
	virtual ~ns8__callerIdBlockingReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callForwardReq
#define SOAP_TYPE_ns8__callForwardReq (790)
/* ns8:callForwardReq */
class SOAP_CMAC ns8__callForwardReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 790; } /* = unique id SOAP_TYPE_ns8__callForwardReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callForwardReq(): soap(NULL) { ns8__callForwardReq::soap_default(NULL); }
	virtual ~ns8__callForwardReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callForwardBusyLineReq
#define SOAP_TYPE_ns8__callForwardBusyLineReq (791)
/* ns8:callForwardBusyLineReq */
class SOAP_CMAC ns8__callForwardBusyLineReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 791; } /* = unique id SOAP_TYPE_ns8__callForwardBusyLineReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callForwardBusyLineReq(): soap(NULL) { ns8__callForwardBusyLineReq::soap_default(NULL); }
	virtual ~ns8__callForwardBusyLineReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callForwardNoAnswerReq
#define SOAP_TYPE_ns8__callForwardNoAnswerReq (792)
/* ns8:callForwardNoAnswerReq */
class SOAP_CMAC ns8__callForwardNoAnswerReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 792; } /* = unique id SOAP_TYPE_ns8__callForwardNoAnswerReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callForwardNoAnswerReq(): soap(NULL) { ns8__callForwardNoAnswerReq::soap_default(NULL); }
	virtual ~ns8__callForwardNoAnswerReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callWaitingReq
#define SOAP_TYPE_ns8__callWaitingReq (793)
/* ns8:callWaitingReq */
class SOAP_CMAC ns8__callWaitingReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 793; } /* = unique id SOAP_TYPE_ns8__callWaitingReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callWaitingReq(): soap(NULL) { ns8__callWaitingReq::soap_default(NULL); }
	virtual ~ns8__callWaitingReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__selectiveCallForwardReq
#define SOAP_TYPE_ns8__selectiveCallForwardReq (794)
/* ns8:selectiveCallForwardReq */
class SOAP_CMAC ns8__selectiveCallForwardReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 794; } /* = unique id SOAP_TYPE_ns8__selectiveCallForwardReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__selectiveCallForwardReq(): soap(NULL) { ns8__selectiveCallForwardReq::soap_default(NULL); }
	virtual ~ns8__selectiveCallForwardReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__selectiveCallAcceptanceReq
#define SOAP_TYPE_ns8__selectiveCallAcceptanceReq (795)
/* ns8:selectiveCallAcceptanceReq */
class SOAP_CMAC ns8__selectiveCallAcceptanceReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 795; } /* = unique id SOAP_TYPE_ns8__selectiveCallAcceptanceReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__selectiveCallAcceptanceReq(): soap(NULL) { ns8__selectiveCallAcceptanceReq::soap_default(NULL); }
	virtual ~ns8__selectiveCallAcceptanceReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__selectiveCallRejectionReq
#define SOAP_TYPE_ns8__selectiveCallRejectionReq (796)
/* ns8:selectiveCallRejectionReq */
class SOAP_CMAC ns8__selectiveCallRejectionReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 796; } /* = unique id SOAP_TYPE_ns8__selectiveCallRejectionReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__selectiveCallRejectionReq(): soap(NULL) { ns8__selectiveCallRejectionReq::soap_default(NULL); }
	virtual ~ns8__selectiveCallRejectionReq() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getVoiceFeaturesResponse
#define SOAP_TYPE_ns8__getVoiceFeaturesResponse (797)
/* ns8:getVoiceFeaturesResponse */
class SOAP_CMAC ns8__getVoiceFeaturesResponse
{
public:
	class ns8__phoneVoiceFeaturesInfo *phone;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:phoneVoiceFeaturesInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 797; } /* = unique id SOAP_TYPE_ns8__getVoiceFeaturesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getVoiceFeaturesResponse(): phone(NULL), soap(NULL) { ns8__getVoiceFeaturesResponse::soap_default(NULL); }
	virtual ~ns8__getVoiceFeaturesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__union_phoneVoiceFeaturesInfo
#define SOAP_TYPE__ns8__union_phoneVoiceFeaturesInfo (1567)
/* xsd:choice */
union _ns8__union_phoneVoiceFeaturesInfo
{
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_voicemailprefs	(1)
	class ns8__voiceMailPrefsFeature *voicemailprefs;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_anoncallrejection	(2)
	class ns8__anonCallRejectionFeature *anoncallrejection;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_calleridblocking	(3)
	class ns8__callerIdBlockingFeature *calleridblocking;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_callforward	(4)
	class ns8__callForwardFeature *callforward;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_callforwardbusyline	(5)
	class ns8__callForwardBusyLineFeature *callforwardbusyline;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_callforwardnoanswer	(6)
	class ns8__callForwardNoAnswerFeature *callforwardnoanswer;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_callwaiting	(7)
	class ns8__callWaitingFeature *callwaiting;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_selectivecallforward	(8)
	class ns8__selectiveCallForwardFeature *selectivecallforward;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_selectivecallacceptance	(9)
	class ns8__selectiveCallAcceptanceFeature *selectivecallacceptance;
#define SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_selectivecallrejection	(10)
	class ns8__selectiveCallRejectionFeature *selectivecallrejection;
};
#endif

#ifndef SOAP_TYPE___ns8__union_phoneVoiceFeaturesInfo
#define SOAP_TYPE___ns8__union_phoneVoiceFeaturesInfo (1556)
/* Operation wrapper: */
class SOAP_CMAC __ns8__union_phoneVoiceFeaturesInfo
{
public:
	int __union_phoneVoiceFeaturesInfo;	/* union discriminant (of union defined below) */
	union _ns8__union_phoneVoiceFeaturesInfo union_phoneVoiceFeaturesInfo;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1556; } /* = unique id SOAP_TYPE___ns8__union_phoneVoiceFeaturesInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns8__union_phoneVoiceFeaturesInfo() { __ns8__union_phoneVoiceFeaturesInfo::soap_default(NULL); }
	virtual ~__ns8__union_phoneVoiceFeaturesInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__phoneVoiceFeaturesInfo
#define SOAP_TYPE_ns8__phoneVoiceFeaturesInfo (798)
/* ns8:phoneVoiceFeaturesInfo */
class SOAP_CMAC ns8__phoneVoiceFeaturesInfo
{
public:
	int __size_phoneVoiceFeaturesInfo;	/* sequence of elements <-union-phoneVoiceFeaturesInfo> */
	__ns8__union_phoneVoiceFeaturesInfo *__union_phoneVoiceFeaturesInfo;
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 798; } /* = unique id SOAP_TYPE_ns8__phoneVoiceFeaturesInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__phoneVoiceFeaturesInfo(): __union_phoneVoiceFeaturesInfo(NULL), soap(NULL) { ns8__phoneVoiceFeaturesInfo::soap_default(NULL); }
	virtual ~ns8__phoneVoiceFeaturesInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callFeatureInfo
#define SOAP_TYPE_ns8__callFeatureInfo (800)
/* ns8:callFeatureInfo */
class SOAP_CMAC ns8__callFeatureInfo
{
public:
	enum ns3__trueOrFalse s;	/* required attribute */
	enum ns3__trueOrFalse a;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 800; } /* = unique id SOAP_TYPE_ns8__callFeatureInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callFeatureInfo(): soap(NULL) { ns8__callFeatureInfo::soap_default(NULL); }
	virtual ~ns8__callFeatureInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callerListEntry
#define SOAP_TYPE_ns8__callerListEntry (810)
/* ns8:callerListEntry */
class SOAP_CMAC ns8__callerListEntry
{
public:
	std::string pn;	/* required attribute */
	enum ns3__trueOrFalse a;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 810; } /* = unique id SOAP_TYPE_ns8__callerListEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callerListEntry(): soap(NULL) { ns8__callerListEntry::soap_default(NULL); }
	virtual ~ns8__callerListEntry() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getVoiceFolderRequest
#define SOAP_TYPE_ns8__getVoiceFolderRequest (813)
/* ns8:getVoiceFolderRequest */
class SOAP_CMAC ns8__getVoiceFolderRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	std::vector<class ns8__phoneSpec * >phone;	/* optional element of type ns8:phoneSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 813; } /* = unique id SOAP_TYPE_ns8__getVoiceFolderRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getVoiceFolderRequest(): storeprincipal(NULL), soap(NULL) { ns8__getVoiceFolderRequest::soap_default(NULL); }
	virtual ~ns8__getVoiceFolderRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__phoneSpec
#define SOAP_TYPE_ns8__phoneSpec (814)
/* ns8:phoneSpec */
class SOAP_CMAC ns8__phoneSpec
{
public:
	std::vector<class ns8__prefSpec * >pref;	/* optional element of type ns8:prefSpec */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 814; } /* = unique id SOAP_TYPE_ns8__phoneSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__phoneSpec(): name(NULL), soap(NULL) { ns8__phoneSpec::soap_default(NULL); }
	virtual ~ns8__phoneSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__prefSpec
#define SOAP_TYPE_ns8__prefSpec (815)
/* ns8:prefSpec */
class SOAP_CMAC ns8__prefSpec
{
public:
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 815; } /* = unique id SOAP_TYPE_ns8__prefSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__prefSpec(): name(NULL), soap(NULL) { ns8__prefSpec::soap_default(NULL); }
	virtual ~ns8__prefSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getVoiceFolderResponse
#define SOAP_TYPE_ns8__getVoiceFolderResponse (816)
/* ns8:getVoiceFolderResponse */
class SOAP_CMAC ns8__getVoiceFolderResponse
{
public:
	std::vector<class ns8__voiceFolderInfo * >phone;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:voiceFolderInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 816; } /* = unique id SOAP_TYPE_ns8__getVoiceFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getVoiceFolderResponse(): unusedCodeGenHelper(NULL), soap(NULL) { ns8__getVoiceFolderResponse::soap_default(NULL); }
	virtual ~ns8__getVoiceFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceFolderInfo
#define SOAP_TYPE_ns8__voiceFolderInfo (817)
/* ns8:voiceFolderInfo */
class SOAP_CMAC ns8__voiceFolderInfo
{
public:
	class ns8__rootVoiceFolder *folder;	/* required element of type ns8:rootVoiceFolder */
	std::string name;	/* required attribute */
	bool vm;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 817; } /* = unique id SOAP_TYPE_ns8__voiceFolderInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceFolderInfo(): folder(NULL), soap(NULL) { ns8__voiceFolderInfo::soap_default(NULL); }
	virtual ~ns8__voiceFolderInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceFolder
#define SOAP_TYPE_ns8__voiceFolder (819)
/* ns8:voiceFolder */
class SOAP_CMAC ns8__voiceFolder
{
public:
	std::string name;	/* required attribute */
	std::string id;	/* required attribute */
	std::string l;	/* required attribute */
	std::string *view;	/* optional attribute */
	LONG64 *u;	/* optional attribute */
	LONG64 *n;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 819; } /* = unique id SOAP_TYPE_ns8__voiceFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceFolder(): view(NULL), u(NULL), n(NULL), soap(NULL) { ns8__voiceFolder::soap_default(NULL); }
	virtual ~ns8__voiceFolder() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getVoiceInfoRequest
#define SOAP_TYPE_ns8__getVoiceInfoRequest (820)
/* ns8:getVoiceInfoRequest */
class SOAP_CMAC ns8__getVoiceInfoRequest
{
public:
	std::vector<ns8__phoneSpec * >phone;	/* optional element of type ns8:phoneSpec */
	std::string *unusedCodeGenHelper;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 820; } /* = unique id SOAP_TYPE_ns8__getVoiceInfoRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getVoiceInfoRequest(): unusedCodeGenHelper(NULL), soap(NULL) { ns8__getVoiceInfoRequest::soap_default(NULL); }
	virtual ~ns8__getVoiceInfoRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getVoiceInfoResponse
#define SOAP_TYPE_ns8__getVoiceInfoResponse (821)
/* ns8:getVoiceInfoResponse */
class SOAP_CMAC ns8__getVoiceInfoResponse
{
public:
	std::string audioType;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	ns8__storePrincipalSpec *storeprincipal;	/* required element of type ns8:storePrincipalSpec */
	std::vector<class ns8__voiceInfo * >phone;	/* optional element of type ns8:voiceInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 821; } /* = unique id SOAP_TYPE_ns8__getVoiceInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getVoiceInfoResponse(): storeprincipal(NULL), soap(NULL) { ns8__getVoiceInfoResponse::soap_default(NULL); }
	virtual ~ns8__getVoiceInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns8__voiceInfo_callfeatures
#define SOAP_TYPE__ns8__voiceInfo_callfeatures (1578)
/* ns8:voiceInfo-callfeatures */
class SOAP_CMAC _ns8__voiceInfo_callfeatures
{
public:
	std::vector<class ns8__callFeature * >callfeature;	/* optional element of type ns8:callFeature */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1578; } /* = unique id SOAP_TYPE__ns8__voiceInfo_callfeatures */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__voiceInfo_callfeatures(): unusedCodeGenHelper(NULL) { _ns8__voiceInfo_callfeatures::soap_default(NULL); }
	virtual ~_ns8__voiceInfo_callfeatures() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceInfo
#define SOAP_TYPE_ns8__voiceInfo (822)
/* ns8:voiceInfo */
class SOAP_CMAC ns8__voiceInfo
{
public:
	ns8__rootVoiceFolder *folder;	/* required element of type ns8:rootVoiceFolder */
	_ns8__voiceInfo_callfeatures *callfeatures;	/* optional element of type ns8:voiceInfo-callfeatures */
	std::string name;	/* required attribute */
	std::string id;	/* required attribute */
	std::string label;	/* required attribute */
	bool callable;	/* required attribute */
	bool editable;	/* required attribute */
	std::string *type;	/* optional attribute */
	std::string *c2cDeviceId;	/* optional attribute */
	bool vm;	/* required attribute */
	LONG64 *used;	/* optional attribute */
	LONG64 *limit;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 822; } /* = unique id SOAP_TYPE_ns8__voiceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceInfo(): folder(NULL), callfeatures(NULL), type(NULL), c2cDeviceId(NULL), used(NULL), limit(NULL), soap(NULL) { ns8__voiceInfo::soap_default(NULL); }
	virtual ~ns8__voiceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callFeature
#define SOAP_TYPE_ns8__callFeature (823)
/* ns8:callFeature */
class SOAP_CMAC ns8__callFeature
{
public:
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 823; } /* = unique id SOAP_TYPE_ns8__callFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callFeature(): soap(NULL) { ns8__callFeature::soap_default(NULL); }
	virtual ~ns8__callFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getVoiceMailPrefsRequest
#define SOAP_TYPE_ns8__getVoiceMailPrefsRequest (824)
/* ns8:getVoiceMailPrefsRequest */
class SOAP_CMAC ns8__getVoiceMailPrefsRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	ns8__phoneSpec *phone;	/* optional element of type ns8:phoneSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 824; } /* = unique id SOAP_TYPE_ns8__getVoiceMailPrefsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getVoiceMailPrefsRequest(): storeprincipal(NULL), phone(NULL), soap(NULL) { ns8__getVoiceMailPrefsRequest::soap_default(NULL); }
	virtual ~ns8__getVoiceMailPrefsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__getVoiceMailPrefsResponse
#define SOAP_TYPE_ns8__getVoiceMailPrefsResponse (825)
/* ns8:getVoiceMailPrefsResponse */
class SOAP_CMAC ns8__getVoiceMailPrefsResponse
{
public:
	class ns8__phoneInfo *phone;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:phoneInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 825; } /* = unique id SOAP_TYPE_ns8__getVoiceMailPrefsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__getVoiceMailPrefsResponse(): phone(NULL), soap(NULL) { ns8__getVoiceMailPrefsResponse::soap_default(NULL); }
	virtual ~ns8__getVoiceMailPrefsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__phoneInfo
#define SOAP_TYPE_ns8__phoneInfo (826)
/* ns8:phoneInfo */
class SOAP_CMAC ns8__phoneInfo
{
public:
	std::vector<class ns8__prefInfo * >pref;	/* optional element of type ns8:prefInfo */
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 826; } /* = unique id SOAP_TYPE_ns8__phoneInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__phoneInfo(): name(NULL), soap(NULL) { ns8__phoneInfo::soap_default(NULL); }
	virtual ~ns8__phoneInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyFromNumRequest
#define SOAP_TYPE_ns8__modifyFromNumRequest (827)
/* ns8:modifyFromNumRequest */
class SOAP_CMAC ns8__modifyFromNumRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	class ns8__modifyFromNumSpec *phone;	/* optional element of type ns8:modifyFromNumSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 827; } /* = unique id SOAP_TYPE_ns8__modifyFromNumRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyFromNumRequest(): storeprincipal(NULL), phone(NULL), soap(NULL) { ns8__modifyFromNumRequest::soap_default(NULL); }
	virtual ~ns8__modifyFromNumRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyFromNumSpec
#define SOAP_TYPE_ns8__modifyFromNumSpec (828)
/* ns8:modifyFromNumSpec */
class SOAP_CMAC ns8__modifyFromNumSpec
{
public:
	std::string oldPhone;	/* required attribute */
	std::string phone;	/* required attribute */
	std::string id;	/* required attribute */
	std::string label;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 828; } /* = unique id SOAP_TYPE_ns8__modifyFromNumSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyFromNumSpec(): soap(NULL) { ns8__modifyFromNumSpec::soap_default(NULL); }
	virtual ~ns8__modifyFromNumSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyFromNumResponse
#define SOAP_TYPE_ns8__modifyFromNumResponse (829)
/* ns8:modifyFromNumResponse */
class SOAP_CMAC ns8__modifyFromNumResponse
{
public:
	class ns8__phoneName *phone;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:phoneName */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 829; } /* = unique id SOAP_TYPE_ns8__modifyFromNumResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyFromNumResponse(): phone(NULL), soap(NULL) { ns8__modifyFromNumResponse::soap_default(NULL); }
	virtual ~ns8__modifyFromNumResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__phoneName
#define SOAP_TYPE_ns8__phoneName (830)
/* ns8:phoneName */
class SOAP_CMAC ns8__phoneName
{
public:
	std::string *name;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 830; } /* = unique id SOAP_TYPE_ns8__phoneName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__phoneName(): name(NULL), soap(NULL) { ns8__phoneName::soap_default(NULL); }
	virtual ~ns8__phoneName() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyVoiceFeaturesRequest
#define SOAP_TYPE_ns8__modifyVoiceFeaturesRequest (831)
/* ns8:modifyVoiceFeaturesRequest */
class SOAP_CMAC ns8__modifyVoiceFeaturesRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	class ns8__modifyVoiceFeaturesSpec *phone;	/* optional element of type ns8:modifyVoiceFeaturesSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 831; } /* = unique id SOAP_TYPE_ns8__modifyVoiceFeaturesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyVoiceFeaturesRequest(): storeprincipal(NULL), phone(NULL), soap(NULL) { ns8__modifyVoiceFeaturesRequest::soap_default(NULL); }
	virtual ~ns8__modifyVoiceFeaturesRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns8__union_modifyVoiceFeaturesSpec
#define SOAP_TYPE__ns8__union_modifyVoiceFeaturesSpec (1589)
/* xsd:choice */
union _ns8__union_modifyVoiceFeaturesSpec
{
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_voicemailprefs	(1)
	ns8__voiceMailPrefsFeature *voicemailprefs;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_anoncallrejection	(2)
	ns8__anonCallRejectionFeature *anoncallrejection;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_calleridblocking	(3)
	ns8__callerIdBlockingFeature *calleridblocking;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_callforward	(4)
	ns8__callForwardFeature *callforward;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_callforwardbusyline	(5)
	ns8__callForwardBusyLineFeature *callforwardbusyline;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_callforwardnoanswer	(6)
	ns8__callForwardNoAnswerFeature *callforwardnoanswer;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_callwaiting	(7)
	ns8__callWaitingFeature *callwaiting;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_selectivecallforward	(8)
	ns8__selectiveCallForwardFeature *selectivecallforward;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_selectivecallacceptance	(9)
	ns8__selectiveCallAcceptanceFeature *selectivecallacceptance;
#define SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_selectivecallrejection	(10)
	ns8__selectiveCallRejectionFeature *selectivecallrejection;
};
#endif

#ifndef SOAP_TYPE___ns8__union_modifyVoiceFeaturesSpec
#define SOAP_TYPE___ns8__union_modifyVoiceFeaturesSpec (1588)
/* Operation wrapper: */
class SOAP_CMAC __ns8__union_modifyVoiceFeaturesSpec
{
public:
	int __union_modifyVoiceFeaturesSpec;	/* union discriminant (of union defined below) */
	union _ns8__union_modifyVoiceFeaturesSpec union_modifyVoiceFeaturesSpec;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1588; } /* = unique id SOAP_TYPE___ns8__union_modifyVoiceFeaturesSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns8__union_modifyVoiceFeaturesSpec() { __ns8__union_modifyVoiceFeaturesSpec::soap_default(NULL); }
	virtual ~__ns8__union_modifyVoiceFeaturesSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyVoiceFeaturesSpec
#define SOAP_TYPE_ns8__modifyVoiceFeaturesSpec (832)
/* ns8:modifyVoiceFeaturesSpec */
class SOAP_CMAC ns8__modifyVoiceFeaturesSpec
{
public:
	int __size_modifyVoiceFeaturesSpec;	/* sequence of elements <-union-modifyVoiceFeaturesSpec> */
	__ns8__union_modifyVoiceFeaturesSpec *__union_modifyVoiceFeaturesSpec;
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 832; } /* = unique id SOAP_TYPE_ns8__modifyVoiceFeaturesSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyVoiceFeaturesSpec(): __union_modifyVoiceFeaturesSpec(NULL), soap(NULL) { ns8__modifyVoiceFeaturesSpec::soap_default(NULL); }
	virtual ~ns8__modifyVoiceFeaturesSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyVoiceFeaturesResponse
#define SOAP_TYPE_ns8__modifyVoiceFeaturesResponse (833)
/* ns8:modifyVoiceFeaturesResponse */
class SOAP_CMAC ns8__modifyVoiceFeaturesResponse
{
public:
	ns8__phoneName *phone;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:phoneName */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 833; } /* = unique id SOAP_TYPE_ns8__modifyVoiceFeaturesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyVoiceFeaturesResponse(): phone(NULL), soap(NULL) { ns8__modifyVoiceFeaturesResponse::soap_default(NULL); }
	virtual ~ns8__modifyVoiceFeaturesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyVoiceMailPinRequest
#define SOAP_TYPE_ns8__modifyVoiceMailPinRequest (834)
/* ns8:modifyVoiceMailPinRequest */
class SOAP_CMAC ns8__modifyVoiceMailPinRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	class ns8__modifyVoiceMailPinSpec *phone;	/* optional element of type ns8:modifyVoiceMailPinSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 834; } /* = unique id SOAP_TYPE_ns8__modifyVoiceMailPinRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyVoiceMailPinRequest(): storeprincipal(NULL), phone(NULL), soap(NULL) { ns8__modifyVoiceMailPinRequest::soap_default(NULL); }
	virtual ~ns8__modifyVoiceMailPinRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyVoiceMailPinSpec
#define SOAP_TYPE_ns8__modifyVoiceMailPinSpec (835)
/* ns8:modifyVoiceMailPinSpec */
class SOAP_CMAC ns8__modifyVoiceMailPinSpec
{
public:
	std::string *name;	/* optional attribute */
	std::string oldPin;	/* required attribute */
	std::string pin;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 835; } /* = unique id SOAP_TYPE_ns8__modifyVoiceMailPinSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyVoiceMailPinSpec(): name(NULL), soap(NULL) { ns8__modifyVoiceMailPinSpec::soap_default(NULL); }
	virtual ~ns8__modifyVoiceMailPinSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyVoiceMailPinResponse
#define SOAP_TYPE_ns8__modifyVoiceMailPinResponse (836)
/* ns8:modifyVoiceMailPinResponse */
class SOAP_CMAC ns8__modifyVoiceMailPinResponse
{
public:
	ns8__phoneName *phone;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:phoneName */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 836; } /* = unique id SOAP_TYPE_ns8__modifyVoiceMailPinResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyVoiceMailPinResponse(): phone(NULL), soap(NULL) { ns8__modifyVoiceMailPinResponse::soap_default(NULL); }
	virtual ~ns8__modifyVoiceMailPinResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyVoiceMailPrefsRequest
#define SOAP_TYPE_ns8__modifyVoiceMailPrefsRequest (837)
/* ns8:modifyVoiceMailPrefsRequest */
class SOAP_CMAC ns8__modifyVoiceMailPrefsRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	ns8__phoneInfo *phone;	/* optional element of type ns8:phoneInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 837; } /* = unique id SOAP_TYPE_ns8__modifyVoiceMailPrefsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyVoiceMailPrefsRequest(): storeprincipal(NULL), phone(NULL), soap(NULL) { ns8__modifyVoiceMailPrefsRequest::soap_default(NULL); }
	virtual ~ns8__modifyVoiceMailPrefsRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__modifyVoiceMailPrefsResponse
#define SOAP_TYPE_ns8__modifyVoiceMailPrefsResponse (838)
/* ns8:modifyVoiceMailPrefsResponse */
class SOAP_CMAC ns8__modifyVoiceMailPrefsResponse
{
public:
	ns8__phoneName *phone;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:phoneName */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 838; } /* = unique id SOAP_TYPE_ns8__modifyVoiceMailPrefsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__modifyVoiceMailPrefsResponse(): phone(NULL), soap(NULL) { ns8__modifyVoiceMailPrefsResponse::soap_default(NULL); }
	virtual ~ns8__modifyVoiceMailPrefsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__resetVoiceFeaturesRequest
#define SOAP_TYPE_ns8__resetVoiceFeaturesRequest (839)
/* ns8:resetVoiceFeaturesRequest */
class SOAP_CMAC ns8__resetVoiceFeaturesRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	class ns8__resetPhoneVoiceFeaturesSpec *phone;	/* optional element of type ns8:resetPhoneVoiceFeaturesSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 839; } /* = unique id SOAP_TYPE_ns8__resetVoiceFeaturesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__resetVoiceFeaturesRequest(): storeprincipal(NULL), phone(NULL), soap(NULL) { ns8__resetVoiceFeaturesRequest::soap_default(NULL); }
	virtual ~ns8__resetVoiceFeaturesRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns8__union_resetPhoneVoiceFeaturesSpec
#define SOAP_TYPE__ns8__union_resetPhoneVoiceFeaturesSpec (1594)
/* xsd:choice */
union _ns8__union_resetPhoneVoiceFeaturesSpec
{
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_anoncallrejection	(1)
	ns8__anonCallRejectionReq *anoncallrejection;
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_calleridblocking	(2)
	ns8__callerIdBlockingReq *calleridblocking;
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_callforward	(3)
	ns8__callForwardReq *callforward;
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_callforwardbusyline	(4)
	ns8__callForwardBusyLineReq *callforwardbusyline;
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_callforwardnoanswer	(5)
	ns8__callForwardNoAnswerReq *callforwardnoanswer;
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_callwaiting	(6)
	ns8__callWaitingReq *callwaiting;
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_selectivecallforward	(7)
	ns8__selectiveCallForwardReq *selectivecallforward;
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_selectivecallacceptance	(8)
	ns8__selectiveCallAcceptanceReq *selectivecallacceptance;
#define SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_selectivecallrejection	(9)
	ns8__selectiveCallRejectionReq *selectivecallrejection;
};
#endif

#ifndef SOAP_TYPE___ns8__union_resetPhoneVoiceFeaturesSpec
#define SOAP_TYPE___ns8__union_resetPhoneVoiceFeaturesSpec (1593)
/* Operation wrapper: */
class SOAP_CMAC __ns8__union_resetPhoneVoiceFeaturesSpec
{
public:
	int __union_resetPhoneVoiceFeaturesSpec;	/* union discriminant (of union defined below) */
	union _ns8__union_resetPhoneVoiceFeaturesSpec union_resetPhoneVoiceFeaturesSpec;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1593; } /* = unique id SOAP_TYPE___ns8__union_resetPhoneVoiceFeaturesSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns8__union_resetPhoneVoiceFeaturesSpec() { __ns8__union_resetPhoneVoiceFeaturesSpec::soap_default(NULL); }
	virtual ~__ns8__union_resetPhoneVoiceFeaturesSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__resetPhoneVoiceFeaturesSpec
#define SOAP_TYPE_ns8__resetPhoneVoiceFeaturesSpec (840)
/* ns8:resetPhoneVoiceFeaturesSpec */
class SOAP_CMAC ns8__resetPhoneVoiceFeaturesSpec
{
public:
	int __size_resetPhoneVoiceFeaturesSpec;	/* sequence of elements <-union-resetPhoneVoiceFeaturesSpec> */
	__ns8__union_resetPhoneVoiceFeaturesSpec *__union_resetPhoneVoiceFeaturesSpec;
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 840; } /* = unique id SOAP_TYPE_ns8__resetPhoneVoiceFeaturesSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__resetPhoneVoiceFeaturesSpec(): __union_resetPhoneVoiceFeaturesSpec(NULL), soap(NULL) { ns8__resetPhoneVoiceFeaturesSpec::soap_default(NULL); }
	virtual ~ns8__resetPhoneVoiceFeaturesSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__resetVoiceFeaturesResponse
#define SOAP_TYPE_ns8__resetVoiceFeaturesResponse (841)
/* ns8:resetVoiceFeaturesResponse */
class SOAP_CMAC ns8__resetVoiceFeaturesResponse
{
public:
	ns8__phoneName *phone;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:phoneName */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 841; } /* = unique id SOAP_TYPE_ns8__resetVoiceFeaturesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__resetVoiceFeaturesResponse(): phone(NULL), soap(NULL) { ns8__resetVoiceFeaturesResponse::soap_default(NULL); }
	virtual ~ns8__resetVoiceFeaturesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__searchVoiceRequest
#define SOAP_TYPE_ns8__searchVoiceRequest (842)
/* ns8:searchVoiceRequest */
class SOAP_CMAC ns8__searchVoiceRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	std::string query;	/* required attribute */
	int *limit;	/* optional attribute */
	int *offset;	/* optional attribute */
	std::string *types;	/* optional attribute */
	std::string *sortBy;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 842; } /* = unique id SOAP_TYPE_ns8__searchVoiceRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__searchVoiceRequest(): storeprincipal(NULL), limit(NULL), offset(NULL), types(NULL), sortBy(NULL), soap(NULL) { ns8__searchVoiceRequest::soap_default(NULL); }
	virtual ~ns8__searchVoiceRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns8__union_searchVoiceResponse
#define SOAP_TYPE__ns8__union_searchVoiceResponse (1601)
/* xsd:choice */
union _ns8__union_searchVoiceResponse
{
#define SOAP_UNION__ns8__union_searchVoiceResponse_vm	(1)
	class ns8__voiceMailItem *vm;
#define SOAP_UNION__ns8__union_searchVoiceResponse_cl	(2)
	class ns8__callLogItem *cl;
};
#endif

#ifndef SOAP_TYPE___ns8__union_searchVoiceResponse
#define SOAP_TYPE___ns8__union_searchVoiceResponse (1598)
/* Operation wrapper: */
class SOAP_CMAC __ns8__union_searchVoiceResponse
{
public:
	int __union_searchVoiceResponse;	/* union discriminant (of union defined below) */
	union _ns8__union_searchVoiceResponse union_searchVoiceResponse;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1598; } /* = unique id SOAP_TYPE___ns8__union_searchVoiceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns8__union_searchVoiceResponse() { __ns8__union_searchVoiceResponse::soap_default(NULL); }
	virtual ~__ns8__union_searchVoiceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__searchVoiceResponse
#define SOAP_TYPE_ns8__searchVoiceResponse (843)
/* ns8:searchVoiceResponse */
class SOAP_CMAC ns8__searchVoiceResponse
{
public:
	std::vector<class ns8__voiceFolderSummary * >vfi;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:voiceFolderSummary */
	int __size_searchVoiceResponse;	/* sequence of elements <-union-searchVoiceResponse> */
	__ns8__union_searchVoiceResponse *__union_searchVoiceResponse;
	std::string sortBy;	/* required attribute */
	int offset;	/* required attribute */
	bool more;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 843; } /* = unique id SOAP_TYPE_ns8__searchVoiceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__searchVoiceResponse(): __union_searchVoiceResponse(NULL), soap(NULL) { ns8__searchVoiceResponse::soap_default(NULL); }
	virtual ~ns8__searchVoiceResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceFolderSummary
#define SOAP_TYPE_ns8__voiceFolderSummary (844)
/* ns8:voiceFolderSummary */
class SOAP_CMAC ns8__voiceFolderSummary
{
public:
	std::string id;	/* required attribute */
	LONG64 u;	/* required attribute */
	LONG64 n;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 844; } /* = unique id SOAP_TYPE_ns8__voiceFolderSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceFolderSummary(): soap(NULL) { ns8__voiceFolderSummary::soap_default(NULL); }
	virtual ~ns8__voiceFolderSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceCallItem
#define SOAP_TYPE_ns8__voiceCallItem (846)
/* ns8:voiceCallItem */
class SOAP_CMAC ns8__voiceCallItem
{
public:
	std::string phone;	/* required attribute */
	std::string l;	/* required attribute */
	std::string sf;	/* required attribute */
	int du;	/* required attribute */
	LONG64 d;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 846; } /* = unique id SOAP_TYPE_ns8__voiceCallItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceCallItem(): soap(NULL) { ns8__voiceCallItem::soap_default(NULL); }
	virtual ~ns8__voiceCallItem() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMailCallParty
#define SOAP_TYPE_ns8__voiceMailCallParty (847)
/* ns8:voiceMailCallParty */
class SOAP_CMAC ns8__voiceMailCallParty
{
public:
	std::string t;	/* required attribute */
	std::string p;	/* required attribute */
	std::string n;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 847; } /* = unique id SOAP_TYPE_ns8__voiceMailCallParty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMailCallParty(): soap(NULL) { ns8__voiceMailCallParty::soap_default(NULL); }
	virtual ~ns8__voiceMailCallParty() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMailContent
#define SOAP_TYPE_ns8__voiceMailContent (848)
/* ns8:voiceMailContent */
class SOAP_CMAC ns8__voiceMailContent
{
public:
	std::string url;	/* required attribute */
	std::string ct;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 848; } /* = unique id SOAP_TYPE_ns8__voiceMailContent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMailContent(): soap(NULL) { ns8__voiceMailContent::soap_default(NULL); }
	virtual ~ns8__voiceMailContent() { }
};
#endif

#ifndef SOAP_TYPE_ns8__uploadVoiceMailRequest
#define SOAP_TYPE_ns8__uploadVoiceMailRequest (851)
/* ns8:uploadVoiceMailRequest */
class SOAP_CMAC ns8__uploadVoiceMailRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	class ns8__voiceMsgUploadSpec *vm;	/* optional element of type ns8:voiceMsgUploadSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 851; } /* = unique id SOAP_TYPE_ns8__uploadVoiceMailRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__uploadVoiceMailRequest(): storeprincipal(NULL), vm(NULL), soap(NULL) { ns8__uploadVoiceMailRequest::soap_default(NULL); }
	virtual ~ns8__uploadVoiceMailRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMsgUploadSpec
#define SOAP_TYPE_ns8__voiceMsgUploadSpec (852)
/* ns8:voiceMsgUploadSpec */
class SOAP_CMAC ns8__voiceMsgUploadSpec
{
public:
	std::string id;	/* required attribute */
	std::string phone;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 852; } /* = unique id SOAP_TYPE_ns8__voiceMsgUploadSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMsgUploadSpec(): soap(NULL) { ns8__voiceMsgUploadSpec::soap_default(NULL); }
	virtual ~ns8__voiceMsgUploadSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__uploadVoiceMailResponse
#define SOAP_TYPE_ns8__uploadVoiceMailResponse (853)
/* ns8:uploadVoiceMailResponse */
class SOAP_CMAC ns8__uploadVoiceMailResponse
{
public:
	class ns8__voiceMsgUploadInfo *upload;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns8:voiceMsgUploadInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 853; } /* = unique id SOAP_TYPE_ns8__uploadVoiceMailResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__uploadVoiceMailResponse(): upload(NULL), soap(NULL) { ns8__uploadVoiceMailResponse::soap_default(NULL); }
	virtual ~ns8__uploadVoiceMailResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMsgUploadInfo
#define SOAP_TYPE_ns8__voiceMsgUploadInfo (854)
/* ns8:voiceMsgUploadInfo */
class SOAP_CMAC ns8__voiceMsgUploadInfo
{
public:
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 854; } /* = unique id SOAP_TYPE_ns8__voiceMsgUploadInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMsgUploadInfo(): soap(NULL) { ns8__voiceMsgUploadInfo::soap_default(NULL); }
	virtual ~ns8__voiceMsgUploadInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMsgActionRequest
#define SOAP_TYPE_ns8__voiceMsgActionRequest (855)
/* ns8:voiceMsgActionRequest */
class SOAP_CMAC ns8__voiceMsgActionRequest
{
public:
	ns8__storePrincipalSpec *storeprincipal;	/* optional element of type ns8:storePrincipalSpec */
	class ns8__voiceMsgActionSpec *action;	/* required element of type ns8:voiceMsgActionSpec */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 855; } /* = unique id SOAP_TYPE_ns8__voiceMsgActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMsgActionRequest(): storeprincipal(NULL), action(NULL), soap(NULL) { ns8__voiceMsgActionRequest::soap_default(NULL); }
	virtual ~ns8__voiceMsgActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMsgActionSpec
#define SOAP_TYPE_ns8__voiceMsgActionSpec (856)
/* ns8:voiceMsgActionSpec */
class SOAP_CMAC ns8__voiceMsgActionSpec
{
public:
	std::string op;	/* required attribute */
	std::string phone;	/* required attribute */
	std::string *l;	/* optional attribute */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 856; } /* = unique id SOAP_TYPE_ns8__voiceMsgActionSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMsgActionSpec(): l(NULL), soap(NULL) { ns8__voiceMsgActionSpec::soap_default(NULL); }
	virtual ~ns8__voiceMsgActionSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMsgActionResponse
#define SOAP_TYPE_ns8__voiceMsgActionResponse (857)
/* ns8:voiceMsgActionResponse */
class SOAP_CMAC ns8__voiceMsgActionResponse
{
public:
	class ns8__voiceMsgActionInfo *action;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns8:voiceMsgActionInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 857; } /* = unique id SOAP_TYPE_ns8__voiceMsgActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMsgActionResponse(): action(NULL), soap(NULL) { ns8__voiceMsgActionResponse::soap_default(NULL); }
	virtual ~ns8__voiceMsgActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMsgActionInfo
#define SOAP_TYPE_ns8__voiceMsgActionInfo (858)
/* ns8:voiceMsgActionInfo */
class SOAP_CMAC ns8__voiceMsgActionInfo
{
public:
	std::string id;	/* required attribute */
	std::string op;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 858; } /* = unique id SOAP_TYPE_ns8__voiceMsgActionInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMsgActionInfo(): soap(NULL) { ns8__voiceMsgActionInfo::soap_default(NULL); }
	virtual ~ns8__voiceMsgActionInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns3__accountSelector
#define SOAP_TYPE_ns3__accountSelector (9)
/* Primitive ns3:accountSelector schema type: */
class SOAP_CMAC ns3__accountSelector
{
public:
	std::string __item;
	enum ns3__accountBy by;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns3__accountSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__accountSelector(): soap(NULL) { ns3__accountSelector::soap_default(NULL); }
	virtual ~ns3__accountSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns3__keyValuePair
#define SOAP_TYPE_ns3__keyValuePair (10)
/* Primitive ns3:keyValuePair schema type: */
class SOAP_CMAC ns3__keyValuePair
{
public:
	std::string __item;
	std::string n;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns3__keyValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__keyValuePair(): soap(NULL) { ns3__keyValuePair::soap_default(NULL); }
	virtual ~ns3__keyValuePair() { }
};
#endif

#ifndef SOAP_TYPE_ns3__distributionListSelector
#define SOAP_TYPE_ns3__distributionListSelector (12)
/* Primitive ns3:distributionListSelector schema type: */
class SOAP_CMAC ns3__distributionListSelector
{
public:
	std::string __item;
	enum ns3__distributionListBy by;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns3__distributionListSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__distributionListSelector(): soap(NULL) { ns3__distributionListSelector::soap_default(NULL); }
	virtual ~ns3__distributionListSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns3__namedValue
#define SOAP_TYPE_ns3__namedValue (13)
/* Primitive ns3:namedValue schema type: */
class SOAP_CMAC ns3__namedValue
{
public:
	std::string __item;
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns3__namedValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__namedValue(): soap(NULL) { ns3__namedValue::soap_default(NULL); }
	virtual ~ns3__namedValue() { }
};
#endif

#ifndef SOAP_TYPE_ns3__opValue
#define SOAP_TYPE_ns3__opValue (17)
/* Primitive ns3:opValue schema type: */
class SOAP_CMAC ns3__opValue
{
public:
	std::string __item;
	std::string *op;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns3__opValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__opValue(): op(NULL), soap(NULL) { ns3__opValue::soap_default(NULL); }
	virtual ~ns3__opValue() { }
};
#endif

#ifndef SOAP_TYPE_ns3__urlAndValue
#define SOAP_TYPE_ns3__urlAndValue (27)
/* Primitive ns3:urlAndValue schema type: */
class SOAP_CMAC ns3__urlAndValue
{
public:
	std::string __item;
	std::string *url;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns3__urlAndValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__urlAndValue(): url(NULL), soap(NULL) { ns3__urlAndValue::soap_default(NULL); }
	virtual ~ns3__urlAndValue() { }
};
#endif

#ifndef SOAP_TYPE_ns4__preAuth
#define SOAP_TYPE_ns4__preAuth (32)
/* Primitive ns4:preAuth schema type: */
class SOAP_CMAC ns4__preAuth
{
public:
	std::string __item;
	LONG64 timestamp;	/* required attribute */
	LONG64 *expiresTimestamp;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns4__preAuth */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__preAuth(): expiresTimestamp(NULL), soap(NULL) { ns4__preAuth::soap_default(NULL); }
	virtual ~ns4__preAuth() { }
};
#endif

#ifndef SOAP_TYPE_ns4__authToken
#define SOAP_TYPE_ns4__authToken (33)
/* Primitive ns4:authToken schema type: */
class SOAP_CMAC ns4__authToken
{
public:
	std::string __item;
	bool *verifyAccount;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns4__authToken */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__authToken(): verifyAccount(NULL), soap(NULL) { ns4__authToken::soap_default(NULL); }
	virtual ~ns4__authToken() { }
};
#endif

#ifndef SOAP_TYPE_ns4__pref
#define SOAP_TYPE_ns4__pref (34)
/* Primitive ns4:pref schema type: */
class SOAP_CMAC ns4__pref
{
public:
	std::string __item;
	std::string name;	/* required attribute */
	LONG64 *modified;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ns4__pref */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__pref(): modified(NULL), soap(NULL) { ns4__pref::soap_default(NULL); }
	virtual ~ns4__pref() { }
};
#endif

#ifndef SOAP_TYPE_ns4__attr
#define SOAP_TYPE_ns4__attr (35)
/* Primitive ns4:attr schema type: */
class SOAP_CMAC ns4__attr
{
public:
	std::string __item;
	std::string name;	/* required attribute */
	bool *pd;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ns4__attr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__attr(): pd(NULL), soap(NULL) { ns4__attr::soap_default(NULL); }
	virtual ~ns4__attr() { }
};
#endif

#ifndef SOAP_TYPE_ns4__session
#define SOAP_TYPE_ns4__session (37)
/* Primitive ns4:session schema type: */
class SOAP_CMAC ns4__session
{
public:
	std::string __item;
	std::string *type;	/* optional attribute */
	std::string id;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_ns4__session */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__session(): type(NULL), soap(NULL) { ns4__session::soap_default(NULL); }
	virtual ~ns4__session() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountCustomMetadata
#define SOAP_TYPE_ns4__accountCustomMetadata (41)
/* ns4:accountCustomMetadata */
class SOAP_CMAC ns4__accountCustomMetadata : public ns4__accountKeyValuePairs
{
public:
	std::string *section;	/* optional attribute */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ns4__accountCustomMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountCustomMetadata(): section(NULL) { ns4__accountCustomMetadata::soap_default(NULL); }
	virtual ~ns4__accountCustomMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns4__checkRightsRightInfo
#define SOAP_TYPE_ns4__checkRightsRightInfo (52)
/* Primitive ns4:checkRightsRightInfo schema type: */
class SOAP_CMAC ns4__checkRightsRightInfo
{
public:
	std::string __item;
	bool allow;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns4__checkRightsRightInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__checkRightsRightInfo(): soap(NULL) { ns4__checkRightsRightInfo::soap_default(NULL); }
	virtual ~ns4__checkRightsRightInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__createDistributionListRequest
#define SOAP_TYPE_ns4__createDistributionListRequest (53)
/* ns4:createDistributionListRequest */
class SOAP_CMAC ns4__createDistributionListRequest : public ns4__accountKeyValuePairs
{
public:
	std::string name;	/* required attribute */
	bool *dynamic;	/* optional attribute */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns4__createDistributionListRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__createDistributionListRequest(): dynamic(NULL) { ns4__createDistributionListRequest::soap_default(NULL); }
	virtual ~ns4__createDistributionListRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__dlInfo
#define SOAP_TYPE_ns4__dlInfo (55)
/* ns4:dlInfo */
class SOAP_CMAC ns4__dlInfo : public ns4__objectInfo
{
public:
	std::string ref;	/* required attribute */
	std::string *d;	/* optional attribute */
	bool *dynamic;	/* optional attribute */
	std::string *via;	/* optional attribute */
	bool *isOwner;	/* optional attribute */
	bool *isMember;	/* optional attribute */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ns4__dlInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__dlInfo(): d(NULL), dynamic(NULL), via(NULL), isOwner(NULL), isMember(NULL) { ns4__dlInfo::soap_default(NULL); }
	virtual ~ns4__dlInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__identity
#define SOAP_TYPE_ns4__identity (58)
/* ns4:identity */
class SOAP_CMAC ns4__identity : public ns4__attrsImpl
{
public:
	std::string *name;	/* optional attribute */
	std::string *id;	/* optional attribute */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns4__identity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__identity(): name(NULL), id(NULL) { ns4__identity::soap_default(NULL); }
	virtual ~ns4__identity() { }
};
#endif

#ifndef SOAP_TYPE_ns4__signatureContent
#define SOAP_TYPE_ns4__signatureContent (63)
/* Primitive ns4:signatureContent schema type: */
class SOAP_CMAC ns4__signatureContent
{
public:
	std::string __item;
	std::string *type;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ns4__signatureContent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__signatureContent(): type(NULL), soap(NULL) { ns4__signatureContent::soap_default(NULL); }
	virtual ~ns4__signatureContent() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListActionRequest
#define SOAP_TYPE_ns4__distributionListActionRequest (75)
/* ns4:distributionListActionRequest */
class SOAP_CMAC ns4__distributionListActionRequest : public ns4__attrsImpl
{
public:
	ns3__distributionListSelector *dl;	/* required element of type ns3:distributionListSelector */
	class ns4__distributionListAction *action;	/* required element of type ns4:distributionListAction */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ns4__distributionListActionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListActionRequest(): dl(NULL), action(NULL) { ns4__distributionListActionRequest::soap_default(NULL); }
	virtual ~ns4__distributionListActionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListAction
#define SOAP_TYPE_ns4__distributionListAction (76)
/* ns4:distributionListAction */
class SOAP_CMAC ns4__distributionListAction : public ns4__accountKeyValuePairs
{
public:
	std::vector<std::string >dlm;	/* optional element of type xsd:string */
	std::string *newName;	/* optional element of type xsd:string */
	std::vector<ns4__distributionListGranteeSelector * >owner;	/* optional element of type ns4:distributionListGranteeSelector */
	std::vector<ns4__distributionListRightSpec * >right;	/* optional element of type ns4:distributionListRightSpec */
	class ns4__distributionListSubscribeReq *subsReq;	/* optional element of type ns4:distributionListSubscribeReq */
	enum ns4__operation op;	/* required attribute */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_ns4__distributionListAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListAction(): newName(NULL), subsReq(NULL) { ns4__distributionListAction::soap_default(NULL); }
	virtual ~ns4__distributionListAction() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListGranteeSelector
#define SOAP_TYPE_ns4__distributionListGranteeSelector (77)
/* Primitive ns4:distributionListGranteeSelector schema type: */
class SOAP_CMAC ns4__distributionListGranteeSelector
{
public:
	std::string __item;
	enum ns3__granteeType type;	/* required attribute */
	enum ns3__distributionListGranteeBy by;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns4__distributionListGranteeSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListGranteeSelector(): soap(NULL) { ns4__distributionListGranteeSelector::soap_default(NULL); }
	virtual ~ns4__distributionListGranteeSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListSubscribeReq
#define SOAP_TYPE_ns4__distributionListSubscribeReq (79)
/* Primitive ns4:distributionListSubscribeReq schema type: */
class SOAP_CMAC ns4__distributionListSubscribeReq
{
public:
	std::string __item;
	enum ns4__distributionListSubscribeOp op;	/* required attribute */
	bool *bccOwners;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns4__distributionListSubscribeReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListSubscribeReq(): bccOwners(NULL), soap(NULL) { ns4__distributionListSubscribeReq::soap_default(NULL); }
	virtual ~ns4__distributionListSubscribeReq() { }
};
#endif

#ifndef SOAP_TYPE_ns4__getDistributionListRequest
#define SOAP_TYPE_ns4__getDistributionListRequest (98)
/* ns4:getDistributionListRequest */
class SOAP_CMAC ns4__getDistributionListRequest : public ns4__attrsImpl
{
public:
	ns3__distributionListSelector *dl;	/* required element of type ns3:distributionListSelector */
	bool *needOwners;	/* optional attribute */
	std::string *needRights;	/* optional attribute */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE_ns4__getDistributionListRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__getDistributionListRequest(): dl(NULL), needOwners(NULL), needRights(NULL) { ns4__getDistributionListRequest::soap_default(NULL); }
	virtual ~ns4__getDistributionListRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns4__distributionListInfo_owners
#define SOAP_TYPE__ns4__distributionListInfo_owners (1611)
/* ns4:distributionListInfo-owners */
class SOAP_CMAC _ns4__distributionListInfo_owners
{
public:
	std::vector<ns4__distributionListGranteeInfo * >owner;	/* optional element of type ns4:distributionListGranteeInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1611; } /* = unique id SOAP_TYPE__ns4__distributionListInfo_owners */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__distributionListInfo_owners(): unusedCodeGenHelper(NULL) { _ns4__distributionListInfo_owners::soap_default(NULL); }
	virtual ~_ns4__distributionListInfo_owners() { }
};
#endif

#ifndef SOAP_TYPE__ns4__distributionListInfo_rights
#define SOAP_TYPE__ns4__distributionListInfo_rights (1613)
/* ns4:distributionListInfo-rights */
class SOAP_CMAC _ns4__distributionListInfo_rights
{
public:
	std::vector<ns4__distributionListRightInfo * >right;	/* optional element of type ns4:distributionListRightInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1613; } /* = unique id SOAP_TYPE__ns4__distributionListInfo_rights */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__distributionListInfo_rights(): unusedCodeGenHelper(NULL) { _ns4__distributionListInfo_rights::soap_default(NULL); }
	virtual ~_ns4__distributionListInfo_rights() { }
};
#endif

#ifndef SOAP_TYPE_ns4__distributionListInfo
#define SOAP_TYPE_ns4__distributionListInfo (100)
/* ns4:distributionListInfo */
class SOAP_CMAC ns4__distributionListInfo : public ns4__objectInfo
{
public:
	std::vector<std::string >dlm;	/* optional element of type xsd:string */
	_ns4__distributionListInfo_owners *owners;	/* optional element of type ns4:distributionListInfo-owners */
	_ns4__distributionListInfo_rights *rights;	/* optional element of type ns4:distributionListInfo-rights */
	bool *isOwner;	/* optional attribute */
	bool *isMember;	/* optional attribute */
	bool *dynamic;	/* optional attribute */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE_ns4__distributionListInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__distributionListInfo(): owners(NULL), rights(NULL), isOwner(NULL), isMember(NULL), dynamic(NULL) { ns4__distributionListInfo::soap_default(NULL); }
	virtual ~ns4__distributionListInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountZimletProperty
#define SOAP_TYPE_ns4__accountZimletProperty (114)
/* Primitive ns4:accountZimletProperty schema type: */
class SOAP_CMAC ns4__accountZimletProperty
{
public:
	std::string __item;
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE_ns4__accountZimletProperty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountZimletProperty(): name(NULL), soap(NULL) { ns4__accountZimletProperty::soap_default(NULL); }
	virtual ~ns4__accountZimletProperty() { }
};
#endif

#ifndef SOAP_TYPE_ns4__prop
#define SOAP_TYPE_ns4__prop (116)
/* Primitive ns4:prop schema type: */
class SOAP_CMAC ns4__prop
{
public:
	std::string __item;
	std::string zimlet;	/* required attribute */
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE_ns4__prop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__prop(): soap(NULL) { ns4__prop::soap_default(NULL); }
	virtual ~ns4__prop() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountImapDataSource
#define SOAP_TYPE_ns4__accountImapDataSource (117)
/* ns4:accountImapDataSource */
class SOAP_CMAC ns4__accountImapDataSource : public ns4__accountDataSource
{
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE_ns4__accountImapDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountImapDataSource() { ns4__accountImapDataSource::soap_default(NULL); }
	virtual ~ns4__accountImapDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountPop3DataSource
#define SOAP_TYPE_ns4__accountPop3DataSource (119)
/* ns4:accountPop3DataSource */
class SOAP_CMAC ns4__accountPop3DataSource : public ns4__accountDataSource
{
public:
	bool *leaveOnServer;	/* optional attribute */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE_ns4__accountPop3DataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountPop3DataSource(): leaveOnServer(NULL) { ns4__accountPop3DataSource::soap_default(NULL); }
	virtual ~ns4__accountPop3DataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountCaldavDataSource
#define SOAP_TYPE_ns4__accountCaldavDataSource (120)
/* ns4:accountCaldavDataSource */
class SOAP_CMAC ns4__accountCaldavDataSource : public ns4__accountDataSource
{
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_ns4__accountCaldavDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountCaldavDataSource() { ns4__accountCaldavDataSource::soap_default(NULL); }
	virtual ~ns4__accountCaldavDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountYabDataSource
#define SOAP_TYPE_ns4__accountYabDataSource (121)
/* ns4:accountYabDataSource */
class SOAP_CMAC ns4__accountYabDataSource : public ns4__accountDataSource
{
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_ns4__accountYabDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountYabDataSource() { ns4__accountYabDataSource::soap_default(NULL); }
	virtual ~ns4__accountYabDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountRssDataSource
#define SOAP_TYPE_ns4__accountRssDataSource (122)
/* ns4:accountRssDataSource */
class SOAP_CMAC ns4__accountRssDataSource : public ns4__accountDataSource
{
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE_ns4__accountRssDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountRssDataSource() { ns4__accountRssDataSource::soap_default(NULL); }
	virtual ~ns4__accountRssDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountGalDataSource
#define SOAP_TYPE_ns4__accountGalDataSource (123)
/* ns4:accountGalDataSource */
class SOAP_CMAC ns4__accountGalDataSource : public ns4__accountDataSource
{
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE_ns4__accountGalDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountGalDataSource() { ns4__accountGalDataSource::soap_default(NULL); }
	virtual ~ns4__accountGalDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountCalDataSource
#define SOAP_TYPE_ns4__accountCalDataSource (124)
/* ns4:accountCalDataSource */
class SOAP_CMAC ns4__accountCalDataSource : public ns4__accountDataSource
{
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE_ns4__accountCalDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountCalDataSource() { ns4__accountCalDataSource::soap_default(NULL); }
	virtual ~ns4__accountCalDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountUnknownDataSource
#define SOAP_TYPE_ns4__accountUnknownDataSource (125)
/* ns4:accountUnknownDataSource */
class SOAP_CMAC ns4__accountUnknownDataSource : public ns4__accountDataSource
{
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE_ns4__accountUnknownDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountUnknownDataSource() { ns4__accountUnknownDataSource::soap_default(NULL); }
	virtual ~ns4__accountUnknownDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns4__licenseAttr
#define SOAP_TYPE_ns4__licenseAttr (128)
/* Primitive ns4:licenseAttr schema type: */
class SOAP_CMAC ns4__licenseAttr
{
public:
	std::string __item;
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE_ns4__licenseAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__licenseAttr(): soap(NULL) { ns4__licenseAttr::soap_default(NULL); }
	virtual ~ns4__licenseAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns4__smimePublicCertsStoreSpec
#define SOAP_TYPE_ns4__smimePublicCertsStoreSpec (136)
/* Primitive ns4:smimePublicCertsStoreSpec schema type: */
class SOAP_CMAC ns4__smimePublicCertsStoreSpec
{
public:
	std::string __item;
	enum ns3__storeLookupOpt *storeLookupOpt;	/* optional attribute */
	enum ns3__sourceLookupOpt *sourceLookupOpt;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE_ns4__smimePublicCertsStoreSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__smimePublicCertsStoreSpec(): storeLookupOpt(NULL), sourceLookupOpt(NULL), soap(NULL) { ns4__smimePublicCertsStoreSpec::soap_default(NULL); }
	virtual ~ns4__smimePublicCertsStoreSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns4__smimePublicCertInfo
#define SOAP_TYPE_ns4__smimePublicCertInfo (139)
/* Primitive ns4:smimePublicCertInfo schema type: */
class SOAP_CMAC ns4__smimePublicCertInfo
{
public:
	std::string __item;
	enum ns3__smimeStoreType store;	/* required attribute */
	std::string field;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE_ns4__smimePublicCertInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__smimePublicCertInfo(): soap(NULL) { ns4__smimePublicCertInfo::soap_default(NULL); }
	virtual ~ns4__smimePublicCertInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__searchCalendarResourcesRequest
#define SOAP_TYPE_ns4__searchCalendarResourcesRequest (166)
/* ns4:searchCalendarResourcesRequest */
class SOAP_CMAC ns4__searchCalendarResourcesRequest : public ns3__attributeSelectorImpl
{
public:
	std::string *locale;	/* optional element of type xsd:string */
	ns3__cursorInfo *cursor;	/* optional element of type ns3:cursorInfo */
	std::string *name;	/* optional element of type xsd:string */
	ns4__entrySearchFilterInfo *searchFilter;	/* optional element of type ns4:entrySearchFilterInfo */
	bool *quick;	/* optional attribute */
	std::string *sortBy;	/* optional attribute */
	int *limit;	/* optional attribute */
	int *offset;	/* optional attribute */
	std::string *galAcctId;	/* optional attribute */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE_ns4__searchCalendarResourcesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__searchCalendarResourcesRequest(): locale(NULL), cursor(NULL), name(NULL), searchFilter(NULL), quick(NULL), sortBy(NULL), limit(NULL), offset(NULL), galAcctId(NULL) { ns4__searchCalendarResourcesRequest::soap_default(NULL); }
	virtual ~ns4__searchCalendarResourcesRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns4__calendarResourceInfo
#define SOAP_TYPE_ns4__calendarResourceInfo (171)
/* ns4:calendarResourceInfo */
class SOAP_CMAC ns4__calendarResourceInfo : public ns4__accountKeyValuePairs
{
public:
	std::string name;	/* required attribute */
	std::string id;	/* required attribute */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE_ns4__calendarResourceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__calendarResourceInfo() { ns4__calendarResourceInfo::soap_default(NULL); }
	virtual ~ns4__calendarResourceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns4__accountContactsDataSource
#define SOAP_TYPE_ns4__accountContactsDataSource (178)
/* ns4:accountContactsDataSource */
class SOAP_CMAC ns4__accountContactsDataSource : public ns4__accountDataSource
{
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE_ns4__accountContactsDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__accountContactsDataSource() { ns4__accountContactsDataSource::soap_default(NULL); }
	virtual ~ns4__accountContactsDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addAppointmentInviteRequest
#define SOAP_TYPE_ns5__addAppointmentInviteRequest (184)
/* ns5:addAppointmentInviteRequest */
class SOAP_CMAC ns5__addAppointmentInviteRequest : public ns5__setCalendarItemInfo
{
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE_ns5__addAppointmentInviteRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addAppointmentInviteRequest() { ns5__addAppointmentInviteRequest::soap_default(NULL); }
	virtual ~ns5__addAppointmentInviteRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__header
#define SOAP_TYPE_ns5__header (187)
/* Primitive ns5:header schema type: */
class SOAP_CMAC ns5__header
{
public:
	std::string __item;
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE_ns5__header */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__header(): name(NULL), soap(NULL) { ns5__header::soap_default(NULL); }
	virtual ~ns5__header() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mimePartAttachSpec
#define SOAP_TYPE_ns5__mimePartAttachSpec (190)
/* ns5:mimePartAttachSpec */
class SOAP_CMAC ns5__mimePartAttachSpec : public ns5__attachSpec
{
public:
	std::string mid;	/* required attribute */
	std::string part;	/* required attribute */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE_ns5__mimePartAttachSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mimePartAttachSpec() { ns5__mimePartAttachSpec::soap_default(NULL); }
	virtual ~ns5__mimePartAttachSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__msgAttachSpec
#define SOAP_TYPE_ns5__msgAttachSpec (192)
/* ns5:msgAttachSpec */
class SOAP_CMAC ns5__msgAttachSpec : public ns5__attachSpec
{
public:
	std::string id;	/* required attribute */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE_ns5__msgAttachSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__msgAttachSpec() { ns5__msgAttachSpec::soap_default(NULL); }
	virtual ~ns5__msgAttachSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contactAttachSpec
#define SOAP_TYPE_ns5__contactAttachSpec (193)
/* ns5:contactAttachSpec */
class SOAP_CMAC ns5__contactAttachSpec : public ns5__attachSpec
{
public:
	std::string id;	/* required attribute */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE_ns5__contactAttachSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contactAttachSpec() { ns5__contactAttachSpec::soap_default(NULL); }
	virtual ~ns5__contactAttachSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__docAttachSpec
#define SOAP_TYPE_ns5__docAttachSpec (194)
/* ns5:docAttachSpec */
class SOAP_CMAC ns5__docAttachSpec : public ns5__attachSpec
{
public:
	std::string *path;	/* optional attribute */
	std::string *id;	/* optional attribute */
	int *ver;	/* optional attribute */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE_ns5__docAttachSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__docAttachSpec(): path(NULL), id(NULL), ver(NULL) { ns5__docAttachSpec::soap_default(NULL); }
	virtual ~ns5__docAttachSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__inviteComponent
#define SOAP_TYPE_ns5__inviteComponent (196)
/* ns5:inviteComponent */
class SOAP_CMAC ns5__inviteComponent : public ns5__inviteComponentCommon
{
public:
	std::vector<std::string >category;	/* optional element of type xsd:string */
	std::vector<std::string >comment;	/* optional element of type xsd:string */
	std::vector<std::string >contact;	/* optional element of type xsd:string */
	ns5__geoInfo *geo;	/* optional element of type ns5:geoInfo */
	std::vector<ns5__calendarAttendee * >at;	/* optional element of type ns5:calendarAttendee */
	std::vector<ns5__alarmInfo * >alarm;	/* optional element of type ns5:alarmInfo */
	std::vector<ns5__xProp * >xprop;	/* optional element of type ns5:xProp */
	std::string *fr;	/* optional element of type xsd:string */
	std::string *desc;	/* optional element of type xsd:string */
	std::string *descHtml;	/* optional element of type xsd:string */
	ns5__calOrganizer *or_;	/* optional element of type ns5:calOrganizer */
	ns5__recurrenceInfo *recur;	/* optional element of type ns5:recurrenceInfo */
	ns5__exceptionRecurIdInfo *exceptId;	/* optional element of type ns5:exceptionRecurIdInfo */
	ns5__dtTimeInfo *s;	/* optional element of type ns5:dtTimeInfo */
	ns5__dtTimeInfo *e;	/* optional element of type ns5:dtTimeInfo */
	ns5__durationInfo *dur;	/* optional element of type ns5:durationInfo */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE_ns5__inviteComponent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__inviteComponent(): geo(NULL), fr(NULL), desc(NULL), descHtml(NULL), or_(NULL), recur(NULL), exceptId(NULL), s(NULL), e(NULL), dur(NULL) { ns5__inviteComponent::soap_default(NULL); }
	virtual ~ns5__inviteComponent() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rawInvite
#define SOAP_TYPE_ns5__rawInvite (198)
/* Primitive ns5:rawInvite schema type: */
class SOAP_CMAC ns5__rawInvite
{
public:
	std::string __item;
	std::string *uid;	/* optional attribute */
	std::string *summary;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE_ns5__rawInvite */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rawInvite(): uid(NULL), summary(NULL), soap(NULL) { ns5__rawInvite::soap_default(NULL); }
	virtual ~ns5__rawInvite() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calendarAttach
#define SOAP_TYPE_ns5__calendarAttach (206)
/* Primitive ns5:calendarAttach schema type: */
class SOAP_CMAC ns5__calendarAttach
{
public:
	std::string __item;
	std::string *uri;	/* optional attribute */
	std::string *ct;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE_ns5__calendarAttach */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calendarAttach(): uri(NULL), ct(NULL), soap(NULL) { ns5__calendarAttach::soap_default(NULL); }
	virtual ~ns5__calendarAttach() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addRecurrenceInfo
#define SOAP_TYPE_ns5__addRecurrenceInfo (210)
/* ns5:addRecurrenceInfo */
class SOAP_CMAC ns5__addRecurrenceInfo : public ns5__recurrenceInfo
{
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE_ns5__addRecurrenceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addRecurrenceInfo() { ns5__addRecurrenceInfo::soap_default(NULL); }
	virtual ~ns5__addRecurrenceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__excludeRecurrenceInfo
#define SOAP_TYPE_ns5__excludeRecurrenceInfo (211)
/* ns5:excludeRecurrenceInfo */
class SOAP_CMAC ns5__excludeRecurrenceInfo : public ns5__recurrenceInfo
{
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE_ns5__excludeRecurrenceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__excludeRecurrenceInfo() { ns5__excludeRecurrenceInfo::soap_default(NULL); }
	virtual ~ns5__excludeRecurrenceInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__exceptionRuleInfo
#define SOAP_TYPE_ns5__exceptionRuleInfo (212)
/* ns5:exceptionRuleInfo */
class SOAP_CMAC ns5__exceptionRuleInfo : public ns5__recurIdInfo
{
public:
	ns5__recurrenceInfo *add;	/* optional element of type ns5:recurrenceInfo */
	ns5__recurrenceInfo *exclude;	/* optional element of type ns5:recurrenceInfo */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE_ns5__exceptionRuleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__exceptionRuleInfo(): add(NULL), exclude(NULL) { ns5__exceptionRuleInfo::soap_default(NULL); }
	virtual ~ns5__exceptionRuleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__cancelRuleInfo
#define SOAP_TYPE_ns5__cancelRuleInfo (214)
/* ns5:cancelRuleInfo */
class SOAP_CMAC ns5__cancelRuleInfo : public ns5__recurIdInfo
{
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_ns5__cancelRuleInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__cancelRuleInfo() { ns5__cancelRuleInfo::soap_default(NULL); }
	virtual ~ns5__cancelRuleInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__messageSummary
#define SOAP_TYPE_ns5__messageSummary (245)
/* ns5:messageSummary */
class SOAP_CMAC ns5__messageSummary : public ns5__messageCommon
{
public:
	std::vector<ns5__emailInfo * >e;	/* optional element of type ns5:emailInfo */
	std::string *su;	/* optional element of type xsd:string */
	std::string *fr;	/* optional element of type xsd:string */
	ns5__inviteInfo *inv;	/* optional element of type ns5:inviteInfo */
	std::string id;	/* required attribute */
	LONG64 *autoSendTime;	/* optional attribute */
public:
	virtual int soap_type() const { return 245; } /* = unique id SOAP_TYPE_ns5__messageSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__messageSummary(): su(NULL), fr(NULL), inv(NULL), autoSendTime(NULL) { ns5__messageSummary::soap_default(NULL); }
	virtual ~ns5__messageSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calendarReply
#define SOAP_TYPE_ns5__calendarReply (249)
/* ns5:calendarReply */
class SOAP_CMAC ns5__calendarReply : public ns5__recurIdInfo
{
public:
	int seq;	/* required attribute */
	LONG64 d;	/* required attribute */
	std::string at;	/* required attribute */
	std::string *sentBy;	/* optional attribute */
	std::string *ptst;	/* optional attribute */
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE_ns5__calendarReply */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calendarReply(): sentBy(NULL), ptst(NULL) { ns5__calendarReply::soap_default(NULL); }
	virtual ~ns5__calendarReply() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailCustomMetadata
#define SOAP_TYPE_ns5__mailCustomMetadata (250)
/* ns5:mailCustomMetadata */
class SOAP_CMAC ns5__mailCustomMetadata : public ns5__mailKeyValuePairs
{
public:
	std::string *section;	/* optional attribute */
public:
	virtual int soap_type() const { return 250; } /* = unique id SOAP_TYPE_ns5__mailCustomMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailCustomMetadata(): section(NULL) { ns5__mailCustomMetadata::soap_default(NULL); }
	virtual ~ns5__mailCustomMetadata() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addTaskInviteRequest
#define SOAP_TYPE_ns5__addTaskInviteRequest (252)
/* ns5:addTaskInviteRequest */
class SOAP_CMAC ns5__addTaskInviteRequest : public ns5__setCalendarItemInfo
{
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE_ns5__addTaskInviteRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addTaskInviteRequest() { ns5__addTaskInviteRequest::soap_default(NULL); }
	virtual ~ns5__addTaskInviteRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addTaskInviteResponse
#define SOAP_TYPE_ns5__addTaskInviteResponse (253)
/* ns5:addTaskInviteResponse */
class SOAP_CMAC ns5__addTaskInviteResponse : public ns5__addAppointmentInviteResponse
{
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE_ns5__addTaskInviteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addTaskInviteResponse() { ns5__addTaskInviteResponse::soap_default(NULL); }
	virtual ~ns5__addTaskInviteResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__browseData
#define SOAP_TYPE_ns5__browseData (269)
/* Primitive ns5:browseData schema type: */
class SOAP_CMAC ns5__browseData
{
public:
	std::string __item;
	std::string *h;	/* optional attribute */
	int freq;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE_ns5__browseData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__browseData(): h(NULL), soap(NULL) { ns5__browseData::soap_default(NULL); }
	virtual ~ns5__browseData() { }
};
#endif

#ifndef SOAP_TYPE_ns5__cancelTaskRequest
#define SOAP_TYPE_ns5__cancelTaskRequest (273)
/* ns5:cancelTaskRequest */
class SOAP_CMAC ns5__cancelTaskRequest : public ns5__cancelAppointmentRequest
{
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE_ns5__cancelTaskRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__cancelTaskRequest() { ns5__cancelTaskRequest::soap_default(NULL); }
	virtual ~ns5__cancelTaskRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__cancelTaskResponse
#define SOAP_TYPE_ns5__cancelTaskResponse (274)
/* ns5:cancelTaskResponse */
class SOAP_CMAC ns5__cancelTaskResponse : public ns5__cancelAppointmentResponse
{
public:
	virtual int soap_type() const { return 274; } /* = unique id SOAP_TYPE_ns5__cancelTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__cancelTaskResponse() { ns5__cancelTaskResponse::soap_default(NULL); }
	virtual ~ns5__cancelTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__targetSpec
#define SOAP_TYPE_ns5__targetSpec (278)
/* Primitive ns5:targetSpec schema type: */
class SOAP_CMAC ns5__targetSpec
{
public:
	std::string __item;
	enum ns3__targetType type;	/* required attribute */
	enum ns3__accountBy by;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE_ns5__targetSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__targetSpec(): soap(NULL) { ns5__targetSpec::soap_default(NULL); }
	virtual ~ns5__targetSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rightPermission
#define SOAP_TYPE_ns5__rightPermission (280)
/* Primitive ns5:rightPermission schema type: */
class SOAP_CMAC ns5__rightPermission
{
public:
	std::string __item;
	bool allow;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE_ns5__rightPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rightPermission(): soap(NULL) { ns5__rightPermission::soap_default(NULL); }
	virtual ~ns5__rightPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns5__expandedRecurrenceCancel
#define SOAP_TYPE_ns5__expandedRecurrenceCancel (282)
/* ns5:expandedRecurrenceCancel */
class SOAP_CMAC ns5__expandedRecurrenceCancel : public ns5__expandedRecurrenceComponent
{
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE_ns5__expandedRecurrenceCancel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__expandedRecurrenceCancel() { ns5__expandedRecurrenceCancel::soap_default(NULL); }
	virtual ~ns5__expandedRecurrenceCancel() { }
};
#endif

#ifndef SOAP_TYPE_ns5__expandedRecurrenceInvite
#define SOAP_TYPE_ns5__expandedRecurrenceInvite (284)
/* ns5:expandedRecurrenceInvite */
class SOAP_CMAC ns5__expandedRecurrenceInvite : public ns5__expandedRecurrenceComponent
{
public:
	virtual int soap_type() const { return 284; } /* = unique id SOAP_TYPE_ns5__expandedRecurrenceInvite */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__expandedRecurrenceInvite() { ns5__expandedRecurrenceInvite::soap_default(NULL); }
	virtual ~ns5__expandedRecurrenceInvite() { }
};
#endif

#ifndef SOAP_TYPE_ns5__expandedRecurrenceException
#define SOAP_TYPE_ns5__expandedRecurrenceException (285)
/* ns5:expandedRecurrenceException */
class SOAP_CMAC ns5__expandedRecurrenceException : public ns5__expandedRecurrenceComponent
{
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE_ns5__expandedRecurrenceException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__expandedRecurrenceException() { ns5__expandedRecurrenceException::soap_default(NULL); }
	virtual ~ns5__expandedRecurrenceException() { }
};
#endif

#ifndef SOAP_TYPE_ns5__conflictRecurrenceInstance
#define SOAP_TYPE_ns5__conflictRecurrenceInstance (288)
/* ns5:conflictRecurrenceInstance */
class SOAP_CMAC ns5__conflictRecurrenceInstance : public ns5__expandedRecurrenceInstance
{
public:
	std::vector<ns5__freeBusyUserStatus * >usr;	/* optional element of type ns5:freeBusyUserStatus */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE_ns5__conflictRecurrenceInstance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__conflictRecurrenceInstance(): unusedCodeGenHelper(NULL) { ns5__conflictRecurrenceInstance::soap_default(NULL); }
	virtual ~ns5__conflictRecurrenceInstance() { }
};
#endif

#ifndef SOAP_TYPE_ns5__checkSpellingRequest
#define SOAP_TYPE_ns5__checkSpellingRequest (291)
/* Primitive ns5:checkSpellingRequest schema type: */
class SOAP_CMAC ns5__checkSpellingRequest
{
public:
	std::string __item;
	std::string *dictionary;	/* optional attribute */
	std::string *ignore;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE_ns5__checkSpellingRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__checkSpellingRequest(): dictionary(NULL), ignore(NULL), soap(NULL) { ns5__checkSpellingRequest::soap_default(NULL); }
	virtual ~ns5__checkSpellingRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contactActionSelector
#define SOAP_TYPE_ns5__contactActionSelector (297)
/* ns5:contactActionSelector */
class SOAP_CMAC ns5__contactActionSelector : public ns5__actionSelector
{
public:
	std::vector<ns5__newContactAttr * >a;	/* optional element of type ns5:newContactAttr */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE_ns5__contactActionSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contactActionSelector(): unusedCodeGenHelper(NULL) { ns5__contactActionSelector::soap_default(NULL); }
	virtual ~ns5__contactActionSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns5__newContactAttr
#define SOAP_TYPE_ns5__newContactAttr (299)
/* Primitive ns5:newContactAttr schema type: */
class SOAP_CMAC ns5__newContactAttr
{
public:
	std::string __item;
	std::string n;	/* required attribute */
	std::string *aid;	/* optional attribute */
	int *id;	/* optional attribute */
	std::string *part;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 299; } /* = unique id SOAP_TYPE_ns5__newContactAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__newContactAttr(): aid(NULL), id(NULL), part(NULL), soap(NULL) { ns5__newContactAttr::soap_default(NULL); }
	virtual ~ns5__newContactAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns5__noteActionSelector
#define SOAP_TYPE_ns5__noteActionSelector (300)
/* ns5:noteActionSelector */
class SOAP_CMAC ns5__noteActionSelector : public ns5__actionSelector
{
public:
	std::string *content;	/* optional attribute */
	std::string *pos;	/* optional attribute */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE_ns5__noteActionSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__noteActionSelector(): content(NULL), pos(NULL) { ns5__noteActionSelector::soap_default(NULL); }
	virtual ~ns5__noteActionSelector() { }
};
#endif

#ifndef SOAP_TYPE__ns5__folderActionSelector_acl
#define SOAP_TYPE__ns5__folderActionSelector_acl (1625)
/* ns5:folderActionSelector-acl */
class SOAP_CMAC _ns5__folderActionSelector_acl
{
public:
	std::vector<ns5__actionGrantSelector * >grant;	/* optional element of type ns5:actionGrantSelector */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1625; } /* = unique id SOAP_TYPE__ns5__folderActionSelector_acl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__folderActionSelector_acl(): unusedCodeGenHelper(NULL) { _ns5__folderActionSelector_acl::soap_default(NULL); }
	virtual ~_ns5__folderActionSelector_acl() { }
};
#endif

#ifndef SOAP_TYPE_ns5__folderActionSelector
#define SOAP_TYPE_ns5__folderActionSelector (301)
/* ns5:folderActionSelector */
class SOAP_CMAC ns5__folderActionSelector : public ns5__actionSelector
{
public:
	ns5__actionGrantSelector *grant;	/* optional element of type ns5:actionGrantSelector */
	_ns5__folderActionSelector_acl *acl;	/* optional element of type ns5:folderActionSelector-acl */
	ns5__retentionPolicy *retentionPolicy;	/* optional element of type ns5:retentionPolicy */
	bool *recursive;	/* optional attribute */
	std::string *url;	/* optional attribute */
	bool *excludeFreeBusy;	/* optional attribute */
	std::string *zid;	/* optional attribute */
	std::string *gt;	/* optional attribute */
	std::string *view;	/* optional attribute */
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE_ns5__folderActionSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__folderActionSelector(): grant(NULL), acl(NULL), retentionPolicy(NULL), recursive(NULL), url(NULL), excludeFreeBusy(NULL), zid(NULL), gt(NULL), view(NULL) { ns5__folderActionSelector::soap_default(NULL); }
	virtual ~ns5__folderActionSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns5__folderActionResult
#define SOAP_TYPE_ns5__folderActionResult (304)
/* ns5:folderActionResult */
class SOAP_CMAC ns5__folderActionResult : public ns5__idAndOperation
{
public:
	std::string *zid;	/* optional attribute */
	std::string *d;	/* optional attribute */
	std::string *key;	/* optional attribute */
public:
	virtual int soap_type() const { return 304; } /* = unique id SOAP_TYPE_ns5__folderActionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__folderActionResult(): zid(NULL), d(NULL), key(NULL) { ns5__folderActionResult::soap_default(NULL); }
	virtual ~ns5__folderActionResult() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createAppointmentExceptionRequest
#define SOAP_TYPE_ns5__createAppointmentExceptionRequest (310)
/* ns5:createAppointmentExceptionRequest */
class SOAP_CMAC ns5__createAppointmentExceptionRequest : public ns5__calItemRequestBase
{
public:
	std::string *id;	/* optional attribute */
	int *comp;	/* optional attribute */
	int *ms;	/* optional attribute */
	int *rev;	/* optional attribute */
public:
	virtual int soap_type() const { return 310; } /* = unique id SOAP_TYPE_ns5__createAppointmentExceptionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createAppointmentExceptionRequest(): id(NULL), comp(NULL), ms(NULL), rev(NULL) { ns5__createAppointmentExceptionRequest::soap_default(NULL); }
	virtual ~ns5__createAppointmentExceptionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createAppointmentExceptionResponse
#define SOAP_TYPE_ns5__createAppointmentExceptionResponse (312)
/* ns5:createAppointmentExceptionResponse */
class SOAP_CMAC ns5__createAppointmentExceptionResponse : public ns5__createCalendarItemResponse
{
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_ns5__createAppointmentExceptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createAppointmentExceptionResponse() { ns5__createAppointmentExceptionResponse::soap_default(NULL); }
	virtual ~ns5__createAppointmentExceptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_inviteAsMP
#define SOAP_TYPE__ns5__union_inviteAsMP (1629)
/* xsd:choice */
union _ns5__union_inviteAsMP
{
#define SOAP_UNION__ns5__union_inviteAsMP_mp	(1)
	ns5__partInfo *mp;
#define SOAP_UNION__ns5__union_inviteAsMP_shr	(2)
	ns5__shareNotification *shr;
#define SOAP_UNION__ns5__union_inviteAsMP_dlSubs	(3)
	ns5__dlSubscriptionNotification *dlSubs;
};
#endif

#ifndef SOAP_TYPE___ns5__union_inviteAsMP
#define SOAP_TYPE___ns5__union_inviteAsMP (1628)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_inviteAsMP
{
public:
	int __union_inviteAsMP;	/* union discriminant (of union defined below) */
	union _ns5__union_inviteAsMP union_inviteAsMP;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1628; } /* = unique id SOAP_TYPE___ns5__union_inviteAsMP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_inviteAsMP() { __ns5__union_inviteAsMP::soap_default(NULL); }
	virtual ~__ns5__union_inviteAsMP() { }
};
#endif

#ifndef SOAP_TYPE_ns5__inviteAsMP
#define SOAP_TYPE_ns5__inviteAsMP (315)
/* ns5:inviteAsMP */
class SOAP_CMAC ns5__inviteAsMP : public ns5__messageCommon
{
public:
	std::vector<ns5__emailInfo * >e;	/* optional element of type ns5:emailInfo */
	std::string *su;	/* optional element of type xsd:string */
	std::string *mid;	/* optional element of type xsd:string */
	ns5__mpInviteInfo *inv;	/* optional element of type ns5:mpInviteInfo */
	std::vector<ns3__keyValuePair * >header;	/* optional element of type ns3:keyValuePair */
	int __size_inviteAsMP;	/* sequence of elements <-union-inviteAsMP> */
	__ns5__union_inviteAsMP *__union_inviteAsMP;
	std::string *id;	/* optional attribute */
	std::string *part;	/* optional attribute */
	LONG64 *sd;	/* optional attribute */
public:
	virtual int soap_type() const { return 315; } /* = unique id SOAP_TYPE_ns5__inviteAsMP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__inviteAsMP(): su(NULL), mid(NULL), inv(NULL), __union_inviteAsMP(NULL), id(NULL), part(NULL), sd(NULL) { ns5__inviteAsMP::soap_default(NULL); }
	virtual ~ns5__inviteAsMP() { }
};
#endif

#ifndef SOAP_TYPE_ns5__shareNotification
#define SOAP_TYPE_ns5__shareNotification (318)
/* ns5:shareNotification */
class SOAP_CMAC ns5__shareNotification : public ns5__notification
{
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE_ns5__shareNotification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__shareNotification() { ns5__shareNotification::soap_default(NULL); }
	virtual ~ns5__shareNotification() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dlSubscriptionNotification
#define SOAP_TYPE_ns5__dlSubscriptionNotification (320)
/* ns5:dlSubscriptionNotification */
class SOAP_CMAC ns5__dlSubscriptionNotification : public ns5__notification
{
public:
	virtual int soap_type() const { return 320; } /* = unique id SOAP_TYPE_ns5__dlSubscriptionNotification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dlSubscriptionNotification() { ns5__dlSubscriptionNotification::soap_default(NULL); }
	virtual ~ns5__dlSubscriptionNotification() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createAppointmentRequest
#define SOAP_TYPE_ns5__createAppointmentRequest (321)
/* ns5:createAppointmentRequest */
class SOAP_CMAC ns5__createAppointmentRequest : public ns5__calItemRequestBase
{
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE_ns5__createAppointmentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createAppointmentRequest() { ns5__createAppointmentRequest::soap_default(NULL); }
	virtual ~ns5__createAppointmentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createAppointmentResponse
#define SOAP_TYPE_ns5__createAppointmentResponse (322)
/* ns5:createAppointmentResponse */
class SOAP_CMAC ns5__createAppointmentResponse : public ns5__createCalendarItemResponse
{
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE_ns5__createAppointmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createAppointmentResponse() { ns5__createAppointmentResponse::soap_default(NULL); }
	virtual ~ns5__createAppointmentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__vCardInfo
#define SOAP_TYPE_ns5__vCardInfo (325)
/* Primitive ns5:vCardInfo schema type: */
class SOAP_CMAC ns5__vCardInfo
{
public:
	std::string __item;
	std::string *mid;	/* optional attribute */
	std::string *part;	/* optional attribute */
	std::string *aid;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 325; } /* = unique id SOAP_TYPE_ns5__vCardInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__vCardInfo(): mid(NULL), part(NULL), aid(NULL), soap(NULL) { ns5__vCardInfo::soap_default(NULL); }
	virtual ~ns5__vCardInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailImapDataSource
#define SOAP_TYPE_ns5__mailImapDataSource (331)
/* ns5:mailImapDataSource */
class SOAP_CMAC ns5__mailImapDataSource : public ns5__mailDataSource
{
public:
	virtual int soap_type() const { return 331; } /* = unique id SOAP_TYPE_ns5__mailImapDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailImapDataSource() { ns5__mailImapDataSource::soap_default(NULL); }
	virtual ~ns5__mailImapDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailPop3DataSource
#define SOAP_TYPE_ns5__mailPop3DataSource (333)
/* ns5:mailPop3DataSource */
class SOAP_CMAC ns5__mailPop3DataSource : public ns5__mailDataSource
{
public:
	bool *leaveOnServer;	/* optional attribute */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE_ns5__mailPop3DataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailPop3DataSource(): leaveOnServer(NULL) { ns5__mailPop3DataSource::soap_default(NULL); }
	virtual ~ns5__mailPop3DataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailCaldavDataSource
#define SOAP_TYPE_ns5__mailCaldavDataSource (334)
/* ns5:mailCaldavDataSource */
class SOAP_CMAC ns5__mailCaldavDataSource : public ns5__mailDataSource
{
public:
	virtual int soap_type() const { return 334; } /* = unique id SOAP_TYPE_ns5__mailCaldavDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailCaldavDataSource() { ns5__mailCaldavDataSource::soap_default(NULL); }
	virtual ~ns5__mailCaldavDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailYabDataSource
#define SOAP_TYPE_ns5__mailYabDataSource (335)
/* ns5:mailYabDataSource */
class SOAP_CMAC ns5__mailYabDataSource : public ns5__mailDataSource
{
public:
	virtual int soap_type() const { return 335; } /* = unique id SOAP_TYPE_ns5__mailYabDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailYabDataSource() { ns5__mailYabDataSource::soap_default(NULL); }
	virtual ~ns5__mailYabDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailRssDataSource
#define SOAP_TYPE_ns5__mailRssDataSource (336)
/* ns5:mailRssDataSource */
class SOAP_CMAC ns5__mailRssDataSource : public ns5__mailDataSource
{
public:
	virtual int soap_type() const { return 336; } /* = unique id SOAP_TYPE_ns5__mailRssDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailRssDataSource() { ns5__mailRssDataSource::soap_default(NULL); }
	virtual ~ns5__mailRssDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailGalDataSource
#define SOAP_TYPE_ns5__mailGalDataSource (337)
/* ns5:mailGalDataSource */
class SOAP_CMAC ns5__mailGalDataSource : public ns5__mailDataSource
{
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE_ns5__mailGalDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailGalDataSource() { ns5__mailGalDataSource::soap_default(NULL); }
	virtual ~ns5__mailGalDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailCalDataSource
#define SOAP_TYPE_ns5__mailCalDataSource (338)
/* ns5:mailCalDataSource */
class SOAP_CMAC ns5__mailCalDataSource : public ns5__mailDataSource
{
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE_ns5__mailCalDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailCalDataSource() { ns5__mailCalDataSource::soap_default(NULL); }
	virtual ~ns5__mailCalDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mailUnknownDataSource
#define SOAP_TYPE_ns5__mailUnknownDataSource (339)
/* ns5:mailUnknownDataSource */
class SOAP_CMAC ns5__mailUnknownDataSource : public ns5__mailDataSource
{
public:
	virtual int soap_type() const { return 339; } /* = unique id SOAP_TYPE_ns5__mailUnknownDataSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mailUnknownDataSource() { ns5__mailUnknownDataSource::soap_default(NULL); }
	virtual ~ns5__mailUnknownDataSource() { }
};
#endif

#ifndef SOAP_TYPE_ns5__imapDataSourceId
#define SOAP_TYPE_ns5__imapDataSourceId (341)
/* ns5:imapDataSourceId */
class SOAP_CMAC ns5__imapDataSourceId : public ns3__id
{
public:
	virtual int soap_type() const { return 341; } /* = unique id SOAP_TYPE_ns5__imapDataSourceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__imapDataSourceId() { ns5__imapDataSourceId::soap_default(NULL); }
	virtual ~ns5__imapDataSourceId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__pop3DataSourceId
#define SOAP_TYPE_ns5__pop3DataSourceId (342)
/* ns5:pop3DataSourceId */
class SOAP_CMAC ns5__pop3DataSourceId : public ns3__id
{
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE_ns5__pop3DataSourceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__pop3DataSourceId() { ns5__pop3DataSourceId::soap_default(NULL); }
	virtual ~ns5__pop3DataSourceId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__caldavDataSourceId
#define SOAP_TYPE_ns5__caldavDataSourceId (343)
/* ns5:caldavDataSourceId */
class SOAP_CMAC ns5__caldavDataSourceId : public ns3__id
{
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE_ns5__caldavDataSourceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__caldavDataSourceId() { ns5__caldavDataSourceId::soap_default(NULL); }
	virtual ~ns5__caldavDataSourceId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__yabDataSourceId
#define SOAP_TYPE_ns5__yabDataSourceId (344)
/* ns5:yabDataSourceId */
class SOAP_CMAC ns5__yabDataSourceId : public ns3__id
{
public:
	virtual int soap_type() const { return 344; } /* = unique id SOAP_TYPE_ns5__yabDataSourceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__yabDataSourceId() { ns5__yabDataSourceId::soap_default(NULL); }
	virtual ~ns5__yabDataSourceId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rssDataSourceId
#define SOAP_TYPE_ns5__rssDataSourceId (345)
/* ns5:rssDataSourceId */
class SOAP_CMAC ns5__rssDataSourceId : public ns3__id
{
public:
	virtual int soap_type() const { return 345; } /* = unique id SOAP_TYPE_ns5__rssDataSourceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rssDataSourceId() { ns5__rssDataSourceId::soap_default(NULL); }
	virtual ~ns5__rssDataSourceId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__galDataSourceId
#define SOAP_TYPE_ns5__galDataSourceId (346)
/* ns5:galDataSourceId */
class SOAP_CMAC ns5__galDataSourceId : public ns3__id
{
public:
	virtual int soap_type() const { return 346; } /* = unique id SOAP_TYPE_ns5__galDataSourceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__galDataSourceId() { ns5__galDataSourceId::soap_default(NULL); }
	virtual ~ns5__galDataSourceId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calDataSourceId
#define SOAP_TYPE_ns5__calDataSourceId (347)
/* ns5:calDataSourceId */
class SOAP_CMAC ns5__calDataSourceId : public ns3__id
{
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE_ns5__calDataSourceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calDataSourceId() { ns5__calDataSourceId::soap_default(NULL); }
	virtual ~ns5__calDataSourceId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__unknownDataSourceId
#define SOAP_TYPE_ns5__unknownDataSourceId (348)
/* ns5:unknownDataSourceId */
class SOAP_CMAC ns5__unknownDataSourceId : public ns3__id
{
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE_ns5__unknownDataSourceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__unknownDataSourceId() { ns5__unknownDataSourceId::soap_default(NULL); }
	virtual ~ns5__unknownDataSourceId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mountpoint
#define SOAP_TYPE_ns5__mountpoint (355)
/* ns5:mountpoint */
class SOAP_CMAC ns5__mountpoint : public ns5__folder
{
public:
	std::string *owner;	/* optional attribute */
	std::string *zid;	/* optional attribute */
	int rid;	/* required attribute */
	std::string *ruuid;	/* optional attribute */
	std::string *oname;	/* optional attribute */
	bool *reminder;	/* optional attribute */
	bool *broken;	/* optional attribute */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE_ns5__mountpoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mountpoint(): owner(NULL), zid(NULL), ruuid(NULL), oname(NULL), reminder(NULL), broken(NULL) { ns5__mountpoint::soap_default(NULL); }
	virtual ~ns5__mountpoint() { }
};
#endif

#ifndef SOAP_TYPE_ns5__searchFolder
#define SOAP_TYPE_ns5__searchFolder (356)
/* ns5:searchFolder */
class SOAP_CMAC ns5__searchFolder : public ns5__folder
{
public:
	std::string *query;	/* optional attribute */
	enum ns3__searchSortBy *sortBy;	/* optional attribute */
	std::string *types;	/* optional attribute */
public:
	virtual int soap_type() const { return 356; } /* = unique id SOAP_TYPE_ns5__searchFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__searchFolder(): query(NULL), sortBy(NULL), types(NULL) { ns5__searchFolder::soap_default(NULL); }
	virtual ~ns5__searchFolder() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createTaskExceptionResponse
#define SOAP_TYPE_ns5__createTaskExceptionResponse (372)
/* ns5:createTaskExceptionResponse */
class SOAP_CMAC ns5__createTaskExceptionResponse : public ns5__createCalendarItemResponse
{
public:
	virtual int soap_type() const { return 372; } /* = unique id SOAP_TYPE_ns5__createTaskExceptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createTaskExceptionResponse() { ns5__createTaskExceptionResponse::soap_default(NULL); }
	virtual ~ns5__createTaskExceptionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createTaskResponse
#define SOAP_TYPE_ns5__createTaskResponse (374)
/* ns5:createTaskResponse */
class SOAP_CMAC ns5__createTaskResponse : public ns5__createCalendarItemResponse
{
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE_ns5__createTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createTaskResponse() { ns5__createTaskResponse::soap_default(NULL); }
	virtual ~ns5__createTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dataSourceNameOrId
#define SOAP_TYPE_ns5__dataSourceNameOrId (381)
/* ns5:dataSourceNameOrId */
class SOAP_CMAC ns5__dataSourceNameOrId : public ns5__nameOrId
{
public:
	virtual int soap_type() const { return 381; } /* = unique id SOAP_TYPE_ns5__dataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dataSourceNameOrId() { ns5__dataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__dataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dispositionAndText
#define SOAP_TYPE_ns5__dispositionAndText (399)
/* Primitive ns5:dispositionAndText schema type: */
class SOAP_CMAC ns5__dispositionAndText
{
public:
	std::string __item;
	std::string *disp;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE_ns5__dispositionAndText */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dispositionAndText(): disp(NULL), soap(NULL) { ns5__dispositionAndText::soap_default(NULL); }
	virtual ~ns5__dispositionAndText() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dismissAppointmentAlarm
#define SOAP_TYPE_ns5__dismissAppointmentAlarm (401)
/* ns5:dismissAppointmentAlarm */
class SOAP_CMAC ns5__dismissAppointmentAlarm : public ns5__dismissAlarm
{
public:
	virtual int soap_type() const { return 401; } /* = unique id SOAP_TYPE_ns5__dismissAppointmentAlarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dismissAppointmentAlarm() { ns5__dismissAppointmentAlarm::soap_default(NULL); }
	virtual ~ns5__dismissAppointmentAlarm() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dismissTaskAlarm
#define SOAP_TYPE_ns5__dismissTaskAlarm (403)
/* ns5:dismissTaskAlarm */
class SOAP_CMAC ns5__dismissTaskAlarm : public ns5__dismissAlarm
{
public:
	virtual int soap_type() const { return 403; } /* = unique id SOAP_TYPE_ns5__dismissTaskAlarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dismissTaskAlarm() { ns5__dismissTaskAlarm::soap_default(NULL); }
	virtual ~ns5__dismissTaskAlarm() { }
};
#endif

#ifndef SOAP_TYPE_ns5__updatedAppointmentAlarmInfo
#define SOAP_TYPE_ns5__updatedAppointmentAlarmInfo (405)
/* ns5:updatedAppointmentAlarmInfo */
class SOAP_CMAC ns5__updatedAppointmentAlarmInfo : public ns5__updatedAlarmInfo
{
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE_ns5__updatedAppointmentAlarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__updatedAppointmentAlarmInfo() { ns5__updatedAppointmentAlarmInfo::soap_default(NULL); }
	virtual ~ns5__updatedAppointmentAlarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__updatedTaskAlarmInfo
#define SOAP_TYPE_ns5__updatedTaskAlarmInfo (408)
/* ns5:updatedTaskAlarmInfo */
class SOAP_CMAC ns5__updatedTaskAlarmInfo : public ns5__updatedAlarmInfo
{
public:
	virtual int soap_type() const { return 408; } /* = unique id SOAP_TYPE_ns5__updatedTaskAlarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__updatedTaskAlarmInfo() { ns5__updatedTaskAlarmInfo::soap_default(NULL); }
	virtual ~ns5__updatedTaskAlarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__documentActionSelector
#define SOAP_TYPE_ns5__documentActionSelector (410)
/* ns5:documentActionSelector */
class SOAP_CMAC ns5__documentActionSelector : public ns5__actionSelector
{
public:
	ns5__documentActionGrant *grant;	/* optional element of type ns5:documentActionGrant */
	std::string *zid;	/* optional attribute */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE_ns5__documentActionSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__documentActionSelector(): grant(NULL), zid(NULL) { ns5__documentActionSelector::soap_default(NULL); }
	virtual ~ns5__documentActionSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getAppointmentRequest
#define SOAP_TYPE_ns5__getAppointmentRequest (436)
/* ns5:getAppointmentRequest */
class SOAP_CMAC ns5__getAppointmentRequest : public ns5__getCalendarItemRequestBase
{
public:
	virtual int soap_type() const { return 436; } /* = unique id SOAP_TYPE_ns5__getAppointmentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getAppointmentRequest() { ns5__getAppointmentRequest::soap_default(NULL); }
	virtual ~ns5__getAppointmentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__taskItemInfo
#define SOAP_TYPE_ns5__taskItemInfo (441)
/* ns5:taskItemInfo */
class SOAP_CMAC ns5__taskItemInfo : public ns5__calendarItemInfo
{
public:
	virtual int soap_type() const { return 441; } /* = unique id SOAP_TYPE_ns5__taskItemInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__taskItemInfo() { ns5__taskItemInfo::soap_default(NULL); }
	virtual ~ns5__taskItemInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__instanceDataAttrs
#define SOAP_TYPE_ns5__instanceDataAttrs (447)
/* ns5:instanceDataAttrs */
class SOAP_CMAC ns5__instanceDataAttrs : public ns5__commonInstanceDataAttrs
{
public:
	LONG64 *dur;	/* optional attribute */
public:
	virtual int soap_type() const { return 447; } /* = unique id SOAP_TYPE_ns5__instanceDataAttrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__instanceDataAttrs(): dur(NULL) { ns5__instanceDataAttrs::soap_default(NULL); }
	virtual ~ns5__instanceDataAttrs() { }
};
#endif

#ifndef SOAP_TYPE_ns5__legacyInstanceDataAttrs
#define SOAP_TYPE_ns5__legacyInstanceDataAttrs (450)
/* ns5:legacyInstanceDataAttrs */
class SOAP_CMAC ns5__legacyInstanceDataAttrs : public ns5__commonInstanceDataAttrs
{
public:
	LONG64 *d;	/* optional attribute */
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE_ns5__legacyInstanceDataAttrs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__legacyInstanceDataAttrs(): d(NULL) { ns5__legacyInstanceDataAttrs::soap_default(NULL); }
	virtual ~ns5__legacyInstanceDataAttrs() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_messageInfo
#define SOAP_TYPE__ns5__union_messageInfo (1634)
/* xsd:choice */
union _ns5__union_messageInfo
{
#define SOAP_UNION__ns5__union_messageInfo_mp	(1)
	ns5__partInfo *mp;
#define SOAP_UNION__ns5__union_messageInfo_shr	(2)
	ns5__shareNotification *shr;
#define SOAP_UNION__ns5__union_messageInfo_dlSubs	(3)
	ns5__dlSubscriptionNotification *dlSubs;
};
#endif

#ifndef SOAP_TYPE___ns5__union_messageInfo
#define SOAP_TYPE___ns5__union_messageInfo (1633)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_messageInfo
{
public:
	int __union_messageInfo;	/* union discriminant (of union defined below) */
	union _ns5__union_messageInfo union_messageInfo;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1633; } /* = unique id SOAP_TYPE___ns5__union_messageInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_messageInfo() { __ns5__union_messageInfo::soap_default(NULL); }
	virtual ~__ns5__union_messageInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__messageInfo
#define SOAP_TYPE_ns5__messageInfo (465)
/* ns5:messageInfo */
class SOAP_CMAC ns5__messageInfo : public ns5__messageCommon
{
public:
	std::string *fr;	/* optional element of type xsd:string */
	std::vector<ns5__emailInfo * >e;	/* optional element of type ns5:emailInfo */
	std::string *su;	/* optional element of type xsd:string */
	std::string *mid;	/* optional element of type xsd:string */
	std::string *irt;	/* optional element of type xsd:string */
	ns5__inviteInfo *inv;	/* optional element of type ns5:inviteInfo */
	std::vector<ns3__keyValuePair * >header;	/* optional element of type ns3:keyValuePair */
	int __size_messageInfo;	/* sequence of elements <-union-messageInfo> */
	__ns5__union_messageInfo *__union_messageInfo;
	std::string *id;	/* optional attribute */
	std::string *cif;	/* optional attribute */
	std::string *origid;	/* optional attribute */
	std::string *rt;	/* optional attribute */
	std::string *idnt;	/* optional attribute */
	std::string *forAcct;	/* optional attribute */
	LONG64 *autoSendTime;	/* optional attribute */
	LONG64 *sd;	/* optional attribute */
	LONG64 *rd;	/* optional attribute */
	std::string *part;	/* optional attribute */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE_ns5__messageInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__messageInfo(): fr(NULL), su(NULL), mid(NULL), irt(NULL), inv(NULL), __union_messageInfo(NULL), id(NULL), cif(NULL), origid(NULL), rt(NULL), idnt(NULL), forAcct(NULL), autoSendTime(NULL), sd(NULL), rd(NULL), part(NULL) { ns5__messageInfo::soap_default(NULL); }
	virtual ~ns5__messageInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addressBookTest
#define SOAP_TYPE_ns5__addressBookTest (480)
/* ns5:addressBookTest */
class SOAP_CMAC ns5__addressBookTest : public ns5__filterTest
{
public:
	std::string header;	/* required attribute */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE_ns5__addressBookTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addressBookTest() { ns5__addressBookTest::soap_default(NULL); }
	virtual ~ns5__addressBookTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__addressTest
#define SOAP_TYPE_ns5__addressTest (482)
/* ns5:addressTest */
class SOAP_CMAC ns5__addressTest : public ns5__filterTest
{
public:
	std::string header;	/* required attribute */
	std::string part;	/* required attribute */
	std::string stringComparison;	/* required attribute */
	bool *caseSensitive;	/* optional attribute */
	std::string value;	/* required attribute */
public:
	virtual int soap_type() const { return 482; } /* = unique id SOAP_TYPE_ns5__addressTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__addressTest(): caseSensitive(NULL) { ns5__addressTest::soap_default(NULL); }
	virtual ~ns5__addressTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__attachmentTest
#define SOAP_TYPE_ns5__attachmentTest (483)
/* ns5:attachmentTest */
class SOAP_CMAC ns5__attachmentTest : public ns5__filterTest
{
public:
	virtual int soap_type() const { return 483; } /* = unique id SOAP_TYPE_ns5__attachmentTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__attachmentTest() { ns5__attachmentTest::soap_default(NULL); }
	virtual ~ns5__attachmentTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__bodyTest
#define SOAP_TYPE_ns5__bodyTest (484)
/* ns5:bodyTest */
class SOAP_CMAC ns5__bodyTest : public ns5__filterTest
{
public:
	std::string *value;	/* optional attribute */
	bool *caseSensitive;	/* optional attribute */
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE_ns5__bodyTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__bodyTest(): value(NULL), caseSensitive(NULL) { ns5__bodyTest::soap_default(NULL); }
	virtual ~ns5__bodyTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__bulkTest
#define SOAP_TYPE_ns5__bulkTest (485)
/* ns5:bulkTest */
class SOAP_CMAC ns5__bulkTest : public ns5__filterTest
{
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE_ns5__bulkTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__bulkTest() { ns5__bulkTest::soap_default(NULL); }
	virtual ~ns5__bulkTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contactRankingTest
#define SOAP_TYPE_ns5__contactRankingTest (486)
/* ns5:contactRankingTest */
class SOAP_CMAC ns5__contactRankingTest : public ns5__filterTest
{
public:
	std::string header;	/* required attribute */
public:
	virtual int soap_type() const { return 486; } /* = unique id SOAP_TYPE_ns5__contactRankingTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contactRankingTest() { ns5__contactRankingTest::soap_default(NULL); }
	virtual ~ns5__contactRankingTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__conversationTest
#define SOAP_TYPE_ns5__conversationTest (487)
/* ns5:conversationTest */
class SOAP_CMAC ns5__conversationTest : public ns5__filterTest
{
public:
	std::string *where;	/* optional attribute */
public:
	virtual int soap_type() const { return 487; } /* = unique id SOAP_TYPE_ns5__conversationTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__conversationTest(): where(NULL) { ns5__conversationTest::soap_default(NULL); }
	virtual ~ns5__conversationTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__currentDayOfWeekTest
#define SOAP_TYPE_ns5__currentDayOfWeekTest (488)
/* ns5:currentDayOfWeekTest */
class SOAP_CMAC ns5__currentDayOfWeekTest : public ns5__filterTest
{
public:
	std::string *value;	/* optional attribute */
public:
	virtual int soap_type() const { return 488; } /* = unique id SOAP_TYPE_ns5__currentDayOfWeekTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__currentDayOfWeekTest(): value(NULL) { ns5__currentDayOfWeekTest::soap_default(NULL); }
	virtual ~ns5__currentDayOfWeekTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__currentTimeTest
#define SOAP_TYPE_ns5__currentTimeTest (489)
/* ns5:currentTimeTest */
class SOAP_CMAC ns5__currentTimeTest : public ns5__filterTest
{
public:
	std::string *dateComparison;	/* optional attribute */
	std::string *time;	/* optional attribute */
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE_ns5__currentTimeTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__currentTimeTest(): dateComparison(NULL), time(NULL) { ns5__currentTimeTest::soap_default(NULL); }
	virtual ~ns5__currentTimeTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__dateTest
#define SOAP_TYPE_ns5__dateTest (490)
/* ns5:dateTest */
class SOAP_CMAC ns5__dateTest : public ns5__filterTest
{
public:
	std::string *dateComparison;	/* optional attribute */
	LONG64 *d;	/* optional attribute */
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE_ns5__dateTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__dateTest(): dateComparison(NULL), d(NULL) { ns5__dateTest::soap_default(NULL); }
	virtual ~ns5__dateTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__facebookTest
#define SOAP_TYPE_ns5__facebookTest (491)
/* ns5:facebookTest */
class SOAP_CMAC ns5__facebookTest : public ns5__filterTest
{
public:
	virtual int soap_type() const { return 491; } /* = unique id SOAP_TYPE_ns5__facebookTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__facebookTest() { ns5__facebookTest::soap_default(NULL); }
	virtual ~ns5__facebookTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__flaggedTest
#define SOAP_TYPE_ns5__flaggedTest (492)
/* ns5:flaggedTest */
class SOAP_CMAC ns5__flaggedTest : public ns5__filterTest
{
public:
	std::string flagName;	/* required attribute */
public:
	virtual int soap_type() const { return 492; } /* = unique id SOAP_TYPE_ns5__flaggedTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__flaggedTest() { ns5__flaggedTest::soap_default(NULL); }
	virtual ~ns5__flaggedTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__headerExistsTest
#define SOAP_TYPE_ns5__headerExistsTest (493)
/* ns5:headerExistsTest */
class SOAP_CMAC ns5__headerExistsTest : public ns5__filterTest
{
public:
	std::string header;	/* required attribute */
public:
	virtual int soap_type() const { return 493; } /* = unique id SOAP_TYPE_ns5__headerExistsTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__headerExistsTest() { ns5__headerExistsTest::soap_default(NULL); }
	virtual ~ns5__headerExistsTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__headerTest
#define SOAP_TYPE_ns5__headerTest (494)
/* ns5:headerTest */
class SOAP_CMAC ns5__headerTest : public ns5__filterTest
{
public:
	std::string *header;	/* optional attribute */
	std::string *stringComparison;	/* optional attribute */
	std::string *value;	/* optional attribute */
	bool *caseSensitive;	/* optional attribute */
public:
	virtual int soap_type() const { return 494; } /* = unique id SOAP_TYPE_ns5__headerTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__headerTest(): header(NULL), stringComparison(NULL), value(NULL), caseSensitive(NULL) { ns5__headerTest::soap_default(NULL); }
	virtual ~ns5__headerTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__importanceTest
#define SOAP_TYPE_ns5__importanceTest (495)
/* ns5:importanceTest */
class SOAP_CMAC ns5__importanceTest : public ns5__filterTest
{
public:
	enum ns5__importance imp;	/* required attribute */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE_ns5__importanceTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__importanceTest() { ns5__importanceTest::soap_default(NULL); }
	virtual ~ns5__importanceTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__inviteTest
#define SOAP_TYPE_ns5__inviteTest (496)
/* ns5:inviteTest */
class SOAP_CMAC ns5__inviteTest : public ns5__filterTest
{
public:
	std::vector<std::string >method;	/* optional element of type xsd:string */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE_ns5__inviteTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__inviteTest(): unusedCodeGenHelper(NULL) { ns5__inviteTest::soap_default(NULL); }
	virtual ~ns5__inviteTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__linkedInTest
#define SOAP_TYPE_ns5__linkedInTest (497)
/* ns5:linkedInTest */
class SOAP_CMAC ns5__linkedInTest : public ns5__filterTest
{
public:
	virtual int soap_type() const { return 497; } /* = unique id SOAP_TYPE_ns5__linkedInTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__linkedInTest() { ns5__linkedInTest::soap_default(NULL); }
	virtual ~ns5__linkedInTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__listTest
#define SOAP_TYPE_ns5__listTest (498)
/* ns5:listTest */
class SOAP_CMAC ns5__listTest : public ns5__filterTest
{
public:
	virtual int soap_type() const { return 498; } /* = unique id SOAP_TYPE_ns5__listTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__listTest() { ns5__listTest::soap_default(NULL); }
	virtual ~ns5__listTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__meTest
#define SOAP_TYPE_ns5__meTest (499)
/* ns5:meTest */
class SOAP_CMAC ns5__meTest : public ns5__filterTest
{
public:
	std::string header;	/* required attribute */
public:
	virtual int soap_type() const { return 499; } /* = unique id SOAP_TYPE_ns5__meTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__meTest() { ns5__meTest::soap_default(NULL); }
	virtual ~ns5__meTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__mimeHeaderTest
#define SOAP_TYPE_ns5__mimeHeaderTest (500)
/* ns5:mimeHeaderTest */
class SOAP_CMAC ns5__mimeHeaderTest : public ns5__filterTest
{
public:
	std::string *header;	/* optional attribute */
	std::string *stringComparison;	/* optional attribute */
	std::string *value;	/* optional attribute */
	bool *caseSensitive;	/* optional attribute */
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE_ns5__mimeHeaderTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__mimeHeaderTest(): header(NULL), stringComparison(NULL), value(NULL), caseSensitive(NULL) { ns5__mimeHeaderTest::soap_default(NULL); }
	virtual ~ns5__mimeHeaderTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sizeTest
#define SOAP_TYPE_ns5__sizeTest (501)
/* ns5:sizeTest */
class SOAP_CMAC ns5__sizeTest : public ns5__filterTest
{
public:
	std::string *numberComparison;	/* optional attribute */
	std::string *s;	/* optional attribute */
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE_ns5__sizeTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sizeTest(): numberComparison(NULL), s(NULL) { ns5__sizeTest::soap_default(NULL); }
	virtual ~ns5__sizeTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__socialcastTest
#define SOAP_TYPE_ns5__socialcastTest (502)
/* ns5:socialcastTest */
class SOAP_CMAC ns5__socialcastTest : public ns5__filterTest
{
public:
	virtual int soap_type() const { return 502; } /* = unique id SOAP_TYPE_ns5__socialcastTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__socialcastTest() { ns5__socialcastTest::soap_default(NULL); }
	virtual ~ns5__socialcastTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__trueTest
#define SOAP_TYPE_ns5__trueTest (503)
/* ns5:trueTest */
class SOAP_CMAC ns5__trueTest : public ns5__filterTest
{
public:
	virtual int soap_type() const { return 503; } /* = unique id SOAP_TYPE_ns5__trueTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__trueTest() { ns5__trueTest::soap_default(NULL); }
	virtual ~ns5__trueTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__twitterTest
#define SOAP_TYPE_ns5__twitterTest (504)
/* ns5:twitterTest */
class SOAP_CMAC ns5__twitterTest : public ns5__filterTest
{
public:
	virtual int soap_type() const { return 504; } /* = unique id SOAP_TYPE_ns5__twitterTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__twitterTest() { ns5__twitterTest::soap_default(NULL); }
	virtual ~ns5__twitterTest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__keepAction
#define SOAP_TYPE_ns5__keepAction (505)
/* ns5:keepAction */
class SOAP_CMAC ns5__keepAction : public ns5__filterAction
{
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE_ns5__keepAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__keepAction() { ns5__keepAction::soap_default(NULL); }
	virtual ~ns5__keepAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__discardAction
#define SOAP_TYPE_ns5__discardAction (507)
/* ns5:discardAction */
class SOAP_CMAC ns5__discardAction : public ns5__filterAction
{
public:
	virtual int soap_type() const { return 507; } /* = unique id SOAP_TYPE_ns5__discardAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__discardAction() { ns5__discardAction::soap_default(NULL); }
	virtual ~ns5__discardAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__fileIntoAction
#define SOAP_TYPE_ns5__fileIntoAction (508)
/* ns5:fileIntoAction */
class SOAP_CMAC ns5__fileIntoAction : public ns5__filterAction
{
public:
	std::string *folderPath;	/* optional attribute */
public:
	virtual int soap_type() const { return 508; } /* = unique id SOAP_TYPE_ns5__fileIntoAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__fileIntoAction(): folderPath(NULL) { ns5__fileIntoAction::soap_default(NULL); }
	virtual ~ns5__fileIntoAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__flagAction
#define SOAP_TYPE_ns5__flagAction (509)
/* ns5:flagAction */
class SOAP_CMAC ns5__flagAction : public ns5__filterAction
{
public:
	std::string *flagName;	/* optional attribute */
public:
	virtual int soap_type() const { return 509; } /* = unique id SOAP_TYPE_ns5__flagAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__flagAction(): flagName(NULL) { ns5__flagAction::soap_default(NULL); }
	virtual ~ns5__flagAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__tagAction
#define SOAP_TYPE_ns5__tagAction (510)
/* ns5:tagAction */
class SOAP_CMAC ns5__tagAction : public ns5__filterAction
{
public:
	std::string tagName;	/* required attribute */
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE_ns5__tagAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__tagAction() { ns5__tagAction::soap_default(NULL); }
	virtual ~ns5__tagAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__redirectAction
#define SOAP_TYPE_ns5__redirectAction (511)
/* ns5:redirectAction */
class SOAP_CMAC ns5__redirectAction : public ns5__filterAction
{
public:
	std::string *a;	/* optional attribute */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE_ns5__redirectAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__redirectAction(): a(NULL) { ns5__redirectAction::soap_default(NULL); }
	virtual ~ns5__redirectAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__replyAction
#define SOAP_TYPE_ns5__replyAction (512)
/* ns5:replyAction */
class SOAP_CMAC ns5__replyAction : public ns5__filterAction
{
public:
	std::string *content;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 512; } /* = unique id SOAP_TYPE_ns5__replyAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__replyAction(): content(NULL) { ns5__replyAction::soap_default(NULL); }
	virtual ~ns5__replyAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__notifyAction
#define SOAP_TYPE_ns5__notifyAction (513)
/* ns5:notifyAction */
class SOAP_CMAC ns5__notifyAction : public ns5__filterAction
{
public:
	std::string *content;	/* optional element of type xsd:string */
	std::string *a;	/* optional attribute */
	std::string *su;	/* optional attribute */
	int *maxBodySize;	/* optional attribute */
	std::string *origHeaders;	/* optional attribute */
public:
	virtual int soap_type() const { return 513; } /* = unique id SOAP_TYPE_ns5__notifyAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__notifyAction(): content(NULL), a(NULL), su(NULL), maxBodySize(NULL), origHeaders(NULL) { ns5__notifyAction::soap_default(NULL); }
	virtual ~ns5__notifyAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__stopAction
#define SOAP_TYPE_ns5__stopAction (514)
/* ns5:stopAction */
class SOAP_CMAC ns5__stopAction : public ns5__filterAction
{
public:
	virtual int soap_type() const { return 514; } /* = unique id SOAP_TYPE_ns5__stopAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__stopAction() { ns5__stopAction::soap_default(NULL); }
	virtual ~ns5__stopAction() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusyFREEslot
#define SOAP_TYPE_ns5__freeBusyFREEslot (521)
/* ns5:freeBusyFREEslot */
class SOAP_CMAC ns5__freeBusyFREEslot : public ns5__freeBusySlot
{
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_ns5__freeBusyFREEslot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusyFREEslot() { ns5__freeBusyFREEslot::soap_default(NULL); }
	virtual ~ns5__freeBusyFREEslot() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusyBUSYslot
#define SOAP_TYPE_ns5__freeBusyBUSYslot (523)
/* ns5:freeBusyBUSYslot */
class SOAP_CMAC ns5__freeBusyBUSYslot : public ns5__freeBusySlot
{
public:
	virtual int soap_type() const { return 523; } /* = unique id SOAP_TYPE_ns5__freeBusyBUSYslot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusyBUSYslot() { ns5__freeBusyBUSYslot::soap_default(NULL); }
	virtual ~ns5__freeBusyBUSYslot() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusyBUSYTENTATIVEslot
#define SOAP_TYPE_ns5__freeBusyBUSYTENTATIVEslot (524)
/* ns5:freeBusyBUSYTENTATIVEslot */
class SOAP_CMAC ns5__freeBusyBUSYTENTATIVEslot : public ns5__freeBusySlot
{
public:
	virtual int soap_type() const { return 524; } /* = unique id SOAP_TYPE_ns5__freeBusyBUSYTENTATIVEslot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusyBUSYTENTATIVEslot() { ns5__freeBusyBUSYTENTATIVEslot::soap_default(NULL); }
	virtual ~ns5__freeBusyBUSYTENTATIVEslot() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusyBUSYUNAVAILABLEslot
#define SOAP_TYPE_ns5__freeBusyBUSYUNAVAILABLEslot (525)
/* ns5:freeBusyBUSYUNAVAILABLEslot */
class SOAP_CMAC ns5__freeBusyBUSYUNAVAILABLEslot : public ns5__freeBusySlot
{
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_ns5__freeBusyBUSYUNAVAILABLEslot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusyBUSYUNAVAILABLEslot() { ns5__freeBusyBUSYUNAVAILABLEslot::soap_default(NULL); }
	virtual ~ns5__freeBusyBUSYUNAVAILABLEslot() { }
};
#endif

#ifndef SOAP_TYPE_ns5__freeBusyNODATAslot
#define SOAP_TYPE_ns5__freeBusyNODATAslot (526)
/* ns5:freeBusyNODATAslot */
class SOAP_CMAC ns5__freeBusyNODATAslot : public ns5__freeBusySlot
{
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_ns5__freeBusyNODATAslot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__freeBusyNODATAslot() { ns5__freeBusyNODATAslot::soap_default(NULL); }
	virtual ~ns5__freeBusyNODATAslot() { }
};
#endif

#ifndef SOAP_TYPE_ns5__iCalContent
#define SOAP_TYPE_ns5__iCalContent (529)
/* Primitive ns5:iCalContent schema type: */
class SOAP_CMAC ns5__iCalContent
{
public:
	std::string __item;
	std::string *id;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 529; } /* = unique id SOAP_TYPE_ns5__iCalContent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__iCalContent(): id(NULL), soap(NULL) { ns5__iCalContent::soap_default(NULL); }
	virtual ~ns5__iCalContent() { }
};
#endif

#ifndef SOAP_TYPE_ns5__imapImportStatusInfo
#define SOAP_TYPE_ns5__imapImportStatusInfo (532)
/* ns5:imapImportStatusInfo */
class SOAP_CMAC ns5__imapImportStatusInfo : public ns5__importStatusInfo
{
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE_ns5__imapImportStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__imapImportStatusInfo() { ns5__imapImportStatusInfo::soap_default(NULL); }
	virtual ~ns5__imapImportStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__pop3ImportStatusInfo
#define SOAP_TYPE_ns5__pop3ImportStatusInfo (534)
/* ns5:pop3ImportStatusInfo */
class SOAP_CMAC ns5__pop3ImportStatusInfo : public ns5__importStatusInfo
{
public:
	virtual int soap_type() const { return 534; } /* = unique id SOAP_TYPE_ns5__pop3ImportStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__pop3ImportStatusInfo() { ns5__pop3ImportStatusInfo::soap_default(NULL); }
	virtual ~ns5__pop3ImportStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__caldavImportStatusInfo
#define SOAP_TYPE_ns5__caldavImportStatusInfo (535)
/* ns5:caldavImportStatusInfo */
class SOAP_CMAC ns5__caldavImportStatusInfo : public ns5__importStatusInfo
{
public:
	virtual int soap_type() const { return 535; } /* = unique id SOAP_TYPE_ns5__caldavImportStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__caldavImportStatusInfo() { ns5__caldavImportStatusInfo::soap_default(NULL); }
	virtual ~ns5__caldavImportStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__yabImportStatusInfo
#define SOAP_TYPE_ns5__yabImportStatusInfo (536)
/* ns5:yabImportStatusInfo */
class SOAP_CMAC ns5__yabImportStatusInfo : public ns5__importStatusInfo
{
public:
	virtual int soap_type() const { return 536; } /* = unique id SOAP_TYPE_ns5__yabImportStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__yabImportStatusInfo() { ns5__yabImportStatusInfo::soap_default(NULL); }
	virtual ~ns5__yabImportStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rssImportStatusInfo
#define SOAP_TYPE_ns5__rssImportStatusInfo (537)
/* ns5:rssImportStatusInfo */
class SOAP_CMAC ns5__rssImportStatusInfo : public ns5__importStatusInfo
{
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE_ns5__rssImportStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rssImportStatusInfo() { ns5__rssImportStatusInfo::soap_default(NULL); }
	virtual ~ns5__rssImportStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__galImportStatusInfo
#define SOAP_TYPE_ns5__galImportStatusInfo (538)
/* ns5:galImportStatusInfo */
class SOAP_CMAC ns5__galImportStatusInfo : public ns5__importStatusInfo
{
public:
	virtual int soap_type() const { return 538; } /* = unique id SOAP_TYPE_ns5__galImportStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__galImportStatusInfo() { ns5__galImportStatusInfo::soap_default(NULL); }
	virtual ~ns5__galImportStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calImportStatusInfo
#define SOAP_TYPE_ns5__calImportStatusInfo (539)
/* ns5:calImportStatusInfo */
class SOAP_CMAC ns5__calImportStatusInfo : public ns5__importStatusInfo
{
public:
	virtual int soap_type() const { return 539; } /* = unique id SOAP_TYPE_ns5__calImportStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calImportStatusInfo() { ns5__calImportStatusInfo::soap_default(NULL); }
	virtual ~ns5__calImportStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__unknownImportStatusInfo
#define SOAP_TYPE_ns5__unknownImportStatusInfo (540)
/* ns5:unknownImportStatusInfo */
class SOAP_CMAC ns5__unknownImportStatusInfo : public ns5__importStatusInfo
{
public:
	virtual int soap_type() const { return 540; } /* = unique id SOAP_TYPE_ns5__unknownImportStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__unknownImportStatusInfo() { ns5__unknownImportStatusInfo::soap_default(NULL); }
	virtual ~ns5__unknownImportStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__documentInfo
#define SOAP_TYPE_ns5__documentInfo (545)
/* ns5:documentInfo */
class SOAP_CMAC ns5__documentInfo : public ns5__commonDocumentInfo
{
public:
	std::string *loid;	/* optional attribute */
	std::string *loe;	/* optional attribute */
	std::string *lt;	/* optional attribute */
public:
	virtual int soap_type() const { return 545; } /* = unique id SOAP_TYPE_ns5__documentInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__documentInfo(): loid(NULL), loe(NULL), lt(NULL) { ns5__documentInfo::soap_default(NULL); }
	virtual ~ns5__documentInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__miniCalError
#define SOAP_TYPE_ns5__miniCalError (550)
/* Primitive ns5:miniCalError schema type: */
class SOAP_CMAC ns5__miniCalError
{
public:
	std::string __item;
	std::string id;	/* required attribute */
	std::string code;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 550; } /* = unique id SOAP_TYPE_ns5__miniCalError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__miniCalError(): soap(NULL) { ns5__miniCalError::soap_default(NULL); }
	virtual ~ns5__miniCalError() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_msgWithGroupInfo
#define SOAP_TYPE__ns5__union_msgWithGroupInfo (1639)
/* xsd:choice */
union _ns5__union_msgWithGroupInfo
{
#define SOAP_UNION__ns5__union_msgWithGroupInfo_mp	(1)
	ns5__partInfo *mp;
#define SOAP_UNION__ns5__union_msgWithGroupInfo_shr	(2)
	ns5__shareNotification *shr;
#define SOAP_UNION__ns5__union_msgWithGroupInfo_dlSubs	(3)
	ns5__dlSubscriptionNotification *dlSubs;
};
#endif

#ifndef SOAP_TYPE___ns5__union_msgWithGroupInfo
#define SOAP_TYPE___ns5__union_msgWithGroupInfo (1638)
/* Operation wrapper: */
class SOAP_CMAC __ns5__union_msgWithGroupInfo
{
public:
	int __union_msgWithGroupInfo;	/* union discriminant (of union defined below) */
	union _ns5__union_msgWithGroupInfo union_msgWithGroupInfo;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1638; } /* = unique id SOAP_TYPE___ns5__union_msgWithGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __ns5__union_msgWithGroupInfo() { __ns5__union_msgWithGroupInfo::soap_default(NULL); }
	virtual ~__ns5__union_msgWithGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__msgWithGroupInfo
#define SOAP_TYPE_ns5__msgWithGroupInfo (556)
/* ns5:msgWithGroupInfo */
class SOAP_CMAC ns5__msgWithGroupInfo : public ns5__messageCommon
{
public:
	std::string *fr;	/* optional element of type xsd:string */
	std::vector<ns5__emailInfo * >e;	/* optional element of type ns5:emailInfo */
	std::string *su;	/* optional element of type xsd:string */
	std::string *mid;	/* optional element of type xsd:string */
	std::string *irt;	/* optional element of type xsd:string */
	ns5__inviteWithGroupInfo *inv;	/* optional element of type ns5:inviteWithGroupInfo */
	std::vector<ns3__keyValuePair * >header;	/* optional element of type ns3:keyValuePair */
	ns3__urlAndValue *content;	/* optional element of type ns3:urlAndValue */
	int __size_msgWithGroupInfo;	/* sequence of elements <-union-msgWithGroupInfo> */
	__ns5__union_msgWithGroupInfo *__union_msgWithGroupInfo;
	std::string *id;	/* optional attribute */
	std::string *cif;	/* optional attribute */
	std::string *origid;	/* optional attribute */
	std::string *rt;	/* optional attribute */
	std::string *idnt;	/* optional attribute */
	std::string *forAcct;	/* optional attribute */
	LONG64 *autoSendTime;	/* optional attribute */
	LONG64 *sd;	/* optional attribute */
	LONG64 *rd;	/* optional attribute */
	std::string *part;	/* optional attribute */
public:
	virtual int soap_type() const { return 556; } /* = unique id SOAP_TYPE_ns5__msgWithGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__msgWithGroupInfo(): fr(NULL), su(NULL), mid(NULL), irt(NULL), inv(NULL), content(NULL), __union_msgWithGroupInfo(NULL), id(NULL), cif(NULL), origid(NULL), rt(NULL), idnt(NULL), forAcct(NULL), autoSendTime(NULL), sd(NULL), rd(NULL), part(NULL) { ns5__msgWithGroupInfo::soap_default(NULL); }
	virtual ~ns5__msgWithGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__inviteComponentWithGroupInfo
#define SOAP_TYPE_ns5__inviteComponentWithGroupInfo (558)
/* ns5:inviteComponentWithGroupInfo */
class SOAP_CMAC ns5__inviteComponentWithGroupInfo : public ns5__inviteComponentCommon
{
public:
	std::vector<std::string >category;	/* optional element of type xsd:string */
	std::vector<std::string >comment;	/* optional element of type xsd:string */
	std::vector<std::string >contact;	/* optional element of type xsd:string */
	ns5__geoInfo *geo;	/* optional element of type ns5:geoInfo */
	std::vector<class ns5__calendarAttendeeWithGroupInfo * >at;	/* optional element of type ns5:calendarAttendeeWithGroupInfo */
	std::vector<ns5__alarmInfo * >alarm;	/* optional element of type ns5:alarmInfo */
	std::vector<ns5__xProp * >xprop;	/* optional element of type ns5:xProp */
	std::string *fr;	/* optional element of type xsd:string */
	std::string *desc;	/* optional element of type xsd:string */
	std::string *descHtml;	/* optional element of type xsd:string */
	ns5__calOrganizer *or_;	/* optional element of type ns5:calOrganizer */
	ns5__recurrenceInfo *recur;	/* optional element of type ns5:recurrenceInfo */
	ns5__exceptionRecurIdInfo *exceptId;	/* optional element of type ns5:exceptionRecurIdInfo */
	ns5__dtTimeInfo *s;	/* optional element of type ns5:dtTimeInfo */
	ns5__dtTimeInfo *e;	/* optional element of type ns5:dtTimeInfo */
	ns5__durationInfo *dur;	/* optional element of type ns5:durationInfo */
public:
	virtual int soap_type() const { return 558; } /* = unique id SOAP_TYPE_ns5__inviteComponentWithGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__inviteComponentWithGroupInfo(): geo(NULL), fr(NULL), desc(NULL), descHtml(NULL), or_(NULL), recur(NULL), exceptId(NULL), s(NULL), e(NULL), dur(NULL) { ns5__inviteComponentWithGroupInfo::soap_default(NULL); }
	virtual ~ns5__inviteComponentWithGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calendarAttendeeWithGroupInfo
#define SOAP_TYPE_ns5__calendarAttendeeWithGroupInfo (559)
/* ns5:calendarAttendeeWithGroupInfo */
class SOAP_CMAC ns5__calendarAttendeeWithGroupInfo : public ns5__calendarAttendee
{
public:
	bool *isGroup;	/* optional attribute */
	bool *exp;	/* optional attribute */
public:
	virtual int soap_type() const { return 559; } /* = unique id SOAP_TYPE_ns5__calendarAttendeeWithGroupInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calendarAttendeeWithGroupInfo(): isGroup(NULL), exp(NULL) { ns5__calendarAttendeeWithGroupInfo::soap_default(NULL); }
	virtual ~ns5__calendarAttendeeWithGroupInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__cancelItemRecur
#define SOAP_TYPE_ns5__cancelItemRecur (572)
/* ns5:cancelItemRecur */
class SOAP_CMAC ns5__cancelItemRecur : public ns5__calendarItemRecur
{
public:
	virtual int soap_type() const { return 572; } /* = unique id SOAP_TYPE_ns5__cancelItemRecur */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__cancelItemRecur() { ns5__cancelItemRecur::soap_default(NULL); }
	virtual ~ns5__cancelItemRecur() { }
};
#endif

#ifndef SOAP_TYPE_ns5__exceptionItemRecur
#define SOAP_TYPE_ns5__exceptionItemRecur (574)
/* ns5:exceptionItemRecur */
class SOAP_CMAC ns5__exceptionItemRecur : public ns5__calendarItemRecur
{
public:
	virtual int soap_type() const { return 574; } /* = unique id SOAP_TYPE_ns5__exceptionItemRecur */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__exceptionItemRecur() { ns5__exceptionItemRecur::soap_default(NULL); }
	virtual ~ns5__exceptionItemRecur() { }
};
#endif

#ifndef SOAP_TYPE_ns5__inviteItemRecur
#define SOAP_TYPE_ns5__inviteItemRecur (575)
/* ns5:inviteItemRecur */
class SOAP_CMAC ns5__inviteItemRecur : public ns5__calendarItemRecur
{
public:
	virtual int soap_type() const { return 575; } /* = unique id SOAP_TYPE_ns5__inviteItemRecur */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__inviteItemRecur() { ns5__inviteItemRecur::soap_default(NULL); }
	virtual ~ns5__inviteItemRecur() { }
};
#endif

#ifndef SOAP_TYPE_ns5__getTaskRequest
#define SOAP_TYPE_ns5__getTaskRequest (593)
/* ns5:getTaskRequest */
class SOAP_CMAC ns5__getTaskRequest : public ns5__getCalendarItemRequestBase
{
public:
	virtual int soap_type() const { return 593; } /* = unique id SOAP_TYPE_ns5__getTaskRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__getTaskRequest() { ns5__getTaskRequest::soap_default(NULL); }
	virtual ~ns5__getTaskRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__contentSpec
#define SOAP_TYPE_ns5__contentSpec (615)
/* Primitive ns5:contentSpec schema type: */
class SOAP_CMAC ns5__contentSpec
{
public:
	std::string __item;
	std::string *aid;	/* optional attribute */
	std::string *mid;	/* optional attribute */
	std::string *part;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 615; } /* = unique id SOAP_TYPE_ns5__contentSpec */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__contentSpec(): aid(NULL), mid(NULL), part(NULL), soap(NULL) { ns5__contentSpec::soap_default(NULL); }
	virtual ~ns5__contentSpec() { }
};
#endif

#ifndef SOAP_TYPE_ns5__content
#define SOAP_TYPE_ns5__content (618)
/* Primitive ns5:content schema type: */
class SOAP_CMAC ns5__content
{
public:
	std::string __item;
	std::string *aid;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 618; } /* = unique id SOAP_TYPE_ns5__content */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__content(): aid(NULL), soap(NULL) { ns5__content::soap_default(NULL); }
	virtual ~ns5__content() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyAppointmentRequest
#define SOAP_TYPE_ns5__modifyAppointmentRequest (630)
/* ns5:modifyAppointmentRequest */
class SOAP_CMAC ns5__modifyAppointmentRequest : public ns5__calItemRequestBase
{
public:
	std::string *id;	/* optional attribute */
	int *comp;	/* optional attribute */
	int *ms;	/* optional attribute */
	int *rev;	/* optional attribute */
public:
	virtual int soap_type() const { return 630; } /* = unique id SOAP_TYPE_ns5__modifyAppointmentRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyAppointmentRequest(): id(NULL), comp(NULL), ms(NULL), rev(NULL) { ns5__modifyAppointmentRequest::soap_default(NULL); }
	virtual ~ns5__modifyAppointmentRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyAppointmentResponse
#define SOAP_TYPE_ns5__modifyAppointmentResponse (631)
/* ns5:modifyAppointmentResponse */
class SOAP_CMAC ns5__modifyAppointmentResponse : public ns5__createCalendarItemResponse
{
public:
	virtual int soap_type() const { return 631; } /* = unique id SOAP_TYPE_ns5__modifyAppointmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyAppointmentResponse() { ns5__modifyAppointmentResponse::soap_default(NULL); }
	virtual ~ns5__modifyAppointmentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyContactAttr
#define SOAP_TYPE_ns5__modifyContactAttr (634)
/* Primitive ns5:modifyContactAttr schema type: */
class SOAP_CMAC ns5__modifyContactAttr
{
public:
	std::string __item;
	std::string n;	/* required attribute */
	std::string *aid;	/* optional attribute */
	int *id;	/* optional attribute */
	std::string *part;	/* optional attribute */
	std::string *op;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 634; } /* = unique id SOAP_TYPE_ns5__modifyContactAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyContactAttr(): aid(NULL), id(NULL), part(NULL), op(NULL), soap(NULL) { ns5__modifyContactAttr::soap_default(NULL); }
	virtual ~ns5__modifyContactAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns5__saveDraftMsg
#define SOAP_TYPE_ns5__saveDraftMsg (676)
/* ns5:saveDraftMsg */
class SOAP_CMAC ns5__saveDraftMsg : public ns5__msg
{
public:
	int *id;	/* optional attribute */
	std::string *forAcct;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	std::string *rgb;	/* optional attribute */
	char *color;	/* optional attribute */
	LONG64 *autoSendTime;	/* optional attribute */
public:
	virtual int soap_type() const { return 676; } /* = unique id SOAP_TYPE_ns5__saveDraftMsg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__saveDraftMsg(): id(NULL), forAcct(NULL), t(NULL), tn(NULL), rgb(NULL), color(NULL), autoSendTime(NULL) { ns5__saveDraftMsg::soap_default(NULL); }
	virtual ~ns5__saveDraftMsg() { }
};
#endif

#ifndef SOAP_TYPE_ns5__searchConvRequest
#define SOAP_TYPE_ns5__searchConvRequest (678)
/* ns5:searchConvRequest */
class SOAP_CMAC ns5__searchConvRequest : public ns5__mailSearchParams
{
public:
	std::string cid;	/* required attribute */
	bool *nest;	/* optional attribute */
public:
	virtual int soap_type() const { return 678; } /* = unique id SOAP_TYPE_ns5__searchConvRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__searchConvRequest(): nest(NULL) { ns5__searchConvRequest::soap_default(NULL); }
	virtual ~ns5__searchConvRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__searchRequest
#define SOAP_TYPE_ns5__searchRequest (684)
/* ns5:searchRequest */
class SOAP_CMAC ns5__searchRequest : public ns5__mailSearchParams
{
public:
	bool *warmup;	/* optional attribute */
public:
	virtual int soap_type() const { return 684; } /* = unique id SOAP_TYPE_ns5__searchRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__searchRequest(): warmup(NULL) { ns5__searchRequest::soap_default(NULL); }
	virtual ~ns5__searchRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__conversationHitInfo
#define SOAP_TYPE_ns5__conversationHitInfo (686)
/* ns5:conversationHitInfo */
class SOAP_CMAC ns5__conversationHitInfo : public ns5__conversationSummary
{
public:
	std::vector<ns5__conversationMsgHitInfo * >m;	/* optional element of type ns5:conversationMsgHitInfo */
	std::string *sf;	/* optional attribute */
public:
	virtual int soap_type() const { return 686; } /* = unique id SOAP_TYPE_ns5__conversationHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__conversationHitInfo(): sf(NULL) { ns5__conversationHitInfo::soap_default(NULL); }
	virtual ~ns5__conversationHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__noteHitInfo
#define SOAP_TYPE_ns5__noteHitInfo (690)
/* ns5:noteHitInfo */
class SOAP_CMAC ns5__noteHitInfo : public ns5__noteInfo
{
public:
	std::string *sf;	/* optional attribute */
public:
	virtual int soap_type() const { return 690; } /* = unique id SOAP_TYPE_ns5__noteHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__noteHitInfo(): sf(NULL) { ns5__noteHitInfo::soap_default(NULL); }
	virtual ~ns5__noteHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__wikiHitInfo
#define SOAP_TYPE_ns5__wikiHitInfo (692)
/* ns5:wikiHitInfo */
class SOAP_CMAC ns5__wikiHitInfo : public ns5__commonDocumentInfo
{
public:
	std::string *sf;	/* optional attribute */
public:
	virtual int soap_type() const { return 692; } /* = unique id SOAP_TYPE_ns5__wikiHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__wikiHitInfo(): sf(NULL) { ns5__wikiHitInfo::soap_default(NULL); }
	virtual ~ns5__wikiHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calReply
#define SOAP_TYPE_ns5__calReply (696)
/* ns5:calReply */
class SOAP_CMAC ns5__calReply : public ns5__recurIdInfo
{
public:
	std::string at;	/* required attribute */
	std::string *sentBy;	/* optional attribute */
	std::string *ptst;	/* optional attribute */
	int seq;	/* required attribute */
	int d;	/* required attribute */
public:
	virtual int soap_type() const { return 696; } /* = unique id SOAP_TYPE_ns5__calReply */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calReply(): sentBy(NULL), ptst(NULL) { ns5__calReply::soap_default(NULL); }
	virtual ~ns5__calReply() { }
};
#endif

#ifndef SOAP_TYPE_ns5__sendInviteReplyResponse
#define SOAP_TYPE_ns5__sendInviteReplyResponse (701)
/* ns5:sendInviteReplyResponse */
class SOAP_CMAC ns5__sendInviteReplyResponse : public ns5__createCalendarItemResponse
{
public:
	virtual int soap_type() const { return 701; } /* = unique id SOAP_TYPE_ns5__sendInviteReplyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__sendInviteReplyResponse() { ns5__sendInviteReplyResponse::soap_default(NULL); }
	virtual ~ns5__sendInviteReplyResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__msgToSend
#define SOAP_TYPE_ns5__msgToSend (703)
/* ns5:msgToSend */
class SOAP_CMAC ns5__msgToSend : public ns5__msg
{
public:
	std::string *did;	/* optional attribute */
	bool *sfd;	/* optional attribute */
public:
	virtual int soap_type() const { return 703; } /* = unique id SOAP_TYPE_ns5__msgToSend */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__msgToSend(): did(NULL), sfd(NULL) { ns5__msgToSend::soap_default(NULL); }
	virtual ~ns5__msgToSend() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setTaskRequest
#define SOAP_TYPE_ns5__setTaskRequest (716)
/* ns5:setTaskRequest */
class SOAP_CMAC ns5__setTaskRequest : public ns5__setAppointmentRequest
{
public:
	virtual int soap_type() const { return 716; } /* = unique id SOAP_TYPE_ns5__setTaskRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setTaskRequest() { ns5__setTaskRequest::soap_default(NULL); }
	virtual ~ns5__setTaskRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__setTaskResponse
#define SOAP_TYPE_ns5__setTaskResponse (717)
/* ns5:setTaskResponse */
class SOAP_CMAC ns5__setTaskResponse : public ns5__setAppointmentResponse
{
public:
	virtual int soap_type() const { return 717; } /* = unique id SOAP_TYPE_ns5__setTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__setTaskResponse() { ns5__setTaskResponse::soap_default(NULL); }
	virtual ~ns5__setTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__snoozeAppointmentAlarm
#define SOAP_TYPE_ns5__snoozeAppointmentAlarm (719)
/* ns5:snoozeAppointmentAlarm */
class SOAP_CMAC ns5__snoozeAppointmentAlarm : public ns5__snoozeAlarm
{
public:
	virtual int soap_type() const { return 719; } /* = unique id SOAP_TYPE_ns5__snoozeAppointmentAlarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__snoozeAppointmentAlarm() { ns5__snoozeAppointmentAlarm::soap_default(NULL); }
	virtual ~ns5__snoozeAppointmentAlarm() { }
};
#endif

#ifndef SOAP_TYPE_ns5__snoozeTaskAlarm
#define SOAP_TYPE_ns5__snoozeTaskAlarm (721)
/* ns5:snoozeTaskAlarm */
class SOAP_CMAC ns5__snoozeTaskAlarm : public ns5__snoozeAlarm
{
public:
	virtual int soap_type() const { return 721; } /* = unique id SOAP_TYPE_ns5__snoozeTaskAlarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__snoozeTaskAlarm() { ns5__snoozeTaskAlarm::soap_default(NULL); }
	virtual ~ns5__snoozeTaskAlarm() { }
};
#endif

#ifndef SOAP_TYPE_ns5__tagActionSelector
#define SOAP_TYPE_ns5__tagActionSelector (727)
/* ns5:tagActionSelector */
class SOAP_CMAC ns5__tagActionSelector : public ns5__actionSelector
{
public:
	ns5__retentionPolicy *retentionPolicy;	/* optional element of type ns5:retentionPolicy */
public:
	virtual int soap_type() const { return 727; } /* = unique id SOAP_TYPE_ns5__tagActionSelector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__tagActionSelector(): retentionPolicy(NULL) { ns5__tagActionSelector::soap_default(NULL); }
	virtual ~ns5__tagActionSelector() { }
};
#endif

#ifndef SOAP_TYPE_ns8__attr
#define SOAP_TYPE_ns8__attr (782)
/* Primitive ns8:attr schema type: */
class SOAP_CMAC ns8__attr
{
public:
	std::string __item;
	std::string name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 782; } /* = unique id SOAP_TYPE_ns8__attr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__attr(): soap(NULL) { ns8__attr::soap_default(NULL); }
	virtual ~ns8__attr() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMailPrefsFeature
#define SOAP_TYPE_ns8__voiceMailPrefsFeature (799)
/* ns8:voiceMailPrefsFeature */
class SOAP_CMAC ns8__voiceMailPrefsFeature : public ns8__callFeatureInfo
{
public:
	std::vector<ns8__prefInfo * >pref;	/* optional element of type ns8:prefInfo */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 799; } /* = unique id SOAP_TYPE_ns8__voiceMailPrefsFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMailPrefsFeature(): unusedCodeGenHelper(NULL) { ns8__voiceMailPrefsFeature::soap_default(NULL); }
	virtual ~ns8__voiceMailPrefsFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__prefInfo
#define SOAP_TYPE_ns8__prefInfo (801)
/* Primitive ns8:prefInfo schema type: */
class SOAP_CMAC ns8__prefInfo
{
public:
	std::string __item;
	std::string *name;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 801; } /* = unique id SOAP_TYPE_ns8__prefInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__prefInfo(): name(NULL), soap(NULL) { ns8__prefInfo::soap_default(NULL); }
	virtual ~ns8__prefInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__anonCallRejectionFeature
#define SOAP_TYPE_ns8__anonCallRejectionFeature (802)
/* ns8:anonCallRejectionFeature */
class SOAP_CMAC ns8__anonCallRejectionFeature : public ns8__callFeatureInfo
{
public:
	virtual int soap_type() const { return 802; } /* = unique id SOAP_TYPE_ns8__anonCallRejectionFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__anonCallRejectionFeature() { ns8__anonCallRejectionFeature::soap_default(NULL); }
	virtual ~ns8__anonCallRejectionFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callerIdBlockingFeature
#define SOAP_TYPE_ns8__callerIdBlockingFeature (803)
/* ns8:callerIdBlockingFeature */
class SOAP_CMAC ns8__callerIdBlockingFeature : public ns8__callFeatureInfo
{
public:
	virtual int soap_type() const { return 803; } /* = unique id SOAP_TYPE_ns8__callerIdBlockingFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callerIdBlockingFeature() { ns8__callerIdBlockingFeature::soap_default(NULL); }
	virtual ~ns8__callerIdBlockingFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callForwardFeature
#define SOAP_TYPE_ns8__callForwardFeature (804)
/* ns8:callForwardFeature */
class SOAP_CMAC ns8__callForwardFeature : public ns8__callFeatureInfo
{
public:
	std::string *ft;	/* optional attribute */
public:
	virtual int soap_type() const { return 804; } /* = unique id SOAP_TYPE_ns8__callForwardFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callForwardFeature(): ft(NULL) { ns8__callForwardFeature::soap_default(NULL); }
	virtual ~ns8__callForwardFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callForwardBusyLineFeature
#define SOAP_TYPE_ns8__callForwardBusyLineFeature (805)
/* ns8:callForwardBusyLineFeature */
class SOAP_CMAC ns8__callForwardBusyLineFeature : public ns8__callFeatureInfo
{
public:
	std::string *ft;	/* optional attribute */
public:
	virtual int soap_type() const { return 805; } /* = unique id SOAP_TYPE_ns8__callForwardBusyLineFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callForwardBusyLineFeature(): ft(NULL) { ns8__callForwardBusyLineFeature::soap_default(NULL); }
	virtual ~ns8__callForwardBusyLineFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callForwardNoAnswerFeature
#define SOAP_TYPE_ns8__callForwardNoAnswerFeature (806)
/* ns8:callForwardNoAnswerFeature */
class SOAP_CMAC ns8__callForwardNoAnswerFeature : public ns8__callFeatureInfo
{
public:
	std::string *ft;	/* optional attribute */
	std::string *nr;	/* optional attribute */
public:
	virtual int soap_type() const { return 806; } /* = unique id SOAP_TYPE_ns8__callForwardNoAnswerFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callForwardNoAnswerFeature(): ft(NULL), nr(NULL) { ns8__callForwardNoAnswerFeature::soap_default(NULL); }
	virtual ~ns8__callForwardNoAnswerFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callWaitingFeature
#define SOAP_TYPE_ns8__callWaitingFeature (807)
/* ns8:callWaitingFeature */
class SOAP_CMAC ns8__callWaitingFeature : public ns8__callFeatureInfo
{
public:
	virtual int soap_type() const { return 807; } /* = unique id SOAP_TYPE_ns8__callWaitingFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callWaitingFeature() { ns8__callWaitingFeature::soap_default(NULL); }
	virtual ~ns8__callWaitingFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__featureWithCallerList
#define SOAP_TYPE_ns8__featureWithCallerList (809)
/* ns8:featureWithCallerList */
class SOAP_CMAC ns8__featureWithCallerList : public ns8__callFeatureInfo
{
public:
	std::vector<ns8__callerListEntry * >phone;	/* optional element of type ns8:callerListEntry */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 809; } /* = unique id SOAP_TYPE_ns8__featureWithCallerList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__featureWithCallerList(): unusedCodeGenHelper(NULL) { ns8__featureWithCallerList::soap_default(NULL); }
	virtual ~ns8__featureWithCallerList() { }
};
#endif

#ifndef SOAP_TYPE_ns8__rootVoiceFolder
#define SOAP_TYPE_ns8__rootVoiceFolder (818)
/* ns8:rootVoiceFolder */
class SOAP_CMAC ns8__rootVoiceFolder : public ns8__voiceFolder
{
public:
	std::vector<ns8__voiceFolder * >folder;	/* optional element of type ns8:voiceFolder */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 818; } /* = unique id SOAP_TYPE_ns8__rootVoiceFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__rootVoiceFolder(): unusedCodeGenHelper(NULL) { ns8__rootVoiceFolder::soap_default(NULL); }
	virtual ~ns8__rootVoiceFolder() { }
};
#endif

#ifndef SOAP_TYPE_ns8__voiceMailItem
#define SOAP_TYPE_ns8__voiceMailItem (845)
/* ns8:voiceMailItem */
class SOAP_CMAC ns8__voiceMailItem : public ns8__voiceCallItem
{
public:
	ns8__voiceMailCallParty *cp;	/* optional element of type ns8:voiceMailCallParty */
	ns8__voiceMailContent *content;	/* optional element of type ns8:voiceMailContent */
	std::string id;	/* required attribute */
	std::string *f;	/* optional attribute */
public:
	virtual int soap_type() const { return 845; } /* = unique id SOAP_TYPE_ns8__voiceMailItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__voiceMailItem(): cp(NULL), content(NULL), f(NULL) { ns8__voiceMailItem::soap_default(NULL); }
	virtual ~ns8__voiceMailItem() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callLogItem
#define SOAP_TYPE_ns8__callLogItem (849)
/* ns8:callLogItem */
class SOAP_CMAC ns8__callLogItem : public ns8__voiceCallItem
{
public:
	std::vector<class ns8__callLogCallParty * >cp;	/* optional element of type ns8:callLogCallParty */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 849; } /* = unique id SOAP_TYPE_ns8__callLogItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callLogItem(): unusedCodeGenHelper(NULL) { ns8__callLogItem::soap_default(NULL); }
	virtual ~ns8__callLogItem() { }
};
#endif

#ifndef SOAP_TYPE_ns8__callLogCallParty
#define SOAP_TYPE_ns8__callLogCallParty (850)
/* ns8:callLogCallParty */
class SOAP_CMAC ns8__callLogCallParty : public ns8__voiceMailCallParty
{
public:
	std::string ci;	/* required attribute */
	std::string st;	/* required attribute */
	std::string co;	/* required attribute */
public:
	virtual int soap_type() const { return 850; } /* = unique id SOAP_TYPE_ns8__callLogCallParty */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__callLogCallParty() { ns8__callLogCallParty::soap_default(NULL); }
	virtual ~ns8__callLogCallParty() { }
};
#endif

#ifndef SOAP_TYPE_ns3__contactAttr
#define SOAP_TYPE_ns3__contactAttr (11)
/* Primitive ns3:contactAttr schema type: */
class SOAP_CMAC ns3__contactAttr : public ns3__keyValuePair
{
public:
	std::string *part;	/* optional attribute */
	std::string *ct;	/* optional attribute */
	int *s;	/* optional attribute */
	std::string *filename;	/* optional attribute */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns3__contactAttr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__contactAttr(): part(NULL), ct(NULL), s(NULL), filename(NULL) { ns3__contactAttr::soap_default(NULL); }
	virtual ~ns3__contactAttr() { }
};
#endif

#ifndef SOAP_TYPE_ns5__invitationInfo
#define SOAP_TYPE_ns5__invitationInfo (195)
/* ns5:invitationInfo */
class SOAP_CMAC ns5__invitationInfo : public ns5__inviteComponent
{
public:
	ns5__rawInvite *content;	/* optional element of type ns5:rawInvite */
	ns5__inviteComponent *comp;	/* optional element of type ns5:inviteComponent */
	std::vector<ns5__calTZInfo * >tz;	/* optional element of type ns5:calTZInfo */
	std::vector<ns5__mimePartInfo * >mp;	/* optional element of type ns5:mimePartInfo */
	ns5__attachmentsInfo *attach;	/* optional element of type ns5:attachmentsInfo */
	std::string *id;	/* optional attribute */
	std::string *ct;	/* optional attribute */
	std::string *ci;	/* optional attribute */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE_ns5__invitationInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__invitationInfo(): content(NULL), comp(NULL), attach(NULL), id(NULL), ct(NULL), ci(NULL) { ns5__invitationInfo::soap_default(NULL); }
	virtual ~ns5__invitationInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__chatSummary
#define SOAP_TYPE_ns5__chatSummary (244)
/* ns5:chatSummary */
class SOAP_CMAC ns5__chatSummary : public ns5__messageSummary
{
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE_ns5__chatSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__chatSummary() { ns5__chatSummary::soap_default(NULL); }
	virtual ~ns5__chatSummary() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createTaskExceptionRequest
#define SOAP_TYPE_ns5__createTaskExceptionRequest (371)
/* ns5:createTaskExceptionRequest */
class SOAP_CMAC ns5__createTaskExceptionRequest : public ns5__createAppointmentExceptionRequest
{
public:
	virtual int soap_type() const { return 371; } /* = unique id SOAP_TYPE_ns5__createTaskExceptionRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createTaskExceptionRequest() { ns5__createTaskExceptionRequest::soap_default(NULL); }
	virtual ~ns5__createTaskExceptionRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__createTaskRequest
#define SOAP_TYPE_ns5__createTaskRequest (373)
/* ns5:createTaskRequest */
class SOAP_CMAC ns5__createTaskRequest : public ns5__createAppointmentRequest
{
public:
	virtual int soap_type() const { return 373; } /* = unique id SOAP_TYPE_ns5__createTaskRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__createTaskRequest() { ns5__createTaskRequest::soap_default(NULL); }
	virtual ~ns5__createTaskRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__imapDataSourceNameOrId
#define SOAP_TYPE_ns5__imapDataSourceNameOrId (380)
/* ns5:imapDataSourceNameOrId */
class SOAP_CMAC ns5__imapDataSourceNameOrId : public ns5__dataSourceNameOrId
{
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE_ns5__imapDataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__imapDataSourceNameOrId() { ns5__imapDataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__imapDataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__pop3DataSourceNameOrId
#define SOAP_TYPE_ns5__pop3DataSourceNameOrId (383)
/* ns5:pop3DataSourceNameOrId */
class SOAP_CMAC ns5__pop3DataSourceNameOrId : public ns5__dataSourceNameOrId
{
public:
	virtual int soap_type() const { return 383; } /* = unique id SOAP_TYPE_ns5__pop3DataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__pop3DataSourceNameOrId() { ns5__pop3DataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__pop3DataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__caldavDataSourceNameOrId
#define SOAP_TYPE_ns5__caldavDataSourceNameOrId (384)
/* ns5:caldavDataSourceNameOrId */
class SOAP_CMAC ns5__caldavDataSourceNameOrId : public ns5__dataSourceNameOrId
{
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE_ns5__caldavDataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__caldavDataSourceNameOrId() { ns5__caldavDataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__caldavDataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__yabDataSourceNameOrId
#define SOAP_TYPE_ns5__yabDataSourceNameOrId (385)
/* ns5:yabDataSourceNameOrId */
class SOAP_CMAC ns5__yabDataSourceNameOrId : public ns5__dataSourceNameOrId
{
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE_ns5__yabDataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__yabDataSourceNameOrId() { ns5__yabDataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__yabDataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__rssDataSourceNameOrId
#define SOAP_TYPE_ns5__rssDataSourceNameOrId (386)
/* ns5:rssDataSourceNameOrId */
class SOAP_CMAC ns5__rssDataSourceNameOrId : public ns5__dataSourceNameOrId
{
public:
	virtual int soap_type() const { return 386; } /* = unique id SOAP_TYPE_ns5__rssDataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__rssDataSourceNameOrId() { ns5__rssDataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__rssDataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__galDataSourceNameOrId
#define SOAP_TYPE_ns5__galDataSourceNameOrId (387)
/* ns5:galDataSourceNameOrId */
class SOAP_CMAC ns5__galDataSourceNameOrId : public ns5__dataSourceNameOrId
{
public:
	virtual int soap_type() const { return 387; } /* = unique id SOAP_TYPE_ns5__galDataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__galDataSourceNameOrId() { ns5__galDataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__galDataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calDataSourceNameOrId
#define SOAP_TYPE_ns5__calDataSourceNameOrId (388)
/* ns5:calDataSourceNameOrId */
class SOAP_CMAC ns5__calDataSourceNameOrId : public ns5__dataSourceNameOrId
{
public:
	virtual int soap_type() const { return 388; } /* = unique id SOAP_TYPE_ns5__calDataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calDataSourceNameOrId() { ns5__calDataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__calDataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__unknownDataSourceNameOrId
#define SOAP_TYPE_ns5__unknownDataSourceNameOrId (389)
/* ns5:unknownDataSourceNameOrId */
class SOAP_CMAC ns5__unknownDataSourceNameOrId : public ns5__dataSourceNameOrId
{
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE_ns5__unknownDataSourceNameOrId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__unknownDataSourceNameOrId() { ns5__unknownDataSourceNameOrId::soap_default(NULL); }
	virtual ~ns5__unknownDataSourceNameOrId() { }
};
#endif

#ifndef SOAP_TYPE_ns5__commonCalendaringData
#define SOAP_TYPE_ns5__commonCalendaringData (446)
/* ns5:commonCalendaringData */
class SOAP_CMAC ns5__commonCalendaringData : public ns5__instanceDataAttrs
{
public:
	std::string x_USCOREuid;	/* required attribute */
	std::string uid;	/* required attribute */
	std::string *f;	/* optional attribute */
	std::string *t;	/* optional attribute */
	std::string *tn;	/* optional attribute */
	std::string *l;	/* optional attribute */
	LONG64 *s;	/* optional attribute */
	LONG64 *md;	/* optional attribute */
	int *ms;	/* optional attribute */
	int *rev;	/* optional attribute */
	std::string *id;	/* optional attribute */
public:
	virtual int soap_type() const { return 446; } /* = unique id SOAP_TYPE_ns5__commonCalendaringData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__commonCalendaringData(): f(NULL), t(NULL), tn(NULL), l(NULL), s(NULL), md(NULL), ms(NULL), rev(NULL), id(NULL) { ns5__commonCalendaringData::soap_default(NULL); }
	virtual ~ns5__commonCalendaringData() { }
};
#endif

#ifndef SOAP_TYPE_ns5__legacyInstanceDataInfo
#define SOAP_TYPE_ns5__legacyInstanceDataInfo (449)
/* ns5:legacyInstanceDataInfo */
class SOAP_CMAC ns5__legacyInstanceDataInfo : public ns5__legacyInstanceDataAttrs
{
public:
	ns5__calOrganizer *or_;	/* optional element of type ns5:calOrganizer */
	std::vector<std::string >category;	/* optional element of type xsd:string */
	ns5__geoInfo *geo;	/* optional element of type ns5:geoInfo */
	std::string *fr;	/* optional element of type xsd:string */
	LONG64 *s;	/* optional attribute */
	bool *ex;	/* optional attribute */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE_ns5__legacyInstanceDataInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__legacyInstanceDataInfo(): or_(NULL), geo(NULL), fr(NULL), s(NULL), ex(NULL) { ns5__legacyInstanceDataInfo::soap_default(NULL); }
	virtual ~ns5__legacyInstanceDataInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__chatMessageInfo
#define SOAP_TYPE_ns5__chatMessageInfo (464)
/* ns5:chatMessageInfo */
class SOAP_CMAC ns5__chatMessageInfo : public ns5__messageInfo
{
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE_ns5__chatMessageInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__chatMessageInfo() { ns5__chatMessageInfo::soap_default(NULL); }
	virtual ~ns5__chatMessageInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyTaskRequest
#define SOAP_TYPE_ns5__modifyTaskRequest (648)
/* ns5:modifyTaskRequest */
class SOAP_CMAC ns5__modifyTaskRequest : public ns5__modifyAppointmentRequest
{
public:
	virtual int soap_type() const { return 648; } /* = unique id SOAP_TYPE_ns5__modifyTaskRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyTaskRequest() { ns5__modifyTaskRequest::soap_default(NULL); }
	virtual ~ns5__modifyTaskRequest() { }
};
#endif

#ifndef SOAP_TYPE_ns5__modifyTaskResponse
#define SOAP_TYPE_ns5__modifyTaskResponse (649)
/* ns5:modifyTaskResponse */
class SOAP_CMAC ns5__modifyTaskResponse : public ns5__modifyAppointmentResponse
{
public:
	virtual int soap_type() const { return 649; } /* = unique id SOAP_TYPE_ns5__modifyTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__modifyTaskResponse() { ns5__modifyTaskResponse::soap_default(NULL); }
	virtual ~ns5__modifyTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__messageHitInfo
#define SOAP_TYPE_ns5__messageHitInfo (682)
/* ns5:messageHitInfo */
class SOAP_CMAC ns5__messageHitInfo : public ns5__messageInfo
{
public:
	std::vector<ns5__part * >hp;	/* optional element of type ns5:part */
	std::string *sf;	/* optional attribute */
	bool *cm;	/* optional attribute */
public:
	virtual int soap_type() const { return 682; } /* = unique id SOAP_TYPE_ns5__messageHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__messageHitInfo(): sf(NULL), cm(NULL) { ns5__messageHitInfo::soap_default(NULL); }
	virtual ~ns5__messageHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__documentHitInfo
#define SOAP_TYPE_ns5__documentHitInfo (691)
/* ns5:documentHitInfo */
class SOAP_CMAC ns5__documentHitInfo : public ns5__documentInfo
{
public:
	std::string *sf;	/* optional attribute */
public:
	virtual int soap_type() const { return 691; } /* = unique id SOAP_TYPE_ns5__documentHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__documentHitInfo(): sf(NULL) { ns5__documentHitInfo::soap_default(NULL); }
	virtual ~ns5__documentHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__instanceDataInfo
#define SOAP_TYPE_ns5__instanceDataInfo (695)
/* ns5:instanceDataInfo */
class SOAP_CMAC ns5__instanceDataInfo : public ns5__instanceDataAttrs
{
public:
	ns5__calOrganizer *or_;	/* optional element of type ns5:calOrganizer */
	std::vector<std::string >category;	/* optional element of type xsd:string */
	ns5__geoInfo *geo;	/* optional element of type ns5:geoInfo */
	std::string *fr;	/* optional element of type xsd:string */
	LONG64 *s;	/* optional attribute */
	bool *ex;	/* optional attribute */
public:
	virtual int soap_type() const { return 695; } /* = unique id SOAP_TYPE_ns5__instanceDataInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__instanceDataInfo(): or_(NULL), geo(NULL), fr(NULL), s(NULL), ex(NULL) { ns5__instanceDataInfo::soap_default(NULL); }
	virtual ~ns5__instanceDataInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns8__selectiveCallForwardFeature
#define SOAP_TYPE_ns8__selectiveCallForwardFeature (808)
/* ns8:selectiveCallForwardFeature */
class SOAP_CMAC ns8__selectiveCallForwardFeature : public ns8__featureWithCallerList
{
public:
	std::string *ft;	/* optional attribute */
public:
	virtual int soap_type() const { return 808; } /* = unique id SOAP_TYPE_ns8__selectiveCallForwardFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__selectiveCallForwardFeature(): ft(NULL) { ns8__selectiveCallForwardFeature::soap_default(NULL); }
	virtual ~ns8__selectiveCallForwardFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__selectiveCallAcceptanceFeature
#define SOAP_TYPE_ns8__selectiveCallAcceptanceFeature (811)
/* ns8:selectiveCallAcceptanceFeature */
class SOAP_CMAC ns8__selectiveCallAcceptanceFeature : public ns8__featureWithCallerList
{
public:
	virtual int soap_type() const { return 811; } /* = unique id SOAP_TYPE_ns8__selectiveCallAcceptanceFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__selectiveCallAcceptanceFeature() { ns8__selectiveCallAcceptanceFeature::soap_default(NULL); }
	virtual ~ns8__selectiveCallAcceptanceFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns8__selectiveCallRejectionFeature
#define SOAP_TYPE_ns8__selectiveCallRejectionFeature (812)
/* ns8:selectiveCallRejectionFeature */
class SOAP_CMAC ns8__selectiveCallRejectionFeature : public ns8__featureWithCallerList
{
public:
	virtual int soap_type() const { return 812; } /* = unique id SOAP_TYPE_ns8__selectiveCallRejectionFeature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__selectiveCallRejectionFeature() { ns8__selectiveCallRejectionFeature::soap_default(NULL); }
	virtual ~ns8__selectiveCallRejectionFeature() { }
};
#endif

#ifndef SOAP_TYPE_ns5__legacyCalendaringData
#define SOAP_TYPE_ns5__legacyCalendaringData (445)
/* ns5:legacyCalendaringData */
class SOAP_CMAC ns5__legacyCalendaringData : public ns5__commonCalendaringData
{
public:
	ns5__calOrganizer *or_;	/* optional element of type ns5:calOrganizer */
	std::vector<std::string >category;	/* optional element of type xsd:string */
	ns5__geoInfo *geo;	/* optional element of type ns5:geoInfo */
	std::string *fr;	/* optional element of type xsd:string */
	std::vector<ns5__legacyInstanceDataInfo * >inst;	/* optional element of type ns5:legacyInstanceDataInfo */
	ns5__alarmDataInfo *alarmData;	/* optional element of type ns5:alarmDataInfo */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE_ns5__legacyCalendaringData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__legacyCalendaringData(): or_(NULL), geo(NULL), fr(NULL), alarmData(NULL) { ns5__legacyCalendaringData::soap_default(NULL); }
	virtual ~ns5__legacyCalendaringData() { }
};
#endif

#ifndef SOAP_TYPE_ns5__chatHitInfo
#define SOAP_TYPE_ns5__chatHitInfo (688)
/* ns5:chatHitInfo */
class SOAP_CMAC ns5__chatHitInfo : public ns5__messageHitInfo
{
public:
	virtual int soap_type() const { return 688; } /* = unique id SOAP_TYPE_ns5__chatHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__chatHitInfo() { ns5__chatHitInfo::soap_default(NULL); }
	virtual ~ns5__chatHitInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns5__calendarItemHitInfo_replies
#define SOAP_TYPE__ns5__calendarItemHitInfo_replies (1660)
/* ns5:calendarItemHitInfo-replies */
class SOAP_CMAC _ns5__calendarItemHitInfo_replies
{
public:
	std::vector<ns5__calReply * >reply;	/* optional element of type ns5:calReply */
	std::string *unusedCodeGenHelper;	/* optional attribute */
public:
	virtual int soap_type() const { return 1660; } /* = unique id SOAP_TYPE__ns5__calendarItemHitInfo_replies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__calendarItemHitInfo_replies(): unusedCodeGenHelper(NULL) { _ns5__calendarItemHitInfo_replies::soap_default(NULL); }
	virtual ~_ns5__calendarItemHitInfo_replies() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calendarItemHitInfo
#define SOAP_TYPE_ns5__calendarItemHitInfo (694)
/* ns5:calendarItemHitInfo */
class SOAP_CMAC ns5__calendarItemHitInfo : public ns5__commonCalendaringData
{
public:
	ns5__calOrganizer *or_;	/* optional element of type ns5:calOrganizer */
	std::vector<std::string >category;	/* optional element of type xsd:string */
	ns5__geoInfo *geo;	/* optional element of type ns5:geoInfo */
	std::string *fr;	/* optional element of type xsd:string */
	std::vector<ns5__instanceDataInfo * >inst;	/* optional element of type ns5:instanceDataInfo */
	ns5__alarmDataInfo *alarmData;	/* optional element of type ns5:alarmDataInfo */
	std::vector<ns5__invitation * >inv;	/* optional element of type ns5:invitation */
	_ns5__calendarItemHitInfo_replies *replies;	/* optional element of type ns5:calendarItemHitInfo-replies */
	std::string *sf;	/* optional attribute */
	LONG64 d;	/* required attribute */
	bool *cm;	/* optional attribute */
	LONG64 *nextAlarm;	/* optional attribute */
public:
	virtual int soap_type() const { return 694; } /* = unique id SOAP_TYPE_ns5__calendarItemHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calendarItemHitInfo(): or_(NULL), geo(NULL), fr(NULL), alarmData(NULL), replies(NULL), sf(NULL), cm(NULL), nextAlarm(NULL) { ns5__calendarItemHitInfo::soap_default(NULL); }
	virtual ~ns5__calendarItemHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__calendaringData
#define SOAP_TYPE_ns5__calendaringData (739)
/* ns5:calendaringData */
class SOAP_CMAC ns5__calendaringData : public ns5__commonCalendaringData
{
public:
	ns5__calOrganizer *or_;	/* optional element of type ns5:calOrganizer */
	std::vector<std::string >category;	/* optional element of type xsd:string */
	ns5__geoInfo *geo;	/* optional element of type ns5:geoInfo */
	std::string *fr;	/* optional element of type xsd:string */
	std::vector<ns5__instanceDataInfo * >inst;	/* optional element of type ns5:instanceDataInfo */
	ns5__alarmDataInfo *alarmData;	/* optional element of type ns5:alarmDataInfo */
	LONG64 *d;	/* optional attribute */
public:
	virtual int soap_type() const { return 739; } /* = unique id SOAP_TYPE_ns5__calendaringData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__calendaringData(): or_(NULL), geo(NULL), fr(NULL), alarmData(NULL), d(NULL) { ns5__calendaringData::soap_default(NULL); }
	virtual ~ns5__calendaringData() { }
};
#endif

#ifndef SOAP_TYPE_ns5__legacyAppointmentData
#define SOAP_TYPE_ns5__legacyAppointmentData (444)
/* ns5:legacyAppointmentData */
class SOAP_CMAC ns5__legacyAppointmentData : public ns5__legacyCalendaringData
{
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE_ns5__legacyAppointmentData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__legacyAppointmentData() { ns5__legacyAppointmentData::soap_default(NULL); }
	virtual ~ns5__legacyAppointmentData() { }
};
#endif

#ifndef SOAP_TYPE_ns5__legacyTaskData
#define SOAP_TYPE_ns5__legacyTaskData (451)
/* ns5:legacyTaskData */
class SOAP_CMAC ns5__legacyTaskData : public ns5__legacyCalendaringData
{
public:
	virtual int soap_type() const { return 451; } /* = unique id SOAP_TYPE_ns5__legacyTaskData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__legacyTaskData() { ns5__legacyTaskData::soap_default(NULL); }
	virtual ~ns5__legacyTaskData() { }
};
#endif

#ifndef SOAP_TYPE_ns5__appointmentHitInfo
#define SOAP_TYPE_ns5__appointmentHitInfo (693)
/* ns5:appointmentHitInfo */
class SOAP_CMAC ns5__appointmentHitInfo : public ns5__calendarItemHitInfo
{
public:
	virtual int soap_type() const { return 693; } /* = unique id SOAP_TYPE_ns5__appointmentHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__appointmentHitInfo() { ns5__appointmentHitInfo::soap_default(NULL); }
	virtual ~ns5__appointmentHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__taskHitInfo
#define SOAP_TYPE_ns5__taskHitInfo (697)
/* ns5:taskHitInfo */
class SOAP_CMAC ns5__taskHitInfo : public ns5__calendarItemHitInfo
{
public:
	virtual int soap_type() const { return 697; } /* = unique id SOAP_TYPE_ns5__taskHitInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__taskHitInfo() { ns5__taskHitInfo::soap_default(NULL); }
	virtual ~ns5__taskHitInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns5__appointmentData
#define SOAP_TYPE_ns5__appointmentData (738)
/* ns5:appointmentData */
class SOAP_CMAC ns5__appointmentData : public ns5__calendaringData
{
public:
	virtual int soap_type() const { return 738; } /* = unique id SOAP_TYPE_ns5__appointmentData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__appointmentData() { ns5__appointmentData::soap_default(NULL); }
	virtual ~ns5__appointmentData() { }
};
#endif

#ifndef SOAP_TYPE_ns5__taskData
#define SOAP_TYPE_ns5__taskData (741)
/* ns5:taskData */
class SOAP_CMAC ns5__taskData : public ns5__calendaringData
{
public:
	virtual int soap_type() const { return 741; } /* = unique id SOAP_TYPE_ns5__taskData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__taskData() { ns5__taskData::soap_default(NULL); }
	virtual ~ns5__taskData() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (1662)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	ns3__HeaderContext *ns3__context;	/* mustUnderstand */
};
#endif

#ifndef SOAP_TYPE___ns1__authRequest
#define SOAP_TYPE___ns1__authRequest (1667)
/* Operation wrapper: */
struct __ns1__authRequest
{
public:
	ns4__authRequest *ns4__AuthRequest;	/* optional element of type ns4:authRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__autoCompleteGalRequest
#define SOAP_TYPE___ns1__autoCompleteGalRequest (1671)
/* Operation wrapper: */
struct __ns1__autoCompleteGalRequest
{
public:
	ns4__autoCompleteGalRequest *ns4__AutoCompleteGalRequest;	/* optional element of type ns4:autoCompleteGalRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__changePasswordRequest
#define SOAP_TYPE___ns1__changePasswordRequest (1675)
/* Operation wrapper: */
struct __ns1__changePasswordRequest
{
public:
	ns4__changePasswordRequest *ns4__ChangePasswordRequest;	/* optional element of type ns4:changePasswordRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__checkLicenseRequest
#define SOAP_TYPE___ns1__checkLicenseRequest (1679)
/* Operation wrapper: */
struct __ns1__checkLicenseRequest
{
public:
	ns4__checkLicenseRequest *ns4__CheckLicenseRequest;	/* optional element of type ns4:checkLicenseRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__checkRightsRequest
#define SOAP_TYPE___ns1__checkRightsRequest (1683)
/* Operation wrapper: */
struct __ns1__checkRightsRequest
{
public:
	ns4__checkRightsRequest *ns4__CheckRightsRequest;	/* optional element of type ns4:checkRightsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createDistributionListRequest
#define SOAP_TYPE___ns1__createDistributionListRequest (1687)
/* Operation wrapper: */
struct __ns1__createDistributionListRequest
{
public:
	ns4__createDistributionListRequest *ns4__CreateDistributionListRequest;	/* optional element of type ns4:createDistributionListRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createIdentityRequest
#define SOAP_TYPE___ns1__createIdentityRequest (1691)
/* Operation wrapper: */
struct __ns1__createIdentityRequest
{
public:
	ns4__createIdentityRequest *ns4__CreateIdentityRequest;	/* optional element of type ns4:createIdentityRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createSignatureRequest
#define SOAP_TYPE___ns1__createSignatureRequest (1695)
/* Operation wrapper: */
struct __ns1__createSignatureRequest
{
public:
	ns4__createSignatureRequest *ns4__CreateSignatureRequest;	/* optional element of type ns4:createSignatureRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__deleteIdentityRequest
#define SOAP_TYPE___ns1__deleteIdentityRequest (1699)
/* Operation wrapper: */
struct __ns1__deleteIdentityRequest
{
public:
	ns4__deleteIdentityRequest *ns4__DeleteIdentityRequest;	/* optional element of type ns4:deleteIdentityRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__deleteSignatureRequest
#define SOAP_TYPE___ns1__deleteSignatureRequest (1703)
/* Operation wrapper: */
struct __ns1__deleteSignatureRequest
{
public:
	ns4__deleteSignatureRequest *ns4__DeleteSignatureRequest;	/* optional element of type ns4:deleteSignatureRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__discoverRightsRequest
#define SOAP_TYPE___ns1__discoverRightsRequest (1707)
/* Operation wrapper: */
struct __ns1__discoverRightsRequest
{
public:
	ns4__discoverRightsRequest *ns4__DiscoverRightsRequest;	/* optional element of type ns4:discoverRightsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__distributionListActionRequest
#define SOAP_TYPE___ns1__distributionListActionRequest (1711)
/* Operation wrapper: */
struct __ns1__distributionListActionRequest
{
public:
	ns4__distributionListActionRequest *ns4__DistributionListActionRequest;	/* optional element of type ns4:distributionListActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__endSessionRequest
#define SOAP_TYPE___ns1__endSessionRequest (1715)
/* Operation wrapper: */
struct __ns1__endSessionRequest
{
public:
	ns4__endSessionRequest *ns4__EndSessionRequest;	/* optional element of type ns4:endSessionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getAccountDistributionListsRequest
#define SOAP_TYPE___ns1__getAccountDistributionListsRequest (1719)
/* Operation wrapper: */
struct __ns1__getAccountDistributionListsRequest
{
public:
	ns4__getAccountDistributionListsRequest *ns4__GetAccountDistributionListsRequest;	/* optional element of type ns4:getAccountDistributionListsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getAccountInfoRequest
#define SOAP_TYPE___ns1__getAccountInfoRequest (1723)
/* Operation wrapper: */
struct __ns1__getAccountInfoRequest
{
public:
	ns4__getAccountInfoRequest *ns4__GetAccountInfoRequest;	/* optional element of type ns4:getAccountInfoRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getAllLocalesRequest
#define SOAP_TYPE___ns1__getAllLocalesRequest (1727)
/* Operation wrapper: */
struct __ns1__getAllLocalesRequest
{
public:
	ns4__getAllLocalesRequest *ns4__GetAllLocalesRequest;	/* optional element of type ns4:getAllLocalesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getAvailableCsvFormatsRequest
#define SOAP_TYPE___ns1__getAvailableCsvFormatsRequest (1731)
/* Operation wrapper: */
struct __ns1__getAvailableCsvFormatsRequest
{
public:
	ns4__getAvailableCsvFormatsRequest *ns4__GetAvailableCsvFormatsRequest;	/* optional element of type ns4:getAvailableCsvFormatsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getAvailableLocalesRequest
#define SOAP_TYPE___ns1__getAvailableLocalesRequest (1735)
/* Operation wrapper: */
struct __ns1__getAvailableLocalesRequest
{
public:
	ns4__getAvailableLocalesRequest *ns4__GetAvailableLocalesRequest;	/* optional element of type ns4:getAvailableLocalesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getAvailableSkinsRequest
#define SOAP_TYPE___ns1__getAvailableSkinsRequest (1739)
/* Operation wrapper: */
struct __ns1__getAvailableSkinsRequest
{
public:
	ns4__getAvailableSkinsRequest *ns4__GetAvailableSkinsRequest;	/* optional element of type ns4:getAvailableSkinsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getDistributionListMembersRequest
#define SOAP_TYPE___ns1__getDistributionListMembersRequest (1743)
/* Operation wrapper: */
struct __ns1__getDistributionListMembersRequest
{
public:
	ns4__getDistributionListMembersRequest *ns4__GetDistributionListMembersRequest;	/* optional element of type ns4:getDistributionListMembersRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getDistributionListRequest
#define SOAP_TYPE___ns1__getDistributionListRequest (1747)
/* Operation wrapper: */
struct __ns1__getDistributionListRequest
{
public:
	ns4__getDistributionListRequest *ns4__GetDistributionListRequest;	/* optional element of type ns4:getDistributionListRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getIdentitiesRequest
#define SOAP_TYPE___ns1__getIdentitiesRequest (1751)
/* Operation wrapper: */
struct __ns1__getIdentitiesRequest
{
public:
	ns4__getIdentitiesRequest *ns4__GetIdentitiesRequest;	/* optional element of type ns4:getIdentitiesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getInfoRequest
#define SOAP_TYPE___ns1__getInfoRequest (1755)
/* Operation wrapper: */
struct __ns1__getInfoRequest
{
public:
	ns4__getInfoRequest *ns4__GetInfoRequest;	/* optional element of type ns4:getInfoRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getPrefsRequest
#define SOAP_TYPE___ns1__getPrefsRequest (1759)
/* Operation wrapper: */
struct __ns1__getPrefsRequest
{
public:
	ns4__getPrefsRequest *ns4__GetPrefsRequest;	/* optional element of type ns4:getPrefsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getRightsRequest
#define SOAP_TYPE___ns1__getRightsRequest (1763)
/* Operation wrapper: */
struct __ns1__getRightsRequest
{
public:
	ns4__getRightsRequest *ns4__GetRightsRequest;	/* optional element of type ns4:getRightsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getSMIMEPublicCertsRequest
#define SOAP_TYPE___ns1__getSMIMEPublicCertsRequest (1767)
/* Operation wrapper: */
struct __ns1__getSMIMEPublicCertsRequest
{
public:
	ns4__getSMIMEPublicCertsRequest *ns4__GetSMIMEPublicCertsRequest;	/* optional element of type ns4:getSMIMEPublicCertsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getShareInfoRequest
#define SOAP_TYPE___ns1__getShareInfoRequest (1771)
/* Operation wrapper: */
struct __ns1__getShareInfoRequest
{
public:
	ns4__getShareInfoRequest *ns4__GetShareInfoRequest;	/* optional element of type ns4:getShareInfoRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getSignaturesRequest
#define SOAP_TYPE___ns1__getSignaturesRequest (1775)
/* Operation wrapper: */
struct __ns1__getSignaturesRequest
{
public:
	ns4__getSignaturesRequest *ns4__GetSignaturesRequest;	/* optional element of type ns4:getSignaturesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getVersionInfoRequest
#define SOAP_TYPE___ns1__getVersionInfoRequest (1779)
/* Operation wrapper: */
struct __ns1__getVersionInfoRequest
{
public:
	ns4__getVersionInfoRequest *ns4__GetVersionInfoRequest;	/* optional element of type ns4:getVersionInfoRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getWhiteBlackListRequest
#define SOAP_TYPE___ns1__getWhiteBlackListRequest (1783)
/* Operation wrapper: */
struct __ns1__getWhiteBlackListRequest
{
public:
	ns4__getWhiteBlackListRequest *ns4__GetWhiteBlackListRequest;	/* optional element of type ns4:getWhiteBlackListRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__grantRightsRequest
#define SOAP_TYPE___ns1__grantRightsRequest (1787)
/* Operation wrapper: */
struct __ns1__grantRightsRequest
{
public:
	ns4__grantRightsRequest *ns4__GrantRightsRequest;	/* optional element of type ns4:grantRightsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyIdentityRequest
#define SOAP_TYPE___ns1__modifyIdentityRequest (1791)
/* Operation wrapper: */
struct __ns1__modifyIdentityRequest
{
public:
	ns4__modifyIdentityRequest *ns4__ModifyIdentityRequest;	/* optional element of type ns4:modifyIdentityRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyPrefsRequest
#define SOAP_TYPE___ns1__modifyPrefsRequest (1795)
/* Operation wrapper: */
struct __ns1__modifyPrefsRequest
{
public:
	ns4__modifyPrefsRequest *ns4__ModifyPrefsRequest;	/* optional element of type ns4:modifyPrefsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyPropertiesRequest
#define SOAP_TYPE___ns1__modifyPropertiesRequest (1799)
/* Operation wrapper: */
struct __ns1__modifyPropertiesRequest
{
public:
	ns4__modifyPropertiesRequest *ns4__ModifyPropertiesRequest;	/* optional element of type ns4:modifyPropertiesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifySignatureRequest
#define SOAP_TYPE___ns1__modifySignatureRequest (1803)
/* Operation wrapper: */
struct __ns1__modifySignatureRequest
{
public:
	ns4__modifySignatureRequest *ns4__ModifySignatureRequest;	/* optional element of type ns4:modifySignatureRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyWhiteBlackListRequest
#define SOAP_TYPE___ns1__modifyWhiteBlackListRequest (1807)
/* Operation wrapper: */
struct __ns1__modifyWhiteBlackListRequest
{
public:
	ns4__modifyWhiteBlackListRequest *ns4__ModifyWhiteBlackListRequest;	/* optional element of type ns4:modifyWhiteBlackListRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyZimletPrefsRequest
#define SOAP_TYPE___ns1__modifyZimletPrefsRequest (1811)
/* Operation wrapper: */
struct __ns1__modifyZimletPrefsRequest
{
public:
	ns4__modifyZimletPrefsRequest *ns4__ModifyZimletPrefsRequest;	/* optional element of type ns4:modifyZimletPrefsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__revokeRightsRequest
#define SOAP_TYPE___ns1__revokeRightsRequest (1815)
/* Operation wrapper: */
struct __ns1__revokeRightsRequest
{
public:
	ns4__revokeRightsRequest *ns4__RevokeRightsRequest;	/* optional element of type ns4:revokeRightsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__searchCalendarResourcesRequest
#define SOAP_TYPE___ns1__searchCalendarResourcesRequest (1819)
/* Operation wrapper: */
struct __ns1__searchCalendarResourcesRequest
{
public:
	ns4__searchCalendarResourcesRequest *ns4__SearchCalendarResourcesRequest;	/* optional element of type ns4:searchCalendarResourcesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__searchGalRequest
#define SOAP_TYPE___ns1__searchGalRequest (1823)
/* Operation wrapper: */
struct __ns1__searchGalRequest
{
public:
	ns4__searchGalRequest *ns4__SearchGalRequest;	/* optional element of type ns4:searchGalRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__subscribeDistributionListRequest
#define SOAP_TYPE___ns1__subscribeDistributionListRequest (1827)
/* Operation wrapper: */
struct __ns1__subscribeDistributionListRequest
{
public:
	ns4__subscribeDistributionListRequest *ns4__SubscribeDistributionListRequest;	/* optional element of type ns4:subscribeDistributionListRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__syncGalRequest
#define SOAP_TYPE___ns1__syncGalRequest (1831)
/* Operation wrapper: */
struct __ns1__syncGalRequest
{
public:
	ns4__syncGalRequest *ns4__SyncGalRequest;	/* optional element of type ns4:syncGalRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__addAppointmentInviteRequest
#define SOAP_TYPE___ns1__addAppointmentInviteRequest (1835)
/* Operation wrapper: */
struct __ns1__addAppointmentInviteRequest
{
public:
	ns5__addAppointmentInviteRequest *ns5__AddAppointmentInviteRequest;	/* optional element of type ns5:addAppointmentInviteRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__addCommentRequest
#define SOAP_TYPE___ns1__addCommentRequest (1839)
/* Operation wrapper: */
struct __ns1__addCommentRequest
{
public:
	ns5__addCommentRequest *ns5__AddCommentRequest;	/* optional element of type ns5:addCommentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__addMsgRequest
#define SOAP_TYPE___ns1__addMsgRequest (1843)
/* Operation wrapper: */
struct __ns1__addMsgRequest
{
public:
	ns5__addMsgRequest *ns5__AddMsgRequest;	/* optional element of type ns5:addMsgRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__addTaskInviteRequest
#define SOAP_TYPE___ns1__addTaskInviteRequest (1847)
/* Operation wrapper: */
struct __ns1__addTaskInviteRequest
{
public:
	ns5__addTaskInviteRequest *ns5__AddTaskInviteRequest;	/* optional element of type ns5:addTaskInviteRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__announceOrganizerChangeRequest
#define SOAP_TYPE___ns1__announceOrganizerChangeRequest (1851)
/* Operation wrapper: */
struct __ns1__announceOrganizerChangeRequest
{
public:
	ns5__announceOrganizerChangeRequest *ns5__AnnounceOrganizerChangeRequest;	/* optional element of type ns5:announceOrganizerChangeRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__applyFilterRulesRequest
#define SOAP_TYPE___ns1__applyFilterRulesRequest (1855)
/* Operation wrapper: */
struct __ns1__applyFilterRulesRequest
{
public:
	ns5__applyFilterRulesRequest *ns5__ApplyFilterRulesRequest;	/* optional element of type ns5:applyFilterRulesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__applyOutgoingFilterRulesRequest
#define SOAP_TYPE___ns1__applyOutgoingFilterRulesRequest (1859)
/* Operation wrapper: */
struct __ns1__applyOutgoingFilterRulesRequest
{
public:
	ns5__applyOutgoingFilterRulesRequest *ns5__ApplyOutgoingFilterRulesRequest;	/* optional element of type ns5:applyOutgoingFilterRulesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__autoCompleteRequest
#define SOAP_TYPE___ns1__autoCompleteRequest (1863)
/* Operation wrapper: */
struct __ns1__autoCompleteRequest
{
public:
	ns5__autoCompleteRequest *ns5__AutoCompleteRequest;	/* optional element of type ns5:autoCompleteRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__bounceMsgRequest
#define SOAP_TYPE___ns1__bounceMsgRequest (1867)
/* Operation wrapper: */
struct __ns1__bounceMsgRequest
{
public:
	ns5__bounceMsgRequest *ns5__BounceMsgRequest;	/* optional element of type ns5:bounceMsgRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__browseRequest
#define SOAP_TYPE___ns1__browseRequest (1871)
/* Operation wrapper: */
struct __ns1__browseRequest
{
public:
	ns5__browseRequest *ns5__BrowseRequest;	/* optional element of type ns5:browseRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__cancelAppointmentRequest
#define SOAP_TYPE___ns1__cancelAppointmentRequest (1875)
/* Operation wrapper: */
struct __ns1__cancelAppointmentRequest
{
public:
	ns5__cancelAppointmentRequest *ns5__CancelAppointmentRequest;	/* optional element of type ns5:cancelAppointmentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__cancelTaskRequest
#define SOAP_TYPE___ns1__cancelTaskRequest (1879)
/* Operation wrapper: */
struct __ns1__cancelTaskRequest
{
public:
	ns5__cancelTaskRequest *ns5__CancelTaskRequest;	/* optional element of type ns5:cancelTaskRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__checkDeviceStatusRequest
#define SOAP_TYPE___ns1__checkDeviceStatusRequest (1883)
/* Operation wrapper: */
struct __ns1__checkDeviceStatusRequest
{
public:
	ns5__checkDeviceStatusRequest *ns5__CheckDeviceStatusRequest;	/* optional element of type ns5:checkDeviceStatusRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__checkPermissionRequest
#define SOAP_TYPE___ns1__checkPermissionRequest (1887)
/* Operation wrapper: */
struct __ns1__checkPermissionRequest
{
public:
	ns5__checkPermissionRequest *ns5__CheckPermissionRequest;	/* optional element of type ns5:checkPermissionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__checkRecurConflictsRequest
#define SOAP_TYPE___ns1__checkRecurConflictsRequest (1891)
/* Operation wrapper: */
struct __ns1__checkRecurConflictsRequest
{
public:
	ns5__checkRecurConflictsRequest *ns5__CheckRecurConflictsRequest;	/* optional element of type ns5:checkRecurConflictsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__checkSpellingRequest
#define SOAP_TYPE___ns1__checkSpellingRequest (1895)
/* Operation wrapper: */
struct __ns1__checkSpellingRequest
{
public:
	ns5__checkSpellingRequest *ns5__CheckSpellingRequest;	/* optional element of type ns5:checkSpellingRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__completeTaskInstanceRequest
#define SOAP_TYPE___ns1__completeTaskInstanceRequest (1899)
/* Operation wrapper: */
struct __ns1__completeTaskInstanceRequest
{
public:
	ns5__completeTaskInstanceRequest *ns5__CompleteTaskInstanceRequest;	/* optional element of type ns5:completeTaskInstanceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__contactActionRequest
#define SOAP_TYPE___ns1__contactActionRequest (1903)
/* Operation wrapper: */
struct __ns1__contactActionRequest
{
public:
	ns5__contactActionRequest *ns5__ContactActionRequest;	/* optional element of type ns5:contactActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__convActionRequest
#define SOAP_TYPE___ns1__convActionRequest (1907)
/* Operation wrapper: */
struct __ns1__convActionRequest
{
public:
	ns5__convActionRequest *ns5__ConvActionRequest;	/* optional element of type ns5:convActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__counterAppointmentRequest
#define SOAP_TYPE___ns1__counterAppointmentRequest (1911)
/* Operation wrapper: */
struct __ns1__counterAppointmentRequest
{
public:
	ns5__counterAppointmentRequest *ns5__CounterAppointmentRequest;	/* optional element of type ns5:counterAppointmentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createAppointmentExceptionRequest
#define SOAP_TYPE___ns1__createAppointmentExceptionRequest (1915)
/* Operation wrapper: */
struct __ns1__createAppointmentExceptionRequest
{
public:
	ns5__createAppointmentExceptionRequest *ns5__CreateAppointmentExceptionRequest;	/* optional element of type ns5:createAppointmentExceptionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createAppointmentRequest
#define SOAP_TYPE___ns1__createAppointmentRequest (1919)
/* Operation wrapper: */
struct __ns1__createAppointmentRequest
{
public:
	ns5__createAppointmentRequest *ns5__CreateAppointmentRequest;	/* optional element of type ns5:createAppointmentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createContactRequest
#define SOAP_TYPE___ns1__createContactRequest (1923)
/* Operation wrapper: */
struct __ns1__createContactRequest
{
public:
	ns5__createContactRequest *ns5__CreateContactRequest;	/* optional element of type ns5:createContactRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createDataSourceRequest
#define SOAP_TYPE___ns1__createDataSourceRequest (1927)
/* Operation wrapper: */
struct __ns1__createDataSourceRequest
{
public:
	ns5__createDataSourceRequest *ns5__CreateDataSourceRequest;	/* optional element of type ns5:createDataSourceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createFolderRequest
#define SOAP_TYPE___ns1__createFolderRequest (1931)
/* Operation wrapper: */
struct __ns1__createFolderRequest
{
public:
	ns5__createFolderRequest *ns5__CreateFolderRequest;	/* optional element of type ns5:createFolderRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createMountpointRequest
#define SOAP_TYPE___ns1__createMountpointRequest (1935)
/* Operation wrapper: */
struct __ns1__createMountpointRequest
{
public:
	ns5__createMountpointRequest *ns5__CreateMountpointRequest;	/* optional element of type ns5:createMountpointRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createNoteRequest
#define SOAP_TYPE___ns1__createNoteRequest (1939)
/* Operation wrapper: */
struct __ns1__createNoteRequest
{
public:
	ns5__createNoteRequest *ns5__CreateNoteRequest;	/* optional element of type ns5:createNoteRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createSearchFolderRequest
#define SOAP_TYPE___ns1__createSearchFolderRequest (1943)
/* Operation wrapper: */
struct __ns1__createSearchFolderRequest
{
public:
	ns5__createSearchFolderRequest *ns5__CreateSearchFolderRequest;	/* optional element of type ns5:createSearchFolderRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createTagRequest
#define SOAP_TYPE___ns1__createTagRequest (1947)
/* Operation wrapper: */
struct __ns1__createTagRequest
{
public:
	ns5__createTagRequest *ns5__CreateTagRequest;	/* optional element of type ns5:createTagRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createTaskExceptionRequest
#define SOAP_TYPE___ns1__createTaskExceptionRequest (1951)
/* Operation wrapper: */
struct __ns1__createTaskExceptionRequest
{
public:
	ns5__createTaskExceptionRequest *ns5__CreateTaskExceptionRequest;	/* optional element of type ns5:createTaskExceptionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createTaskRequest
#define SOAP_TYPE___ns1__createTaskRequest (1955)
/* Operation wrapper: */
struct __ns1__createTaskRequest
{
public:
	ns5__createTaskRequest *ns5__CreateTaskRequest;	/* optional element of type ns5:createTaskRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__createWaitSetRequest
#define SOAP_TYPE___ns1__createWaitSetRequest (1959)
/* Operation wrapper: */
struct __ns1__createWaitSetRequest
{
public:
	ns5__createWaitSetRequest *ns5__CreateWaitSetRequest;	/* optional element of type ns5:createWaitSetRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__declineCounterAppointmentRequest
#define SOAP_TYPE___ns1__declineCounterAppointmentRequest (1963)
/* Operation wrapper: */
struct __ns1__declineCounterAppointmentRequest
{
public:
	ns5__declineCounterAppointmentRequest *ns5__DeclineCounterAppointmentRequest;	/* optional element of type ns5:declineCounterAppointmentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__deleteDataSourceRequest
#define SOAP_TYPE___ns1__deleteDataSourceRequest (1967)
/* Operation wrapper: */
struct __ns1__deleteDataSourceRequest
{
public:
	ns5__deleteDataSourceRequest *ns5__DeleteDataSourceRequest;	/* optional element of type ns5:deleteDataSourceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__deleteDeviceRequest
#define SOAP_TYPE___ns1__deleteDeviceRequest (1971)
/* Operation wrapper: */
struct __ns1__deleteDeviceRequest
{
public:
	ns5__deleteDeviceRequest *ns5__DeleteDeviceRequest;	/* optional element of type ns5:deleteDeviceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__destroyWaitSetRequest
#define SOAP_TYPE___ns1__destroyWaitSetRequest (1975)
/* Operation wrapper: */
struct __ns1__destroyWaitSetRequest
{
public:
	ns5__destroyWaitSetRequest *ns5__DestroyWaitSetRequest;	/* optional element of type ns5:destroyWaitSetRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__diffDocumentRequest
#define SOAP_TYPE___ns1__diffDocumentRequest (1979)
/* Operation wrapper: */
struct __ns1__diffDocumentRequest
{
public:
	ns5__diffDocumentRequest *ns5__DiffDocumentRequest;	/* optional element of type ns5:diffDocumentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__dismissCalendarItemAlarmRequest
#define SOAP_TYPE___ns1__dismissCalendarItemAlarmRequest (1983)
/* Operation wrapper: */
struct __ns1__dismissCalendarItemAlarmRequest
{
public:
	ns5__dismissCalendarItemAlarmRequest *ns5__DismissCalendarItemAlarmRequest;	/* optional element of type ns5:dismissCalendarItemAlarmRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__documentActionRequest
#define SOAP_TYPE___ns1__documentActionRequest (1987)
/* Operation wrapper: */
struct __ns1__documentActionRequest
{
public:
	ns5__documentActionRequest *ns5__DocumentActionRequest;	/* optional element of type ns5:documentActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__emptyDumpsterRequest
#define SOAP_TYPE___ns1__emptyDumpsterRequest (1991)
/* Operation wrapper: */
struct __ns1__emptyDumpsterRequest
{
public:
	ns5__emptyDumpsterRequest *ns5__EmptyDumpsterRequest;	/* optional element of type ns5:emptyDumpsterRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__enableSharedReminderRequest
#define SOAP_TYPE___ns1__enableSharedReminderRequest (1995)
/* Operation wrapper: */
struct __ns1__enableSharedReminderRequest
{
public:
	ns5__enableSharedReminderRequest *ns5__EnableSharedReminderRequest;	/* optional element of type ns5:enableSharedReminderRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__expandRecurRequest
#define SOAP_TYPE___ns1__expandRecurRequest (1999)
/* Operation wrapper: */
struct __ns1__expandRecurRequest
{
public:
	ns5__expandRecurRequest *ns5__ExpandRecurRequest;	/* optional element of type ns5:expandRecurRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__exportContactsRequest
#define SOAP_TYPE___ns1__exportContactsRequest (2003)
/* Operation wrapper: */
struct __ns1__exportContactsRequest
{
public:
	ns5__exportContactsRequest *ns5__ExportContactsRequest;	/* optional element of type ns5:exportContactsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__folderActionRequest
#define SOAP_TYPE___ns1__folderActionRequest (2007)
/* Operation wrapper: */
struct __ns1__folderActionRequest
{
public:
	ns5__folderActionRequest *ns5__FolderActionRequest;	/* optional element of type ns5:folderActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__forwardAppointmentInviteRequest
#define SOAP_TYPE___ns1__forwardAppointmentInviteRequest (2011)
/* Operation wrapper: */
struct __ns1__forwardAppointmentInviteRequest
{
public:
	ns5__forwardAppointmentInviteRequest *ns5__ForwardAppointmentInviteRequest;	/* optional element of type ns5:forwardAppointmentInviteRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__forwardAppointmentRequest
#define SOAP_TYPE___ns1__forwardAppointmentRequest (2015)
/* Operation wrapper: */
struct __ns1__forwardAppointmentRequest
{
public:
	ns5__forwardAppointmentRequest *ns5__ForwardAppointmentRequest;	/* optional element of type ns5:forwardAppointmentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__generateUUIDRequestResponse
#define SOAP_TYPE___ns1__generateUUIDRequestResponse (2019)
/* Operation wrapper: */
struct __ns1__generateUUIDRequestResponse
{
public:
	std::string ns5__GenerateUUIDResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:generateUUIDResponse */
};
#endif

#ifndef SOAP_TYPE___ns1__generateUUIDRequest
#define SOAP_TYPE___ns1__generateUUIDRequest (2020)
/* Operation wrapper: */
struct __ns1__generateUUIDRequest
{
public:
	ns5__generateUUIDRequest *ns5__GenerateUUIDRequest;	/* optional element of type ns5:generateUUIDRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getActivityStreamRequest
#define SOAP_TYPE___ns1__getActivityStreamRequest (2024)
/* Operation wrapper: */
struct __ns1__getActivityStreamRequest
{
public:
	ns5__getActivityStreamRequest *ns5__GetActivityStreamRequest;	/* optional element of type ns5:getActivityStreamRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getAllDevicesRequest
#define SOAP_TYPE___ns1__getAllDevicesRequest (2028)
/* Operation wrapper: */
struct __ns1__getAllDevicesRequest
{
public:
	ns5__getAllDevicesRequest *ns5__GetAllDevicesRequest;	/* optional element of type ns5:getAllDevicesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getAppointmentRequest
#define SOAP_TYPE___ns1__getAppointmentRequest (2032)
/* Operation wrapper: */
struct __ns1__getAppointmentRequest
{
public:
	ns5__getAppointmentRequest *ns5__GetAppointmentRequest;	/* optional element of type ns5:getAppointmentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getApptSummariesRequest
#define SOAP_TYPE___ns1__getApptSummariesRequest (2036)
/* Operation wrapper: */
struct __ns1__getApptSummariesRequest
{
public:
	ns5__getApptSummariesRequest *ns5__GetApptSummariesRequest;	/* optional element of type ns5:getApptSummariesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getCalendarItemSummariesRequest
#define SOAP_TYPE___ns1__getCalendarItemSummariesRequest (2040)
/* Operation wrapper: */
struct __ns1__getCalendarItemSummariesRequest
{
public:
	ns5__getCalendarItemSummariesRequest *ns5__GetCalendarItemSummariesRequest;	/* optional element of type ns5:getCalendarItemSummariesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getCommentsRequest
#define SOAP_TYPE___ns1__getCommentsRequest (2044)
/* Operation wrapper: */
struct __ns1__getCommentsRequest
{
public:
	ns5__getCommentsRequest *ns5__GetCommentsRequest;	/* optional element of type ns5:getCommentsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getContactsRequest
#define SOAP_TYPE___ns1__getContactsRequest (2048)
/* Operation wrapper: */
struct __ns1__getContactsRequest
{
public:
	ns5__getContactsRequest *ns5__GetContactsRequest;	/* optional element of type ns5:getContactsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getConvRequest
#define SOAP_TYPE___ns1__getConvRequest (2052)
/* Operation wrapper: */
struct __ns1__getConvRequest
{
public:
	ns5__getConvRequest *ns5__GetConvRequest;	/* optional element of type ns5:getConvRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getCustomMetadataRequest
#define SOAP_TYPE___ns1__getCustomMetadataRequest (2056)
/* Operation wrapper: */
struct __ns1__getCustomMetadataRequest
{
public:
	ns5__getCustomMetadataRequest *ns5__GetCustomMetadataRequest;	/* optional element of type ns5:getCustomMetadataRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getDataSourcesRequest
#define SOAP_TYPE___ns1__getDataSourcesRequest (2060)
/* Operation wrapper: */
struct __ns1__getDataSourcesRequest
{
public:
	ns5__getDataSourcesRequest *ns5__GetDataSourcesRequest;	/* optional element of type ns5:getDataSourcesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getDocumentShareURLRequestResponse
#define SOAP_TYPE___ns1__getDocumentShareURLRequestResponse (2064)
/* Operation wrapper: */
struct __ns1__getDocumentShareURLRequestResponse
{
public:
	std::string ns5__GetDocumentShareURLResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:getDocumentShareURLResponse */
};
#endif

#ifndef SOAP_TYPE___ns1__getDocumentShareURLRequest
#define SOAP_TYPE___ns1__getDocumentShareURLRequest (2065)
/* Operation wrapper: */
struct __ns1__getDocumentShareURLRequest
{
public:
	ns5__getDocumentShareURLRequest *ns5__GetDocumentShareURLRequest;	/* optional element of type ns5:getDocumentShareURLRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getEffectiveFolderPermsRequest
#define SOAP_TYPE___ns1__getEffectiveFolderPermsRequest (2069)
/* Operation wrapper: */
struct __ns1__getEffectiveFolderPermsRequest
{
public:
	ns5__getEffectiveFolderPermsRequest *ns5__GetEffectiveFolderPermsRequest;	/* optional element of type ns5:getEffectiveFolderPermsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getFilterRulesRequest
#define SOAP_TYPE___ns1__getFilterRulesRequest (2073)
/* Operation wrapper: */
struct __ns1__getFilterRulesRequest
{
public:
	ns5__getFilterRulesRequest *ns5__GetFilterRulesRequest;	/* optional element of type ns5:getFilterRulesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getFolderRequest
#define SOAP_TYPE___ns1__getFolderRequest (2077)
/* Operation wrapper: */
struct __ns1__getFolderRequest
{
public:
	ns5__getFolderRequest *ns5__GetFolderRequest;	/* optional element of type ns5:getFolderRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getFreeBusyRequest
#define SOAP_TYPE___ns1__getFreeBusyRequest (2081)
/* Operation wrapper: */
struct __ns1__getFreeBusyRequest
{
public:
	ns5__getFreeBusyRequest *ns5__GetFreeBusyRequest;	/* optional element of type ns5:getFreeBusyRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getICalRequest
#define SOAP_TYPE___ns1__getICalRequest (2085)
/* Operation wrapper: */
struct __ns1__getICalRequest
{
public:
	ns5__getICalRequest *ns5__GetICalRequest;	/* optional element of type ns5:getICalRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getImportStatusRequest
#define SOAP_TYPE___ns1__getImportStatusRequest (2089)
/* Operation wrapper: */
struct __ns1__getImportStatusRequest
{
public:
	ns5__getImportStatusRequest *ns5__GetImportStatusRequest;	/* optional element of type ns5:getImportStatusRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getItemRequest
#define SOAP_TYPE___ns1__getItemRequest (2093)
/* Operation wrapper: */
struct __ns1__getItemRequest
{
public:
	ns5__getItemRequest *ns5__GetItemRequest;	/* optional element of type ns5:getItemRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getMailboxMetadataRequest
#define SOAP_TYPE___ns1__getMailboxMetadataRequest (2097)
/* Operation wrapper: */
struct __ns1__getMailboxMetadataRequest
{
public:
	ns5__getMailboxMetadataRequest *ns5__GetMailboxMetadataRequest;	/* optional element of type ns5:getMailboxMetadataRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getMiniCalRequest
#define SOAP_TYPE___ns1__getMiniCalRequest (2101)
/* Operation wrapper: */
struct __ns1__getMiniCalRequest
{
public:
	ns5__getMiniCalRequest *ns5__GetMiniCalRequest;	/* optional element of type ns5:getMiniCalRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getMsgMetadataRequest
#define SOAP_TYPE___ns1__getMsgMetadataRequest (2105)
/* Operation wrapper: */
struct __ns1__getMsgMetadataRequest
{
public:
	ns5__getMsgMetadataRequest *ns5__GetMsgMetadataRequest;	/* optional element of type ns5:getMsgMetadataRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getMsgRequest
#define SOAP_TYPE___ns1__getMsgRequest (2109)
/* Operation wrapper: */
struct __ns1__getMsgRequest
{
public:
	ns5__getMsgRequest *ns5__GetMsgRequest;	/* optional element of type ns5:getMsgRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getNoteRequest
#define SOAP_TYPE___ns1__getNoteRequest (2113)
/* Operation wrapper: */
struct __ns1__getNoteRequest
{
public:
	ns5__getNoteRequest *ns5__GetNoteRequest;	/* optional element of type ns5:getNoteRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getNotificationsRequest
#define SOAP_TYPE___ns1__getNotificationsRequest (2117)
/* Operation wrapper: */
struct __ns1__getNotificationsRequest
{
public:
	ns5__getNotificationsRequest *ns5__GetNotificationsRequest;	/* optional element of type ns5:getNotificationsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getOutgoingFilterRulesRequest
#define SOAP_TYPE___ns1__getOutgoingFilterRulesRequest (2121)
/* Operation wrapper: */
struct __ns1__getOutgoingFilterRulesRequest
{
public:
	ns5__getOutgoingFilterRulesRequest *ns5__GetOutgoingFilterRulesRequest;	/* optional element of type ns5:getOutgoingFilterRulesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getPermissionRequest
#define SOAP_TYPE___ns1__getPermissionRequest (2125)
/* Operation wrapper: */
struct __ns1__getPermissionRequest
{
public:
	ns5__getPermissionRequest *ns5__GetPermissionRequest;	/* optional element of type ns5:getPermissionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getRecurRequest
#define SOAP_TYPE___ns1__getRecurRequest (2129)
/* Operation wrapper: */
struct __ns1__getRecurRequest
{
public:
	ns5__getRecurRequest *ns5__GetRecurRequest;	/* optional element of type ns5:getRecurRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getSearchFolderRequest
#define SOAP_TYPE___ns1__getSearchFolderRequest (2133)
/* Operation wrapper: */
struct __ns1__getSearchFolderRequest
{
public:
	ns5__getSearchFolderRequest *ns5__GetSearchFolderRequest;	/* optional element of type ns5:getSearchFolderRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getShareDetailsRequest
#define SOAP_TYPE___ns1__getShareDetailsRequest (2137)
/* Operation wrapper: */
struct __ns1__getShareDetailsRequest
{
public:
	ns5__getShareDetailsRequest *ns5__GetShareDetailsRequest;	/* optional element of type ns5:getShareDetailsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getShareNotificationsRequest
#define SOAP_TYPE___ns1__getShareNotificationsRequest (2141)
/* Operation wrapper: */
struct __ns1__getShareNotificationsRequest
{
public:
	ns5__getShareNotificationsRequest *ns5__GetShareNotificationsRequest;	/* optional element of type ns5:getShareNotificationsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getSpellDictionariesRequest
#define SOAP_TYPE___ns1__getSpellDictionariesRequest (2145)
/* Operation wrapper: */
struct __ns1__getSpellDictionariesRequest
{
public:
	ns5__getSpellDictionariesRequest *ns5__GetSpellDictionariesRequest;	/* optional element of type ns5:getSpellDictionariesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getSystemRetentionPolicyRequest
#define SOAP_TYPE___ns1__getSystemRetentionPolicyRequest (2149)
/* Operation wrapper: */
struct __ns1__getSystemRetentionPolicyRequest
{
public:
	ns5__getSystemRetentionPolicyRequest *ns5__GetSystemRetentionPolicyRequest;	/* optional element of type ns5:getSystemRetentionPolicyRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getTagRequest
#define SOAP_TYPE___ns1__getTagRequest (2153)
/* Operation wrapper: */
struct __ns1__getTagRequest
{
public:
	ns5__getTagRequest *ns5__GetTagRequest;	/* optional element of type ns5:getTagRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getTaskRequest
#define SOAP_TYPE___ns1__getTaskRequest (2157)
/* Operation wrapper: */
struct __ns1__getTaskRequest
{
public:
	ns5__getTaskRequest *ns5__GetTaskRequest;	/* optional element of type ns5:getTaskRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getTaskSummariesRequest
#define SOAP_TYPE___ns1__getTaskSummariesRequest (2161)
/* Operation wrapper: */
struct __ns1__getTaskSummariesRequest
{
public:
	ns5__getTaskSummariesRequest *ns5__GetTaskSummariesRequest;	/* optional element of type ns5:getTaskSummariesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getWatchersRequest
#define SOAP_TYPE___ns1__getWatchersRequest (2165)
/* Operation wrapper: */
struct __ns1__getWatchersRequest
{
public:
	ns5__getWatchersRequest *ns5__GetWatchersRequest;	/* optional element of type ns5:getWatchersRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getWatchingItemsRequest
#define SOAP_TYPE___ns1__getWatchingItemsRequest (2169)
/* Operation wrapper: */
struct __ns1__getWatchingItemsRequest
{
public:
	ns5__getWatchingItemsRequest *ns5__GetWatchingItemsRequest;	/* optional element of type ns5:getWatchingItemsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getWorkingHoursRequest
#define SOAP_TYPE___ns1__getWorkingHoursRequest (2173)
/* Operation wrapper: */
struct __ns1__getWorkingHoursRequest
{
public:
	ns5__getWorkingHoursRequest *ns5__GetWorkingHoursRequest;	/* optional element of type ns5:getWorkingHoursRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getYahooAuthTokenRequest
#define SOAP_TYPE___ns1__getYahooAuthTokenRequest (2177)
/* Operation wrapper: */
struct __ns1__getYahooAuthTokenRequest
{
public:
	ns5__getYahooAuthTokenRequest *ns5__GetYahooAuthTokenRequest;	/* optional element of type ns5:getYahooAuthTokenRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getYahooCookieRequest
#define SOAP_TYPE___ns1__getYahooCookieRequest (2181)
/* Operation wrapper: */
struct __ns1__getYahooCookieRequest
{
public:
	ns5__getYahooCookieRequest *ns5__GetYahooCookieRequest;	/* optional element of type ns5:getYahooCookieRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__grantPermissionRequest
#define SOAP_TYPE___ns1__grantPermissionRequest (2185)
/* Operation wrapper: */
struct __ns1__grantPermissionRequest
{
public:
	ns5__grantPermissionRequest *ns5__GrantPermissionRequest;	/* optional element of type ns5:grantPermissionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__iCalReplyRequest
#define SOAP_TYPE___ns1__iCalReplyRequest (2189)
/* Operation wrapper: */
struct __ns1__iCalReplyRequest
{
public:
	ns5__iCalReplyRequest *ns5__ICalReplyRequest;	/* optional element of type ns5:iCalReplyRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__importAppointmentsRequest
#define SOAP_TYPE___ns1__importAppointmentsRequest (2193)
/* Operation wrapper: */
struct __ns1__importAppointmentsRequest
{
public:
	ns5__importAppointmentsRequest *ns5__ImportAppointmentsRequest;	/* optional element of type ns5:importAppointmentsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__importContactsRequest
#define SOAP_TYPE___ns1__importContactsRequest (2197)
/* Operation wrapper: */
struct __ns1__importContactsRequest
{
public:
	ns5__importContactsRequest *ns5__ImportContactsRequest;	/* optional element of type ns5:importContactsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__importDataRequest
#define SOAP_TYPE___ns1__importDataRequest (2201)
/* Operation wrapper: */
struct __ns1__importDataRequest
{
public:
	ns5__importDataRequest *ns5__ImportDataRequest;	/* optional element of type ns5:importDataRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__invalidateReminderDeviceRequest
#define SOAP_TYPE___ns1__invalidateReminderDeviceRequest (2205)
/* Operation wrapper: */
struct __ns1__invalidateReminderDeviceRequest
{
public:
	ns5__invalidateReminderDeviceRequest *ns5__InvalidateReminderDeviceRequest;	/* optional element of type ns5:invalidateReminderDeviceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__itemActionRequest
#define SOAP_TYPE___ns1__itemActionRequest (2209)
/* Operation wrapper: */
struct __ns1__itemActionRequest
{
public:
	ns5__itemActionRequest *ns5__ItemActionRequest;	/* optional element of type ns5:itemActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__listDocumentRevisionsRequest
#define SOAP_TYPE___ns1__listDocumentRevisionsRequest (2213)
/* Operation wrapper: */
struct __ns1__listDocumentRevisionsRequest
{
public:
	ns5__listDocumentRevisionsRequest *ns5__ListDocumentRevisionsRequest;	/* optional element of type ns5:listDocumentRevisionsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyAppointmentRequest
#define SOAP_TYPE___ns1__modifyAppointmentRequest (2217)
/* Operation wrapper: */
struct __ns1__modifyAppointmentRequest
{
public:
	ns5__modifyAppointmentRequest *ns5__ModifyAppointmentRequest;	/* optional element of type ns5:modifyAppointmentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyContactRequest
#define SOAP_TYPE___ns1__modifyContactRequest (2221)
/* Operation wrapper: */
struct __ns1__modifyContactRequest
{
public:
	ns5__modifyContactRequest *ns5__ModifyContactRequest;	/* optional element of type ns5:modifyContactRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyDataSourceRequest
#define SOAP_TYPE___ns1__modifyDataSourceRequest (2225)
/* Operation wrapper: */
struct __ns1__modifyDataSourceRequest
{
public:
	ns5__modifyDataSourceRequest *ns5__ModifyDataSourceRequest;	/* optional element of type ns5:modifyDataSourceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyFilterRulesRequest
#define SOAP_TYPE___ns1__modifyFilterRulesRequest (2229)
/* Operation wrapper: */
struct __ns1__modifyFilterRulesRequest
{
public:
	ns5__modifyFilterRulesRequest *ns5__ModifyFilterRulesRequest;	/* optional element of type ns5:modifyFilterRulesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyMailboxMetadataRequest
#define SOAP_TYPE___ns1__modifyMailboxMetadataRequest (2233)
/* Operation wrapper: */
struct __ns1__modifyMailboxMetadataRequest
{
public:
	ns5__modifyMailboxMetadataRequest *ns5__ModifyMailboxMetadataRequest;	/* optional element of type ns5:modifyMailboxMetadataRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyOutgoingFilterRulesRequest
#define SOAP_TYPE___ns1__modifyOutgoingFilterRulesRequest (2237)
/* Operation wrapper: */
struct __ns1__modifyOutgoingFilterRulesRequest
{
public:
	ns5__modifyOutgoingFilterRulesRequest *ns5__ModifyOutgoingFilterRulesRequest;	/* optional element of type ns5:modifyOutgoingFilterRulesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifySearchFolderRequest
#define SOAP_TYPE___ns1__modifySearchFolderRequest (2241)
/* Operation wrapper: */
struct __ns1__modifySearchFolderRequest
{
public:
	ns5__modifySearchFolderRequest *ns5__ModifySearchFolderRequest;	/* optional element of type ns5:modifySearchFolderRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyTaskRequest
#define SOAP_TYPE___ns1__modifyTaskRequest (2245)
/* Operation wrapper: */
struct __ns1__modifyTaskRequest
{
public:
	ns5__modifyTaskRequest *ns5__ModifyTaskRequest;	/* optional element of type ns5:modifyTaskRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__msgActionRequest
#define SOAP_TYPE___ns1__msgActionRequest (2249)
/* Operation wrapper: */
struct __ns1__msgActionRequest
{
public:
	ns5__msgActionRequest *ns5__MsgActionRequest;	/* optional element of type ns5:msgActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__noOpRequest
#define SOAP_TYPE___ns1__noOpRequest (2253)
/* Operation wrapper: */
struct __ns1__noOpRequest
{
public:
	ns5__noOpRequest *ns5__NoOpRequest;	/* optional element of type ns5:noOpRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__noteActionRequest
#define SOAP_TYPE___ns1__noteActionRequest (2257)
/* Operation wrapper: */
struct __ns1__noteActionRequest
{
public:
	ns5__noteActionRequest *ns5__NoteActionRequest;	/* optional element of type ns5:noteActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__purgeRevisionRequest
#define SOAP_TYPE___ns1__purgeRevisionRequest (2261)
/* Operation wrapper: */
struct __ns1__purgeRevisionRequest
{
public:
	ns5__purgeRevisionRequest *ns5__PurgeRevisionRequest;	/* optional element of type ns5:purgeRevisionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__rankingActionRequest
#define SOAP_TYPE___ns1__rankingActionRequest (2265)
/* Operation wrapper: */
struct __ns1__rankingActionRequest
{
public:
	ns5__rankingActionRequest *ns5__RankingActionRequest;	/* optional element of type ns5:rankingActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__registerDeviceRequest
#define SOAP_TYPE___ns1__registerDeviceRequest (2269)
/* Operation wrapper: */
struct __ns1__registerDeviceRequest
{
public:
	ns5__registerDeviceRequest *ns5__RegisterDeviceRequest;	/* optional element of type ns5:registerDeviceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__removeAttachmentsRequest
#define SOAP_TYPE___ns1__removeAttachmentsRequest (2273)
/* Operation wrapper: */
struct __ns1__removeAttachmentsRequest
{
public:
	ns5__removeAttachmentsRequest *ns5__RemoveAttachmentsRequest;	/* optional element of type ns5:removeAttachmentsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__revokePermissionRequest
#define SOAP_TYPE___ns1__revokePermissionRequest (2277)
/* Operation wrapper: */
struct __ns1__revokePermissionRequest
{
public:
	ns5__revokePermissionRequest *ns5__RevokePermissionRequest;	/* optional element of type ns5:revokePermissionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__saveDocumentRequest
#define SOAP_TYPE___ns1__saveDocumentRequest (2281)
/* Operation wrapper: */
struct __ns1__saveDocumentRequest
{
public:
	ns5__saveDocumentRequest *ns5__SaveDocumentRequest;	/* optional element of type ns5:saveDocumentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__saveDraftRequest
#define SOAP_TYPE___ns1__saveDraftRequest (2285)
/* Operation wrapper: */
struct __ns1__saveDraftRequest
{
public:
	ns5__saveDraftRequest *ns5__SaveDraftRequest;	/* optional element of type ns5:saveDraftRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__searchConvRequest
#define SOAP_TYPE___ns1__searchConvRequest (2289)
/* Operation wrapper: */
struct __ns1__searchConvRequest
{
public:
	ns5__searchConvRequest *ns5__SearchConvRequest;	/* optional element of type ns5:searchConvRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__searchRequest
#define SOAP_TYPE___ns1__searchRequest (2293)
/* Operation wrapper: */
struct __ns1__searchRequest
{
public:
	ns5__searchRequest *ns5__SearchRequest;	/* optional element of type ns5:searchRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__sendDeliveryReportRequest
#define SOAP_TYPE___ns1__sendDeliveryReportRequest (2297)
/* Operation wrapper: */
struct __ns1__sendDeliveryReportRequest
{
public:
	ns5__sendDeliveryReportRequest *ns5__SendDeliveryReportRequest;	/* optional element of type ns5:sendDeliveryReportRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__sendInviteReplyRequest
#define SOAP_TYPE___ns1__sendInviteReplyRequest (2301)
/* Operation wrapper: */
struct __ns1__sendInviteReplyRequest
{
public:
	ns5__sendInviteReplyRequest *ns5__SendInviteReplyRequest;	/* optional element of type ns5:sendInviteReplyRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__sendMsgRequest
#define SOAP_TYPE___ns1__sendMsgRequest (2305)
/* Operation wrapper: */
struct __ns1__sendMsgRequest
{
public:
	ns5__sendMsgRequest *ns5__SendMsgRequest;	/* optional element of type ns5:sendMsgRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__sendShareNotificationRequest
#define SOAP_TYPE___ns1__sendShareNotificationRequest (2309)
/* Operation wrapper: */
struct __ns1__sendShareNotificationRequest
{
public:
	ns5__sendShareNotificationRequest *ns5__SendShareNotificationRequest;	/* optional element of type ns5:sendShareNotificationRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__sendVerificationCodeRequest
#define SOAP_TYPE___ns1__sendVerificationCodeRequest (2313)
/* Operation wrapper: */
struct __ns1__sendVerificationCodeRequest
{
public:
	ns5__sendVerificationCodeRequest *ns5__SendVerificationCodeRequest;	/* optional element of type ns5:sendVerificationCodeRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__setAppointmentRequest
#define SOAP_TYPE___ns1__setAppointmentRequest (2317)
/* Operation wrapper: */
struct __ns1__setAppointmentRequest
{
public:
	ns5__setAppointmentRequest *ns5__SetAppointmentRequest;	/* optional element of type ns5:setAppointmentRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__setCustomMetadataRequest
#define SOAP_TYPE___ns1__setCustomMetadataRequest (2321)
/* Operation wrapper: */
struct __ns1__setCustomMetadataRequest
{
public:
	ns5__setCustomMetadataRequest *ns5__SetCustomMetadataRequest;	/* optional element of type ns5:setCustomMetadataRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__setMailboxMetadataRequest
#define SOAP_TYPE___ns1__setMailboxMetadataRequest (2325)
/* Operation wrapper: */
struct __ns1__setMailboxMetadataRequest
{
public:
	ns5__setMailboxMetadataRequest *ns5__SetMailboxMetadataRequest;	/* optional element of type ns5:setMailboxMetadataRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__setTaskRequest
#define SOAP_TYPE___ns1__setTaskRequest (2329)
/* Operation wrapper: */
struct __ns1__setTaskRequest
{
public:
	ns5__setTaskRequest *ns5__SetTaskRequest;	/* optional element of type ns5:setTaskRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__snoozeCalendarItemAlarmRequest
#define SOAP_TYPE___ns1__snoozeCalendarItemAlarmRequest (2333)
/* Operation wrapper: */
struct __ns1__snoozeCalendarItemAlarmRequest
{
public:
	ns5__snoozeCalendarItemAlarmRequest *ns5__SnoozeCalendarItemAlarmRequest;	/* optional element of type ns5:snoozeCalendarItemAlarmRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__syncRequest
#define SOAP_TYPE___ns1__syncRequest (2337)
/* Operation wrapper: */
struct __ns1__syncRequest
{
public:
	ns5__syncRequest *ns5__SyncRequest;	/* optional element of type ns5:syncRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__tagActionRequest
#define SOAP_TYPE___ns1__tagActionRequest (2341)
/* Operation wrapper: */
struct __ns1__tagActionRequest
{
public:
	ns5__tagActionRequest *ns5__TagActionRequest;	/* optional element of type ns5:tagActionRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__testDataSourceRequest
#define SOAP_TYPE___ns1__testDataSourceRequest (2345)
/* Operation wrapper: */
struct __ns1__testDataSourceRequest
{
public:
	ns5__testDataSourceRequest *ns5__TestDataSourceRequest;	/* optional element of type ns5:testDataSourceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__updateDeviceStatusRequest
#define SOAP_TYPE___ns1__updateDeviceStatusRequest (2349)
/* Operation wrapper: */
struct __ns1__updateDeviceStatusRequest
{
public:
	ns5__updateDeviceStatusRequest *ns5__UpdateDeviceStatusRequest;	/* optional element of type ns5:updateDeviceStatusRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__verifyCodeRequest
#define SOAP_TYPE___ns1__verifyCodeRequest (2353)
/* Operation wrapper: */
struct __ns1__verifyCodeRequest
{
public:
	ns5__verifyCodeRequest *ns5__VerifyCodeRequest;	/* optional element of type ns5:verifyCodeRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__waitSetRequest
#define SOAP_TYPE___ns1__waitSetRequest (2357)
/* Operation wrapper: */
struct __ns1__waitSetRequest
{
public:
	ns5__waitSetRequest *ns5__WaitSetRequest;	/* optional element of type ns5:waitSetRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__becomeMasterRequest
#define SOAP_TYPE___ns1__becomeMasterRequest (2361)
/* Operation wrapper: */
struct __ns1__becomeMasterRequest
{
public:
	ns6__becomeMasterRequest *ns6__BecomeMasterRequest;	/* optional element of type ns6:becomeMasterRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__bringDownServiceIPRequest
#define SOAP_TYPE___ns1__bringDownServiceIPRequest (2365)
/* Operation wrapper: */
struct __ns1__bringDownServiceIPRequest
{
public:
	ns6__bringDownServiceIPRequest *ns6__BringDownServiceIPRequest;	/* optional element of type ns6:bringDownServiceIPRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__bringUpServiceIPRequest
#define SOAP_TYPE___ns1__bringUpServiceIPRequest (2369)
/* Operation wrapper: */
struct __ns1__bringUpServiceIPRequest
{
public:
	ns6__bringUpServiceIPRequest *ns6__BringUpServiceIPRequest;	/* optional element of type ns6:bringUpServiceIPRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__replicationStatusRequest
#define SOAP_TYPE___ns1__replicationStatusRequest (2373)
/* Operation wrapper: */
struct __ns1__replicationStatusRequest
{
public:
	ns6__replicationStatusRequest *ns6__ReplicationStatusRequest;	/* optional element of type ns6:replicationStatusRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__startCatchupRequest
#define SOAP_TYPE___ns1__startCatchupRequest (2377)
/* Operation wrapper: */
struct __ns1__startCatchupRequest
{
public:
	ns6__startCatchupRequest *ns6__StartCatchupRequest;	/* optional element of type ns6:startCatchupRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__startFailoverClientRequest
#define SOAP_TYPE___ns1__startFailoverClientRequest (2381)
/* Operation wrapper: */
struct __ns1__startFailoverClientRequest
{
public:
	ns6__startFailoverClientRequest *ns6__StartFailoverClientRequest;	/* optional element of type ns6:startFailoverClientRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__startFailoverDaemonRequest
#define SOAP_TYPE___ns1__startFailoverDaemonRequest (2385)
/* Operation wrapper: */
struct __ns1__startFailoverDaemonRequest
{
public:
	ns6__startFailoverDaemonRequest *ns6__StartFailoverDaemonRequest;	/* optional element of type ns6:startFailoverDaemonRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__stopFailoverClientRequest
#define SOAP_TYPE___ns1__stopFailoverClientRequest (2389)
/* Operation wrapper: */
struct __ns1__stopFailoverClientRequest
{
public:
	ns6__stopFailoverClientRequest *ns6__StopFailoverClientRequest;	/* optional element of type ns6:stopFailoverClientRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__stopFailoverDaemonRequest
#define SOAP_TYPE___ns1__stopFailoverDaemonRequest (2393)
/* Operation wrapper: */
struct __ns1__stopFailoverDaemonRequest
{
public:
	ns6__stopFailoverDaemonRequest *ns6__StopFailoverDaemonRequest;	/* optional element of type ns6:stopFailoverDaemonRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__cancelPendingRemoteWipeRequest
#define SOAP_TYPE___ns1__cancelPendingRemoteWipeRequest (2397)
/* Operation wrapper: */
struct __ns1__cancelPendingRemoteWipeRequest
{
public:
	ns7__cancelPendingRemoteWipeRequest *ns7__CancelPendingRemoteWipeRequest;	/* optional element of type ns7:cancelPendingRemoteWipeRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getDeviceStatusRequest
#define SOAP_TYPE___ns1__getDeviceStatusRequest (2401)
/* Operation wrapper: */
struct __ns1__getDeviceStatusRequest
{
public:
	ns7__getDeviceStatusRequest *ns7__GetDeviceStatusRequest;	/* optional element of type ns7:getDeviceStatusRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__remoteWipeRequest
#define SOAP_TYPE___ns1__remoteWipeRequest (2405)
/* Operation wrapper: */
struct __ns1__remoteWipeRequest
{
public:
	ns7__remoteWipeRequest *ns7__RemoteWipeRequest;	/* optional element of type ns7:remoteWipeRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__removeDeviceRequest
#define SOAP_TYPE___ns1__removeDeviceRequest (2409)
/* Operation wrapper: */
struct __ns1__removeDeviceRequest
{
public:
	ns7__removeDeviceRequest *ns7__RemoveDeviceRequest;	/* optional element of type ns7:removeDeviceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__resumeDeviceRequest
#define SOAP_TYPE___ns1__resumeDeviceRequest (2413)
/* Operation wrapper: */
struct __ns1__resumeDeviceRequest
{
public:
	ns7__resumeDeviceRequest *ns7__ResumeDeviceRequest;	/* optional element of type ns7:resumeDeviceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__suspendDeviceRequest
#define SOAP_TYPE___ns1__suspendDeviceRequest (2417)
/* Operation wrapper: */
struct __ns1__suspendDeviceRequest
{
public:
	ns7__suspendDeviceRequest *ns7__SuspendDeviceRequest;	/* optional element of type ns7:suspendDeviceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__changeUCPasswordRequest
#define SOAP_TYPE___ns1__changeUCPasswordRequest (2421)
/* Operation wrapper: */
struct __ns1__changeUCPasswordRequest
{
public:
	ns8__changeUCPasswordRequest *ns8__ChangeUCPasswordRequest;	/* optional element of type ns8:changeUCPasswordRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getUCInfoRequest
#define SOAP_TYPE___ns1__getUCInfoRequest (2425)
/* Operation wrapper: */
struct __ns1__getUCInfoRequest
{
public:
	ns8__getUCInfoRequest *ns8__GetUCInfoRequest;	/* optional element of type ns8:getUCInfoRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getVoiceFeaturesRequest
#define SOAP_TYPE___ns1__getVoiceFeaturesRequest (2429)
/* Operation wrapper: */
struct __ns1__getVoiceFeaturesRequest
{
public:
	ns8__getVoiceFeaturesRequest *ns8__GetVoiceFeaturesRequest;	/* optional element of type ns8:getVoiceFeaturesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getVoiceFolderRequest
#define SOAP_TYPE___ns1__getVoiceFolderRequest (2433)
/* Operation wrapper: */
struct __ns1__getVoiceFolderRequest
{
public:
	ns8__getVoiceFolderRequest *ns8__GetVoiceFolderRequest;	/* optional element of type ns8:getVoiceFolderRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getVoiceInfoRequest
#define SOAP_TYPE___ns1__getVoiceInfoRequest (2437)
/* Operation wrapper: */
struct __ns1__getVoiceInfoRequest
{
public:
	ns8__getVoiceInfoRequest *ns8__GetVoiceInfoRequest;	/* optional element of type ns8:getVoiceInfoRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__getVoiceMailPrefsRequest
#define SOAP_TYPE___ns1__getVoiceMailPrefsRequest (2441)
/* Operation wrapper: */
struct __ns1__getVoiceMailPrefsRequest
{
public:
	ns8__getVoiceMailPrefsRequest *ns8__GetVoiceMailPrefsRequest;	/* optional element of type ns8:getVoiceMailPrefsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyFromNumRequest
#define SOAP_TYPE___ns1__modifyFromNumRequest (2445)
/* Operation wrapper: */
struct __ns1__modifyFromNumRequest
{
public:
	ns8__modifyFromNumRequest *ns8__ModifyFromNumRequest;	/* optional element of type ns8:modifyFromNumRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyVoiceFeaturesRequest
#define SOAP_TYPE___ns1__modifyVoiceFeaturesRequest (2449)
/* Operation wrapper: */
struct __ns1__modifyVoiceFeaturesRequest
{
public:
	ns8__modifyVoiceFeaturesRequest *ns8__ModifyVoiceFeaturesRequest;	/* optional element of type ns8:modifyVoiceFeaturesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyVoiceMailPinRequest
#define SOAP_TYPE___ns1__modifyVoiceMailPinRequest (2453)
/* Operation wrapper: */
struct __ns1__modifyVoiceMailPinRequest
{
public:
	ns8__modifyVoiceMailPinRequest *ns8__ModifyVoiceMailPinRequest;	/* optional element of type ns8:modifyVoiceMailPinRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__modifyVoiceMailPrefsRequest
#define SOAP_TYPE___ns1__modifyVoiceMailPrefsRequest (2457)
/* Operation wrapper: */
struct __ns1__modifyVoiceMailPrefsRequest
{
public:
	ns8__modifyVoiceMailPrefsRequest *ns8__ModifyVoiceMailPrefsRequest;	/* optional element of type ns8:modifyVoiceMailPrefsRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__resetVoiceFeaturesRequest
#define SOAP_TYPE___ns1__resetVoiceFeaturesRequest (2461)
/* Operation wrapper: */
struct __ns1__resetVoiceFeaturesRequest
{
public:
	ns8__resetVoiceFeaturesRequest *ns8__ResetVoiceFeaturesRequest;	/* optional element of type ns8:resetVoiceFeaturesRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__searchVoiceRequest
#define SOAP_TYPE___ns1__searchVoiceRequest (2465)
/* Operation wrapper: */
struct __ns1__searchVoiceRequest
{
public:
	ns8__searchVoiceRequest *ns8__SearchVoiceRequest;	/* optional element of type ns8:searchVoiceRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__uploadVoiceMailRequest
#define SOAP_TYPE___ns1__uploadVoiceMailRequest (2469)
/* Operation wrapper: */
struct __ns1__uploadVoiceMailRequest
{
public:
	ns8__uploadVoiceMailRequest *ns8__UploadVoiceMailRequest;	/* optional element of type ns8:uploadVoiceMailRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__voiceMsgActionRequest
#define SOAP_TYPE___ns1__voiceMsgActionRequest (2473)
/* Operation wrapper: */
struct __ns1__voiceMsgActionRequest
{
public:
	ns8__voiceMsgActionRequest *ns8__VoiceMsgActionRequest;	/* optional element of type ns8:voiceMsgActionRequest */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (2474)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (2476)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (2479)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (2480)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (8)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_ns4__accountZimletInclude
#define SOAP_TYPE_ns4__accountZimletInclude (880)
typedef std::string ns4__accountZimletInclude;
#endif

#ifndef SOAP_TYPE_ns4__accountZimletIncludeCSS
#define SOAP_TYPE_ns4__accountZimletIncludeCSS (881)
typedef std::string ns4__accountZimletIncludeCSS;
#endif

#ifndef SOAP_TYPE_ns4__accountZimletTarget
#define SOAP_TYPE_ns4__accountZimletTarget (882)
typedef std::string ns4__accountZimletTarget;
#endif

#ifndef SOAP_TYPE_ns5__generateUUIDResponse
#define SOAP_TYPE_ns5__generateUUIDResponse (890)
typedef std::string ns5__generateUUIDResponse;
#endif

#ifndef SOAP_TYPE_ns5__getDocumentShareURLResponse
#define SOAP_TYPE_ns5__getDocumentShareURLResponse (891)
typedef std::string ns5__getDocumentShareURLResponse;
#endif

#ifndef SOAP_TYPE_ns5__suggestedQueryString
#define SOAP_TYPE_ns5__suggestedQueryString (892)
typedef std::string ns5__suggestedQueryString;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__authRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__authRequest *ns4__AuthRequest, ns4__authResponse *ns4__AuthResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__autoCompleteGalRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__autoCompleteGalRequest *ns4__AutoCompleteGalRequest, ns4__autoCompleteGalResponse *ns4__AutoCompleteGalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__changePasswordRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__changePasswordRequest *ns4__ChangePasswordRequest, ns4__changePasswordResponse *ns4__ChangePasswordResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkLicenseRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__checkLicenseRequest *ns4__CheckLicenseRequest, ns4__checkLicenseResponse *ns4__CheckLicenseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkRightsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__checkRightsRequest *ns4__CheckRightsRequest, ns4__checkRightsResponse *ns4__CheckRightsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createDistributionListRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__createDistributionListRequest *ns4__CreateDistributionListRequest, ns4__createDistributionListResponse *ns4__CreateDistributionListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createIdentityRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__createIdentityRequest *ns4__CreateIdentityRequest, ns4__createIdentityResponse *ns4__CreateIdentityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createSignatureRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__createSignatureRequest *ns4__CreateSignatureRequest, ns4__createSignatureResponse *ns4__CreateSignatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteIdentityRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__deleteIdentityRequest *ns4__DeleteIdentityRequest, ns4__deleteIdentityResponse *ns4__DeleteIdentityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteSignatureRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__deleteSignatureRequest *ns4__DeleteSignatureRequest, ns4__deleteSignatureResponse *ns4__DeleteSignatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__discoverRightsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__discoverRightsRequest *ns4__DiscoverRightsRequest, ns4__discoverRightsResponse *ns4__DiscoverRightsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__distributionListActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__distributionListActionRequest *ns4__DistributionListActionRequest, ns4__distributionListActionResponse *ns4__DistributionListActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__endSessionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__endSessionRequest *ns4__EndSessionRequest, ns4__endSessionResponse *ns4__EndSessionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAccountDistributionListsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getAccountDistributionListsRequest *ns4__GetAccountDistributionListsRequest, ns4__getAccountDistributionListsResponse *ns4__GetAccountDistributionListsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAccountInfoRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getAccountInfoRequest *ns4__GetAccountInfoRequest, ns4__getAccountInfoResponse *ns4__GetAccountInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAllLocalesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getAllLocalesRequest *ns4__GetAllLocalesRequest, ns4__getAllLocalesResponse *ns4__GetAllLocalesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAvailableCsvFormatsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getAvailableCsvFormatsRequest *ns4__GetAvailableCsvFormatsRequest, ns4__getAvailableCsvFormatsResponse *ns4__GetAvailableCsvFormatsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAvailableLocalesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getAvailableLocalesRequest *ns4__GetAvailableLocalesRequest, ns4__getAvailableLocalesResponse *ns4__GetAvailableLocalesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAvailableSkinsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getAvailableSkinsRequest *ns4__GetAvailableSkinsRequest, ns4__getAvailableSkinsResponse *ns4__GetAvailableSkinsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getDistributionListMembersRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getDistributionListMembersRequest *ns4__GetDistributionListMembersRequest, ns4__getDistributionListMembersResponse *ns4__GetDistributionListMembersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getDistributionListRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getDistributionListRequest *ns4__GetDistributionListRequest, ns4__getDistributionListResponse *ns4__GetDistributionListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getIdentitiesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getIdentitiesRequest *ns4__GetIdentitiesRequest, ns4__getIdentitiesResponse *ns4__GetIdentitiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getInfoRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getInfoRequest *ns4__GetInfoRequest, ns4__getInfoResponse *ns4__GetInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getPrefsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getPrefsRequest *ns4__GetPrefsRequest, ns4__getPrefsResponse *ns4__GetPrefsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getRightsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getRightsRequest *ns4__GetRightsRequest, ns4__getRightsResponse *ns4__GetRightsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSMIMEPublicCertsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getSMIMEPublicCertsRequest *ns4__GetSMIMEPublicCertsRequest, ns4__getSMIMEPublicCertsResponse *ns4__GetSMIMEPublicCertsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getShareInfoRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getShareInfoRequest *ns4__GetShareInfoRequest, ns4__getShareInfoResponse *ns4__GetShareInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSignaturesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getSignaturesRequest *ns4__GetSignaturesRequest, ns4__getSignaturesResponse *ns4__GetSignaturesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getVersionInfoRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getVersionInfoRequest *ns4__GetVersionInfoRequest, ns4__getVersionInfoResponse *ns4__GetVersionInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWhiteBlackListRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__getWhiteBlackListRequest *ns4__GetWhiteBlackListRequest, ns4__getWhiteBlackListResponse *ns4__GetWhiteBlackListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__grantRightsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__grantRightsRequest *ns4__GrantRightsRequest, ns4__grantRightsResponse *ns4__GrantRightsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyIdentityRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__modifyIdentityRequest *ns4__ModifyIdentityRequest, ns4__modifyIdentityResponse *ns4__ModifyIdentityResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyPrefsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__modifyPrefsRequest *ns4__ModifyPrefsRequest, ns4__modifyPrefsResponse *ns4__ModifyPrefsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyPropertiesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__modifyPropertiesRequest *ns4__ModifyPropertiesRequest, ns4__modifyPropertiesResponse *ns4__ModifyPropertiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifySignatureRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__modifySignatureRequest *ns4__ModifySignatureRequest, ns4__modifySignatureResponse *ns4__ModifySignatureResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyWhiteBlackListRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__modifyWhiteBlackListRequest *ns4__ModifyWhiteBlackListRequest, ns4__modifyWhiteBlackListResponse *ns4__ModifyWhiteBlackListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyZimletPrefsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__modifyZimletPrefsRequest *ns4__ModifyZimletPrefsRequest, ns4__modifyZimletPrefsResponse *ns4__ModifyZimletPrefsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__revokeRightsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__revokeRightsRequest *ns4__RevokeRightsRequest, ns4__revokeRightsResponse *ns4__RevokeRightsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__searchCalendarResourcesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__searchCalendarResourcesRequest *ns4__SearchCalendarResourcesRequest, ns4__searchCalendarResourcesResponse *ns4__SearchCalendarResourcesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__searchGalRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__searchGalRequest *ns4__SearchGalRequest, ns4__searchGalResponse *ns4__SearchGalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__subscribeDistributionListRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__subscribeDistributionListRequest *ns4__SubscribeDistributionListRequest, ns4__subscribeDistributionListResponse *ns4__SubscribeDistributionListResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__syncGalRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns4__syncGalRequest *ns4__SyncGalRequest, ns4__syncGalResponse *ns4__SyncGalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__addAppointmentInviteRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__addAppointmentInviteRequest *ns5__AddAppointmentInviteRequest, ns5__addAppointmentInviteResponse *ns5__AddAppointmentInviteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__addCommentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__addCommentRequest *ns5__AddCommentRequest, ns5__addCommentResponse *ns5__AddCommentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__addMsgRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__addMsgRequest *ns5__AddMsgRequest, ns5__addMsgResponse *ns5__AddMsgResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__addTaskInviteRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__addTaskInviteRequest *ns5__AddTaskInviteRequest, ns5__addTaskInviteResponse *ns5__AddTaskInviteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__announceOrganizerChangeRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__announceOrganizerChangeRequest *ns5__AnnounceOrganizerChangeRequest, ns5__announceOrganizerChangeResponse *ns5__AnnounceOrganizerChangeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__applyFilterRulesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__applyFilterRulesRequest *ns5__ApplyFilterRulesRequest, ns5__applyFilterRulesResponse *ns5__ApplyFilterRulesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__applyOutgoingFilterRulesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__applyOutgoingFilterRulesRequest *ns5__ApplyOutgoingFilterRulesRequest, ns5__applyOutgoingFilterRulesResponse *ns5__ApplyOutgoingFilterRulesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__autoCompleteRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__autoCompleteRequest *ns5__AutoCompleteRequest, ns5__autoCompleteResponse *ns5__AutoCompleteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__bounceMsgRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__bounceMsgRequest *ns5__BounceMsgRequest, ns5__bounceMsgResponse *ns5__BounceMsgResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__browseRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__browseRequest *ns5__BrowseRequest, ns5__browseResponse *ns5__BrowseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__cancelAppointmentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__cancelAppointmentRequest *ns5__CancelAppointmentRequest, ns5__cancelAppointmentResponse *ns5__CancelAppointmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__cancelTaskRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__cancelTaskRequest *ns5__CancelTaskRequest, ns5__cancelTaskResponse *ns5__CancelTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkDeviceStatusRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__checkDeviceStatusRequest *ns5__CheckDeviceStatusRequest, ns5__checkDeviceStatusResponse *ns5__CheckDeviceStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkPermissionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__checkPermissionRequest *ns5__CheckPermissionRequest, ns5__checkPermissionResponse *ns5__CheckPermissionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkRecurConflictsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__checkRecurConflictsRequest *ns5__CheckRecurConflictsRequest, ns5__checkRecurConflictsResponse *ns5__CheckRecurConflictsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkSpellingRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__checkSpellingRequest *ns5__CheckSpellingRequest, ns5__checkSpellingResponse *ns5__CheckSpellingResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__completeTaskInstanceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__completeTaskInstanceRequest *ns5__CompleteTaskInstanceRequest, ns5__completeTaskInstanceResponse *ns5__CompleteTaskInstanceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__contactActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__contactActionRequest *ns5__ContactActionRequest, ns5__contactActionResponse *ns5__ContactActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__convActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__convActionRequest *ns5__ConvActionRequest, ns5__convActionResponse *ns5__ConvActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__counterAppointmentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__counterAppointmentRequest *ns5__CounterAppointmentRequest, ns5__counterAppointmentResponse *ns5__CounterAppointmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createAppointmentExceptionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createAppointmentExceptionRequest *ns5__CreateAppointmentExceptionRequest, ns5__createAppointmentExceptionResponse *ns5__CreateAppointmentExceptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createAppointmentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createAppointmentRequest *ns5__CreateAppointmentRequest, ns5__createAppointmentResponse *ns5__CreateAppointmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createContactRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createContactRequest *ns5__CreateContactRequest, ns5__createContactResponse *ns5__CreateContactResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createDataSourceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createDataSourceRequest *ns5__CreateDataSourceRequest, ns5__createDataSourceResponse *ns5__CreateDataSourceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createFolderRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createFolderRequest *ns5__CreateFolderRequest, ns5__createFolderResponse *ns5__CreateFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createMountpointRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createMountpointRequest *ns5__CreateMountpointRequest, ns5__createMountpointResponse *ns5__CreateMountpointResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createNoteRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createNoteRequest *ns5__CreateNoteRequest, ns5__createNoteResponse *ns5__CreateNoteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createSearchFolderRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createSearchFolderRequest *ns5__CreateSearchFolderRequest, ns5__createSearchFolderResponse *ns5__CreateSearchFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createTagRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createTagRequest *ns5__CreateTagRequest, ns5__createTagResponse *ns5__CreateTagResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createTaskExceptionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createTaskExceptionRequest *ns5__CreateTaskExceptionRequest, ns5__createTaskExceptionResponse *ns5__CreateTaskExceptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createTaskRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createTaskRequest *ns5__CreateTaskRequest, ns5__createTaskResponse *ns5__CreateTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__createWaitSetRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__createWaitSetRequest *ns5__CreateWaitSetRequest, ns5__createWaitSetResponse *ns5__CreateWaitSetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__declineCounterAppointmentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__declineCounterAppointmentRequest *ns5__DeclineCounterAppointmentRequest, ns5__declineCounterAppointmentResponse *ns5__DeclineCounterAppointmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteDataSourceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__deleteDataSourceRequest *ns5__DeleteDataSourceRequest, ns5__deleteDataSourceResponse *ns5__DeleteDataSourceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteDeviceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__deleteDeviceRequest *ns5__DeleteDeviceRequest, ns5__deleteDeviceResponse *ns5__DeleteDeviceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__destroyWaitSetRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__destroyWaitSetRequest *ns5__DestroyWaitSetRequest, ns5__destroyWaitSetResponse *ns5__DestroyWaitSetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__diffDocumentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__diffDocumentRequest *ns5__DiffDocumentRequest, ns5__diffDocumentResponse *ns5__DiffDocumentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__dismissCalendarItemAlarmRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__dismissCalendarItemAlarmRequest *ns5__DismissCalendarItemAlarmRequest, ns5__dismissCalendarItemAlarmResponse *ns5__DismissCalendarItemAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__documentActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__documentActionRequest *ns5__DocumentActionRequest, ns5__documentActionResponse *ns5__DocumentActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__emptyDumpsterRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__emptyDumpsterRequest *ns5__EmptyDumpsterRequest, ns5__emptyDumpsterResponse *ns5__EmptyDumpsterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__enableSharedReminderRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__enableSharedReminderRequest *ns5__EnableSharedReminderRequest, ns5__enableSharedReminderResponse *ns5__EnableSharedReminderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__expandRecurRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__expandRecurRequest *ns5__ExpandRecurRequest, ns5__expandRecurResponse *ns5__ExpandRecurResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__exportContactsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__exportContactsRequest *ns5__ExportContactsRequest, ns5__exportContactsResponse *ns5__ExportContactsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__folderActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__folderActionRequest *ns5__FolderActionRequest, ns5__folderActionResponse *ns5__FolderActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__forwardAppointmentInviteRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__forwardAppointmentInviteRequest *ns5__ForwardAppointmentInviteRequest, ns5__forwardAppointmentInviteResponse *ns5__ForwardAppointmentInviteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__forwardAppointmentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__forwardAppointmentRequest *ns5__ForwardAppointmentRequest, ns5__forwardAppointmentResponse *ns5__ForwardAppointmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__generateUUIDRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__generateUUIDRequest *ns5__GenerateUUIDRequest, std::string &ns5__GenerateUUIDResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getActivityStreamRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getActivityStreamRequest *ns5__GetActivityStreamRequest, ns5__getActivityStreamResponse *ns5__GetActivityStreamResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAllDevicesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getAllDevicesRequest *ns5__GetAllDevicesRequest, ns5__getAllDevicesResponse *ns5__GetAllDevicesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getAppointmentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getAppointmentRequest *ns5__GetAppointmentRequest, ns5__getAppointmentResponse *ns5__GetAppointmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getApptSummariesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getApptSummariesRequest *ns5__GetApptSummariesRequest, ns5__getApptSummariesResponse *ns5__GetApptSummariesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getCalendarItemSummariesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getCalendarItemSummariesRequest *ns5__GetCalendarItemSummariesRequest, ns5__getCalendarItemSummariesResponse *ns5__GetCalendarItemSummariesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getCommentsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getCommentsRequest *ns5__GetCommentsRequest, ns5__getCommentsResponse *ns5__GetCommentsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getContactsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getContactsRequest *ns5__GetContactsRequest, ns5__getContactsResponse *ns5__GetContactsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getConvRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getConvRequest *ns5__GetConvRequest, ns5__getConvResponse *ns5__GetConvResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getCustomMetadataRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getCustomMetadataRequest *ns5__GetCustomMetadataRequest, ns5__getCustomMetadataResponse *ns5__GetCustomMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getDataSourcesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getDataSourcesRequest *ns5__GetDataSourcesRequest, ns5__getDataSourcesResponse *ns5__GetDataSourcesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getDocumentShareURLRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getDocumentShareURLRequest *ns5__GetDocumentShareURLRequest, std::string &ns5__GetDocumentShareURLResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getEffectiveFolderPermsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getEffectiveFolderPermsRequest *ns5__GetEffectiveFolderPermsRequest, ns5__getEffectiveFolderPermsResponse *ns5__GetEffectiveFolderPermsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getFilterRulesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getFilterRulesRequest *ns5__GetFilterRulesRequest, ns5__getFilterRulesResponse *ns5__GetFilterRulesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getFolderRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getFolderRequest *ns5__GetFolderRequest, ns5__getFolderResponse *ns5__GetFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getFreeBusyRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getFreeBusyRequest *ns5__GetFreeBusyRequest, ns5__getFreeBusyResponse *ns5__GetFreeBusyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getICalRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getICalRequest *ns5__GetICalRequest, ns5__getICalResponse *ns5__GetICalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getImportStatusRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getImportStatusRequest *ns5__GetImportStatusRequest, ns5__getImportStatusResponse *ns5__GetImportStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getItemRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getItemRequest *ns5__GetItemRequest, ns5__getItemResponse *ns5__GetItemResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMailboxMetadataRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getMailboxMetadataRequest *ns5__GetMailboxMetadataRequest, ns5__getMailboxMetadataResponse *ns5__GetMailboxMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMiniCalRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getMiniCalRequest *ns5__GetMiniCalRequest, ns5__getMiniCalResponse *ns5__GetMiniCalResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMsgMetadataRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getMsgMetadataRequest *ns5__GetMsgMetadataRequest, ns5__getMsgMetadataResponse *ns5__GetMsgMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getMsgRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getMsgRequest *ns5__GetMsgRequest, ns5__getMsgResponse *ns5__GetMsgResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getNoteRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getNoteRequest *ns5__GetNoteRequest, ns5__getNoteResponse *ns5__GetNoteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getNotificationsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getNotificationsRequest *ns5__GetNotificationsRequest, ns5__getNotificationsResponse *ns5__GetNotificationsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getOutgoingFilterRulesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getOutgoingFilterRulesRequest *ns5__GetOutgoingFilterRulesRequest, ns5__getOutgoingFilterRulesResponse *ns5__GetOutgoingFilterRulesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getPermissionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getPermissionRequest *ns5__GetPermissionRequest, ns5__getPermissionResponse *ns5__GetPermissionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getRecurRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getRecurRequest *ns5__GetRecurRequest, ns5__getRecurResponse *ns5__GetRecurResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSearchFolderRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getSearchFolderRequest *ns5__GetSearchFolderRequest, ns5__getSearchFolderResponse *ns5__GetSearchFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getShareDetailsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getShareDetailsRequest *ns5__GetShareDetailsRequest, ns5__getShareDetailsResponse *ns5__GetShareDetailsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getShareNotificationsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getShareNotificationsRequest *ns5__GetShareNotificationsRequest, ns5__getShareNotificationsResponse *ns5__GetShareNotificationsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSpellDictionariesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getSpellDictionariesRequest *ns5__GetSpellDictionariesRequest, ns5__getSpellDictionariesResponse *ns5__GetSpellDictionariesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSystemRetentionPolicyRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getSystemRetentionPolicyRequest *ns5__GetSystemRetentionPolicyRequest, ns5__getSystemRetentionPolicyResponse *ns5__GetSystemRetentionPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getTagRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getTagRequest *ns5__GetTagRequest, ns5__getTagResponse *ns5__GetTagResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getTaskRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getTaskRequest *ns5__GetTaskRequest, ns5__getTaskResponse *ns5__GetTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getTaskSummariesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getTaskSummariesRequest *ns5__GetTaskSummariesRequest, ns5__getTaskSummariesResponse *ns5__GetTaskSummariesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWatchersRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getWatchersRequest *ns5__GetWatchersRequest, ns5__getWatchersResponse *ns5__GetWatchersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWatchingItemsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getWatchingItemsRequest *ns5__GetWatchingItemsRequest, ns5__getWatchingItemsResponse *ns5__GetWatchingItemsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWorkingHoursRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getWorkingHoursRequest *ns5__GetWorkingHoursRequest, ns5__getWorkingHoursResponse *ns5__GetWorkingHoursResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getYahooAuthTokenRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getYahooAuthTokenRequest *ns5__GetYahooAuthTokenRequest, ns5__getYahooAuthTokenResponse *ns5__GetYahooAuthTokenResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getYahooCookieRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__getYahooCookieRequest *ns5__GetYahooCookieRequest, ns5__getYahooCookieResponse *ns5__GetYahooCookieResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__grantPermissionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__grantPermissionRequest *ns5__GrantPermissionRequest, ns5__grantPermissionResponse *ns5__GrantPermissionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__iCalReplyRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__iCalReplyRequest *ns5__ICalReplyRequest, ns5__iCalReplyResponse *ns5__ICalReplyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__importAppointmentsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__importAppointmentsRequest *ns5__ImportAppointmentsRequest, ns5__importAppointmentsResponse *ns5__ImportAppointmentsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__importContactsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__importContactsRequest *ns5__ImportContactsRequest, ns5__importContactsResponse *ns5__ImportContactsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__importDataRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__importDataRequest *ns5__ImportDataRequest, ns5__importDataResponse *ns5__ImportDataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__invalidateReminderDeviceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__invalidateReminderDeviceRequest *ns5__InvalidateReminderDeviceRequest, ns5__invalidateReminderDeviceResponse *ns5__InvalidateReminderDeviceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__itemActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__itemActionRequest *ns5__ItemActionRequest, ns5__itemActionResponse *ns5__ItemActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__listDocumentRevisionsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__listDocumentRevisionsRequest *ns5__ListDocumentRevisionsRequest, ns5__listDocumentRevisionsResponse *ns5__ListDocumentRevisionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyAppointmentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__modifyAppointmentRequest *ns5__ModifyAppointmentRequest, ns5__modifyAppointmentResponse *ns5__ModifyAppointmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyContactRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__modifyContactRequest *ns5__ModifyContactRequest, ns5__modifyContactResponse *ns5__ModifyContactResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyDataSourceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__modifyDataSourceRequest *ns5__ModifyDataSourceRequest, ns5__modifyDataSourceResponse *ns5__ModifyDataSourceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyFilterRulesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__modifyFilterRulesRequest *ns5__ModifyFilterRulesRequest, ns5__modifyFilterRulesResponse *ns5__ModifyFilterRulesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyMailboxMetadataRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__modifyMailboxMetadataRequest *ns5__ModifyMailboxMetadataRequest, ns5__modifyMailboxMetadataResponse *ns5__ModifyMailboxMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyOutgoingFilterRulesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__modifyOutgoingFilterRulesRequest *ns5__ModifyOutgoingFilterRulesRequest, ns5__modifyOutgoingFilterRulesResponse *ns5__ModifyOutgoingFilterRulesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifySearchFolderRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__modifySearchFolderRequest *ns5__ModifySearchFolderRequest, ns5__modifySearchFolderResponse *ns5__ModifySearchFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyTaskRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__modifyTaskRequest *ns5__ModifyTaskRequest, ns5__modifyTaskResponse *ns5__ModifyTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__msgActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__msgActionRequest *ns5__MsgActionRequest, ns5__msgActionResponse *ns5__MsgActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__noOpRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__noOpRequest *ns5__NoOpRequest, ns5__noOpResponse *ns5__NoOpResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__noteActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__noteActionRequest *ns5__NoteActionRequest, ns5__noteActionResponse *ns5__NoteActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__purgeRevisionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__purgeRevisionRequest *ns5__PurgeRevisionRequest, ns5__purgeRevisionResponse *ns5__PurgeRevisionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__rankingActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__rankingActionRequest *ns5__RankingActionRequest, ns5__rankingActionResponse *ns5__RankingActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__registerDeviceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__registerDeviceRequest *ns5__RegisterDeviceRequest, ns5__registerDeviceResponse *ns5__RegisterDeviceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeAttachmentsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__removeAttachmentsRequest *ns5__RemoveAttachmentsRequest, ns5__removeAttachmentsResponse *ns5__RemoveAttachmentsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__revokePermissionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__revokePermissionRequest *ns5__RevokePermissionRequest, ns5__revokePermissionResponse *ns5__RevokePermissionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__saveDocumentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__saveDocumentRequest *ns5__SaveDocumentRequest, ns5__saveDocumentResponse *ns5__SaveDocumentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__saveDraftRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__saveDraftRequest *ns5__SaveDraftRequest, ns5__saveDraftResponse *ns5__SaveDraftResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__searchConvRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__searchConvRequest *ns5__SearchConvRequest, ns5__searchConvResponse *ns5__SearchConvResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__searchRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__searchRequest *ns5__SearchRequest, ns5__searchResponse *ns5__SearchResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sendDeliveryReportRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__sendDeliveryReportRequest *ns5__SendDeliveryReportRequest, ns5__sendDeliveryReportResponse *ns5__SendDeliveryReportResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sendInviteReplyRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__sendInviteReplyRequest *ns5__SendInviteReplyRequest, ns5__sendInviteReplyResponse *ns5__SendInviteReplyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sendMsgRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__sendMsgRequest *ns5__SendMsgRequest, ns5__sendMsgResponse *ns5__SendMsgResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sendShareNotificationRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__sendShareNotificationRequest *ns5__SendShareNotificationRequest, ns5__sendShareNotificationResponse *ns5__SendShareNotificationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__sendVerificationCodeRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__sendVerificationCodeRequest *ns5__SendVerificationCodeRequest, ns5__sendVerificationCodeResponse *ns5__SendVerificationCodeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setAppointmentRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__setAppointmentRequest *ns5__SetAppointmentRequest, ns5__setAppointmentResponse *ns5__SetAppointmentResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setCustomMetadataRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__setCustomMetadataRequest *ns5__SetCustomMetadataRequest, ns5__setCustomMetadataResponse *ns5__SetCustomMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setMailboxMetadataRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__setMailboxMetadataRequest *ns5__SetMailboxMetadataRequest, ns5__setMailboxMetadataResponse *ns5__SetMailboxMetadataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__setTaskRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__setTaskRequest *ns5__SetTaskRequest, ns5__setTaskResponse *ns5__SetTaskResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__snoozeCalendarItemAlarmRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__snoozeCalendarItemAlarmRequest *ns5__SnoozeCalendarItemAlarmRequest, ns5__snoozeCalendarItemAlarmResponse *ns5__SnoozeCalendarItemAlarmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__syncRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__syncRequest *ns5__SyncRequest, ns5__syncResponse *ns5__SyncResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__tagActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__tagActionRequest *ns5__TagActionRequest, ns5__tagActionResponse *ns5__TagActionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__testDataSourceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__testDataSourceRequest *ns5__TestDataSourceRequest, ns5__testDataSourceResponse *ns5__TestDataSourceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__updateDeviceStatusRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__updateDeviceStatusRequest *ns5__UpdateDeviceStatusRequest, ns5__updateDeviceStatusResponse *ns5__UpdateDeviceStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__verifyCodeRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__verifyCodeRequest *ns5__VerifyCodeRequest, ns5__verifyCodeResponse *ns5__VerifyCodeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__waitSetRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns5__waitSetRequest *ns5__WaitSetRequest, ns5__waitSetResponse *ns5__WaitSetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__becomeMasterRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__becomeMasterRequest *ns6__BecomeMasterRequest, ns6__becomeMasterResponse *ns6__BecomeMasterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__bringDownServiceIPRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__bringDownServiceIPRequest *ns6__BringDownServiceIPRequest, ns6__bringDownServiceIPResponse *ns6__BringDownServiceIPResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__bringUpServiceIPRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__bringUpServiceIPRequest *ns6__BringUpServiceIPRequest, ns6__bringUpServiceIPResponse *ns6__BringUpServiceIPResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__replicationStatusRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__replicationStatusRequest *ns6__ReplicationStatusRequest, ns6__replicationStatusResponse *ns6__ReplicationStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startCatchupRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__startCatchupRequest *ns6__StartCatchupRequest, ns6__startCatchupResponse *ns6__StartCatchupResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startFailoverClientRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__startFailoverClientRequest *ns6__StartFailoverClientRequest, ns6__startFailoverClientResponse *ns6__StartFailoverClientResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__startFailoverDaemonRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__startFailoverDaemonRequest *ns6__StartFailoverDaemonRequest, ns6__startFailoverDaemonResponse *ns6__StartFailoverDaemonResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__stopFailoverClientRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__stopFailoverClientRequest *ns6__StopFailoverClientRequest, ns6__stopFailoverClientResponse *ns6__StopFailoverClientResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__stopFailoverDaemonRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns6__stopFailoverDaemonRequest *ns6__StopFailoverDaemonRequest, ns6__stopFailoverDaemonResponse *ns6__StopFailoverDaemonResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__cancelPendingRemoteWipeRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns7__cancelPendingRemoteWipeRequest *ns7__CancelPendingRemoteWipeRequest, ns7__cancelPendingRemoteWipeResponse *ns7__CancelPendingRemoteWipeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getDeviceStatusRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns7__getDeviceStatusRequest *ns7__GetDeviceStatusRequest, ns7__getDeviceStatusResponse *ns7__GetDeviceStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__remoteWipeRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns7__remoteWipeRequest *ns7__RemoteWipeRequest, ns7__remoteWipeResponse *ns7__RemoteWipeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__removeDeviceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns7__removeDeviceRequest *ns7__RemoveDeviceRequest, ns7__removeDeviceResponse *ns7__RemoveDeviceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__resumeDeviceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns7__resumeDeviceRequest *ns7__ResumeDeviceRequest, ns7__resumeDeviceResponse *ns7__ResumeDeviceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__suspendDeviceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns7__suspendDeviceRequest *ns7__SuspendDeviceRequest, ns7__suspendDeviceResponse *ns7__SuspendDeviceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__changeUCPasswordRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__changeUCPasswordRequest *ns8__ChangeUCPasswordRequest, ns8__changeUCPasswordResponse *ns8__ChangeUCPasswordResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getUCInfoRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__getUCInfoRequest *ns8__GetUCInfoRequest, ns8__getUCInfoResponse *ns8__GetUCInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getVoiceFeaturesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__getVoiceFeaturesRequest *ns8__GetVoiceFeaturesRequest, ns8__getVoiceFeaturesResponse *ns8__GetVoiceFeaturesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getVoiceFolderRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__getVoiceFolderRequest *ns8__GetVoiceFolderRequest, ns8__getVoiceFolderResponse *ns8__GetVoiceFolderResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getVoiceInfoRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__getVoiceInfoRequest *ns8__GetVoiceInfoRequest, ns8__getVoiceInfoResponse *ns8__GetVoiceInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getVoiceMailPrefsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__getVoiceMailPrefsRequest *ns8__GetVoiceMailPrefsRequest, ns8__getVoiceMailPrefsResponse *ns8__GetVoiceMailPrefsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyFromNumRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__modifyFromNumRequest *ns8__ModifyFromNumRequest, ns8__modifyFromNumResponse *ns8__ModifyFromNumResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyVoiceFeaturesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__modifyVoiceFeaturesRequest *ns8__ModifyVoiceFeaturesRequest, ns8__modifyVoiceFeaturesResponse *ns8__ModifyVoiceFeaturesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyVoiceMailPinRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__modifyVoiceMailPinRequest *ns8__ModifyVoiceMailPinRequest, ns8__modifyVoiceMailPinResponse *ns8__ModifyVoiceMailPinResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__modifyVoiceMailPrefsRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__modifyVoiceMailPrefsRequest *ns8__ModifyVoiceMailPrefsRequest, ns8__modifyVoiceMailPrefsResponse *ns8__ModifyVoiceMailPrefsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__resetVoiceFeaturesRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__resetVoiceFeaturesRequest *ns8__ResetVoiceFeaturesRequest, ns8__resetVoiceFeaturesResponse *ns8__ResetVoiceFeaturesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__searchVoiceRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__searchVoiceRequest *ns8__SearchVoiceRequest, ns8__searchVoiceResponse *ns8__SearchVoiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__uploadVoiceMailRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__uploadVoiceMailRequest *ns8__UploadVoiceMailRequest, ns8__uploadVoiceMailResponse *ns8__UploadVoiceMailResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__voiceMsgActionRequest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns8__voiceMsgActionRequest *ns8__VoiceMsgActionRequest, ns8__voiceMsgActionResponse *ns8__VoiceMsgActionResponse);

#endif

/* End of soapStub.h */
