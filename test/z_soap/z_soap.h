/* ./z_soap/z_soap.h
   Generated by wsdl2h 1.2.17 from http://mail.sergos.ru/service/wsdl/ZimbraUserService.wsdl and typemap.dat
   2014-06-20 12:15:46 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on ./z_soap/z_soap.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.zimbra.com/wsdl/ZimbraService.wsdl                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.zimbra.com/wsdl/ZimbraService.wsdl"
ns2 = ""
ns3 = "urn:zimbra"
ns4 = "urn:zimbraAccount"
ns5 = "urn:zimbraMail"
ns6 = "urn:zimbraRepl"
ns7 = "urn:zimbraSync"
ns8 = "urn:zimbraVoice"

*/

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"urn:zimbra"
//gsoap ns3   schema namespace:	urn:zimbra
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"urn:zimbraAccount"
//gsoap ns4   schema namespace:	urn:zimbraAccount
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns5	"urn:zimbraMail"
//gsoap ns5   schema namespace:	urn:zimbraMail
//gsoap ns5   schema elementForm:	qualified
//gsoap ns5   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns6	"urn:zimbraRepl"
//gsoap ns6   schema namespace:	urn:zimbraRepl
//gsoap ns6   schema elementForm:	qualified
//gsoap ns6   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns7	"urn:zimbraSync"
//gsoap ns7   schema namespace:	urn:zimbraSync
//gsoap ns7   schema elementForm:	qualified
//gsoap ns7   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns8	"urn:zimbraVoice"
//gsoap ns8   schema namespace:	urn:zimbraVoice
//gsoap ns8   schema elementForm:	qualified
//gsoap ns8   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:byte".
typedef char xsd__byte;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns3__accountSelector.
class ns3__accountSelector;

//  Forward declaration of class ns3__keyValuePair.
class ns3__keyValuePair;

//  Forward declaration of class ns3__contactAttr.
class ns3__contactAttr;

//  Forward declaration of class ns3__distributionListSelector.
class ns3__distributionListSelector;

//  Forward declaration of class ns3__namedValue.
class ns3__namedValue;

//  Forward declaration of class ns3__namedElement.
class ns3__namedElement;

//  Forward declaration of class ns3__granteeChooser.
class ns3__granteeChooser;

//  Forward declaration of class ns3__shareInfo.
class ns3__shareInfo;

//  Forward declaration of class ns3__opValue.
class ns3__opValue;

//  Forward declaration of class ns3__attributeSelectorImpl.
class ns3__attributeSelectorImpl;

//  Forward declaration of class ns3__cursorInfo.
class ns3__cursorInfo;

//  Forward declaration of class ns3__id.
class ns3__id;

//  Forward declaration of class ns3__tzOnsetInfo.
class ns3__tzOnsetInfo;

//  Forward declaration of class ns3__waitSetAddSpec.
class ns3__waitSetAddSpec;

//  Forward declaration of class ns3__idAndType.
class ns3__idAndType;

//  Forward declaration of class ns3__attributeName.
class ns3__attributeName;

//  Forward declaration of class ns3__HeaderContext.
class ns3__HeaderContext;

//  Forward declaration of class ns3__sectionAttr.
class ns3__sectionAttr;

//  Forward declaration of class ns3__urlAndValue.
class ns3__urlAndValue;

//  Forward declaration of class ns3__wildcardExpansionQueryInfo.
class ns3__wildcardExpansionQueryInfo;

//  Forward declaration of class ns3__simpleSearchHit.
class ns3__simpleSearchHit;

//  Forward declaration of class ns3__dataSources.
class ns3__dataSources;

//  Forward declaration of class ns4__authRequest.
class ns4__authRequest;

//  Forward declaration of class ns4__preAuth.
class ns4__preAuth;

//  Forward declaration of class ns4__authToken.
class ns4__authToken;

//  Forward declaration of class ns4__pref.
class ns4__pref;

//  Forward declaration of class ns4__attr.
class ns4__attr;

//  Forward declaration of class ns4__authResponse.
class ns4__authResponse;

//  Forward declaration of class ns4__session.
class ns4__session;

//  Forward declaration of class ns4__autoCompleteGalRequest.
class ns4__autoCompleteGalRequest;

//  Forward declaration of class ns4__autoCompleteGalResponse.
class ns4__autoCompleteGalResponse;

//  Forward declaration of class ns4__contactInfo.
class ns4__contactInfo;

//  Forward declaration of class ns4__accountCustomMetadata.
class ns4__accountCustomMetadata;

//  Forward declaration of class ns4__accountKeyValuePairs.
class ns4__accountKeyValuePairs;

//  Forward declaration of class ns4__contactGroupMember.
class ns4__contactGroupMember;

//  Forward declaration of class ns4__changePasswordRequest.
class ns4__changePasswordRequest;

//  Forward declaration of class ns4__changePasswordResponse.
class ns4__changePasswordResponse;

//  Forward declaration of class ns4__checkLicenseRequest.
class ns4__checkLicenseRequest;

//  Forward declaration of class ns4__checkLicenseResponse.
class ns4__checkLicenseResponse;

//  Forward declaration of class ns4__checkRightsRequest.
class ns4__checkRightsRequest;

//  Forward declaration of class ns4__checkRightsTargetSpec.
class ns4__checkRightsTargetSpec;

//  Forward declaration of class ns4__checkRightsResponse.
class ns4__checkRightsResponse;

//  Forward declaration of class ns4__checkRightsTargetInfo.
class ns4__checkRightsTargetInfo;

//  Forward declaration of class ns4__checkRightsRightInfo.
class ns4__checkRightsRightInfo;

//  Forward declaration of class ns4__createDistributionListRequest.
class ns4__createDistributionListRequest;

//  Forward declaration of class ns4__createDistributionListResponse.
class ns4__createDistributionListResponse;

//  Forward declaration of class ns4__dlInfo.
class ns4__dlInfo;

//  Forward declaration of class ns4__objectInfo.
class ns4__objectInfo;

//  Forward declaration of class ns4__createIdentityRequest.
class ns4__createIdentityRequest;

//  Forward declaration of class ns4__identity.
class ns4__identity;

//  Forward declaration of class ns4__attrsImpl.
class ns4__attrsImpl;

//  Forward declaration of class ns4__createIdentityResponse.
class ns4__createIdentityResponse;

//  Forward declaration of class ns4__createSignatureRequest.
class ns4__createSignatureRequest;

//  Forward declaration of class ns4__signature.
class ns4__signature;

//  Forward declaration of class ns4__signatureContent.
class ns4__signatureContent;

//  Forward declaration of class ns4__createSignatureResponse.
class ns4__createSignatureResponse;

//  Forward declaration of class ns4__nameId.
class ns4__nameId;

//  Forward declaration of class ns4__deleteIdentityRequest.
class ns4__deleteIdentityRequest;

//  Forward declaration of class ns4__deleteIdentityResponse.
class ns4__deleteIdentityResponse;

//  Forward declaration of class ns4__deleteSignatureRequest.
class ns4__deleteSignatureRequest;

//  Forward declaration of class ns4__deleteSignatureResponse.
class ns4__deleteSignatureResponse;

//  Forward declaration of class ns4__discoverRightsRequest.
class ns4__discoverRightsRequest;

//  Forward declaration of class ns4__discoverRightsResponse.
class ns4__discoverRightsResponse;

//  Forward declaration of class ns4__discoverRightsInfo.
class ns4__discoverRightsInfo;

//  Forward declaration of class ns4__discoverRightsTarget.
class ns4__discoverRightsTarget;

//  Forward declaration of class ns4__discoverRightsEmail.
class ns4__discoverRightsEmail;

//  Forward declaration of class ns4__distributionListActionRequest.
class ns4__distributionListActionRequest;

//  Forward declaration of class ns4__distributionListAction.
class ns4__distributionListAction;

//  Forward declaration of class ns4__distributionListGranteeSelector.
class ns4__distributionListGranteeSelector;

//  Forward declaration of class ns4__distributionListRightSpec.
class ns4__distributionListRightSpec;

//  Forward declaration of class ns4__distributionListSubscribeReq.
class ns4__distributionListSubscribeReq;

//  Forward declaration of class ns4__distributionListActionResponse.
class ns4__distributionListActionResponse;

//  Forward declaration of class ns4__endSessionRequest.
class ns4__endSessionRequest;

//  Forward declaration of class ns4__endSessionResponse.
class ns4__endSessionResponse;

//  Forward declaration of class ns4__getAccountDistributionListsRequest.
class ns4__getAccountDistributionListsRequest;

//  Forward declaration of class ns4__getAccountDistributionListsResponse.
class ns4__getAccountDistributionListsResponse;

//  Forward declaration of class ns4__getAccountInfoRequest.
class ns4__getAccountInfoRequest;

//  Forward declaration of class ns4__getAccountInfoResponse.
class ns4__getAccountInfoResponse;

//  Forward declaration of class ns4__getAllLocalesRequest.
class ns4__getAllLocalesRequest;

//  Forward declaration of class ns4__getAllLocalesResponse.
class ns4__getAllLocalesResponse;

//  Forward declaration of class ns4__localeInfo.
class ns4__localeInfo;

//  Forward declaration of class ns4__getAvailableCsvFormatsRequest.
class ns4__getAvailableCsvFormatsRequest;

//  Forward declaration of class ns4__getAvailableCsvFormatsResponse.
class ns4__getAvailableCsvFormatsResponse;

//  Forward declaration of class ns4__getAvailableLocalesRequest.
class ns4__getAvailableLocalesRequest;

//  Forward declaration of class ns4__getAvailableLocalesResponse.
class ns4__getAvailableLocalesResponse;

//  Forward declaration of class ns4__getAvailableSkinsRequest.
class ns4__getAvailableSkinsRequest;

//  Forward declaration of class ns4__getAvailableSkinsResponse.
class ns4__getAvailableSkinsResponse;

//  Forward declaration of class ns4__getDistributionListMembersRequest.
class ns4__getDistributionListMembersRequest;

//  Forward declaration of class ns4__getDistributionListMembersResponse.
class ns4__getDistributionListMembersResponse;

//  Forward declaration of class ns4__getDistributionListRequest.
class ns4__getDistributionListRequest;

//  Forward declaration of class ns4__getDistributionListResponse.
class ns4__getDistributionListResponse;

//  Forward declaration of class ns4__distributionListInfo.
class ns4__distributionListInfo;

//  Forward declaration of class ns4__distributionListGranteeInfo.
class ns4__distributionListGranteeInfo;

//  Forward declaration of class ns4__distributionListRightInfo.
class ns4__distributionListRightInfo;

//  Forward declaration of class ns4__getIdentitiesRequest.
class ns4__getIdentitiesRequest;

//  Forward declaration of class ns4__getIdentitiesResponse.
class ns4__getIdentitiesResponse;

//  Forward declaration of class ns4__getInfoRequest.
class ns4__getInfoRequest;

//  Forward declaration of class ns4__getInfoResponse.
class ns4__getInfoResponse;

//  Forward declaration of class ns4__cos.
class ns4__cos;

//  Forward declaration of class ns4__accountZimletInfo.
class ns4__accountZimletInfo;

//  Forward declaration of class ns4__accountZimletContext.
class ns4__accountZimletContext;

//  Forward declaration of class ns4__accountZimletDesc.
class ns4__accountZimletDesc;

//  Forward declaration of class ns4__zimletServerExtension.
class ns4__zimletServerExtension;

//  Forward declaration of class ns4__accountZimletConfigInfo.
class ns4__accountZimletConfigInfo;

//  Forward declaration of class ns4__accountZimletGlobalConfigInfo.
class ns4__accountZimletGlobalConfigInfo;

//  Forward declaration of class ns4__accountZimletProperty.
class ns4__accountZimletProperty;

//  Forward declaration of class ns4__accountZimletHostConfigInfo.
class ns4__accountZimletHostConfigInfo;

//  Forward declaration of class ns4__prop.
class ns4__prop;

//  Forward declaration of class ns4__accountImapDataSource.
class ns4__accountImapDataSource;

//  Forward declaration of class ns4__accountDataSource.
class ns4__accountDataSource;

//  Forward declaration of class ns4__accountPop3DataSource.
class ns4__accountPop3DataSource;

//  Forward declaration of class ns4__accountCaldavDataSource.
class ns4__accountCaldavDataSource;

//  Forward declaration of class ns4__accountYabDataSource.
class ns4__accountYabDataSource;

//  Forward declaration of class ns4__accountRssDataSource.
class ns4__accountRssDataSource;

//  Forward declaration of class ns4__accountGalDataSource.
class ns4__accountGalDataSource;

//  Forward declaration of class ns4__accountCalDataSource.
class ns4__accountCalDataSource;

//  Forward declaration of class ns4__accountUnknownDataSource.
class ns4__accountUnknownDataSource;

//  Forward declaration of class ns4__childAccount.
class ns4__childAccount;

//  Forward declaration of class ns4__licenseInfo.
class ns4__licenseInfo;

//  Forward declaration of class ns4__licenseAttr.
class ns4__licenseAttr;

//  Forward declaration of class ns4__getPrefsRequest.
class ns4__getPrefsRequest;

//  Forward declaration of class ns4__getPrefsResponse.
class ns4__getPrefsResponse;

//  Forward declaration of class ns4__getRightsRequest.
class ns4__getRightsRequest;

//  Forward declaration of class ns4__right.
class ns4__right;

//  Forward declaration of class ns4__getRightsResponse.
class ns4__getRightsResponse;

//  Forward declaration of class ns4__accountACEInfo.
class ns4__accountACEInfo;

//  Forward declaration of class ns4__getSMIMEPublicCertsRequest.
class ns4__getSMIMEPublicCertsRequest;

//  Forward declaration of class ns4__smimePublicCertsStoreSpec.
class ns4__smimePublicCertsStoreSpec;

//  Forward declaration of class ns4__getSMIMEPublicCertsResponse.
class ns4__getSMIMEPublicCertsResponse;

//  Forward declaration of class ns4__smimePublicCertsInfo.
class ns4__smimePublicCertsInfo;

//  Forward declaration of class ns4__smimePublicCertInfo.
class ns4__smimePublicCertInfo;

//  Forward declaration of class ns4__getShareInfoRequest.
class ns4__getShareInfoRequest;

//  Forward declaration of class ns4__getShareInfoResponse.
class ns4__getShareInfoResponse;

//  Forward declaration of class ns4__getSignaturesRequest.
class ns4__getSignaturesRequest;

//  Forward declaration of class ns4__getSignaturesResponse.
class ns4__getSignaturesResponse;

//  Forward declaration of class ns4__getVersionInfoRequest.
class ns4__getVersionInfoRequest;

//  Forward declaration of class ns4__getVersionInfoResponse.
class ns4__getVersionInfoResponse;

//  Forward declaration of class ns4__versionInfo.
class ns4__versionInfo;

//  Forward declaration of class ns4__getWhiteBlackListRequest.
class ns4__getWhiteBlackListRequest;

//  Forward declaration of class ns4__getWhiteBlackListResponse.
class ns4__getWhiteBlackListResponse;

//  Forward declaration of class ns4__grantRightsRequest.
class ns4__grantRightsRequest;

//  Forward declaration of class ns4__grantRightsResponse.
class ns4__grantRightsResponse;

//  Forward declaration of class ns4__modifyIdentityRequest.
class ns4__modifyIdentityRequest;

//  Forward declaration of class ns4__modifyIdentityResponse.
class ns4__modifyIdentityResponse;

//  Forward declaration of class ns4__modifyPrefsRequest.
class ns4__modifyPrefsRequest;

//  Forward declaration of class ns4__modifyPrefsResponse.
class ns4__modifyPrefsResponse;

//  Forward declaration of class ns4__modifyPropertiesRequest.
class ns4__modifyPropertiesRequest;

//  Forward declaration of class ns4__modifyPropertiesResponse.
class ns4__modifyPropertiesResponse;

//  Forward declaration of class ns4__modifySignatureRequest.
class ns4__modifySignatureRequest;

//  Forward declaration of class ns4__modifySignatureResponse.
class ns4__modifySignatureResponse;

//  Forward declaration of class ns4__modifyWhiteBlackListRequest.
class ns4__modifyWhiteBlackListRequest;

//  Forward declaration of class ns4__modifyWhiteBlackListResponse.
class ns4__modifyWhiteBlackListResponse;

//  Forward declaration of class ns4__modifyZimletPrefsRequest.
class ns4__modifyZimletPrefsRequest;

//  Forward declaration of class ns4__modifyZimletPrefsSpec.
class ns4__modifyZimletPrefsSpec;

//  Forward declaration of class ns4__modifyZimletPrefsResponse.
class ns4__modifyZimletPrefsResponse;

//  Forward declaration of class ns4__revokeRightsRequest.
class ns4__revokeRightsRequest;

//  Forward declaration of class ns4__revokeRightsResponse.
class ns4__revokeRightsResponse;

//  Forward declaration of class ns4__searchCalendarResourcesRequest.
class ns4__searchCalendarResourcesRequest;

//  Forward declaration of class ns4__entrySearchFilterInfo.
class ns4__entrySearchFilterInfo;

//  Forward declaration of class ns4__entrySearchFilterMultiCond.
class ns4__entrySearchFilterMultiCond;

//  Forward declaration of class ns4__entrySearchFilterSingleCond.
class ns4__entrySearchFilterSingleCond;

//  Forward declaration of class ns4__searchCalendarResourcesResponse.
class ns4__searchCalendarResourcesResponse;

//  Forward declaration of class ns4__calendarResourceInfo.
class ns4__calendarResourceInfo;

//  Forward declaration of class ns4__searchGalRequest.
class ns4__searchGalRequest;

//  Forward declaration of class ns4__searchGalResponse.
class ns4__searchGalResponse;

//  Forward declaration of class ns4__subscribeDistributionListRequest.
class ns4__subscribeDistributionListRequest;

//  Forward declaration of class ns4__subscribeDistributionListResponse.
class ns4__subscribeDistributionListResponse;

//  Forward declaration of class ns4__syncGalRequest.
class ns4__syncGalRequest;

//  Forward declaration of class ns4__syncGalResponse.
class ns4__syncGalResponse;

//  Forward declaration of class ns4__accountContactsDataSource.
class ns4__accountContactsDataSource;

//  Forward declaration of class ns4__calTZInfo.
class ns4__calTZInfo;

//  Forward declaration of class ns5__policy.
class ns5__policy;

//  Forward declaration of class ns5__deviceInfo.
class ns5__deviceInfo;

//  Forward declaration of class ns5__retentionPolicy.
class ns5__retentionPolicy;

//  Forward declaration of class ns5__idStatus.
class ns5__idStatus;

//  Forward declaration of class ns5__addAppointmentInviteRequest.
class ns5__addAppointmentInviteRequest;

//  Forward declaration of class ns5__setCalendarItemInfo.
class ns5__setCalendarItemInfo;

//  Forward declaration of class ns5__msg.
class ns5__msg;

//  Forward declaration of class ns5__header.
class ns5__header;

//  Forward declaration of class ns5__mimePartInfo.
class ns5__mimePartInfo;

//  Forward declaration of class ns5__attachmentsInfo.
class ns5__attachmentsInfo;

//  Forward declaration of class ns5__mimePartAttachSpec.
class ns5__mimePartAttachSpec;

//  Forward declaration of class ns5__attachSpec.
class ns5__attachSpec;

//  Forward declaration of class ns5__msgAttachSpec.
class ns5__msgAttachSpec;

//  Forward declaration of class ns5__contactAttachSpec.
class ns5__contactAttachSpec;

//  Forward declaration of class ns5__docAttachSpec.
class ns5__docAttachSpec;

//  Forward declaration of class ns5__invitationInfo.
class ns5__invitationInfo;

//  Forward declaration of class ns5__inviteComponent.
class ns5__inviteComponent;

//  Forward declaration of class ns5__inviteComponentCommon.
class ns5__inviteComponentCommon;

//  Forward declaration of class ns5__rawInvite.
class ns5__rawInvite;

//  Forward declaration of class ns5__geoInfo.
class ns5__geoInfo;

//  Forward declaration of class ns5__calendarAttendee.
class ns5__calendarAttendee;

//  Forward declaration of class ns5__xParam.
class ns5__xParam;

//  Forward declaration of class ns5__alarmInfo.
class ns5__alarmInfo;

//  Forward declaration of class ns5__alarmTriggerInfo.
class ns5__alarmTriggerInfo;

//  Forward declaration of class ns5__dateAttr.
class ns5__dateAttr;

//  Forward declaration of class ns5__durationInfo.
class ns5__durationInfo;

//  Forward declaration of class ns5__calendarAttach.
class ns5__calendarAttach;

//  Forward declaration of class ns5__xProp.
class ns5__xProp;

//  Forward declaration of class ns5__calOrganizer.
class ns5__calOrganizer;

//  Forward declaration of class ns5__recurrenceInfo.
class ns5__recurrenceInfo;

//  Forward declaration of class ns5__addRecurrenceInfo.
class ns5__addRecurrenceInfo;

//  Forward declaration of class ns5__excludeRecurrenceInfo.
class ns5__excludeRecurrenceInfo;

//  Forward declaration of class ns5__exceptionRuleInfo.
class ns5__exceptionRuleInfo;

//  Forward declaration of class ns5__recurIdInfo.
class ns5__recurIdInfo;

//  Forward declaration of class ns5__cancelRuleInfo.
class ns5__cancelRuleInfo;

//  Forward declaration of class ns5__singleDates.
class ns5__singleDates;

//  Forward declaration of class ns5__dtVal.
class ns5__dtVal;

//  Forward declaration of class ns5__dtTimeInfo.
class ns5__dtTimeInfo;

//  Forward declaration of class ns5__simpleRepeatingRule.
class ns5__simpleRepeatingRule;

//  Forward declaration of class ns5__dateTimeStringAttr.
class ns5__dateTimeStringAttr;

//  Forward declaration of class ns5__numAttr.
class ns5__numAttr;

//  Forward declaration of class ns5__intervalRule.
class ns5__intervalRule;

//  Forward declaration of class ns5__bySecondRule.
class ns5__bySecondRule;

//  Forward declaration of class ns5__byMinuteRule.
class ns5__byMinuteRule;

//  Forward declaration of class ns5__byHourRule.
class ns5__byHourRule;

//  Forward declaration of class ns5__byDayRule.
class ns5__byDayRule;

//  Forward declaration of class ns5__wkDay.
class ns5__wkDay;

//  Forward declaration of class ns5__byMonthDayRule.
class ns5__byMonthDayRule;

//  Forward declaration of class ns5__byYearDayRule.
class ns5__byYearDayRule;

//  Forward declaration of class ns5__byWeekNoRule.
class ns5__byWeekNoRule;

//  Forward declaration of class ns5__byMonthRule.
class ns5__byMonthRule;

//  Forward declaration of class ns5__bySetPosRule.
class ns5__bySetPosRule;

//  Forward declaration of class ns5__wkstRule.
class ns5__wkstRule;

//  Forward declaration of class ns5__xNameRule.
class ns5__xNameRule;

//  Forward declaration of class ns5__exceptionRecurIdInfo.
class ns5__exceptionRecurIdInfo;

//  Forward declaration of class ns5__calTZInfo.
class ns5__calTZInfo;

//  Forward declaration of class ns5__emailAddrInfo.
class ns5__emailAddrInfo;

//  Forward declaration of class ns5__addAppointmentInviteResponse.
class ns5__addAppointmentInviteResponse;

//  Forward declaration of class ns5__addCommentRequest.
class ns5__addCommentRequest;

//  Forward declaration of class ns5__addedComment.
class ns5__addedComment;

//  Forward declaration of class ns5__addCommentResponse.
class ns5__addCommentResponse;

//  Forward declaration of class ns5__addMsgRequest.
class ns5__addMsgRequest;

//  Forward declaration of class ns5__addMsgSpec.
class ns5__addMsgSpec;

//  Forward declaration of class ns5__addMsgResponse.
class ns5__addMsgResponse;

//  Forward declaration of class ns5__chatSummary.
class ns5__chatSummary;

//  Forward declaration of class ns5__messageSummary.
class ns5__messageSummary;

//  Forward declaration of class ns5__messageCommon.
class ns5__messageCommon;

//  Forward declaration of class ns5__emailInfo.
class ns5__emailInfo;

//  Forward declaration of class ns5__inviteInfo.
class ns5__inviteInfo;

//  Forward declaration of class ns5__calendarReply.
class ns5__calendarReply;

//  Forward declaration of class ns5__mailCustomMetadata.
class ns5__mailCustomMetadata;

//  Forward declaration of class ns5__mailKeyValuePairs.
class ns5__mailKeyValuePairs;

//  Forward declaration of class ns5__addTaskInviteRequest.
class ns5__addTaskInviteRequest;

//  Forward declaration of class ns5__addTaskInviteResponse.
class ns5__addTaskInviteResponse;

//  Forward declaration of class ns5__announceOrganizerChangeRequest.
class ns5__announceOrganizerChangeRequest;

//  Forward declaration of class ns5__announceOrganizerChangeResponse.
class ns5__announceOrganizerChangeResponse;

//  Forward declaration of class ns5__applyFilterRulesRequest.
class ns5__applyFilterRulesRequest;

//  Forward declaration of class ns5__idsAttr.
class ns5__idsAttr;

//  Forward declaration of class ns5__applyFilterRulesResponse.
class ns5__applyFilterRulesResponse;

//  Forward declaration of class ns5__applyOutgoingFilterRulesRequest.
class ns5__applyOutgoingFilterRulesRequest;

//  Forward declaration of class ns5__applyOutgoingFilterRulesResponse.
class ns5__applyOutgoingFilterRulesResponse;

//  Forward declaration of class ns5__autoCompleteRequest.
class ns5__autoCompleteRequest;

//  Forward declaration of class ns5__autoCompleteResponse.
class ns5__autoCompleteResponse;

//  Forward declaration of class ns5__autoCompleteMatch.
class ns5__autoCompleteMatch;

//  Forward declaration of class ns5__bounceMsgRequest.
class ns5__bounceMsgRequest;

//  Forward declaration of class ns5__bounceMsgSpec.
class ns5__bounceMsgSpec;

//  Forward declaration of class ns5__bounceMsgResponse.
class ns5__bounceMsgResponse;

//  Forward declaration of class ns5__browseRequest.
class ns5__browseRequest;

//  Forward declaration of class ns5__browseResponse.
class ns5__browseResponse;

//  Forward declaration of class ns5__browseData.
class ns5__browseData;

//  Forward declaration of class ns5__cancelAppointmentRequest.
class ns5__cancelAppointmentRequest;

//  Forward declaration of class ns5__instanceRecurIdInfo.
class ns5__instanceRecurIdInfo;

//  Forward declaration of class ns5__cancelAppointmentResponse.
class ns5__cancelAppointmentResponse;

//  Forward declaration of class ns5__cancelTaskRequest.
class ns5__cancelTaskRequest;

//  Forward declaration of class ns5__cancelTaskResponse.
class ns5__cancelTaskResponse;

//  Forward declaration of class ns5__checkDeviceStatusRequest.
class ns5__checkDeviceStatusRequest;

//  Forward declaration of class ns5__checkDeviceStatusResponse.
class ns5__checkDeviceStatusResponse;

//  Forward declaration of class ns5__checkPermissionRequest.
class ns5__checkPermissionRequest;

//  Forward declaration of class ns5__targetSpec.
class ns5__targetSpec;

//  Forward declaration of class ns5__checkPermissionResponse.
class ns5__checkPermissionResponse;

//  Forward declaration of class ns5__rightPermission.
class ns5__rightPermission;

//  Forward declaration of class ns5__checkRecurConflictsRequest.
class ns5__checkRecurConflictsRequest;

//  Forward declaration of class ns5__expandedRecurrenceCancel.
class ns5__expandedRecurrenceCancel;

//  Forward declaration of class ns5__expandedRecurrenceComponent.
class ns5__expandedRecurrenceComponent;

//  Forward declaration of class ns5__expandedRecurrenceInvite.
class ns5__expandedRecurrenceInvite;

//  Forward declaration of class ns5__expandedRecurrenceException.
class ns5__expandedRecurrenceException;

//  Forward declaration of class ns5__freeBusyUserSpec.
class ns5__freeBusyUserSpec;

//  Forward declaration of class ns5__checkRecurConflictsResponse.
class ns5__checkRecurConflictsResponse;

//  Forward declaration of class ns5__conflictRecurrenceInstance.
class ns5__conflictRecurrenceInstance;

//  Forward declaration of class ns5__expandedRecurrenceInstance.
class ns5__expandedRecurrenceInstance;

//  Forward declaration of class ns5__freeBusyUserStatus.
class ns5__freeBusyUserStatus;

//  Forward declaration of class ns5__checkSpellingRequest.
class ns5__checkSpellingRequest;

//  Forward declaration of class ns5__checkSpellingResponse.
class ns5__checkSpellingResponse;

//  Forward declaration of class ns5__misspelling.
class ns5__misspelling;

//  Forward declaration of class ns5__completeTaskInstanceRequest.
class ns5__completeTaskInstanceRequest;

//  Forward declaration of class ns5__completeTaskInstanceResponse.
class ns5__completeTaskInstanceResponse;

//  Forward declaration of class ns5__contactActionRequest.
class ns5__contactActionRequest;

//  Forward declaration of class ns5__contactActionSelector.
class ns5__contactActionSelector;

//  Forward declaration of class ns5__actionSelector.
class ns5__actionSelector;

//  Forward declaration of class ns5__newContactAttr.
class ns5__newContactAttr;

//  Forward declaration of class ns5__noteActionSelector.
class ns5__noteActionSelector;

//  Forward declaration of class ns5__folderActionSelector.
class ns5__folderActionSelector;

//  Forward declaration of class ns5__actionGrantSelector.
class ns5__actionGrantSelector;

//  Forward declaration of class ns5__contactActionResponse.
class ns5__contactActionResponse;

//  Forward declaration of class ns5__folderActionResult.
class ns5__folderActionResult;

//  Forward declaration of class ns5__idAndOperation.
class ns5__idAndOperation;

//  Forward declaration of class ns5__convActionRequest.
class ns5__convActionRequest;

//  Forward declaration of class ns5__convActionResponse.
class ns5__convActionResponse;

//  Forward declaration of class ns5__counterAppointmentRequest.
class ns5__counterAppointmentRequest;

//  Forward declaration of class ns5__counterAppointmentResponse.
class ns5__counterAppointmentResponse;

//  Forward declaration of class ns5__createAppointmentExceptionRequest.
class ns5__createAppointmentExceptionRequest;

//  Forward declaration of class ns5__calItemRequestBase.
class ns5__calItemRequestBase;

//  Forward declaration of class ns5__createAppointmentExceptionResponse.
class ns5__createAppointmentExceptionResponse;

//  Forward declaration of class ns5__createCalendarItemResponse.
class ns5__createCalendarItemResponse;

//  Forward declaration of class ns5__calEcho.
class ns5__calEcho;

//  Forward declaration of class ns5__inviteAsMP.
class ns5__inviteAsMP;

//  Forward declaration of class ns5__mpInviteInfo.
class ns5__mpInviteInfo;

//  Forward declaration of class ns5__partInfo.
class ns5__partInfo;

//  Forward declaration of class ns5__shareNotification.
class ns5__shareNotification;

//  Forward declaration of class ns5__notification.
class ns5__notification;

//  Forward declaration of class ns5__dlSubscriptionNotification.
class ns5__dlSubscriptionNotification;

//  Forward declaration of class ns5__createAppointmentRequest.
class ns5__createAppointmentRequest;

//  Forward declaration of class ns5__createAppointmentResponse.
class ns5__createAppointmentResponse;

//  Forward declaration of class ns5__createContactRequest.
class ns5__createContactRequest;

//  Forward declaration of class ns5__contactSpec.
class ns5__contactSpec;

//  Forward declaration of class ns5__vCardInfo.
class ns5__vCardInfo;

//  Forward declaration of class ns5__newContactGroupMember.
class ns5__newContactGroupMember;

//  Forward declaration of class ns5__createContactResponse.
class ns5__createContactResponse;

//  Forward declaration of class ns5__contactInfo.
class ns5__contactInfo;

//  Forward declaration of class ns5__contactGroupMember.
class ns5__contactGroupMember;

//  Forward declaration of class ns5__createDataSourceRequest.
class ns5__createDataSourceRequest;

//  Forward declaration of class ns5__mailImapDataSource.
class ns5__mailImapDataSource;

//  Forward declaration of class ns5__mailDataSource.
class ns5__mailDataSource;

//  Forward declaration of class ns5__mailPop3DataSource.
class ns5__mailPop3DataSource;

//  Forward declaration of class ns5__mailCaldavDataSource.
class ns5__mailCaldavDataSource;

//  Forward declaration of class ns5__mailYabDataSource.
class ns5__mailYabDataSource;

//  Forward declaration of class ns5__mailRssDataSource.
class ns5__mailRssDataSource;

//  Forward declaration of class ns5__mailGalDataSource.
class ns5__mailGalDataSource;

//  Forward declaration of class ns5__mailCalDataSource.
class ns5__mailCalDataSource;

//  Forward declaration of class ns5__mailUnknownDataSource.
class ns5__mailUnknownDataSource;

//  Forward declaration of class ns5__createDataSourceResponse.
class ns5__createDataSourceResponse;

//  Forward declaration of class ns5__imapDataSourceId.
class ns5__imapDataSourceId;

//  Forward declaration of class ns5__pop3DataSourceId.
class ns5__pop3DataSourceId;

//  Forward declaration of class ns5__caldavDataSourceId.
class ns5__caldavDataSourceId;

//  Forward declaration of class ns5__yabDataSourceId.
class ns5__yabDataSourceId;

//  Forward declaration of class ns5__rssDataSourceId.
class ns5__rssDataSourceId;

//  Forward declaration of class ns5__galDataSourceId.
class ns5__galDataSourceId;

//  Forward declaration of class ns5__calDataSourceId.
class ns5__calDataSourceId;

//  Forward declaration of class ns5__unknownDataSourceId.
class ns5__unknownDataSourceId;

//  Forward declaration of class ns5__createFolderRequest.
class ns5__createFolderRequest;

//  Forward declaration of class ns5__newFolderSpec.
class ns5__newFolderSpec;

//  Forward declaration of class ns5__createFolderResponse.
class ns5__createFolderResponse;

//  Forward declaration of class ns5__folder.
class ns5__folder;

//  Forward declaration of class ns5__acl.
class ns5__acl;

//  Forward declaration of class ns5__grant.
class ns5__grant;

//  Forward declaration of class ns5__mountpoint.
class ns5__mountpoint;

//  Forward declaration of class ns5__searchFolder.
class ns5__searchFolder;

//  Forward declaration of class ns5__createMountpointRequest.
class ns5__createMountpointRequest;

//  Forward declaration of class ns5__newMountpointSpec.
class ns5__newMountpointSpec;

//  Forward declaration of class ns5__createMountpointResponse.
class ns5__createMountpointResponse;

//  Forward declaration of class ns5__createNoteRequest.
class ns5__createNoteRequest;

//  Forward declaration of class ns5__newNoteSpec.
class ns5__newNoteSpec;

//  Forward declaration of class ns5__createNoteResponse.
class ns5__createNoteResponse;

//  Forward declaration of class ns5__noteInfo.
class ns5__noteInfo;

//  Forward declaration of class ns5__createSearchFolderRequest.
class ns5__createSearchFolderRequest;

//  Forward declaration of class ns5__newSearchFolderSpec.
class ns5__newSearchFolderSpec;

//  Forward declaration of class ns5__createSearchFolderResponse.
class ns5__createSearchFolderResponse;

//  Forward declaration of class ns5__createTagRequest.
class ns5__createTagRequest;

//  Forward declaration of class ns5__tagSpec.
class ns5__tagSpec;

//  Forward declaration of class ns5__createTagResponse.
class ns5__createTagResponse;

//  Forward declaration of class ns5__tagInfo.
class ns5__tagInfo;

//  Forward declaration of class ns5__createTaskExceptionRequest.
class ns5__createTaskExceptionRequest;

//  Forward declaration of class ns5__createTaskExceptionResponse.
class ns5__createTaskExceptionResponse;

//  Forward declaration of class ns5__createTaskRequest.
class ns5__createTaskRequest;

//  Forward declaration of class ns5__createTaskResponse.
class ns5__createTaskResponse;

//  Forward declaration of class ns5__createWaitSetRequest.
class ns5__createWaitSetRequest;

//  Forward declaration of class ns5__createWaitSetResponse.
class ns5__createWaitSetResponse;

//  Forward declaration of class ns5__declineCounterAppointmentRequest.
class ns5__declineCounterAppointmentRequest;

//  Forward declaration of class ns5__declineCounterAppointmentResponse.
class ns5__declineCounterAppointmentResponse;

//  Forward declaration of class ns5__deleteDataSourceRequest.
class ns5__deleteDataSourceRequest;

//  Forward declaration of class ns5__imapDataSourceNameOrId.
class ns5__imapDataSourceNameOrId;

//  Forward declaration of class ns5__dataSourceNameOrId.
class ns5__dataSourceNameOrId;

//  Forward declaration of class ns5__nameOrId.
class ns5__nameOrId;

//  Forward declaration of class ns5__pop3DataSourceNameOrId.
class ns5__pop3DataSourceNameOrId;

//  Forward declaration of class ns5__caldavDataSourceNameOrId.
class ns5__caldavDataSourceNameOrId;

//  Forward declaration of class ns5__yabDataSourceNameOrId.
class ns5__yabDataSourceNameOrId;

//  Forward declaration of class ns5__rssDataSourceNameOrId.
class ns5__rssDataSourceNameOrId;

//  Forward declaration of class ns5__galDataSourceNameOrId.
class ns5__galDataSourceNameOrId;

//  Forward declaration of class ns5__calDataSourceNameOrId.
class ns5__calDataSourceNameOrId;

//  Forward declaration of class ns5__unknownDataSourceNameOrId.
class ns5__unknownDataSourceNameOrId;

//  Forward declaration of class ns5__deleteDataSourceResponse.
class ns5__deleteDataSourceResponse;

//  Forward declaration of class ns5__deleteDeviceRequest.
class ns5__deleteDeviceRequest;

//  Forward declaration of class ns5__deleteDeviceResponse.
class ns5__deleteDeviceResponse;

//  Forward declaration of class ns5__nameId.
class ns5__nameId;

//  Forward declaration of class ns5__destroyWaitSetRequest.
class ns5__destroyWaitSetRequest;

//  Forward declaration of class ns5__destroyWaitSetResponse.
class ns5__destroyWaitSetResponse;

//  Forward declaration of class ns5__diffDocumentRequest.
class ns5__diffDocumentRequest;

//  Forward declaration of class ns5__diffDocumentVersionSpec.
class ns5__diffDocumentVersionSpec;

//  Forward declaration of class ns5__diffDocumentResponse.
class ns5__diffDocumentResponse;

//  Forward declaration of class ns5__dispositionAndText.
class ns5__dispositionAndText;

//  Forward declaration of class ns5__dismissCalendarItemAlarmRequest.
class ns5__dismissCalendarItemAlarmRequest;

//  Forward declaration of class ns5__dismissAppointmentAlarm.
class ns5__dismissAppointmentAlarm;

//  Forward declaration of class ns5__dismissAlarm.
class ns5__dismissAlarm;

//  Forward declaration of class ns5__dismissTaskAlarm.
class ns5__dismissTaskAlarm;

//  Forward declaration of class ns5__dismissCalendarItemAlarmResponse.
class ns5__dismissCalendarItemAlarmResponse;

//  Forward declaration of class ns5__updatedAppointmentAlarmInfo.
class ns5__updatedAppointmentAlarmInfo;

//  Forward declaration of class ns5__updatedAlarmInfo.
class ns5__updatedAlarmInfo;

//  Forward declaration of class ns5__alarmDataInfo.
class ns5__alarmDataInfo;

//  Forward declaration of class ns5__updatedTaskAlarmInfo.
class ns5__updatedTaskAlarmInfo;

//  Forward declaration of class ns5__documentActionRequest.
class ns5__documentActionRequest;

//  Forward declaration of class ns5__documentActionSelector.
class ns5__documentActionSelector;

//  Forward declaration of class ns5__documentActionGrant.
class ns5__documentActionGrant;

//  Forward declaration of class ns5__documentActionResponse.
class ns5__documentActionResponse;

//  Forward declaration of class ns5__emptyDumpsterRequest.
class ns5__emptyDumpsterRequest;

//  Forward declaration of class ns5__emptyDumpsterResponse.
class ns5__emptyDumpsterResponse;

//  Forward declaration of class ns5__enableSharedReminderRequest.
class ns5__enableSharedReminderRequest;

//  Forward declaration of class ns5__sharedReminderMount.
class ns5__sharedReminderMount;

//  Forward declaration of class ns5__enableSharedReminderResponse.
class ns5__enableSharedReminderResponse;

//  Forward declaration of class ns5__expandRecurRequest.
class ns5__expandRecurRequest;

//  Forward declaration of class ns5__expandRecurResponse.
class ns5__expandRecurResponse;

//  Forward declaration of class ns5__exportContactsRequest.
class ns5__exportContactsRequest;

//  Forward declaration of class ns5__exportContactsResponse.
class ns5__exportContactsResponse;

//  Forward declaration of class ns5__folderActionRequest.
class ns5__folderActionRequest;

//  Forward declaration of class ns5__folderActionResponse.
class ns5__folderActionResponse;

//  Forward declaration of class ns5__forwardAppointmentInviteRequest.
class ns5__forwardAppointmentInviteRequest;

//  Forward declaration of class ns5__forwardAppointmentInviteResponse.
class ns5__forwardAppointmentInviteResponse;

//  Forward declaration of class ns5__forwardAppointmentRequest.
class ns5__forwardAppointmentRequest;

//  Forward declaration of class ns5__forwardAppointmentResponse.
class ns5__forwardAppointmentResponse;

//  Forward declaration of class ns5__generateUUIDRequest.
class ns5__generateUUIDRequest;

//  Forward declaration of class ns5__getActivityStreamRequest.
class ns5__getActivityStreamRequest;

//  Forward declaration of class ns5__activityFilter.
class ns5__activityFilter;

//  Forward declaration of class ns5__getActivityStreamResponse.
class ns5__getActivityStreamResponse;

//  Forward declaration of class ns5__idEmailName.
class ns5__idEmailName;

//  Forward declaration of class ns5__activityInfo.
class ns5__activityInfo;

//  Forward declaration of class ns5__getAllDevicesRequest.
class ns5__getAllDevicesRequest;

//  Forward declaration of class ns5__getAllDevicesResponse.
class ns5__getAllDevicesResponse;

//  Forward declaration of class ns5__getAppointmentRequest.
class ns5__getAppointmentRequest;

//  Forward declaration of class ns5__getCalendarItemRequestBase.
class ns5__getCalendarItemRequestBase;

//  Forward declaration of class ns5__getAppointmentResponse.
class ns5__getAppointmentResponse;

//  Forward declaration of class ns5__calendarItemInfo.
class ns5__calendarItemInfo;

//  Forward declaration of class ns5__invitation.
class ns5__invitation;

//  Forward declaration of class ns5__taskItemInfo.
class ns5__taskItemInfo;

//  Forward declaration of class ns5__getApptSummariesRequest.
class ns5__getApptSummariesRequest;

//  Forward declaration of class ns5__getApptSummariesResponse.
class ns5__getApptSummariesResponse;

//  Forward declaration of class ns5__legacyAppointmentData.
class ns5__legacyAppointmentData;

//  Forward declaration of class ns5__legacyCalendaringData.
class ns5__legacyCalendaringData;

//  Forward declaration of class ns5__commonCalendaringData.
class ns5__commonCalendaringData;

//  Forward declaration of class ns5__instanceDataAttrs.
class ns5__instanceDataAttrs;

//  Forward declaration of class ns5__commonInstanceDataAttrs.
class ns5__commonInstanceDataAttrs;

//  Forward declaration of class ns5__legacyInstanceDataInfo.
class ns5__legacyInstanceDataInfo;

//  Forward declaration of class ns5__legacyInstanceDataAttrs.
class ns5__legacyInstanceDataAttrs;

//  Forward declaration of class ns5__legacyTaskData.
class ns5__legacyTaskData;

//  Forward declaration of class ns5__getCalendarItemSummariesRequest.
class ns5__getCalendarItemSummariesRequest;

//  Forward declaration of class ns5__getCalendarItemSummariesResponse.
class ns5__getCalendarItemSummariesResponse;

//  Forward declaration of class ns5__getCommentsRequest.
class ns5__getCommentsRequest;

//  Forward declaration of class ns5__parentId.
class ns5__parentId;

//  Forward declaration of class ns5__getCommentsResponse.
class ns5__getCommentsResponse;

//  Forward declaration of class ns5__commentInfo.
class ns5__commentInfo;

//  Forward declaration of class ns5__getContactsRequest.
class ns5__getContactsRequest;

//  Forward declaration of class ns5__getContactsResponse.
class ns5__getContactsResponse;

//  Forward declaration of class ns5__getConvRequest.
class ns5__getConvRequest;

//  Forward declaration of class ns5__conversationSpec.
class ns5__conversationSpec;

//  Forward declaration of class ns5__getConvResponse.
class ns5__getConvResponse;

//  Forward declaration of class ns5__conversationInfo.
class ns5__conversationInfo;

//  Forward declaration of class ns5__chatMessageInfo.
class ns5__chatMessageInfo;

//  Forward declaration of class ns5__messageInfo.
class ns5__messageInfo;

//  Forward declaration of class ns5__getCustomMetadataRequest.
class ns5__getCustomMetadataRequest;

//  Forward declaration of class ns5__getCustomMetadataResponse.
class ns5__getCustomMetadataResponse;

//  Forward declaration of class ns5__getDataSourcesRequest.
class ns5__getDataSourcesRequest;

//  Forward declaration of class ns5__getDataSourcesResponse.
class ns5__getDataSourcesResponse;

//  Forward declaration of class ns5__getDocumentShareURLRequest.
class ns5__getDocumentShareURLRequest;

//  Forward declaration of class ns5__itemSpec.
class ns5__itemSpec;

//  Forward declaration of class ns5__getEffectiveFolderPermsRequest.
class ns5__getEffectiveFolderPermsRequest;

//  Forward declaration of class ns5__folderSpec.
class ns5__folderSpec;

//  Forward declaration of class ns5__getEffectiveFolderPermsResponse.
class ns5__getEffectiveFolderPermsResponse;

//  Forward declaration of class ns5__rights.
class ns5__rights;

//  Forward declaration of class ns5__getFilterRulesRequest.
class ns5__getFilterRulesRequest;

//  Forward declaration of class ns5__getFilterRulesResponse.
class ns5__getFilterRulesResponse;

//  Forward declaration of class ns5__filterRule.
class ns5__filterRule;

//  Forward declaration of class ns5__filterTests.
class ns5__filterTests;

//  Forward declaration of class ns5__addressBookTest.
class ns5__addressBookTest;

//  Forward declaration of class ns5__filterTest.
class ns5__filterTest;

//  Forward declaration of class ns5__addressTest.
class ns5__addressTest;

//  Forward declaration of class ns5__attachmentTest.
class ns5__attachmentTest;

//  Forward declaration of class ns5__bodyTest.
class ns5__bodyTest;

//  Forward declaration of class ns5__bulkTest.
class ns5__bulkTest;

//  Forward declaration of class ns5__contactRankingTest.
class ns5__contactRankingTest;

//  Forward declaration of class ns5__conversationTest.
class ns5__conversationTest;

//  Forward declaration of class ns5__currentDayOfWeekTest.
class ns5__currentDayOfWeekTest;

//  Forward declaration of class ns5__currentTimeTest.
class ns5__currentTimeTest;

//  Forward declaration of class ns5__dateTest.
class ns5__dateTest;

//  Forward declaration of class ns5__facebookTest.
class ns5__facebookTest;

//  Forward declaration of class ns5__flaggedTest.
class ns5__flaggedTest;

//  Forward declaration of class ns5__headerExistsTest.
class ns5__headerExistsTest;

//  Forward declaration of class ns5__headerTest.
class ns5__headerTest;

//  Forward declaration of class ns5__importanceTest.
class ns5__importanceTest;

//  Forward declaration of class ns5__inviteTest.
class ns5__inviteTest;

//  Forward declaration of class ns5__linkedInTest.
class ns5__linkedInTest;

//  Forward declaration of class ns5__listTest.
class ns5__listTest;

//  Forward declaration of class ns5__meTest.
class ns5__meTest;

//  Forward declaration of class ns5__mimeHeaderTest.
class ns5__mimeHeaderTest;

//  Forward declaration of class ns5__sizeTest.
class ns5__sizeTest;

//  Forward declaration of class ns5__socialcastTest.
class ns5__socialcastTest;

//  Forward declaration of class ns5__trueTest.
class ns5__trueTest;

//  Forward declaration of class ns5__twitterTest.
class ns5__twitterTest;

//  Forward declaration of class ns5__keepAction.
class ns5__keepAction;

//  Forward declaration of class ns5__filterAction.
class ns5__filterAction;

//  Forward declaration of class ns5__discardAction.
class ns5__discardAction;

//  Forward declaration of class ns5__fileIntoAction.
class ns5__fileIntoAction;

//  Forward declaration of class ns5__flagAction.
class ns5__flagAction;

//  Forward declaration of class ns5__tagAction.
class ns5__tagAction;

//  Forward declaration of class ns5__redirectAction.
class ns5__redirectAction;

//  Forward declaration of class ns5__replyAction.
class ns5__replyAction;

//  Forward declaration of class ns5__notifyAction.
class ns5__notifyAction;

//  Forward declaration of class ns5__stopAction.
class ns5__stopAction;

//  Forward declaration of class ns5__getFolderRequest.
class ns5__getFolderRequest;

//  Forward declaration of class ns5__getFolderSpec.
class ns5__getFolderSpec;

//  Forward declaration of class ns5__getFolderResponse.
class ns5__getFolderResponse;

//  Forward declaration of class ns5__getFreeBusyRequest.
class ns5__getFreeBusyRequest;

//  Forward declaration of class ns5__getFreeBusyResponse.
class ns5__getFreeBusyResponse;

//  Forward declaration of class ns5__freeBusyUserInfo.
class ns5__freeBusyUserInfo;

//  Forward declaration of class ns5__freeBusyFREEslot.
class ns5__freeBusyFREEslot;

//  Forward declaration of class ns5__freeBusySlot.
class ns5__freeBusySlot;

//  Forward declaration of class ns5__freeBusyBUSYslot.
class ns5__freeBusyBUSYslot;

//  Forward declaration of class ns5__freeBusyBUSYTENTATIVEslot.
class ns5__freeBusyBUSYTENTATIVEslot;

//  Forward declaration of class ns5__freeBusyBUSYUNAVAILABLEslot.
class ns5__freeBusyBUSYUNAVAILABLEslot;

//  Forward declaration of class ns5__freeBusyNODATAslot.
class ns5__freeBusyNODATAslot;

//  Forward declaration of class ns5__getICalRequest.
class ns5__getICalRequest;

//  Forward declaration of class ns5__getICalResponse.
class ns5__getICalResponse;

//  Forward declaration of class ns5__iCalContent.
class ns5__iCalContent;

//  Forward declaration of class ns5__getImportStatusRequest.
class ns5__getImportStatusRequest;

//  Forward declaration of class ns5__getImportStatusResponse.
class ns5__getImportStatusResponse;

//  Forward declaration of class ns5__imapImportStatusInfo.
class ns5__imapImportStatusInfo;

//  Forward declaration of class ns5__importStatusInfo.
class ns5__importStatusInfo;

//  Forward declaration of class ns5__pop3ImportStatusInfo.
class ns5__pop3ImportStatusInfo;

//  Forward declaration of class ns5__caldavImportStatusInfo.
class ns5__caldavImportStatusInfo;

//  Forward declaration of class ns5__yabImportStatusInfo.
class ns5__yabImportStatusInfo;

//  Forward declaration of class ns5__rssImportStatusInfo.
class ns5__rssImportStatusInfo;

//  Forward declaration of class ns5__galImportStatusInfo.
class ns5__galImportStatusInfo;

//  Forward declaration of class ns5__calImportStatusInfo.
class ns5__calImportStatusInfo;

//  Forward declaration of class ns5__unknownImportStatusInfo.
class ns5__unknownImportStatusInfo;

//  Forward declaration of class ns5__getItemRequest.
class ns5__getItemRequest;

//  Forward declaration of class ns5__getItemResponse.
class ns5__getItemResponse;

//  Forward declaration of class ns5__conversationSummary.
class ns5__conversationSummary;

//  Forward declaration of class ns5__commonDocumentInfo.
class ns5__commonDocumentInfo;

//  Forward declaration of class ns5__documentInfo.
class ns5__documentInfo;

//  Forward declaration of class ns5__getMailboxMetadataRequest.
class ns5__getMailboxMetadataRequest;

//  Forward declaration of class ns5__getMailboxMetadataResponse.
class ns5__getMailboxMetadataResponse;

//  Forward declaration of class ns5__getMiniCalRequest.
class ns5__getMiniCalRequest;

//  Forward declaration of class ns5__getMiniCalResponse.
class ns5__getMiniCalResponse;

//  Forward declaration of class ns5__miniCalError.
class ns5__miniCalError;

//  Forward declaration of class ns5__getMsgMetadataRequest.
class ns5__getMsgMetadataRequest;

//  Forward declaration of class ns5__getMsgMetadataResponse.
class ns5__getMsgMetadataResponse;

//  Forward declaration of class ns5__getMsgRequest.
class ns5__getMsgRequest;

//  Forward declaration of class ns5__msgSpec.
class ns5__msgSpec;

//  Forward declaration of class ns5__getMsgResponse.
class ns5__getMsgResponse;

//  Forward declaration of class ns5__msgWithGroupInfo.
class ns5__msgWithGroupInfo;

//  Forward declaration of class ns5__inviteWithGroupInfo.
class ns5__inviteWithGroupInfo;

//  Forward declaration of class ns5__inviteComponentWithGroupInfo.
class ns5__inviteComponentWithGroupInfo;

//  Forward declaration of class ns5__calendarAttendeeWithGroupInfo.
class ns5__calendarAttendeeWithGroupInfo;

//  Forward declaration of class ns5__getNoteRequest.
class ns5__getNoteRequest;

//  Forward declaration of class ns5__getNoteResponse.
class ns5__getNoteResponse;

//  Forward declaration of class ns5__getNotificationsRequest.
class ns5__getNotificationsRequest;

//  Forward declaration of class ns5__getNotificationsResponse.
class ns5__getNotificationsResponse;

//  Forward declaration of class ns5__getOutgoingFilterRulesRequest.
class ns5__getOutgoingFilterRulesRequest;

//  Forward declaration of class ns5__getOutgoingFilterRulesResponse.
class ns5__getOutgoingFilterRulesResponse;

//  Forward declaration of class ns5__getPermissionRequest.
class ns5__getPermissionRequest;

//  Forward declaration of class ns5__right.
class ns5__right;

//  Forward declaration of class ns5__getPermissionResponse.
class ns5__getPermissionResponse;

//  Forward declaration of class ns5__accountACEinfo.
class ns5__accountACEinfo;

//  Forward declaration of class ns5__getRecurRequest.
class ns5__getRecurRequest;

//  Forward declaration of class ns5__getRecurResponse.
class ns5__getRecurResponse;

//  Forward declaration of class ns5__cancelItemRecur.
class ns5__cancelItemRecur;

//  Forward declaration of class ns5__calendarItemRecur.
class ns5__calendarItemRecur;

//  Forward declaration of class ns5__exceptionItemRecur.
class ns5__exceptionItemRecur;

//  Forward declaration of class ns5__inviteItemRecur.
class ns5__inviteItemRecur;

//  Forward declaration of class ns5__getSearchFolderRequest.
class ns5__getSearchFolderRequest;

//  Forward declaration of class ns5__getSearchFolderResponse.
class ns5__getSearchFolderResponse;

//  Forward declaration of class ns5__getShareDetailsRequest.
class ns5__getShareDetailsRequest;

//  Forward declaration of class ns5__getShareDetailsResponse.
class ns5__getShareDetailsResponse;

//  Forward declaration of class ns5__shareDetails.
class ns5__shareDetails;

//  Forward declaration of class ns5__shareGrantee.
class ns5__shareGrantee;

//  Forward declaration of class ns5__getShareNotificationsRequest.
class ns5__getShareNotificationsRequest;

//  Forward declaration of class ns5__getShareNotificationsResponse.
class ns5__getShareNotificationsResponse;

//  Forward declaration of class ns5__shareNotificationInfo.
class ns5__shareNotificationInfo;

//  Forward declaration of class ns5__grantor.
class ns5__grantor;

//  Forward declaration of class ns5__linkInfo.
class ns5__linkInfo;

//  Forward declaration of class ns5__getSpellDictionariesRequest.
class ns5__getSpellDictionariesRequest;

//  Forward declaration of class ns5__getSpellDictionariesResponse.
class ns5__getSpellDictionariesResponse;

//  Forward declaration of class ns5__getSystemRetentionPolicyRequest.
class ns5__getSystemRetentionPolicyRequest;

//  Forward declaration of class ns5__getSystemRetentionPolicyResponse.
class ns5__getSystemRetentionPolicyResponse;

//  Forward declaration of class ns5__getTagRequest.
class ns5__getTagRequest;

//  Forward declaration of class ns5__getTagResponse.
class ns5__getTagResponse;

//  Forward declaration of class ns5__getTaskRequest.
class ns5__getTaskRequest;

//  Forward declaration of class ns5__getTaskResponse.
class ns5__getTaskResponse;

//  Forward declaration of class ns5__getTaskSummariesRequest.
class ns5__getTaskSummariesRequest;

//  Forward declaration of class ns5__getTaskSummariesResponse.
class ns5__getTaskSummariesResponse;

//  Forward declaration of class ns5__getWatchersRequest.
class ns5__getWatchersRequest;

//  Forward declaration of class ns5__getWatchersResponse.
class ns5__getWatchersResponse;

//  Forward declaration of class ns5__watcherInfo.
class ns5__watcherInfo;

//  Forward declaration of class ns5__integerIdAttr.
class ns5__integerIdAttr;

//  Forward declaration of class ns5__getWatchingItemsRequest.
class ns5__getWatchingItemsRequest;

//  Forward declaration of class ns5__getWatchingItemsResponse.
class ns5__getWatchingItemsResponse;

//  Forward declaration of class ns5__watchingTarget.
class ns5__watchingTarget;

//  Forward declaration of class ns5__getWorkingHoursRequest.
class ns5__getWorkingHoursRequest;

//  Forward declaration of class ns5__getWorkingHoursResponse.
class ns5__getWorkingHoursResponse;

//  Forward declaration of class ns5__getYahooAuthTokenRequest.
class ns5__getYahooAuthTokenRequest;

//  Forward declaration of class ns5__getYahooAuthTokenResponse.
class ns5__getYahooAuthTokenResponse;

//  Forward declaration of class ns5__getYahooCookieRequest.
class ns5__getYahooCookieRequest;

//  Forward declaration of class ns5__getYahooCookieResponse.
class ns5__getYahooCookieResponse;

//  Forward declaration of class ns5__grantPermissionRequest.
class ns5__grantPermissionRequest;

//  Forward declaration of class ns5__grantPermissionResponse.
class ns5__grantPermissionResponse;

//  Forward declaration of class ns5__iCalReplyRequest.
class ns5__iCalReplyRequest;

//  Forward declaration of class ns5__iCalReplyResponse.
class ns5__iCalReplyResponse;

//  Forward declaration of class ns5__importAppointmentsRequest.
class ns5__importAppointmentsRequest;

//  Forward declaration of class ns5__contentSpec.
class ns5__contentSpec;

//  Forward declaration of class ns5__importAppointmentsResponse.
class ns5__importAppointmentsResponse;

//  Forward declaration of class ns5__importContactsRequest.
class ns5__importContactsRequest;

//  Forward declaration of class ns5__content.
class ns5__content;

//  Forward declaration of class ns5__importContactsResponse.
class ns5__importContactsResponse;

//  Forward declaration of class ns5__importContact.
class ns5__importContact;

//  Forward declaration of class ns5__importDataRequest.
class ns5__importDataRequest;

//  Forward declaration of class ns5__importDataResponse.
class ns5__importDataResponse;

//  Forward declaration of class ns5__invalidateReminderDeviceRequest.
class ns5__invalidateReminderDeviceRequest;

//  Forward declaration of class ns5__invalidateReminderDeviceResponse.
class ns5__invalidateReminderDeviceResponse;

//  Forward declaration of class ns5__itemActionRequest.
class ns5__itemActionRequest;

//  Forward declaration of class ns5__itemActionResponse.
class ns5__itemActionResponse;

//  Forward declaration of class ns5__listDocumentRevisionsRequest.
class ns5__listDocumentRevisionsRequest;

//  Forward declaration of class ns5__listDocumentRevisionsSpec.
class ns5__listDocumentRevisionsSpec;

//  Forward declaration of class ns5__listDocumentRevisionsResponse.
class ns5__listDocumentRevisionsResponse;

//  Forward declaration of class ns5__modifyAppointmentRequest.
class ns5__modifyAppointmentRequest;

//  Forward declaration of class ns5__modifyAppointmentResponse.
class ns5__modifyAppointmentResponse;

//  Forward declaration of class ns5__modifyContactRequest.
class ns5__modifyContactRequest;

//  Forward declaration of class ns5__modifyContactSpec.
class ns5__modifyContactSpec;

//  Forward declaration of class ns5__modifyContactAttr.
class ns5__modifyContactAttr;

//  Forward declaration of class ns5__modifyContactGroupMember.
class ns5__modifyContactGroupMember;

//  Forward declaration of class ns5__modifyContactResponse.
class ns5__modifyContactResponse;

//  Forward declaration of class ns5__modifyDataSourceRequest.
class ns5__modifyDataSourceRequest;

//  Forward declaration of class ns5__modifyDataSourceResponse.
class ns5__modifyDataSourceResponse;

//  Forward declaration of class ns5__modifyFilterRulesRequest.
class ns5__modifyFilterRulesRequest;

//  Forward declaration of class ns5__modifyFilterRulesResponse.
class ns5__modifyFilterRulesResponse;

//  Forward declaration of class ns5__modifyMailboxMetadataRequest.
class ns5__modifyMailboxMetadataRequest;

//  Forward declaration of class ns5__modifyMailboxMetadataResponse.
class ns5__modifyMailboxMetadataResponse;

//  Forward declaration of class ns5__modifyOutgoingFilterRulesRequest.
class ns5__modifyOutgoingFilterRulesRequest;

//  Forward declaration of class ns5__modifyOutgoingFilterRulesResponse.
class ns5__modifyOutgoingFilterRulesResponse;

//  Forward declaration of class ns5__modifySearchFolderRequest.
class ns5__modifySearchFolderRequest;

//  Forward declaration of class ns5__modifySearchFolderSpec.
class ns5__modifySearchFolderSpec;

//  Forward declaration of class ns5__modifySearchFolderResponse.
class ns5__modifySearchFolderResponse;

//  Forward declaration of class ns5__modifyTaskRequest.
class ns5__modifyTaskRequest;

//  Forward declaration of class ns5__modifyTaskResponse.
class ns5__modifyTaskResponse;

//  Forward declaration of class ns5__msgActionRequest.
class ns5__msgActionRequest;

//  Forward declaration of class ns5__msgActionResponse.
class ns5__msgActionResponse;

//  Forward declaration of class ns5__noOpRequest.
class ns5__noOpRequest;

//  Forward declaration of class ns5__noOpResponse.
class ns5__noOpResponse;

//  Forward declaration of class ns5__noteActionRequest.
class ns5__noteActionRequest;

//  Forward declaration of class ns5__noteActionResponse.
class ns5__noteActionResponse;

//  Forward declaration of class ns5__purgeRevisionRequest.
class ns5__purgeRevisionRequest;

//  Forward declaration of class ns5__purgeRevisionSpec.
class ns5__purgeRevisionSpec;

//  Forward declaration of class ns5__purgeRevisionResponse.
class ns5__purgeRevisionResponse;

//  Forward declaration of class ns5__rankingActionRequest.
class ns5__rankingActionRequest;

//  Forward declaration of class ns5__rankingActionSpec.
class ns5__rankingActionSpec;

//  Forward declaration of class ns5__rankingActionResponse.
class ns5__rankingActionResponse;

//  Forward declaration of class ns5__registerDeviceRequest.
class ns5__registerDeviceRequest;

//  Forward declaration of class ns5__registerDeviceResponse.
class ns5__registerDeviceResponse;

//  Forward declaration of class ns5__removeAttachmentsRequest.
class ns5__removeAttachmentsRequest;

//  Forward declaration of class ns5__msgPartIds.
class ns5__msgPartIds;

//  Forward declaration of class ns5__removeAttachmentsResponse.
class ns5__removeAttachmentsResponse;

//  Forward declaration of class ns5__revokePermissionRequest.
class ns5__revokePermissionRequest;

//  Forward declaration of class ns5__revokePermissionResponse.
class ns5__revokePermissionResponse;

//  Forward declaration of class ns5__saveDocumentRequest.
class ns5__saveDocumentRequest;

//  Forward declaration of class ns5__documentSpec.
class ns5__documentSpec;

//  Forward declaration of class ns5__messagePartSpec.
class ns5__messagePartSpec;

//  Forward declaration of class ns5__idVersion.
class ns5__idVersion;

//  Forward declaration of class ns5__saveDocumentResponse.
class ns5__saveDocumentResponse;

//  Forward declaration of class ns5__idVersionName.
class ns5__idVersionName;

//  Forward declaration of class ns5__saveDraftRequest.
class ns5__saveDraftRequest;

//  Forward declaration of class ns5__saveDraftMsg.
class ns5__saveDraftMsg;

//  Forward declaration of class ns5__saveDraftResponse.
class ns5__saveDraftResponse;

//  Forward declaration of class ns5__searchConvRequest.
class ns5__searchConvRequest;

//  Forward declaration of class ns5__mailSearchParams.
class ns5__mailSearchParams;

//  Forward declaration of class ns5__searchConvResponse.
class ns5__searchConvResponse;

//  Forward declaration of class ns5__nestedSearchConversation.
class ns5__nestedSearchConversation;

//  Forward declaration of class ns5__messageHitInfo.
class ns5__messageHitInfo;

//  Forward declaration of class ns5__part.
class ns5__part;

//  Forward declaration of class ns5__searchRequest.
class ns5__searchRequest;

//  Forward declaration of class ns5__searchResponse.
class ns5__searchResponse;

//  Forward declaration of class ns5__conversationHitInfo.
class ns5__conversationHitInfo;

//  Forward declaration of class ns5__conversationMsgHitInfo.
class ns5__conversationMsgHitInfo;

//  Forward declaration of class ns5__chatHitInfo.
class ns5__chatHitInfo;

//  Forward declaration of class ns5__messagePartHitInfo.
class ns5__messagePartHitInfo;

//  Forward declaration of class ns5__noteHitInfo.
class ns5__noteHitInfo;

//  Forward declaration of class ns5__documentHitInfo.
class ns5__documentHitInfo;

//  Forward declaration of class ns5__wikiHitInfo.
class ns5__wikiHitInfo;

//  Forward declaration of class ns5__appointmentHitInfo.
class ns5__appointmentHitInfo;

//  Forward declaration of class ns5__calendarItemHitInfo.
class ns5__calendarItemHitInfo;

//  Forward declaration of class ns5__instanceDataInfo.
class ns5__instanceDataInfo;

//  Forward declaration of class ns5__calReply.
class ns5__calReply;

//  Forward declaration of class ns5__taskHitInfo.
class ns5__taskHitInfo;

//  Forward declaration of class ns5__sendDeliveryReportRequest.
class ns5__sendDeliveryReportRequest;

//  Forward declaration of class ns5__sendDeliveryReportResponse.
class ns5__sendDeliveryReportResponse;

//  Forward declaration of class ns5__sendInviteReplyRequest.
class ns5__sendInviteReplyRequest;

//  Forward declaration of class ns5__sendInviteReplyResponse.
class ns5__sendInviteReplyResponse;

//  Forward declaration of class ns5__sendMsgRequest.
class ns5__sendMsgRequest;

//  Forward declaration of class ns5__msgToSend.
class ns5__msgToSend;

//  Forward declaration of class ns5__sendMsgResponse.
class ns5__sendMsgResponse;

//  Forward declaration of class ns5__sendShareNotificationRequest.
class ns5__sendShareNotificationRequest;

//  Forward declaration of class ns5__sendShareNotificationResponse.
class ns5__sendShareNotificationResponse;

//  Forward declaration of class ns5__sendVerificationCodeRequest.
class ns5__sendVerificationCodeRequest;

//  Forward declaration of class ns5__sendVerificationCodeResponse.
class ns5__sendVerificationCodeResponse;

//  Forward declaration of class ns5__setAppointmentRequest.
class ns5__setAppointmentRequest;

//  Forward declaration of class ns5__setAppointmentResponse.
class ns5__setAppointmentResponse;

//  Forward declaration of class ns5__exceptIdInfo.
class ns5__exceptIdInfo;

//  Forward declaration of class ns5__setCustomMetadataRequest.
class ns5__setCustomMetadataRequest;

//  Forward declaration of class ns5__setCustomMetadataResponse.
class ns5__setCustomMetadataResponse;

//  Forward declaration of class ns5__setMailboxMetadataRequest.
class ns5__setMailboxMetadataRequest;

//  Forward declaration of class ns5__setMailboxMetadataResponse.
class ns5__setMailboxMetadataResponse;

//  Forward declaration of class ns5__setTaskRequest.
class ns5__setTaskRequest;

//  Forward declaration of class ns5__setTaskResponse.
class ns5__setTaskResponse;

//  Forward declaration of class ns5__snoozeCalendarItemAlarmRequest.
class ns5__snoozeCalendarItemAlarmRequest;

//  Forward declaration of class ns5__snoozeAppointmentAlarm.
class ns5__snoozeAppointmentAlarm;

//  Forward declaration of class ns5__snoozeAlarm.
class ns5__snoozeAlarm;

//  Forward declaration of class ns5__snoozeTaskAlarm.
class ns5__snoozeTaskAlarm;

//  Forward declaration of class ns5__snoozeCalendarItemAlarmResponse.
class ns5__snoozeCalendarItemAlarmResponse;

//  Forward declaration of class ns5__syncRequest.
class ns5__syncRequest;

//  Forward declaration of class ns5__syncResponse.
class ns5__syncResponse;

//  Forward declaration of class ns5__syncDeletedInfo.
class ns5__syncDeletedInfo;

//  Forward declaration of class ns5__tagActionRequest.
class ns5__tagActionRequest;

//  Forward declaration of class ns5__tagActionSelector.
class ns5__tagActionSelector;

//  Forward declaration of class ns5__tagActionResponse.
class ns5__tagActionResponse;

//  Forward declaration of class ns5__tagActionInfo.
class ns5__tagActionInfo;

//  Forward declaration of class ns5__testDataSourceRequest.
class ns5__testDataSourceRequest;

//  Forward declaration of class ns5__testDataSourceResponse.
class ns5__testDataSourceResponse;

//  Forward declaration of class ns5__updateDeviceStatusRequest.
class ns5__updateDeviceStatusRequest;

//  Forward declaration of class ns5__updateDeviceStatusResponse.
class ns5__updateDeviceStatusResponse;

//  Forward declaration of class ns5__verifyCodeRequest.
class ns5__verifyCodeRequest;

//  Forward declaration of class ns5__verifyCodeResponse.
class ns5__verifyCodeResponse;

//  Forward declaration of class ns5__waitSetRequest.
class ns5__waitSetRequest;

//  Forward declaration of class ns5__waitSetResponse.
class ns5__waitSetResponse;

//  Forward declaration of class ns5__appointmentData.
class ns5__appointmentData;

//  Forward declaration of class ns5__calendaringData.
class ns5__calendaringData;

//  Forward declaration of class ns5__itemIdSpec.
class ns5__itemIdSpec;

//  Forward declaration of class ns5__taskData.
class ns5__taskData;

//  Forward declaration of class ns6__becomeMasterRequest.
class ns6__becomeMasterRequest;

//  Forward declaration of class ns6__becomeMasterResponse.
class ns6__becomeMasterResponse;

//  Forward declaration of class ns6__bringDownServiceIPRequest.
class ns6__bringDownServiceIPRequest;

//  Forward declaration of class ns6__bringDownServiceIPResponse.
class ns6__bringDownServiceIPResponse;

//  Forward declaration of class ns6__bringUpServiceIPRequest.
class ns6__bringUpServiceIPRequest;

//  Forward declaration of class ns6__bringUpServiceIPResponse.
class ns6__bringUpServiceIPResponse;

//  Forward declaration of class ns6__replicationStatusRequest.
class ns6__replicationStatusRequest;

//  Forward declaration of class ns6__replicationStatusResponse.
class ns6__replicationStatusResponse;

//  Forward declaration of class ns6__replicationMasterStatus.
class ns6__replicationMasterStatus;

//  Forward declaration of class ns6__replicationMasterCatchupStatus.
class ns6__replicationMasterCatchupStatus;

//  Forward declaration of class ns6__replicationSlaveStatus.
class ns6__replicationSlaveStatus;

//  Forward declaration of class ns6__replicationSlaveCatchupStatus.
class ns6__replicationSlaveCatchupStatus;

//  Forward declaration of class ns6__startCatchupRequest.
class ns6__startCatchupRequest;

//  Forward declaration of class ns6__startCatchupResponse.
class ns6__startCatchupResponse;

//  Forward declaration of class ns6__startFailoverClientRequest.
class ns6__startFailoverClientRequest;

//  Forward declaration of class ns6__startFailoverClientResponse.
class ns6__startFailoverClientResponse;

//  Forward declaration of class ns6__startFailoverDaemonRequest.
class ns6__startFailoverDaemonRequest;

//  Forward declaration of class ns6__startFailoverDaemonResponse.
class ns6__startFailoverDaemonResponse;

//  Forward declaration of class ns6__stopFailoverClientRequest.
class ns6__stopFailoverClientRequest;

//  Forward declaration of class ns6__stopFailoverClientResponse.
class ns6__stopFailoverClientResponse;

//  Forward declaration of class ns6__stopFailoverDaemonRequest.
class ns6__stopFailoverDaemonRequest;

//  Forward declaration of class ns6__stopFailoverDaemonResponse.
class ns6__stopFailoverDaemonResponse;

//  Forward declaration of class ns7__cancelPendingRemoteWipeRequest.
class ns7__cancelPendingRemoteWipeRequest;

//  Forward declaration of class ns7__deviceId.
class ns7__deviceId;

//  Forward declaration of class ns7__cancelPendingRemoteWipeResponse.
class ns7__cancelPendingRemoteWipeResponse;

//  Forward declaration of class ns7__deviceStatusInfo.
class ns7__deviceStatusInfo;

//  Forward declaration of class ns7__getDeviceStatusRequest.
class ns7__getDeviceStatusRequest;

//  Forward declaration of class ns7__getDeviceStatusResponse.
class ns7__getDeviceStatusResponse;

//  Forward declaration of class ns7__remoteWipeRequest.
class ns7__remoteWipeRequest;

//  Forward declaration of class ns7__remoteWipeResponse.
class ns7__remoteWipeResponse;

//  Forward declaration of class ns7__removeDeviceRequest.
class ns7__removeDeviceRequest;

//  Forward declaration of class ns7__removeDeviceResponse.
class ns7__removeDeviceResponse;

//  Forward declaration of class ns7__resumeDeviceRequest.
class ns7__resumeDeviceRequest;

//  Forward declaration of class ns7__resumeDeviceResponse.
class ns7__resumeDeviceResponse;

//  Forward declaration of class ns7__suspendDeviceRequest.
class ns7__suspendDeviceRequest;

//  Forward declaration of class ns7__suspendDeviceResponse.
class ns7__suspendDeviceResponse;

//  Forward declaration of class ns8__changeUCPasswordRequest.
class ns8__changeUCPasswordRequest;

//  Forward declaration of class ns8__changeUCPasswordResponse.
class ns8__changeUCPasswordResponse;

//  Forward declaration of class ns8__getUCInfoRequest.
class ns8__getUCInfoRequest;

//  Forward declaration of class ns8__getUCInfoResponse.
class ns8__getUCInfoResponse;

//  Forward declaration of class ns8__attr.
class ns8__attr;

//  Forward declaration of class ns8__getVoiceFeaturesRequest.
class ns8__getVoiceFeaturesRequest;

//  Forward declaration of class ns8__storePrincipalSpec.
class ns8__storePrincipalSpec;

//  Forward declaration of class ns8__phoneVoiceFeaturesSpec.
class ns8__phoneVoiceFeaturesSpec;

//  Forward declaration of class ns8__voiceMailPrefsReq.
class ns8__voiceMailPrefsReq;

//  Forward declaration of class ns8__voiceMailPrefName.
class ns8__voiceMailPrefName;

//  Forward declaration of class ns8__anonCallRejectionReq.
class ns8__anonCallRejectionReq;

//  Forward declaration of class ns8__callerIdBlockingReq.
class ns8__callerIdBlockingReq;

//  Forward declaration of class ns8__callForwardReq.
class ns8__callForwardReq;

//  Forward declaration of class ns8__callForwardBusyLineReq.
class ns8__callForwardBusyLineReq;

//  Forward declaration of class ns8__callForwardNoAnswerReq.
class ns8__callForwardNoAnswerReq;

//  Forward declaration of class ns8__callWaitingReq.
class ns8__callWaitingReq;

//  Forward declaration of class ns8__selectiveCallForwardReq.
class ns8__selectiveCallForwardReq;

//  Forward declaration of class ns8__selectiveCallAcceptanceReq.
class ns8__selectiveCallAcceptanceReq;

//  Forward declaration of class ns8__selectiveCallRejectionReq.
class ns8__selectiveCallRejectionReq;

//  Forward declaration of class ns8__getVoiceFeaturesResponse.
class ns8__getVoiceFeaturesResponse;

//  Forward declaration of class ns8__phoneVoiceFeaturesInfo.
class ns8__phoneVoiceFeaturesInfo;

//  Forward declaration of class ns8__voiceMailPrefsFeature.
class ns8__voiceMailPrefsFeature;

//  Forward declaration of class ns8__callFeatureInfo.
class ns8__callFeatureInfo;

//  Forward declaration of class ns8__prefInfo.
class ns8__prefInfo;

//  Forward declaration of class ns8__anonCallRejectionFeature.
class ns8__anonCallRejectionFeature;

//  Forward declaration of class ns8__callerIdBlockingFeature.
class ns8__callerIdBlockingFeature;

//  Forward declaration of class ns8__callForwardFeature.
class ns8__callForwardFeature;

//  Forward declaration of class ns8__callForwardBusyLineFeature.
class ns8__callForwardBusyLineFeature;

//  Forward declaration of class ns8__callForwardNoAnswerFeature.
class ns8__callForwardNoAnswerFeature;

//  Forward declaration of class ns8__callWaitingFeature.
class ns8__callWaitingFeature;

//  Forward declaration of class ns8__selectiveCallForwardFeature.
class ns8__selectiveCallForwardFeature;

//  Forward declaration of class ns8__featureWithCallerList.
class ns8__featureWithCallerList;

//  Forward declaration of class ns8__callerListEntry.
class ns8__callerListEntry;

//  Forward declaration of class ns8__selectiveCallAcceptanceFeature.
class ns8__selectiveCallAcceptanceFeature;

//  Forward declaration of class ns8__selectiveCallRejectionFeature.
class ns8__selectiveCallRejectionFeature;

//  Forward declaration of class ns8__getVoiceFolderRequest.
class ns8__getVoiceFolderRequest;

//  Forward declaration of class ns8__phoneSpec.
class ns8__phoneSpec;

//  Forward declaration of class ns8__prefSpec.
class ns8__prefSpec;

//  Forward declaration of class ns8__getVoiceFolderResponse.
class ns8__getVoiceFolderResponse;

//  Forward declaration of class ns8__voiceFolderInfo.
class ns8__voiceFolderInfo;

//  Forward declaration of class ns8__rootVoiceFolder.
class ns8__rootVoiceFolder;

//  Forward declaration of class ns8__voiceFolder.
class ns8__voiceFolder;

//  Forward declaration of class ns8__getVoiceInfoRequest.
class ns8__getVoiceInfoRequest;

//  Forward declaration of class ns8__getVoiceInfoResponse.
class ns8__getVoiceInfoResponse;

//  Forward declaration of class ns8__voiceInfo.
class ns8__voiceInfo;

//  Forward declaration of class ns8__callFeature.
class ns8__callFeature;

//  Forward declaration of class ns8__getVoiceMailPrefsRequest.
class ns8__getVoiceMailPrefsRequest;

//  Forward declaration of class ns8__getVoiceMailPrefsResponse.
class ns8__getVoiceMailPrefsResponse;

//  Forward declaration of class ns8__phoneInfo.
class ns8__phoneInfo;

//  Forward declaration of class ns8__modifyFromNumRequest.
class ns8__modifyFromNumRequest;

//  Forward declaration of class ns8__modifyFromNumSpec.
class ns8__modifyFromNumSpec;

//  Forward declaration of class ns8__modifyFromNumResponse.
class ns8__modifyFromNumResponse;

//  Forward declaration of class ns8__phoneName.
class ns8__phoneName;

//  Forward declaration of class ns8__modifyVoiceFeaturesRequest.
class ns8__modifyVoiceFeaturesRequest;

//  Forward declaration of class ns8__modifyVoiceFeaturesSpec.
class ns8__modifyVoiceFeaturesSpec;

//  Forward declaration of class ns8__modifyVoiceFeaturesResponse.
class ns8__modifyVoiceFeaturesResponse;

//  Forward declaration of class ns8__modifyVoiceMailPinRequest.
class ns8__modifyVoiceMailPinRequest;

//  Forward declaration of class ns8__modifyVoiceMailPinSpec.
class ns8__modifyVoiceMailPinSpec;

//  Forward declaration of class ns8__modifyVoiceMailPinResponse.
class ns8__modifyVoiceMailPinResponse;

//  Forward declaration of class ns8__modifyVoiceMailPrefsRequest.
class ns8__modifyVoiceMailPrefsRequest;

//  Forward declaration of class ns8__modifyVoiceMailPrefsResponse.
class ns8__modifyVoiceMailPrefsResponse;

//  Forward declaration of class ns8__resetVoiceFeaturesRequest.
class ns8__resetVoiceFeaturesRequest;

//  Forward declaration of class ns8__resetPhoneVoiceFeaturesSpec.
class ns8__resetPhoneVoiceFeaturesSpec;

//  Forward declaration of class ns8__resetVoiceFeaturesResponse.
class ns8__resetVoiceFeaturesResponse;

//  Forward declaration of class ns8__searchVoiceRequest.
class ns8__searchVoiceRequest;

//  Forward declaration of class ns8__searchVoiceResponse.
class ns8__searchVoiceResponse;

//  Forward declaration of class ns8__voiceFolderSummary.
class ns8__voiceFolderSummary;

//  Forward declaration of class ns8__voiceMailItem.
class ns8__voiceMailItem;

//  Forward declaration of class ns8__voiceCallItem.
class ns8__voiceCallItem;

//  Forward declaration of class ns8__voiceMailCallParty.
class ns8__voiceMailCallParty;

//  Forward declaration of class ns8__voiceMailContent.
class ns8__voiceMailContent;

//  Forward declaration of class ns8__callLogItem.
class ns8__callLogItem;

//  Forward declaration of class ns8__callLogCallParty.
class ns8__callLogCallParty;

//  Forward declaration of class ns8__uploadVoiceMailRequest.
class ns8__uploadVoiceMailRequest;

//  Forward declaration of class ns8__voiceMsgUploadSpec.
class ns8__voiceMsgUploadSpec;

//  Forward declaration of class ns8__uploadVoiceMailResponse.
class ns8__uploadVoiceMailResponse;

//  Forward declaration of class ns8__voiceMsgUploadInfo.
class ns8__voiceMsgUploadInfo;

//  Forward declaration of class ns8__voiceMsgActionRequest.
class ns8__voiceMsgActionRequest;

//  Forward declaration of class ns8__voiceMsgActionSpec.
class ns8__voiceMsgActionSpec;

//  Forward declaration of class ns8__voiceMsgActionResponse.
class ns8__voiceMsgActionResponse;

//  Forward declaration of class ns8__voiceMsgActionInfo.
class ns8__voiceMsgActionInfo;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbra                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraAccount                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraMail                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraRepl                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraSync                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraVoice                                                          *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbra":zmBoolean is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__zmBoolean' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__zmBoolean
{
	ns3__zmBoolean__0,	///< xs:string value="0"
	ns3__zmBoolean__1,	///< xs:string value="1"
	ns3__zmBoolean__false_,	///< xs:string value="false"
	ns3__zmBoolean__true_,	///< xs:string value="true"
};

/// "urn:zimbra":accountBy is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__accountBy' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__accountBy
{
	ns3__accountBy__adminName,	///< xs:string value="adminName"
	ns3__accountBy__appAdminName,	///< xs:string value="appAdminName"
	ns3__accountBy__id,	///< xs:string value="id"
	ns3__accountBy__foreignPrincipal,	///< xs:string value="foreignPrincipal"
	ns3__accountBy__name,	///< xs:string value="name"
	ns3__accountBy__krb5Principal,	///< xs:string value="krb5Principal"
};

/// "urn:zimbra":galSearchType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__galSearchType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__galSearchType
{
	ns3__galSearchType__all,	///< xs:string value="all"
	ns3__galSearchType__account,	///< xs:string value="account"
	ns3__galSearchType__resource,	///< xs:string value="resource"
	ns3__galSearchType__group,	///< xs:string value="group"
};

/// "urn:zimbra":targetType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__targetType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__targetType
{
	ns3__targetType__account,	///< xs:string value="account"
	ns3__targetType__calresource,	///< xs:string value="calresource"
	ns3__targetType__cos,	///< xs:string value="cos"
	ns3__targetType__dl,	///< xs:string value="dl"
	ns3__targetType__group,	///< xs:string value="group"
	ns3__targetType__domain,	///< xs:string value="domain"
	ns3__targetType__server,	///< xs:string value="server"
	ns3__targetType__ucservice,	///< xs:string value="ucservice"
	ns3__targetType__xmppcomponent,	///< xs:string value="xmppcomponent"
	ns3__targetType__zimlet,	///< xs:string value="zimlet"
	ns3__targetType__config,	///< xs:string value="config"
	ns3__targetType__global,	///< xs:string value="global"
};

/// "urn:zimbra":targetBy is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__targetBy' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__targetBy
{
	ns3__targetBy__id,	///< xs:string value="id"
	ns3__targetBy__name,	///< xs:string value="name"
};

/// "urn:zimbra":distributionListBy is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__distributionListBy' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__distributionListBy
{
	ns3__distributionListBy__id,	///< xs:string value="id"
	ns3__distributionListBy__name,	///< xs:string value="name"
};

/// "urn:zimbra":granteeType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__granteeType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__granteeType
{
	ns3__granteeType__usr,	///< xs:string value="usr"
	ns3__granteeType__grp,	///< xs:string value="grp"
	ns3__granteeType__egp,	///< xs:string value="egp"
	ns3__granteeType__all,	///< xs:string value="all"
	ns3__granteeType__dom,	///< xs:string value="dom"
	ns3__granteeType__edom,	///< xs:string value="edom"
	ns3__granteeType__gst,	///< xs:string value="gst"
	ns3__granteeType__key,	///< xs:string value="key"
	ns3__granteeType__pub,	///< xs:string value="pub"
	ns3__granteeType__email,	///< xs:string value="email"
};

/// "urn:zimbra":distributionListGranteeBy is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__distributionListGranteeBy' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__distributionListGranteeBy
{
	ns3__distributionListGranteeBy__id,	///< xs:string value="id"
	ns3__distributionListGranteeBy__name,	///< xs:string value="name"
};

/// "urn:zimbra":licenseStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__licenseStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__licenseStatus
{
	ns3__licenseStatus__NOT_USCOREINSTALLED,	///< xs:string value="NOT_INSTALLED"
	ns3__licenseStatus__NOT_USCOREACTIVATED,	///< xs:string value="NOT_ACTIVATED"
	ns3__licenseStatus__IN_USCOREFUTURE,	///< xs:string value="IN_FUTURE"
	ns3__licenseStatus__EXPIRED,	///< xs:string value="EXPIRED"
	ns3__licenseStatus__INVALID,	///< xs:string value="INVALID"
	ns3__licenseStatus__LICENSE_USCOREGRACE_USCOREPERIOD,	///< xs:string value="LICENSE_GRACE_PERIOD"
	ns3__licenseStatus__ACTIVATION_USCOREGRACE_USCOREPERIOD,	///< xs:string value="ACTIVATION_GRACE_PERIOD"
	ns3__licenseStatus__OK,	///< xs:string value="OK"
};

/// "urn:zimbra":storeLookupOpt is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__storeLookupOpt' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__storeLookupOpt
{
	ns3__storeLookupOpt__ANY,	///< xs:string value="ANY"
	ns3__storeLookupOpt__ALL,	///< xs:string value="ALL"
};

/// "urn:zimbra":sourceLookupOpt is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__sourceLookupOpt' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__sourceLookupOpt
{
	ns3__sourceLookupOpt__ANY,	///< xs:string value="ANY"
	ns3__sourceLookupOpt__ALL,	///< xs:string value="ALL"
};

/// "urn:zimbra":smimeStoreType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__smimeStoreType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__smimeStoreType
{
	ns3__smimeStoreType__CONTACT,	///< xs:string value="CONTACT"
	ns3__smimeStoreType__GAL,	///< xs:string value="GAL"
	ns3__smimeStoreType__LDAP,	///< xs:string value="LDAP"
};

/// "urn:zimbra":loggingLevel is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__loggingLevel' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__loggingLevel
{
	ns3__loggingLevel__error,	///< xs:string value="error"
	ns3__loggingLevel__warn,	///< xs:string value="warn"
	ns3__loggingLevel__info,	///< xs:string value="info"
	ns3__loggingLevel__debug,	///< xs:string value="debug"
	ns3__loggingLevel__trace,	///< xs:string value="trace"
};

/// "urn:zimbra":autoProvPrincipalBy is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__autoProvPrincipalBy' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__autoProvPrincipalBy
{
	ns3__autoProvPrincipalBy__dn,	///< xs:string value="dn"
	ns3__autoProvPrincipalBy__name,	///< xs:string value="name"
};

/// "urn:zimbra":zeroOrOne is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__zeroOrOne' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__zeroOrOne
{
	ns3__zeroOrOne__0 = 0,	///< xs:string value="0"
	ns3__zeroOrOne__1 = 1,	///< xs:string value="1"
};

/// "urn:zimbra":mailboxMoveType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__mailboxMoveType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__mailboxMoveType
{
	ns3__mailboxMoveType__out,	///< xs:string value="out"
	ns3__mailboxMoveType__in,	///< xs:string value="in"
};

/// "urn:zimbra":grantGranteeType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__grantGranteeType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__grantGranteeType
{
	ns3__grantGranteeType__usr,	///< xs:string value="usr"
	ns3__grantGranteeType__grp,	///< xs:string value="grp"
	ns3__grantGranteeType__cos,	///< xs:string value="cos"
	ns3__grantGranteeType__pub,	///< xs:string value="pub"
	ns3__grantGranteeType__all,	///< xs:string value="all"
	ns3__grantGranteeType__dom,	///< xs:string value="dom"
	ns3__grantGranteeType__guest,	///< xs:string value="guest"
	ns3__grantGranteeType__key,	///< xs:string value="key"
};

/// "urn:zimbra":searchSortBy is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__searchSortBy' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__searchSortBy
{
	ns3__searchSortBy__dateDesc,	///< xs:string value="dateDesc"
	ns3__searchSortBy__dateAsc,	///< xs:string value="dateAsc"
	ns3__searchSortBy__subjDesc,	///< xs:string value="subjDesc"
	ns3__searchSortBy__subjAsc,	///< xs:string value="subjAsc"
	ns3__searchSortBy__nameDesc,	///< xs:string value="nameDesc"
	ns3__searchSortBy__nameAsc,	///< xs:string value="nameAsc"
	ns3__searchSortBy__durDesc,	///< xs:string value="durDesc"
	ns3__searchSortBy__durAsc,	///< xs:string value="durAsc"
	ns3__searchSortBy__none,	///< xs:string value="none"
	ns3__searchSortBy__taskDueAsc,	///< xs:string value="taskDueAsc"
	ns3__searchSortBy__taskDueDesc,	///< xs:string value="taskDueDesc"
	ns3__searchSortBy__taskStatusAsc,	///< xs:string value="taskStatusAsc"
	ns3__searchSortBy__taskStatusDesc,	///< xs:string value="taskStatusDesc"
	ns3__searchSortBy__taskPercCompletedAsc,	///< xs:string value="taskPercCompletedAsc"
	ns3__searchSortBy__taskPercCompletedDesc,	///< xs:string value="taskPercCompletedDesc"
};

/// "urn:zimbra":connectionType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__connectionType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__connectionType
{
	ns3__connectionType__cleartext,	///< xs:string value="cleartext"
	ns3__connectionType__ssl,	///< xs:string value="ssl"
	ns3__connectionType__tls,	///< xs:string value="tls"
	ns3__connectionType__tls_USCOREif_USCOREavailable,	///< xs:string value="tls_if_available"
};

/// "urn:zimbra":trueOrFalse is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns3__trueOrFalse' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns3__trueOrFalse
{
	ns3__trueOrFalse__true_,	///< xs:string value="true"
	ns3__trueOrFalse__false_,	///< xs:string value="false"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraAccount                                                        *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbraAccount":accountZimletInclude is a simpleType restriction of xs:string.
typedef std::string ns4__accountZimletInclude;

/// "urn:zimbraAccount":accountZimletIncludeCSS is a simpleType restriction of xs:string.
typedef std::string ns4__accountZimletIncludeCSS;

/// "urn:zimbraAccount":accountZimletTarget is a simpleType restriction of xs:string.
typedef std::string ns4__accountZimletTarget;

/// "urn:zimbraAccount":checkLicenseStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__checkLicenseStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__checkLicenseStatus
{
	ns4__checkLicenseStatus__ok,	///< xs:string value="ok"
	ns4__checkLicenseStatus__no,	///< xs:string value="no"
	ns4__checkLicenseStatus__inGracePeriod,	///< xs:string value="inGracePeriod"
};

/// "urn:zimbraAccount":operation is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__operation' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__operation
{
	ns4__operation__delete_,	///< xs:string value="delete"
	ns4__operation__modify,	///< xs:string value="modify"
	ns4__operation__rename,	///< xs:string value="rename"
	ns4__operation__addOwners,	///< xs:string value="addOwners"
	ns4__operation__removeOwners,	///< xs:string value="removeOwners"
	ns4__operation__setOwners,	///< xs:string value="setOwners"
	ns4__operation__grantRights,	///< xs:string value="grantRights"
	ns4__operation__revokeRights,	///< xs:string value="revokeRights"
	ns4__operation__setRights,	///< xs:string value="setRights"
	ns4__operation__addMembers,	///< xs:string value="addMembers"
	ns4__operation__removeMembers,	///< xs:string value="removeMembers"
	ns4__operation__acceptSubsReq,	///< xs:string value="acceptSubsReq"
	ns4__operation__rejectSubsReq,	///< xs:string value="rejectSubsReq"
};

/// "urn:zimbraAccount":distributionListSubscribeOp is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__distributionListSubscribeOp' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__distributionListSubscribeOp
{
	ns4__distributionListSubscribeOp__subscribe,	///< xs:string value="subscribe"
	ns4__distributionListSubscribeOp__unsubscribe,	///< xs:string value="unsubscribe"
};

/// "urn:zimbraAccount":memberOfSelector is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__memberOfSelector' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__memberOfSelector
{
	ns4__memberOfSelector__all,	///< xs:string value="all"
	ns4__memberOfSelector__directOnly,	///< xs:string value="directOnly"
	ns4__memberOfSelector__none,	///< xs:string value="none"
};

/// "urn:zimbraAccount":adsConnectionType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__adsConnectionType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__adsConnectionType
{
	ns4__adsConnectionType__cleartext,	///< xs:string value="cleartext"
	ns4__adsConnectionType__ssl,	///< xs:string value="ssl"
	ns4__adsConnectionType__tls,	///< xs:string value="tls"
	ns4__adsConnectionType__tls_USCOREis_USCOREavailable,	///< xs:string value="tls_is_available"
};

/// "urn:zimbraAccount":distributionListSubscribeStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__distributionListSubscribeStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__distributionListSubscribeStatus
{
	ns4__distributionListSubscribeStatus__subscribed,	///< xs:string value="subscribed"
	ns4__distributionListSubscribeStatus__unsubscribed,	///< xs:string value="unsubscribed"
	ns4__distributionListSubscribeStatus__awaiting_USCOREapproval,	///< xs:string value="awaiting_approval"
};

/// "urn:zimbraAccount":infoSection is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns4__infoSection' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__infoSection
{
	ns4__infoSection__mbox,	///< xs:string value="mbox"
	ns4__infoSection__prefs,	///< xs:string value="prefs"
	ns4__infoSection__attrs,	///< xs:string value="attrs"
	ns4__infoSection__zimlets,	///< xs:string value="zimlets"
	ns4__infoSection__props,	///< xs:string value="props"
	ns4__infoSection__idents,	///< xs:string value="idents"
	ns4__infoSection__sigs,	///< xs:string value="sigs"
	ns4__infoSection__dsrcs,	///< xs:string value="dsrcs"
	ns4__infoSection__children,	///< xs:string value="children"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraMail                                                           *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbraMail":generateUUIDResponse is a simpleType restriction of xs:string.
typedef std::string ns5__generateUUIDResponse;

/// "urn:zimbraMail":getDocumentShareURLResponse is a simpleType restriction of xs:string.
typedef std::string ns5__getDocumentShareURLResponse;

/// "urn:zimbraMail":suggestedQueryString is a simpleType restriction of xs:string.
typedef std::string ns5__suggestedQueryString;

/// "urn:zimbraMail":type is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns5__type' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns5__type
{
	ns5__type__user,	///< xs:string value="user"
	ns5__type__system,	///< xs:string value="system"
};

/// "urn:zimbraMail":mdsConnectionType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns5__mdsConnectionType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns5__mdsConnectionType
{
	ns5__mdsConnectionType__cleartext,	///< xs:string value="cleartext"
	ns5__mdsConnectionType__ssl,	///< xs:string value="ssl"
	ns5__mdsConnectionType__tls,	///< xs:string value="tls"
	ns5__mdsConnectionType__tls_USCOREis_USCOREavailable,	///< xs:string value="tls_is_available"
};

/// "urn:zimbraMail":view is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns5__view' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns5__view
{
	ns5__view___x0000,	///< xs:string value=""
	ns5__view__search_x0020folder,	///< xs:string value="search folder"
	ns5__view__tag,	///< xs:string value="tag"
	ns5__view__conversation,	///< xs:string value="conversation"
	ns5__view__message,	///< xs:string value="message"
	ns5__view__contact,	///< xs:string value="contact"
	ns5__view__document,	///< xs:string value="document"
	ns5__view__appointment,	///< xs:string value="appointment"
	ns5__view__virtual_x0020conversation,	///< xs:string value="virtual conversation"
	ns5__view__remote_x0020folder,	///< xs:string value="remote folder"
	ns5__view__wiki,	///< xs:string value="wiki"
	ns5__view__task,	///< xs:string value="task"
	ns5__view__chat,	///< xs:string value="chat"
};

/// "urn:zimbraMail":importance is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns5__importance' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns5__importance
{
	ns5__importance__high,	///< xs:string value="high"
	ns5__importance__normal,	///< xs:string value="normal"
	ns5__importance__low,	///< xs:string value="low"
};

/// "urn:zimbraMail":modifyGroupMemberOperation is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns5__modifyGroupMemberOperation' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns5__modifyGroupMemberOperation
{
	ns5__modifyGroupMemberOperation___x002b,	///< xs:string value="+"
	ns5__modifyGroupMemberOperation___x002d,	///< xs:string value="-"
	ns5__modifyGroupMemberOperation__reset,	///< xs:string value="reset"
};

/// "urn:zimbraMail":action is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns5__action' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns5__action
{
	ns5__action__edit,	///< xs:string value="edit"
	ns5__action__revoke,	///< xs:string value="revoke"
	ns5__action__expire,	///< xs:string value="expire"
};

/// "urn:zimbraMail":itemType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns5__itemType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns5__itemType
{
	ns5__itemType__appointment,	///< xs:string value="appointment"
	ns5__itemType__chat,	///< xs:string value="chat"
	ns5__itemType__contact,	///< xs:string value="contact"
	ns5__itemType__conversation,	///< xs:string value="conversation"
	ns5__itemType__document,	///< xs:string value="document"
	ns5__itemType__message,	///< xs:string value="message"
	ns5__itemType__tag,	///< xs:string value="tag"
	ns5__itemType__task,	///< xs:string value="task"
	ns5__itemType__wiki,	///< xs:string value="wiki"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraRepl                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraSync                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraVoice                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraAccount                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraMail                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraRepl                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraSync                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraVoice                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraRepl                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraSync                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraVoice                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraRepl                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraSync                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:zimbraVoice                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:zimbra                                                               *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbra":namedElement is a complexType.
class ns3__namedElement
{ public:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":granteeChooser is a complexType.
class ns3__granteeChooser
{ public:
/// Attribute type of type xs:string.
   @std::string*                         type                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":shareInfo is a complexType.
class ns3__shareInfo
{ public:
/// Attribute ownerId of type xs:string.
   @std::string                          ownerId                        1;	///< Required attribute.
/// Attribute ownerEmail of type xs:string.
   @std::string                          ownerEmail                     1;	///< Required attribute.
/// Attribute ownerName of type xs:string.
   @std::string                          ownerName                      1;	///< Required attribute.
/// Attribute folderId of type xs:int.
   @int                                  folderId                       1;	///< Required attribute.
/// Attribute folderUuid of type xs:string.
   @std::string                          folderUuid                     1;	///< Required attribute.
/// Attribute folderPath of type xs:string.
   @std::string                          folderPath                     1;	///< Required attribute.
/// Attribute view of type xs:string.
   @std::string                          view                           1;	///< Required attribute.
/// Attribute rights of type xs:string.
   @std::string                          rights                         1;	///< Required attribute.
/// Attribute granteeType of type xs:string.
   @std::string                          granteeType                    1;	///< Required attribute.
/// Attribute granteeId of type xs:string.
   @std::string                          granteeId                      1;	///< Required attribute.
/// Attribute granteeName of type xs:string.
   @std::string                          granteeName                    1;	///< Required attribute.
/// Attribute granteeDisplayName of type xs:string.
   @std::string                          granteeDisplayName             1;	///< Required attribute.
/// Attribute mid of type xs:string.
   @std::string*                         mid                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":attributeSelectorImpl is an abstract complexType.
class ns3__attributeSelectorImpl
{ public:
/// Attribute attrs of type xs:string.
   @std::string*                         attrs                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":cursorInfo is a complexType.
class ns3__cursorInfo
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute sortVal of type xs:string.
   @std::string*                         sortVal                        0;	///< Optional attribute.
/// Attribute endSortVal of type xs:string.
   @std::string*                         endSortVal                     0;	///< Optional attribute.
/// Attribute includeOffset of type xs:boolean.
   @bool*                                includeOffset                  0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":id is a complexType.
class ns3__id
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":tzOnsetInfo is a complexType.
class ns3__tzOnsetInfo
{ public:
/// Attribute week of type xs:int.
   @int*                                 week                           0;	///< Optional attribute.
/// Attribute wkday of type xs:int.
   @int*                                 wkday                          0;	///< Optional attribute.
/// Attribute mon of type xs:int.
   @int                                  mon                            1;	///< Required attribute.
/// Attribute mday of type xs:int.
   @int*                                 mday                           0;	///< Optional attribute.
/// Attribute hour of type xs:int.
   @int                                  hour                           1;	///< Required attribute.
/// Attribute min of type xs:int.
   @int                                  min_                           1;	///< Required attribute.
/// Attribute sec of type xs:int.
   @int                                  sec                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":waitSetAddSpec is a complexType.
class ns3__waitSetAddSpec
{ public:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute token of type xs:string.
   @std::string*                         token                          0;	///< Optional attribute.
/// Attribute types of type xs:string.
   @std::string*                         types                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":idAndType is a complexType.
class ns3__idAndType
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":attributeName is a complexType.
class ns3__attributeName
{ public:
/// Attribute n of type xs:string.
   @std::string                          n                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":HeaderContext is a complexType.
class ns3__HeaderContext
{ public:
/// Element authToken of type xs:string.
    std::string*                         authToken                      0;	///< Optional element.
/// Element sessionId of type xs:string.
    std::string*                         sessionId                      0;	///< Optional element.
/// Element account of type xs:string.
    std::string*                         account                        0;	///< Optional element.
/// Element change of type xs:string.
    std::string*                         change                         0;	///< Optional element.
/// Element targetServer of type xs:string.
    std::string*                         targetServer                   0;	///< Optional element.
/// Element userAgent of type xs:string.
    std::string*                         userAgent                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":sectionAttr is a complexType.
class ns3__sectionAttr
{ public:
/// Attribute section of type xs:string.
   @std::string                          section                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":wildcardExpansionQueryInfo is a complexType.
class ns3__wildcardExpansionQueryInfo
{ public:
/// Attribute str of type xs:string.
   @std::string                          str                            1;	///< Required attribute.
/// Attribute expanded of type xs:boolean.
   @bool                                 expanded                       1;	///< Required attribute.
/// Attribute numExpanded of type xs:int.
   @int                                  numExpanded                    1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":simpleSearchHit is a complexType.
class ns3__simpleSearchHit
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":dataSources is a complexType.
class ns3__dataSources
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:zimbraAccount                                                        *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbraAccount":authRequest is a complexType.
class ns4__authRequest
{ public:
/// Element account of type "urn:zimbra":accountSelector.
    ns3__accountSelector*                account                        0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// Element preauth of type "urn:zimbraAccount":preAuth.
    ns4__preAuth*                        preauth                        0;	///< Optional element.
/// Element authToken of type "urn:zimbraAccount":authToken.
    ns4__authToken*                      authToken                      0;	///< Optional element.
/// Element virtualHost of type xs:string.
    std::string*                         virtualHost                    0;	///< Optional element.
    class _ns4__authRequest_prefs
    {
/// Vector of ns4__pref* with length 0..unbounded
    std::vector<ns4__pref*             > pref                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *prefs                          0;	///< Optional element.
    class _ns4__authRequest_attrs
    {
/// Vector of ns4__attr* with length 0..unbounded
    std::vector<ns4__attr*             > attr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *attrs                          0;	///< Optional element.
/// Element requestedSkin of type xs:string.
    std::string*                         requestedSkin                  0;	///< Optional element.
/// Attribute persistAuthTokenCookie of type xs:boolean.
   @bool*                                persistAuthTokenCookie         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":authResponse is a complexType.
class ns4__authResponse
{ public:
/// Element authToken of type xs:string.
    std::string                          authToken                      1;	///< Required element.
/// Element lifetime of type xs:long.
    LONG64                               lifetime                       1;	///< Required element.
/// Element session of type "urn:zimbraAccount":session.
    ns4__session*                        session                        0;	///< Optional element.
/// Element refer of type xs:string.
    std::string*                         refer                          0;	///< Optional element.
/// Element skin of type xs:string.
    std::string*                         skin                           0;	///< Optional element.
    class _ns4__authResponse_prefs
    {
/// Vector of ns4__pref* with length 0..unbounded
    std::vector<ns4__pref*             > pref                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *prefs                          0;	///< Optional element.
    class _ns4__authResponse_attrs
    {
/// Vector of ns4__attr* with length 0..unbounded
    std::vector<ns4__attr*             > attr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *attrs                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":autoCompleteGalRequest is a complexType.
class ns4__autoCompleteGalRequest
{ public:
/// Attribute needExp of type xs:boolean.
   @bool*                                needExp                        0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute type of type "urn:zimbra":galSearchType.
   @enum ns3__galSearchType*             type                           0;	///< Optional attribute.
/// Attribute galAcctId of type xs:string.
   @std::string*                         galAcctId                      0;	///< Optional attribute.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":autoCompleteGalResponse is a complexType.
class ns4__autoCompleteGalResponse
{ public:
/// Vector of ns4__contactInfo* with length 0..unbounded
    std::vector<ns4__contactInfo*      > cn                             0;
/// Attribute more of type xs:boolean.
   @bool*                                more                           0;	///< Optional attribute.
/// Attribute tokenizeKey of type xs:boolean.
   @bool*                                tokenizeKey                    0;	///< Optional attribute.
/// Attribute paginationSupported of type xs:boolean.
   @bool*                                paginationSupported            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":contactInfo is a complexType.
class ns4__contactInfo
{ public:
/// Vector of ns4__accountCustomMetadata* element refs with length 0..unbounded
    std::vector<ns4__accountCustomMetadata*> meta                           0;
/// Vector of ns3__contactAttr* with length 0..unbounded
    std::vector<ns3__contactAttr*      > a                              0;
/// Vector of ns4__contactGroupMember* with length 0..unbounded
    std::vector<ns4__contactGroupMember*> m                              0;
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// Attribute exp of type xs:boolean.
   @bool*                                exp                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute fileAsStr of type xs:string.
   @std::string*                         fileAsStr                      0;	///< Optional attribute.
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// Attribute email2 of type xs:string.
   @std::string*                         email2                         0;	///< Optional attribute.
/// Attribute email3 of type xs:string.
   @std::string*                         email3                         0;	///< Optional attribute.
/// Attribute type of type xs:string.
   @std::string*                         type                           0;	///< Optional attribute.
/// Attribute dlist of type xs:string.
   @std::string*                         dlist                          0;	///< Optional attribute.
/// Attribute ref of type xs:string.
   @std::string*                         ref                            0;	///< Optional attribute.
/// Attribute tooManyMembers of type xs:boolean.
   @bool*                                tooManyMembers                 0;	///< Optional attribute.
/// Attribute isOwner of type xs:boolean.
   @bool*                                isOwner                        0;	///< Optional attribute.
/// Attribute isMember of type xs:boolean.
   @bool*                                isMember                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountKeyValuePairs is a complexType.
class ns4__accountKeyValuePairs
{ public:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":contactGroupMember is a complexType.
class ns4__contactGroupMember
{ public:
/// Element cn of type "urn:zimbraAccount":contactInfo.
    ns4__contactInfo*                    cn                             0;	///< Optional element.
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":changePasswordRequest is a complexType.
class ns4__changePasswordRequest
{ public:
/// Element account of type "urn:zimbra":accountSelector.
    ns3__accountSelector*                account                        1;	///< Required element.
/// Element oldPassword of type xs:string.
    std::string                          oldPassword                    1;	///< Required element.
/// Element password of type xs:string.
    std::string                          password                       1;	///< Required element.
/// Element virtualHost of type xs:string.
    std::string*                         virtualHost                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":changePasswordResponse is a complexType.
class ns4__changePasswordResponse
{ public:
/// Element authToken of type xs:string.
    std::string                          authToken                      1;	///< Required element.
/// Element lifetime of type xs:long.
    LONG64                               lifetime                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":checkLicenseRequest is a complexType.
class ns4__checkLicenseRequest
{ public:
/// Attribute feature of type xs:string.
   @std::string                          feature                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":checkLicenseResponse is a complexType.
class ns4__checkLicenseResponse
{ public:
/// Attribute status of type "urn:zimbraAccount":checkLicenseStatus.
   @enum ns4__checkLicenseStatus         status                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":checkRightsRequest is a complexType.
class ns4__checkRightsRequest
{ public:
/// Vector of ns4__checkRightsTargetSpec* with length 1..unbounded
    std::vector<ns4__checkRightsTargetSpec*> target                         1;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":checkRightsTargetSpec is a complexType.
class ns4__checkRightsTargetSpec
{ public:
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > right                          1;
/// Attribute type of type "urn:zimbra":targetType.
   @enum ns3__targetType                 type                           1;	///< Required attribute.
/// Attribute by of type "urn:zimbra":targetBy.
   @enum ns3__targetBy                   by                             1;	///< Required attribute.
/// Attribute key of type xs:string.
   @std::string                          key                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":checkRightsResponse is a complexType.
class ns4__checkRightsResponse
{ public:
/// Vector of ns4__checkRightsTargetInfo* with length 1..unbounded
    std::vector<ns4__checkRightsTargetInfo*> target                         1;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":checkRightsTargetInfo is a complexType.
class ns4__checkRightsTargetInfo
{ public:
/// Vector of ns4__checkRightsRightInfo* with length 1..unbounded
    std::vector<ns4__checkRightsRightInfo*> right                          1;
/// Attribute type of type "urn:zimbra":targetType.
   @enum ns3__targetType                 type                           1;	///< Required attribute.
/// Attribute by of type "urn:zimbra":targetBy.
   @enum ns3__targetBy                   by                             1;	///< Required attribute.
/// Attribute key of type xs:string.
   @std::string                          key                            1;	///< Required attribute.
/// Attribute allow of type xs:boolean.
   @bool                                 allow                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":createDistributionListResponse is a complexType.
class ns4__createDistributionListResponse
{ public:
/// Element dl of type "urn:zimbraAccount":dlInfo.
    ns4__dlInfo*                         dl                             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":objectInfo is a complexType.
class ns4__objectInfo
{ public:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":createIdentityRequest is a complexType.
class ns4__createIdentityRequest
{ public:
/// Element identity of type "urn:zimbraAccount":identity.
    ns4__identity*                       identity                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":attrsImpl is an abstract complexType.
class ns4__attrsImpl
{ public:
/// Vector of ns4__attr* with length 0..unbounded
    std::vector<ns4__attr*             > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":createIdentityResponse is a complexType.
class ns4__createIdentityResponse
{ public:
/// Element identity of type "urn:zimbraAccount":identity.
    ns4__identity*                       identity                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":createSignatureRequest is a complexType.
class ns4__createSignatureRequest
{ public:
/// Element reference "urn:zimbraAccount":signature.
    ns4__signature*                      signature                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":signature is a complexType.
class ns4__signature
{ public:
/// Vector of ns4__signatureContent* with length 0..unbounded
    std::vector<ns4__signatureContent* > content                        0;
/// Element cid of type xs:string.
    std::string*                         cid                            0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":createSignatureResponse is a complexType.
class ns4__createSignatureResponse
{ public:
/// Element signature of type "urn:zimbraAccount":nameId.
    ns4__nameId*                         signature                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":nameId is a complexType.
class ns4__nameId
{ public:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":deleteIdentityRequest is a complexType.
class ns4__deleteIdentityRequest
{ public:
/// Element identity of type "urn:zimbraAccount":nameId.
    ns4__nameId*                         identity                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":deleteIdentityResponse is a complexType.
class ns4__deleteIdentityResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":deleteSignatureRequest is a complexType.
class ns4__deleteSignatureRequest
{ public:
/// Element signature of type "urn:zimbraAccount":nameId.
    ns4__nameId*                         signature                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":deleteSignatureResponse is a complexType.
class ns4__deleteSignatureResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":discoverRightsRequest is a complexType.
class ns4__discoverRightsRequest
{ public:
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > right                          1;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":discoverRightsResponse is a complexType.
class ns4__discoverRightsResponse
{ public:
/// Vector of ns4__discoverRightsInfo* with length 0..unbounded
    std::vector<ns4__discoverRightsInfo*> targets                        0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":discoverRightsInfo is a complexType.
class ns4__discoverRightsInfo
{ public:
/// Vector of ns4__discoverRightsTarget* with length 1..unbounded
    std::vector<ns4__discoverRightsTarget*> target                         1;
/// Attribute right of type xs:string.
   @std::string                          right                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":discoverRightsTarget is a complexType.
class ns4__discoverRightsTarget
{ public:
/// Vector of ns4__discoverRightsEmail* with length 0..unbounded
    std::vector<ns4__discoverRightsEmail*> email                          0;
/// Attribute type of type "urn:zimbra":targetType.
   @enum ns3__targetType                 type                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":discoverRightsEmail is a complexType.
class ns4__discoverRightsEmail
{ public:
/// Attribute addr of type xs:string.
   @std::string                          addr                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":distributionListRightSpec is a complexType.
class ns4__distributionListRightSpec
{ public:
/// Vector of ns4__distributionListGranteeSelector* with length 0..unbounded
    std::vector<ns4__distributionListGranteeSelector*> grantee                        0;
/// Attribute right of type xs:string.
   @std::string                          right                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":distributionListActionResponse is a complexType.
class ns4__distributionListActionResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":endSessionRequest is a complexType.
class ns4__endSessionRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":endSessionResponse is a complexType.
class ns4__endSessionResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAccountDistributionListsRequest is a complexType.
class ns4__getAccountDistributionListsRequest
{ public:
/// Attribute ownerOf of type xs:boolean.
   @bool*                                ownerOf                        0;	///< Optional attribute.
/// Attribute memberOf of type "urn:zimbraAccount":memberOfSelector.
   @enum ns4__memberOfSelector*          memberOf                       0;	///< Optional attribute.
/// Attribute attrs of type xs:string.
   @std::string*                         attrs                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAccountDistributionListsResponse is a complexType.
class ns4__getAccountDistributionListsResponse
{ public:
/// Vector of ns4__dlInfo* with length 0..unbounded
    std::vector<ns4__dlInfo*           > dl                             0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAccountInfoRequest is a complexType.
class ns4__getAccountInfoRequest
{ public:
/// Element account of type "urn:zimbra":accountSelector.
    ns3__accountSelector*                account                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAccountInfoResponse is a complexType.
class ns4__getAccountInfoResponse
{ public:
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Vector of ns3__namedValue* with length 1..unbounded
    std::vector<ns3__namedValue*       > attr                           1;
/// Element soapURL of type xs:string.
    std::string*                         soapURL                        0;	///< Optional element.
/// Element publicURL of type xs:string.
    std::string*                         publicURL                      0;	///< Optional element.
/// Element changePasswordURL of type xs:string.
    std::string*                         changePasswordURL              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAllLocalesRequest is a complexType.
class ns4__getAllLocalesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAllLocalesResponse is a complexType.
class ns4__getAllLocalesResponse
{ public:
/// Vector of ns4__localeInfo* with length 0..unbounded
    std::vector<ns4__localeInfo*       > locale                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":localeInfo is a complexType.
class ns4__localeInfo
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute localName of type xs:string.
   @std::string*                         localName                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAvailableCsvFormatsRequest is a complexType.
class ns4__getAvailableCsvFormatsRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAvailableCsvFormatsResponse is a complexType.
class ns4__getAvailableCsvFormatsResponse
{ public:
/// Vector of ns3__namedElement* with length 0..unbounded
    std::vector<ns3__namedElement*     > csv                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAvailableLocalesRequest is a complexType.
class ns4__getAvailableLocalesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAvailableLocalesResponse is a complexType.
class ns4__getAvailableLocalesResponse
{ public:
/// Vector of ns4__localeInfo* with length 0..unbounded
    std::vector<ns4__localeInfo*       > locale                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAvailableSkinsRequest is a complexType.
class ns4__getAvailableSkinsRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getAvailableSkinsResponse is a complexType.
class ns4__getAvailableSkinsResponse
{ public:
/// Vector of ns3__namedElement* with length 0..unbounded
    std::vector<ns3__namedElement*     > skin                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getDistributionListMembersRequest is a complexType.
class ns4__getDistributionListMembersRequest
{ public:
/// Element dl of type xs:string.
    std::string                          dl                             1;	///< Required element.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getDistributionListMembersResponse is a complexType.
class ns4__getDistributionListMembersResponse
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > dlm                            0;
/// Attribute more of type xs:boolean.
   @bool*                                more                           0;	///< Optional attribute.
/// Attribute total of type xs:int.
   @int*                                 total                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getDistributionListResponse is a complexType.
class ns4__getDistributionListResponse
{ public:
/// Element reference "urn:zimbraAccount":dl.
    ns4__distributionListInfo*           dl                             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":distributionListGranteeInfo is a complexType.
class ns4__distributionListGranteeInfo
{ public:
/// Attribute type of type "urn:zimbra":granteeType.
   @enum ns3__granteeType                type                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":distributionListRightInfo is a complexType.
class ns4__distributionListRightInfo
{ public:
/// Vector of ns4__distributionListGranteeInfo* with length 0..unbounded
    std::vector<ns4__distributionListGranteeInfo*> grantee                        0;
/// Attribute right of type xs:string.
   @std::string                          right                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getIdentitiesRequest is a complexType.
class ns4__getIdentitiesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getIdentitiesResponse is a complexType.
class ns4__getIdentitiesResponse
{ public:
/// Vector of ns4__identity* with length 0..unbounded
    std::vector<ns4__identity*         > identity                       0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getInfoRequest is a complexType.
class ns4__getInfoRequest
{ public:
/// Attribute rights of type xs:string.
   @std::string*                         rights                         0;	///< Optional attribute.
/// Attribute sections of type xs:string.
   @std::string*                         sections                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getInfoResponse is a complexType.
class ns4__getInfoResponse
{ public:
/// Element version of type xs:string.
    std::string                          version                        1;	///< Required element.
/// Element id of type xs:string.
    std::string                          id                             1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element crumb of type xs:string.
    std::string*                         crumb                          0;	///< Optional element.
/// Element lifetime of type xs:long.
    LONG64                               lifetime                       1;	///< Required element.
/// Element adminDelegated of type xs:boolean.
    bool*                                adminDelegated                 0;	///< Optional element.
/// Element rest of type xs:string.
    std::string*                         rest                           0;	///< Optional element.
/// Element used of type xs:long.
    LONG64*                              used                           0;	///< Optional element.
/// Element prevSession of type xs:long.
    LONG64*                              prevSession                    0;	///< Optional element.
/// Element accessed of type xs:long.
    LONG64*                              accessed                       0;	///< Optional element.
/// Element recent of type xs:int.
    int*                                 recent                         0;	///< Optional element.
/// Element cos of type "urn:zimbraAccount":cos.
    ns4__cos*                            cos                            0;	///< Optional element.
    class _ns4__getInfoResponse_prefs
    {
/// Vector of ns4__pref* with length 0..unbounded
    std::vector<ns4__pref*             > pref                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *prefs                          0;	///< Optional element.
    class _ns4__getInfoResponse_attrs
    {
/// Vector of ns4__attr* with length 0..unbounded
    std::vector<ns4__attr*             > attr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *attrs                          0;	///< Optional element.
    class _ns4__getInfoResponse_zimlets
    {
/// Vector of ns4__accountZimletInfo* with length 0..unbounded
    std::vector<ns4__accountZimletInfo*> zimlet                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *zimlets                        0;	///< Optional element.
    class _ns4__getInfoResponse_props
    {
/// Vector of ns4__prop* with length 0..unbounded
    std::vector<ns4__prop*             > prop                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *props                          0;	///< Optional element.
    class _ns4__getInfoResponse_identities
    {
/// Vector of ns4__identity* with length 0..unbounded
    std::vector<ns4__identity*         > identity                       0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *identities                     0;	///< Optional element.
    class _ns4__getInfoResponse_signatures
    {
/// Vector of ns4__signature* element refs with length 0..unbounded
    std::vector<ns4__signature*        > signature                      0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *signatures                     0;	///< Optional element.
    class _ns4__getInfoResponse_dataSources
    {
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_getInfoResponse_dataSources 0;
    class __ns4__union_getInfoResponse_dataSources
    {
   $int                                  __union_getInfoResponse_dataSources 0;	///< Union _ns4__union_getInfoResponse_dataSources selector: set to SOAP_UNION__ns4__union_getInfoResponse_dataSources_<fieldname> or 0
    union _ns4__union_getInfoResponse_dataSources
    {
/// Element imap of type "urn:zimbraAccount":accountImapDataSource.
    ns4__accountImapDataSource*          imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraAccount":accountPop3DataSource.
    ns4__accountPop3DataSource*          pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraAccount":accountCaldavDataSource.
    ns4__accountCaldavDataSource*        caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraAccount":accountYabDataSource.
    ns4__accountYabDataSource*           yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraAccount":accountRssDataSource.
    ns4__accountRssDataSource*           rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraAccount":accountGalDataSource.
    ns4__accountGalDataSource*           gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraAccount":accountCalDataSource.
    ns4__accountCalDataSource*           cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraAccount":accountUnknownDataSource.
    ns4__accountUnknownDataSource*       unknown                        1;	///< Required element.
    }                                    union_getInfoResponse_dataSources;
    }                                   *__union_getInfoResponse_dataSources;
//  END OF CHOICE
    }                                   *dataSources                    0;	///< Optional element.
    class _ns4__getInfoResponse_childAccounts
    {
/// Vector of ns4__childAccount* with length 0..unbounded
    std::vector<ns4__childAccount*     > childAccount                   0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *childAccounts                  0;	///< Optional element.
    class _ns4__getInfoResponse_rights
    {
/// Vector of ns4__discoverRightsInfo* with length 0..unbounded
    std::vector<ns4__discoverRightsInfo*> targets                        0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *rights                         0;	///< Optional element.
/// Element soapURL of type xs:string.
    std::string*                         soapURL                        0;	///< Optional element.
/// Element publicURL of type xs:string.
    std::string*                         publicURL                      0;	///< Optional element.
/// Element changePasswordURL of type xs:string.
    std::string*                         changePasswordURL              0;	///< Optional element.
/// Element license of type "urn:zimbraAccount":licenseInfo.
    ns4__licenseInfo*                    license                        0;	///< Optional element.
/// Attribute attSizeLimit of type xs:long.
   @LONG64*                              attSizeLimit                   0;	///< Optional attribute.
/// Attribute docSizeLimit of type xs:long.
   @LONG64*                              docSizeLimit                   0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":cos is a complexType.
class ns4__cos
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountZimletInfo is a complexType.
class ns4__accountZimletInfo
{ public:
/// Element zimletContext of type "urn:zimbraAccount":accountZimletContext.
    ns4__accountZimletContext*           zimletContext                  0;	///< Optional element.
/// Element zimlet of type "urn:zimbraAccount":accountZimletDesc.
    ns4__accountZimletDesc*              zimlet                         0;	///< Optional element.
/// Element zimletConfig of type "urn:zimbraAccount":accountZimletConfigInfo.
    ns4__accountZimletConfigInfo*        zimletConfig                   0;	///< Optional element.
/// TODO: <any namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountZimletContext is a complexType.
class ns4__accountZimletContext
{ public:
/// Attribute baseUrl of type xs:string.
   @std::string                          baseUrl                        1;	///< Required attribute.
/// Attribute priority of type xs:int.
   @int*                                 priority                       0;	///< Optional attribute.
/// Attribute presence of type xs:string.
   @std::string                          presence                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountZimletDesc is a complexType.
class ns4__accountZimletDesc
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_accountZimletDesc       0;
    class __ns4__union_accountZimletDesc
    {
   $int                                  __union_accountZimletDesc      0;	///< Union _ns4__union_accountZimletDesc selector: set to SOAP_UNION__ns4__union_accountZimletDesc_<fieldname> or 0
    union _ns4__union_accountZimletDesc
    {
/// Element reference "urn:zimbraAccount":serverExtension.
    ns4__zimletServerExtension*          serverExtension                1;	///< Required element.
/// Element reference "urn:zimbraAccount":include.
    ns4__accountZimletInclude*           include                        1;	///< Required element.
/// Element reference "urn:zimbraAccount":includeCSS.
    ns4__accountZimletIncludeCSS*        includeCSS                     1;	///< Required element.
/// Element reference "urn:zimbraAccount":target.
    ns4__accountZimletTarget*            target                         1;	///< Required element.
/// TODO: <any namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    }                                    union_accountZimletDesc       ;
    }                                   *__union_accountZimletDesc     ;
//  END OF CHOICE
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute version of type xs:string.
   @std::string*                         version                        0;	///< Optional attribute.
/// Attribute description of type xs:string.
   @std::string*                         description                    0;	///< Optional attribute.
/// Attribute extension of type xs:string.
   @std::string*                         extension                      0;	///< Optional attribute.
/// Attribute target of type xs:string.
   @std::string*                         target                         0;	///< Optional attribute.
/// Attribute label of type xs:string.
   @std::string*                         label                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":zimletServerExtension is a complexType.
class ns4__zimletServerExtension
{ public:
/// Attribute hasKeyword of type xs:string.
   @std::string*                         hasKeyword                     0;	///< Optional attribute.
/// Attribute extensionClass of type xs:string.
   @std::string*                         extensionClass                 0;	///< Optional attribute.
/// Attribute regex of type xs:string.
   @std::string*                         regex                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountZimletConfigInfo is a complexType.
class ns4__accountZimletConfigInfo
{ public:
/// Element global of type "urn:zimbraAccount":accountZimletGlobalConfigInfo.
    ns4__accountZimletGlobalConfigInfo*  global                         0;	///< Optional element.
/// Element host of type "urn:zimbraAccount":accountZimletHostConfigInfo.
    ns4__accountZimletHostConfigInfo*    host                           0;	///< Optional element.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute version of type xs:string.
   @std::string*                         version                        0;	///< Optional attribute.
/// Attribute description of type xs:string.
   @std::string*                         description                    0;	///< Optional attribute.
/// Attribute extension of type xs:string.
   @std::string*                         extension                      0;	///< Optional attribute.
/// Attribute target of type xs:string.
   @std::string*                         target                         0;	///< Optional attribute.
/// Attribute label of type xs:string.
   @std::string*                         label                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountZimletGlobalConfigInfo is a complexType.
class ns4__accountZimletGlobalConfigInfo
{ public:
/// Vector of ns4__accountZimletProperty* with length 0..unbounded
    std::vector<ns4__accountZimletProperty*> property                       0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountZimletHostConfigInfo is a complexType.
class ns4__accountZimletHostConfigInfo
{ public:
/// Vector of ns4__accountZimletProperty* with length 0..unbounded
    std::vector<ns4__accountZimletProperty*> property                       0;
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountDataSource is a complexType.
class ns4__accountDataSource
{ public:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":childAccount is a complexType.
class ns4__childAccount
{ public:
    class _ns4__childAccount_attrs
    {
/// Vector of ns4__attr* with length 0..unbounded
    std::vector<ns4__attr*             > attr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *attrs                          0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute visible of type xs:boolean.
   @bool                                 visible                        1;	///< Required attribute.
/// Attribute active of type xs:boolean.
   @bool                                 active                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":licenseInfo is a complexType.
class ns4__licenseInfo
{ public:
/// Vector of ns4__licenseAttr* with length 0..unbounded
    std::vector<ns4__licenseAttr*      > attr                           0;
/// Attribute status of type "urn:zimbra":licenseStatus.
   @enum ns3__licenseStatus              status                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getPrefsRequest is a complexType.
class ns4__getPrefsRequest
{ public:
/// Vector of ns4__pref* with length 0..unbounded
    std::vector<ns4__pref*             > pref                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getPrefsResponse is a complexType.
class ns4__getPrefsResponse
{ public:
/// Vector of ns4__pref* with length 0..unbounded
    std::vector<ns4__pref*             > pref                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getRightsRequest is a complexType.
class ns4__getRightsRequest
{ public:
/// Vector of ns4__right* with length 0..unbounded
    std::vector<ns4__right*            > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":right is a complexType.
class ns4__right
{ public:
/// Attribute right of type xs:string.
   @std::string                          right                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getRightsResponse is a complexType.
class ns4__getRightsResponse
{ public:
/// Vector of ns4__accountACEInfo* with length 0..unbounded
    std::vector<ns4__accountACEInfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountACEInfo is a complexType.
class ns4__accountACEInfo
{ public:
/// Attribute zid of type xs:string.
   @std::string*                         zid                            0;	///< Optional attribute.
/// Attribute gt of type "urn:zimbra":granteeType.
   @enum ns3__granteeType                gt                             1;	///< Required attribute.
/// Attribute right of type xs:string.
   @std::string                          right                          1;	///< Required attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute key of type xs:string.
   @std::string*                         key                            0;	///< Optional attribute.
/// Attribute pw of type xs:string.
   @std::string*                         pw                             0;	///< Optional attribute.
/// Attribute deny of type xs:boolean.
   @bool*                                deny                           0;	///< Optional attribute.
/// Attribute chkgt of type xs:boolean.
   @bool*                                chkgt                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getSMIMEPublicCertsRequest is a complexType.
class ns4__getSMIMEPublicCertsRequest
{ public:
/// Element store of type "urn:zimbraAccount":smimePublicCertsStoreSpec.
    ns4__smimePublicCertsStoreSpec*      store                          1;	///< Required element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > email                          0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getSMIMEPublicCertsResponse is a complexType.
class ns4__getSMIMEPublicCertsResponse
{ public:
/// Element certs of type "urn:zimbraAccount":smimePublicCertsInfo.
    ns4__smimePublicCertsInfo*           certs                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":smimePublicCertsInfo is a complexType.
class ns4__smimePublicCertsInfo
{ public:
/// Vector of ns4__smimePublicCertInfo* with length 0..unbounded
    std::vector<ns4__smimePublicCertInfo*> cert                           0;
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getShareInfoRequest is a complexType.
class ns4__getShareInfoRequest
{ public:
/// Element grantee of type "urn:zimbra":granteeChooser.
    ns3__granteeChooser*                 grantee                        0;	///< Optional element.
/// Element owner of type "urn:zimbra":accountSelector.
    ns3__accountSelector*                owner                          0;	///< Optional element.
/// Attribute internal of type xs:boolean.
   @bool*                                internal                       0;	///< Optional attribute.
/// Attribute includeSelf of type xs:boolean.
   @bool*                                includeSelf                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getShareInfoResponse is a complexType.
class ns4__getShareInfoResponse
{ public:
/// Vector of ns3__shareInfo* with length 0..unbounded
    std::vector<ns3__shareInfo*        > share                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getSignaturesRequest is a complexType.
class ns4__getSignaturesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getSignaturesResponse is a complexType.
class ns4__getSignaturesResponse
{ public:
/// Vector of ns4__signature* element refs with length 0..unbounded
    std::vector<ns4__signature*        > signature                      0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getVersionInfoRequest is a complexType.
class ns4__getVersionInfoRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getVersionInfoResponse is a complexType.
class ns4__getVersionInfoResponse
{ public:
/// Element info of type "urn:zimbraAccount":versionInfo.
    ns4__versionInfo*                    info                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":versionInfo is a complexType.
class ns4__versionInfo
{ public:
/// Attribute version of type xs:string.
   @std::string                          version                        1;	///< Required attribute.
/// Attribute release of type xs:string.
   @std::string                          release                        1;	///< Required attribute.
/// Attribute buildDate of type xs:string.
   @std::string                          buildDate                      1;	///< Required attribute.
/// Attribute host of type xs:string.
   @std::string                          host                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getWhiteBlackListRequest is a complexType.
class ns4__getWhiteBlackListRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getWhiteBlackListResponse is a complexType.
class ns4__getWhiteBlackListResponse
{ public:
    class _ns4__getWhiteBlackListResponse_whiteList
    {
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > addr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                    whiteList                      1;	///< Required element.
    class _ns4__getWhiteBlackListResponse_blackList
    {
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > addr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                    blackList                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":grantRightsRequest is a complexType.
class ns4__grantRightsRequest
{ public:
/// Vector of ns4__accountACEInfo* with length 0..unbounded
    std::vector<ns4__accountACEInfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":grantRightsResponse is a complexType.
class ns4__grantRightsResponse
{ public:
/// Vector of ns4__accountACEInfo* with length 0..unbounded
    std::vector<ns4__accountACEInfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyIdentityRequest is a complexType.
class ns4__modifyIdentityRequest
{ public:
/// Element identity of type "urn:zimbraAccount":identity.
    ns4__identity*                       identity                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyIdentityResponse is a complexType.
class ns4__modifyIdentityResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyPrefsRequest is a complexType.
class ns4__modifyPrefsRequest
{ public:
/// Vector of ns4__pref* with length 0..unbounded
    std::vector<ns4__pref*             > pref                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyPrefsResponse is a complexType.
class ns4__modifyPrefsResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyPropertiesRequest is a complexType.
class ns4__modifyPropertiesRequest
{ public:
/// Vector of ns4__prop* with length 1..unbounded
    std::vector<ns4__prop*             > prop                           1;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyPropertiesResponse is a complexType.
class ns4__modifyPropertiesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifySignatureRequest is a complexType.
class ns4__modifySignatureRequest
{ public:
/// Element reference "urn:zimbraAccount":signature.
    ns4__signature*                      signature                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifySignatureResponse is a complexType.
class ns4__modifySignatureResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyWhiteBlackListRequest is a complexType.
class ns4__modifyWhiteBlackListRequest
{ public:
    class _ns4__modifyWhiteBlackListRequest_whiteList
    {
/// Vector of ns3__opValue* with length 0..unbounded
    std::vector<ns3__opValue*          > addr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *whiteList                      0;	///< Optional element.
    class _ns4__modifyWhiteBlackListRequest_blackList
    {
/// Vector of ns3__opValue* with length 0..unbounded
    std::vector<ns3__opValue*          > addr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *blackList                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyWhiteBlackListResponse is a complexType.
class ns4__modifyWhiteBlackListResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyZimletPrefsRequest is a complexType.
class ns4__modifyZimletPrefsRequest
{ public:
/// Vector of ns4__modifyZimletPrefsSpec* with length 0..unbounded
    std::vector<ns4__modifyZimletPrefsSpec*> zimlet                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyZimletPrefsSpec is a complexType.
class ns4__modifyZimletPrefsSpec
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute presence of type xs:string.
   @std::string                          presence                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":modifyZimletPrefsResponse is a complexType.
class ns4__modifyZimletPrefsResponse
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > zimlet                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":revokeRightsRequest is a complexType.
class ns4__revokeRightsRequest
{ public:
/// Vector of ns4__accountACEInfo* with length 0..unbounded
    std::vector<ns4__accountACEInfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":revokeRightsResponse is a complexType.
class ns4__revokeRightsResponse
{ public:
/// Vector of ns4__accountACEInfo* with length 0..unbounded
    std::vector<ns4__accountACEInfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":entrySearchFilterInfo is a complexType.
class ns4__entrySearchFilterInfo
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_entrySearchFilterInfo  0;	///< Union _ns4__union_entrySearchFilterInfo selector: set to SOAP_UNION__ns4__union_entrySearchFilterInfo_<fieldname> or 0
    union _ns4__union_entrySearchFilterInfo
    {
/// Element conds of type "urn:zimbraAccount":entrySearchFilterMultiCond.
    ns4__entrySearchFilterMultiCond*     conds                          1;	///< Required element.
/// Element cond of type "urn:zimbraAccount":entrySearchFilterSingleCond.
    ns4__entrySearchFilterSingleCond*    cond                           1;	///< Required element.
    }                                    union_entrySearchFilterInfo   ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":entrySearchFilterMultiCond is a complexType.
class ns4__entrySearchFilterMultiCond
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_entrySearchFilterMultiCond 0;
    class __ns4__union_entrySearchFilterMultiCond
    {
   $int                                  __union_entrySearchFilterMultiCond 0;	///< Union _ns4__union_entrySearchFilterMultiCond selector: set to SOAP_UNION__ns4__union_entrySearchFilterMultiCond_<fieldname> or 0
    union _ns4__union_entrySearchFilterMultiCond
    {
/// Element conds of type "urn:zimbraAccount":entrySearchFilterMultiCond.
    ns4__entrySearchFilterMultiCond*     conds                          1;	///< Required element.
/// Element cond of type "urn:zimbraAccount":entrySearchFilterSingleCond.
    ns4__entrySearchFilterSingleCond*    cond                           1;	///< Required element.
    }                                    union_entrySearchFilterMultiCond;
    }                                   *__union_entrySearchFilterMultiCond;
//  END OF CHOICE
/// Attribute not of type xs:boolean.
   @bool*                                not_                           0;	///< Optional attribute.
/// Attribute or of type xs:boolean.
   @bool*                                or_                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":entrySearchFilterSingleCond is a complexType.
class ns4__entrySearchFilterSingleCond
{ public:
/// Attribute not of type xs:boolean.
   @bool*                                not_                           0;	///< Optional attribute.
/// Attribute attr of type xs:string.
   @std::string                          attr                           1;	///< Required attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":searchCalendarResourcesResponse is a complexType.
class ns4__searchCalendarResourcesResponse
{ public:
/// Vector of ns4__calendarResourceInfo* with length 0..unbounded
    std::vector<ns4__calendarResourceInfo*> calresource                    0;
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// Attribute more of type xs:boolean.
   @bool*                                more                           0;	///< Optional attribute.
/// Attribute paginationSupported of type xs:boolean.
   @bool*                                paginationSupported            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":searchGalRequest is a complexType.
class ns4__searchGalRequest
{ public:
/// Element locale of type xs:string.
    std::string*                         locale                         0;	///< Optional element.
/// Element cursor of type "urn:zimbra":cursorInfo.
    ns3__cursorInfo*                     cursor                         0;	///< Optional element.
/// Element searchFilter of type "urn:zimbraAccount":entrySearchFilterInfo.
    ns4__entrySearchFilterInfo*          searchFilter                   0;	///< Optional element.
/// Attribute ref of type xs:string.
   @std::string*                         ref                            0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute type of type "urn:zimbra":galSearchType.
   @enum ns3__galSearchType*             type                           0;	///< Optional attribute.
/// Attribute needExp of type xs:boolean.
   @bool*                                needExp                        0;	///< Optional attribute.
/// Attribute needIsOwner of type xs:boolean.
   @bool*                                needIsOwner                    0;	///< Optional attribute.
/// Attribute needIsMember of type "urn:zimbraAccount":memberOfSelector.
   @enum ns4__memberOfSelector*          needIsMember                   0;	///< Optional attribute.
/// Attribute needSMIMECerts of type xs:boolean.
   @bool*                                needSMIMECerts                 0;	///< Optional attribute.
/// Attribute galAcctId of type xs:string.
   @std::string*                         galAcctId                      0;	///< Optional attribute.
/// Attribute quick of type xs:boolean.
   @bool*                                quick                          0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":searchGalResponse is a complexType.
class ns4__searchGalResponse
{ public:
/// Vector of ns4__contactInfo* with length 0..unbounded
    std::vector<ns4__contactInfo*      > cn                             0;
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// Attribute more of type xs:boolean.
   @bool*                                more                           0;	///< Optional attribute.
/// Attribute paginationSupported of type xs:boolean.
   @bool*                                paginationSupported            0;	///< Optional attribute.
/// Attribute tokenizeKey of type xs:boolean.
   @bool*                                tokenizeKey                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":subscribeDistributionListRequest is a complexType.
class ns4__subscribeDistributionListRequest
{ public:
/// Element dl of type "urn:zimbra":distributionListSelector.
    ns3__distributionListSelector*       dl                             1;	///< Required element.
/// Attribute op of type "urn:zimbraAccount":distributionListSubscribeOp.
   @enum ns4__distributionListSubscribeOp  op                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":subscribeDistributionListResponse is a complexType.
class ns4__subscribeDistributionListResponse
{ public:
/// Attribute status of type "urn:zimbraAccount":distributionListSubscribeStatus.
   @enum ns4__distributionListSubscribeStatus  status                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":syncGalRequest is a complexType.
class ns4__syncGalRequest
{ public:
/// Attribute token of type xs:string.
   @std::string*                         token                          0;	///< Optional attribute.
/// Attribute galAcctId of type xs:string.
   @std::string*                         galAcctId                      0;	///< Optional attribute.
/// Attribute idOnly of type xs:boolean.
   @bool*                                idOnly                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":syncGalResponse is a complexType.
class ns4__syncGalResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_syncGalResponse         0;
    class __ns4__union_syncGalResponse
    {
   $int                                  __union_syncGalResponse        0;	///< Union _ns4__union_syncGalResponse selector: set to SOAP_UNION__ns4__union_syncGalResponse_<fieldname> or 0
    union _ns4__union_syncGalResponse
    {
/// Element cn of type "urn:zimbraAccount":contactInfo.
    ns4__contactInfo*                    cn                             1;	///< Required element.
/// Element deleted of type "urn:zimbra":id.
    ns3__id*                             deleted                        1;	///< Required element.
    }                                    union_syncGalResponse         ;
    }                                   *__union_syncGalResponse       ;
//  END OF CHOICE
/// Attribute more of type xs:boolean.
   @bool*                                more                           0;	///< Optional attribute.
/// Attribute token of type xs:string.
   @std::string*                         token                          0;	///< Optional attribute.
/// Attribute galDefinitionLastModified of type xs:string.
   @std::string*                         galDefinitionLastModified      0;	///< Optional attribute.
/// Attribute throttled of type xs:boolean.
   @bool*                                throttled                      0;	///< Optional attribute.
/// Attribute fullSyncRecommended of type xs:boolean.
   @bool*                                fullSyncRecommended            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":calTZInfo is a complexType.
class ns4__calTZInfo
{ public:
/// Element standard of type "urn:zimbra":tzOnsetInfo.
    ns3__tzOnsetInfo*                    standard                       0;	///< Optional element.
/// Element daylight of type "urn:zimbra":tzOnsetInfo.
    ns3__tzOnsetInfo*                    daylight                       0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute stdoff of type xs:int.
   @int*                                 stdoff                         0;	///< Optional attribute.
/// Attribute dayoff of type xs:int.
   @int*                                 dayoff                         0;	///< Optional attribute.
/// Attribute stdname of type xs:string.
   @std::string*                         stdname                        0;	///< Optional attribute.
/// Attribute dayname of type xs:string.
   @std::string*                         dayname                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:zimbraMail                                                           *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbraMail":policy is a complexType.
class ns5__policy
{ public:
/// Attribute type of type "urn:zimbraMail":type.
   @enum ns5__type*                      type                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute lifetime of type xs:string.
   @std::string*                         lifetime                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":deviceInfo is a complexType.
class ns5__deviceInfo
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute created of type xs:long.
   @LONG64*                              created                        0;	///< Optional attribute.
/// Attribute accessed of type xs:long.
   @LONG64*                              accessed                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":retentionPolicy is a complexType.
class ns5__retentionPolicy
{ public:
    class _ns5__retentionPolicy_keep
    {
/// Vector of ns5__policy* with length 0..unbounded
    std::vector<ns5__policy*           > policy                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *keep                           0;	///< Optional element.
    class _ns5__retentionPolicy_purge
    {
/// Vector of ns5__policy* with length 0..unbounded
    std::vector<ns5__policy*           > policy                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *purge                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":idStatus is a complexType.
class ns5__idStatus
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":setCalendarItemInfo is a complexType.
class ns5__setCalendarItemInfo
{ public:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":msg is a complexType.
class ns5__msg
{ public:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Vector of ns5__header* with length 0..unbounded
    std::vector<ns5__header*           > header                         0;
/// Element mp of type "urn:zimbraMail":mimePartInfo.
    ns5__mimePartInfo*                   mp                             0;	///< Optional element.
/// Element attach of type "urn:zimbraMail":attachmentsInfo.
    ns5__attachmentsInfo*                attach                         0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":invitationInfo.
    ns5__invitationInfo*                 inv                            0;	///< Optional element.
/// Vector of ns5__emailAddrInfo* with length 0..unbounded
    std::vector<ns5__emailAddrInfo*    > e                              0;
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// Attribute origid of type xs:string.
   @std::string*                         origid                         0;	///< Optional attribute.
/// Attribute rt of type xs:string.
   @std::string*                         rt                             0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// Attribute su of type xs:string.
   @std::string*                         su                             0;	///< Optional attribute.
/// Attribute irt of type xs:string.
   @std::string*                         irt                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":mimePartInfo is a complexType.
class ns5__mimePartInfo
{ public:
/// Vector of ns5__mimePartInfo* with length 0..unbounded
    std::vector<ns5__mimePartInfo*     > mp                             0;
/// Element attach of type "urn:zimbraMail":attachmentsInfo.
    ns5__attachmentsInfo*                attach                         0;	///< Optional element.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute content of type xs:string.
   @std::string*                         content                        0;	///< Optional attribute.
/// Attribute ci of type xs:string.
   @std::string*                         ci                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":attachmentsInfo is a complexType.
class ns5__attachmentsInfo
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_attachmentsInfo         0;
    class __ns5__union_attachmentsInfo
    {
   $int                                  __union_attachmentsInfo        0;	///< Union _ns5__union_attachmentsInfo selector: set to SOAP_UNION__ns5__union_attachmentsInfo_<fieldname> or 0
    union _ns5__union_attachmentsInfo
    {
/// Element reference "urn:zimbraMail":mp.
    ns5__mimePartAttachSpec*             mp                             1;	///< Required element.
/// Element reference "urn:zimbraMail":m.
    ns5__msgAttachSpec*                  m                              1;	///< Required element.
/// Element reference "urn:zimbraMail":cn.
    ns5__contactAttachSpec*              cn                             1;	///< Required element.
/// Element reference "urn:zimbraMail":doc.
    ns5__docAttachSpec*                  doc                            1;	///< Required element.
    }                                    union_attachmentsInfo         ;
    }                                   *__union_attachmentsInfo       ;
//  END OF CHOICE
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":attachSpec is an abstract complexType.
class ns5__attachSpec
{ public:
/// Attribute optional of type xs:boolean.
   @bool*                                optional                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":inviteComponentCommon is a complexType.
class ns5__inviteComponentCommon
{ public:
/// Attribute method of type xs:string.
   @std::string                          method                         1;	///< Required attribute.
/// Attribute compNum of type xs:int.
   @int                                  compNum                        1;	///< Required attribute.
/// Attribute rsvp of type xs:boolean.
   @bool                                 rsvp                           1;	///< Required attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute completed of type xs:string.
   @std::string*                         completed                      0;	///< Optional attribute.
/// Attribute noBlob of type xs:boolean.
   @bool*                                noBlob                         0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute x_uid of type xs:string.
   @std::string*                         x_USCOREuid                    0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute seq of type xs:int.
   @int*                                 seq                            0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute ciFolder of type xs:string.
   @std::string*                         ciFolder                       0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute ex of type xs:boolean.
   @bool*                                ex                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute changes of type xs:string.
   @std::string*                         changes                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":geoInfo is a complexType.
class ns5__geoInfo
{ public:
/// Attribute lat of type xs:string.
   @std::string*                         lat                            0;	///< Optional attribute.
/// Attribute lon of type xs:string.
   @std::string*                         lon                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":calendarAttendee is a complexType.
class ns5__calendarAttendee
{ public:
/// Vector of ns5__xParam* with length 0..unbounded
    std::vector<ns5__xParam*           > xparam                         0;
/// Attribute a of type xs:string.
   @std::string*                         a                              0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute sentBy of type xs:string.
   @std::string*                         sentBy                         0;	///< Optional attribute.
/// Attribute dir of type xs:string.
   @std::string*                         dir                            0;	///< Optional attribute.
/// Attribute lang of type xs:string.
   @std::string*                         lang                           0;	///< Optional attribute.
/// Attribute cutype of type xs:string.
   @std::string*                         cutype                         0;	///< Optional attribute.
/// Attribute role of type xs:string.
   @std::string*                         role                           0;	///< Optional attribute.
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute rsvp of type xs:boolean.
   @bool*                                rsvp                           0;	///< Optional attribute.
/// Attribute member of type xs:string.
   @std::string*                         member                         0;	///< Optional attribute.
/// Attribute delTo of type xs:string.
   @std::string*                         delTo                          0;	///< Optional attribute.
/// Attribute delFrom of type xs:string.
   @std::string*                         delFrom                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":xParam is a complexType.
class ns5__xParam
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":alarmInfo is a complexType.
class ns5__alarmInfo
{ public:
/// Element trigger of type "urn:zimbraMail":alarmTriggerInfo.
    ns5__alarmTriggerInfo*               trigger                        0;	///< Optional element.
/// Element repeat of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   repeat                         0;	///< Optional element.
/// Element desc of type xs:string.
    std::string*                         desc                           0;	///< Optional element.
/// Element attach of type "urn:zimbraMail":calendarAttach.
    ns5__calendarAttach*                 attach                         0;	///< Optional element.
/// Element summary of type xs:string.
    std::string*                         summary                        0;	///< Optional element.
/// Vector of ns5__calendarAttendee* with length 0..unbounded
    std::vector<ns5__calendarAttendee* > at                             0;
/// Vector of ns5__xProp* with length 0..unbounded
    std::vector<ns5__xProp*            > xprop                          0;
/// Attribute action of type xs:string.
   @std::string                          action                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":alarmTriggerInfo is a complexType.
class ns5__alarmTriggerInfo
{ public:
/// Element abs of type "urn:zimbraMail":dateAttr.
    ns5__dateAttr*                       abs                            0;	///< Optional element.
/// Element rel of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   rel                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":dateAttr is a complexType.
class ns5__dateAttr
{ public:
/// Attribute d of type xs:string.
   @std::string                          d                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":durationInfo is a complexType.
class ns5__durationInfo
{ public:
/// Attribute neg of type xs:boolean.
   @bool*                                neg                            0;	///< Optional attribute.
/// Attribute w of type xs:int.
   @int*                                 w                              0;	///< Optional attribute.
/// Attribute d of type xs:int.
   @int*                                 d                              0;	///< Optional attribute.
/// Attribute h of type xs:int.
   @int*                                 h                              0;	///< Optional attribute.
/// Attribute m of type xs:int.
   @int*                                 m                              0;	///< Optional attribute.
/// Attribute s of type xs:int.
   @int*                                 s                              0;	///< Optional attribute.
/// Attribute related of type xs:string.
   @std::string*                         related                        0;	///< Optional attribute.
/// Attribute count of type xs:int.
   @int*                                 count                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":xProp is a complexType.
class ns5__xProp
{ public:
/// Vector of ns5__xParam* with length 0..unbounded
    std::vector<ns5__xParam*           > xparam                         0;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":calOrganizer is a complexType.
class ns5__calOrganizer
{ public:
/// Vector of ns5__xParam* with length 0..unbounded
    std::vector<ns5__xParam*           > xparam                         0;
/// Attribute a of type xs:string.
   @std::string*                         a                              0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute sentBy of type xs:string.
   @std::string*                         sentBy                         0;	///< Optional attribute.
/// Attribute dir of type xs:string.
   @std::string*                         dir                            0;	///< Optional attribute.
/// Attribute lang of type xs:string.
   @std::string*                         lang                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":recurrenceInfo is a complexType.
class ns5__recurrenceInfo
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_recurrenceInfo          0;
    class __ns5__union_recurrenceInfo
    {
   $int                                  __union_recurrenceInfo         0;	///< Union _ns5__union_recurrenceInfo selector: set to SOAP_UNION__ns5__union_recurrenceInfo_<fieldname> or 0
    union _ns5__union_recurrenceInfo
    {
/// Element add of type "urn:zimbraMail":addRecurrenceInfo.
    ns5__addRecurrenceInfo*              add                            1;	///< Required element.
/// Element exclude of type "urn:zimbraMail":excludeRecurrenceInfo.
    ns5__excludeRecurrenceInfo*          exclude                        1;	///< Required element.
/// Element except of type "urn:zimbraMail":exceptionRuleInfo.
    ns5__exceptionRuleInfo*              except                         1;	///< Required element.
/// Element cancel of type "urn:zimbraMail":cancelRuleInfo.
    ns5__cancelRuleInfo*                 cancel                         1;	///< Required element.
/// Element dates of type "urn:zimbraMail":singleDates.
    ns5__singleDates*                    dates                          1;	///< Required element.
/// Element rule of type "urn:zimbraMail":simpleRepeatingRule.
    ns5__simpleRepeatingRule*            rule                           1;	///< Required element.
    }                                    union_recurrenceInfo          ;
    }                                   *__union_recurrenceInfo        ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":recurIdInfo is a complexType.
class ns5__recurIdInfo
{ public:
/// Attribute rangeType of type xs:int.
   @int                                  rangeType                      1;	///< Required attribute.
/// Attribute recurId of type xs:string.
   @std::string                          recurId                        1;	///< Required attribute.
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":singleDates is a complexType.
class ns5__singleDates
{ public:
/// Vector of ns5__dtVal* with length 0..unbounded
    std::vector<ns5__dtVal*            > dtval                          0;
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":dtVal is a complexType.
class ns5__dtVal
{ public:
/// Element s of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     s                              0;	///< Optional element.
/// Element e of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     e                              0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":dtTimeInfo is a complexType.
class ns5__dtTimeInfo
{ public:
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// Attribute u of type xs:long.
   @LONG64*                              u                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":simpleRepeatingRule is a complexType.
class ns5__simpleRepeatingRule
{ public:
/// Element until of type "urn:zimbraMail":dateTimeStringAttr.
    ns5__dateTimeStringAttr*             until                          0;	///< Optional element.
/// Element count of type "urn:zimbraMail":numAttr.
    ns5__numAttr*                        count                          0;	///< Optional element.
/// Element interval of type "urn:zimbraMail":intervalRule.
    ns5__intervalRule*                   interval                       0;	///< Optional element.
/// Element bysecond of type "urn:zimbraMail":bySecondRule.
    ns5__bySecondRule*                   bysecond                       0;	///< Optional element.
/// Element byminute of type "urn:zimbraMail":byMinuteRule.
    ns5__byMinuteRule*                   byminute                       0;	///< Optional element.
/// Element byhour of type "urn:zimbraMail":byHourRule.
    ns5__byHourRule*                     byhour                         0;	///< Optional element.
/// Element byday of type "urn:zimbraMail":byDayRule.
    ns5__byDayRule*                      byday                          0;	///< Optional element.
/// Element bymonthday of type "urn:zimbraMail":byMonthDayRule.
    ns5__byMonthDayRule*                 bymonthday                     0;	///< Optional element.
/// Element byyearday of type "urn:zimbraMail":byYearDayRule.
    ns5__byYearDayRule*                  byyearday                      0;	///< Optional element.
/// Element byweekno of type "urn:zimbraMail":byWeekNoRule.
    ns5__byWeekNoRule*                   byweekno                       0;	///< Optional element.
/// Element bymonth of type "urn:zimbraMail":byMonthRule.
    ns5__byMonthRule*                    bymonth                        0;	///< Optional element.
/// Element bysetpos of type "urn:zimbraMail":bySetPosRule.
    ns5__bySetPosRule*                   bysetpos                       0;	///< Optional element.
/// Element wkst of type "urn:zimbraMail":wkstRule.
    ns5__wkstRule*                       wkst                           0;	///< Optional element.
/// Vector of ns5__xNameRule* with length 0..unbounded
    std::vector<ns5__xNameRule*        > rule_x_name                    0;
/// Attribute freq of type xs:string.
   @std::string                          freq                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":dateTimeStringAttr is a complexType.
class ns5__dateTimeStringAttr
{ public:
/// Attribute d of type xs:string.
   @std::string                          d                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":numAttr is a complexType.
class ns5__numAttr
{ public:
/// Attribute num of type xs:int.
   @int                                  num                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":intervalRule is a complexType.
class ns5__intervalRule
{ public:
/// Attribute ival of type xs:int.
   @int                                  ival                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":bySecondRule is a complexType.
class ns5__bySecondRule
{ public:
/// Attribute seclist of type xs:string.
   @std::string                          seclist                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":byMinuteRule is a complexType.
class ns5__byMinuteRule
{ public:
/// Attribute minlist of type xs:string.
   @std::string                          minlist                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":byHourRule is a complexType.
class ns5__byHourRule
{ public:
/// Attribute hrlist of type xs:string.
   @std::string                          hrlist                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":byDayRule is a complexType.
class ns5__byDayRule
{ public:
/// Vector of ns5__wkDay* with length 0..unbounded
    std::vector<ns5__wkDay*            > wkday                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":wkDay is a complexType.
class ns5__wkDay
{ public:
/// Attribute day of type xs:string.
   @std::string                          day                            1;	///< Required attribute.
/// Attribute ordwk of type xs:int.
   @int*                                 ordwk                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":byMonthDayRule is a complexType.
class ns5__byMonthDayRule
{ public:
/// Attribute modaylist of type xs:string.
   @std::string                          modaylist                      1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":byYearDayRule is a complexType.
class ns5__byYearDayRule
{ public:
/// Attribute yrdaylist of type xs:string.
   @std::string                          yrdaylist                      1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":byWeekNoRule is a complexType.
class ns5__byWeekNoRule
{ public:
/// Attribute wklist of type xs:string.
   @std::string                          wklist                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":byMonthRule is a complexType.
class ns5__byMonthRule
{ public:
/// Attribute molist of type xs:string.
   @std::string                          molist                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":bySetPosRule is a complexType.
class ns5__bySetPosRule
{ public:
/// Attribute poslist of type xs:string.
   @std::string                          poslist                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":wkstRule is a complexType.
class ns5__wkstRule
{ public:
/// Attribute day of type xs:string.
   @std::string                          day                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":xNameRule is a complexType.
class ns5__xNameRule
{ public:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute value of type xs:string.
   @std::string*                         value                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":exceptionRecurIdInfo is a complexType.
class ns5__exceptionRecurIdInfo
{ public:
/// Attribute d of type xs:string.
   @std::string                          d                              1;	///< Required attribute.
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// Attribute rangeType of type xs:int.
   @int*                                 rangeType                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":calTZInfo is a complexType.
class ns5__calTZInfo
{ public:
/// Element standard of type "urn:zimbra":tzOnsetInfo.
    ns3__tzOnsetInfo*                    standard                       0;	///< Optional element.
/// Element daylight of type "urn:zimbra":tzOnsetInfo.
    ns3__tzOnsetInfo*                    daylight                       0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute stdoff of type xs:int.
   @int                                  stdoff                         1;	///< Required attribute.
/// Attribute dayoff of type xs:int.
   @int                                  dayoff                         1;	///< Required attribute.
/// Attribute stdname of type xs:string.
   @std::string*                         stdname                        0;	///< Optional attribute.
/// Attribute dayname of type xs:string.
   @std::string*                         dayname                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":emailAddrInfo is a complexType.
class ns5__emailAddrInfo
{ public:
/// Attribute a of type xs:string.
   @std::string                          a                              1;	///< Required attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute p of type xs:string.
   @std::string*                         p                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":addAppointmentInviteResponse is a complexType.
class ns5__addAppointmentInviteResponse
{ public:
/// Attribute calItemId of type xs:int.
   @int*                                 calItemId                      0;	///< Optional attribute.
/// Attribute invId of type xs:int.
   @int*                                 invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":addCommentRequest is a complexType.
class ns5__addCommentRequest
{ public:
/// Element comment of type "urn:zimbraMail":addedComment.
    ns5__addedComment*                   comment                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":addedComment is a complexType.
class ns5__addedComment
{ public:
/// Attribute parentId of type xs:string.
   @std::string                          parentId                       1;	///< Required attribute.
/// Attribute text of type xs:string.
   @std::string                          text                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":addCommentResponse is a complexType.
class ns5__addCommentResponse
{ public:
/// Element comment of type "urn:zimbra":id.
    ns3__id*                             comment                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":addMsgRequest is a complexType.
class ns5__addMsgRequest
{ public:
/// Element m of type "urn:zimbraMail":addMsgSpec.
    ns5__addMsgSpec*                     m                              1;	///< Required element.
/// Attribute filterSent of type xs:boolean.
   @bool*                                filterSent                     0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":addMsgSpec is a complexType.
class ns5__addMsgSpec
{ public:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute noICal of type xs:boolean.
   @bool*                                noICal                         0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":addMsgResponse is a complexType.
class ns5__addMsgResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_addMsgResponse         0;	///< Union _ns5__union_addMsgResponse selector: set to SOAP_UNION__ns5__union_addMsgResponse_<fieldname> or 0
    union _ns5__union_addMsgResponse
    {
/// Element chat of type "urn:zimbraMail":chatSummary.
    ns5__chatSummary*                    chat                           1;	///< Required element.
/// Element m of type "urn:zimbraMail":messageSummary.
    ns5__messageSummary*                 m                              1;	///< Required element.
    }                                    union_addMsgResponse          ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":messageCommon is a complexType.
class ns5__messageCommon
{ public:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":emailInfo is a complexType.
class ns5__emailInfo
{ public:
/// Attribute a of type xs:string.
   @std::string*                         a                              0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute p of type xs:string.
   @std::string*                         p                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute isGroup of type xs:boolean.
   @bool*                                isGroup                        0;	///< Optional attribute.
/// Attribute exp of type xs:boolean.
   @bool*                                exp                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":inviteInfo is a complexType.
class ns5__inviteInfo
{ public:
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// Element comp of type "urn:zimbraMail":inviteComponent.
    ns5__inviteComponent*                comp                           0;	///< Optional element.
    class _ns5__inviteInfo_replies
    {
/// Vector of ns5__calendarReply* with length 0..unbounded
    std::vector<ns5__calendarReply*    > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":mailKeyValuePairs is a complexType.
class ns5__mailKeyValuePairs
{ public:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":announceOrganizerChangeRequest is a complexType.
class ns5__announceOrganizerChangeRequest
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":announceOrganizerChangeResponse is a complexType.
class ns5__announceOrganizerChangeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":applyFilterRulesRequest is a complexType.
class ns5__applyFilterRulesRequest
{ public:
    class _ns5__applyFilterRulesRequest_filterRules
    {
/// Vector of ns3__namedElement* with length 0..unbounded
    std::vector<ns3__namedElement*     > filterRule                     0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                    filterRules                    1;	///< Required element.
/// Element m of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        m                              0;	///< Optional element.
/// Element query of type xs:string.
    std::string*                         query                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":idsAttr is a complexType.
class ns5__idsAttr
{ public:
/// Attribute ids of type xs:string.
   @std::string                          ids                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":applyFilterRulesResponse is a complexType.
class ns5__applyFilterRulesResponse
{ public:
/// Element m of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        m                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":applyOutgoingFilterRulesRequest is a complexType.
class ns5__applyOutgoingFilterRulesRequest
{ public:
    class _ns5__applyOutgoingFilterRulesRequest_filterRules
    {
/// Vector of ns3__namedElement* with length 0..unbounded
    std::vector<ns3__namedElement*     > filterRule                     0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                    filterRules                    1;	///< Required element.
/// Element m of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        m                              0;	///< Optional element.
/// Element query of type xs:string.
    std::string*                         query                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":applyOutgoingFilterRulesResponse is a complexType.
class ns5__applyOutgoingFilterRulesResponse
{ public:
/// Element m of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        m                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":autoCompleteRequest is a complexType.
class ns5__autoCompleteRequest
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute t of type "urn:zimbra":galSearchType.
   @enum ns3__galSearchType*             t                              0;	///< Optional attribute.
/// Attribute needExp of type xs:boolean.
   @bool*                                needExp                        0;	///< Optional attribute.
/// Attribute folders of type xs:string.
   @std::string*                         folders                        0;	///< Optional attribute.
/// Attribute includeGal of type xs:boolean.
   @bool*                                includeGal                     0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":autoCompleteResponse is a complexType.
class ns5__autoCompleteResponse
{ public:
/// Vector of ns5__autoCompleteMatch* with length 0..unbounded
    std::vector<ns5__autoCompleteMatch*> match                          0;
/// Attribute canBeCached of type xs:boolean.
   @bool*                                canBeCached                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":autoCompleteMatch is a complexType.
class ns5__autoCompleteMatch
{ public:
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// Attribute type of type xs:string.
   @std::string*                         type                           0;	///< Optional attribute.
/// Attribute ranking of type xs:int.
   @int*                                 ranking                        0;	///< Optional attribute.
/// Attribute isGroup of type xs:boolean.
   @bool*                                isGroup                        0;	///< Optional attribute.
/// Attribute exp of type xs:boolean.
   @bool*                                exp                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute l of type xs:int.
   @int*                                 l                              0;	///< Optional attribute.
/// Attribute display of type xs:string.
   @std::string*                         display                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":bounceMsgRequest is a complexType.
class ns5__bounceMsgRequest
{ public:
/// Element m of type "urn:zimbraMail":bounceMsgSpec.
    ns5__bounceMsgSpec*                  m                              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":bounceMsgSpec is a complexType.
class ns5__bounceMsgSpec
{ public:
/// Vector of ns5__emailAddrInfo* with length 0..unbounded
    std::vector<ns5__emailAddrInfo*    > e                              0;
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":bounceMsgResponse is a complexType.
class ns5__bounceMsgResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":browseRequest is a complexType.
class ns5__browseRequest
{ public:
/// Attribute browseBy of type xs:string.
   @std::string                          browseBy                       1;	///< Required attribute.
/// Attribute regex of type xs:string.
   @std::string*                         regex                          0;	///< Optional attribute.
/// Attribute maxToReturn of type xs:int.
   @int*                                 maxToReturn                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":browseResponse is a complexType.
class ns5__browseResponse
{ public:
/// Vector of ns5__browseData* with length 0..unbounded
    std::vector<ns5__browseData*       > bd                             0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":cancelAppointmentRequest is a complexType.
class ns5__cancelAppointmentRequest
{ public:
/// Element inst of type "urn:zimbraMail":instanceRecurIdInfo.
    ns5__instanceRecurIdInfo*            inst                           0;	///< Optional element.
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute comp of type xs:int.
   @int*                                 comp                           0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":instanceRecurIdInfo is a complexType.
class ns5__instanceRecurIdInfo
{ public:
/// Attribute range of type xs:string.
   @std::string*                         range                          0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":cancelAppointmentResponse is a complexType.
class ns5__cancelAppointmentResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":checkDeviceStatusRequest is a complexType.
class ns5__checkDeviceStatusRequest
{ public:
/// Element device of type "urn:zimbra":id.
    ns3__id*                             device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":checkDeviceStatusResponse is a complexType.
class ns5__checkDeviceStatusResponse
{ public:
/// Element device of type "urn:zimbraMail":idStatus.
    ns5__idStatus*                       device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":checkPermissionRequest is a complexType.
class ns5__checkPermissionRequest
{ public:
/// Element target of type "urn:zimbraMail":targetSpec.
    ns5__targetSpec*                     target                         0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > right                          0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":checkPermissionResponse is a complexType.
class ns5__checkPermissionResponse
{ public:
/// Vector of ns5__rightPermission* with length 0..unbounded
    std::vector<ns5__rightPermission*  > right                          0;
/// Attribute allow of type xs:boolean.
   @bool                                 allow                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":checkRecurConflictsRequest is a complexType.
class ns5__checkRecurConflictsRequest
{ public:
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// Vector of ns5__freeBusyUserSpec* with length 0..unbounded
    std::vector<ns5__freeBusyUserSpec* > usr                            0;
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_checkRecurConflictsRequest 0;
    class __ns5__union_checkRecurConflictsRequest
    {
   $int                                  __union_checkRecurConflictsRequest 0;	///< Union _ns5__union_checkRecurConflictsRequest selector: set to SOAP_UNION__ns5__union_checkRecurConflictsRequest_<fieldname> or 0
    union _ns5__union_checkRecurConflictsRequest
    {
/// Element cancel of type "urn:zimbraMail":expandedRecurrenceCancel.
    ns5__expandedRecurrenceCancel*       cancel                         1;	///< Required element.
/// Element comp of type "urn:zimbraMail":expandedRecurrenceInvite.
    ns5__expandedRecurrenceInvite*       comp                           1;	///< Required element.
/// Element except of type "urn:zimbraMail":expandedRecurrenceException.
    ns5__expandedRecurrenceException*    except                         1;	///< Required element.
    }                                    union_checkRecurConflictsRequest;
    }                                   *__union_checkRecurConflictsRequest;
//  END OF CHOICE
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute e of type xs:long.
   @LONG64*                              e                              0;	///< Optional attribute.
/// Attribute all of type xs:boolean.
   @bool*                                all                            0;	///< Optional attribute.
/// Attribute excludeUid of type xs:string.
   @std::string*                         excludeUid                     0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":expandedRecurrenceComponent is a complexType.
class ns5__expandedRecurrenceComponent
{ public:
/// Element exceptId of type "urn:zimbraMail":instanceRecurIdInfo.
    ns5__instanceRecurIdInfo*            exceptId                       0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute e of type xs:long.
   @LONG64*                              e                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":freeBusyUserSpec is a complexType.
class ns5__freeBusyUserSpec
{ public:
/// Attribute l of type xs:int.
   @int*                                 l                              0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":checkRecurConflictsResponse is a complexType.
class ns5__checkRecurConflictsResponse
{ public:
/// Vector of ns5__conflictRecurrenceInstance* with length 0..unbounded
    std::vector<ns5__conflictRecurrenceInstance*> inst                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":expandedRecurrenceInstance is a complexType.
class ns5__expandedRecurrenceInstance
{ public:
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute tzo of type xs:int.
   @int*                                 tzo                            0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":freeBusyUserStatus is a complexType.
class ns5__freeBusyUserStatus
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute fb of type xs:string.
   @std::string                          fb                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":checkSpellingResponse is a complexType.
class ns5__checkSpellingResponse
{ public:
/// Vector of ns5__misspelling* with length 0..unbounded
    std::vector<ns5__misspelling*      > misspelled                     0;
/// Attribute available of type xs:boolean.
   @bool                                 available                      1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":misspelling is a complexType.
class ns5__misspelling
{ public:
/// Attribute word of type xs:string.
   @std::string                          word                           1;	///< Required attribute.
/// Attribute suggestions of type xs:string.
   @std::string*                         suggestions                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":completeTaskInstanceRequest is a complexType.
class ns5__completeTaskInstanceRequest
{ public:
/// Element exceptId of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     exceptId                       1;	///< Required element.
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":completeTaskInstanceResponse is a complexType.
class ns5__completeTaskInstanceResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":contactActionRequest is a complexType.
class ns5__contactActionRequest
{ public:
/// Element action of type "urn:zimbraMail":contactActionSelector.
    ns5__contactActionSelector*          action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":actionSelector is a complexType.
class ns5__actionSelector
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute tcon of type xs:string.
   @std::string*                         tcon                           0;	///< Optional attribute.
/// Attribute tag of type xs:int.
   @int*                                 tag                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":actionGrantSelector is a complexType.
class ns5__actionGrantSelector
{ public:
/// Attribute perm of type xs:string.
   @std::string                          perm                           1;	///< Required attribute.
/// Attribute gt of type xs:string.
   @std::string                          gt                             1;	///< Required attribute.
/// Attribute zid of type xs:string.
   @std::string*                         zid                            0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute args of type xs:string.
   @std::string*                         args                           0;	///< Optional attribute.
/// Attribute pw of type xs:string.
   @std::string*                         pw                             0;	///< Optional attribute.
/// Attribute key of type xs:string.
   @std::string*                         key                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":contactActionResponse is a complexType.
class ns5__contactActionResponse
{ public:
/// Element action of type "urn:zimbraMail":folderActionResult.
    ns5__folderActionResult*             action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":idAndOperation is a complexType.
class ns5__idAndOperation
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":convActionRequest is a complexType.
class ns5__convActionRequest
{ public:
/// Element action of type "urn:zimbraMail":actionSelector.
    ns5__actionSelector*                 action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":convActionResponse is a complexType.
class ns5__convActionResponse
{ public:
/// Element action of type "urn:zimbraMail":idAndOperation.
    ns5__idAndOperation*                 action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":counterAppointmentRequest is a complexType.
class ns5__counterAppointmentRequest
{ public:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute comp of type xs:int.
   @int*                                 comp                           0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":counterAppointmentResponse is a complexType.
class ns5__counterAppointmentResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":calItemRequestBase is an abstract complexType.
class ns5__calItemRequestBase
{ public:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute echo of type xs:boolean.
   @bool*                                echo                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute forcesend of type xs:boolean.
   @bool*                                forcesend                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createCalendarItemResponse is a complexType.
class ns5__createCalendarItemResponse
{ public:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              0;	///< Optional element.
/// Element echo of type "urn:zimbraMail":calEcho.
    ns5__calEcho*                        echo                           0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":calEcho is a complexType.
class ns5__calEcho
{ public:
/// Element m of type "urn:zimbraMail":inviteAsMP.
    ns5__inviteAsMP*                     m                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":mpInviteInfo is a complexType.
class ns5__mpInviteInfo
{ public:
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
    class _ns5__mpInviteInfo_replies
    {
/// Vector of ns5__calendarReply* with length 0..unbounded
    std::vector<ns5__calendarReply*    > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Vector of ns5__inviteComponent* with length 0..unbounded
    std::vector<ns5__inviteComponent*  > comp                           0;
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":partInfo is a complexType.
class ns5__partInfo
{ public:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Vector of ns5__partInfo* with length 0..unbounded
    std::vector<ns5__partInfo*         > mp                             0;
/// Attribute part of type xs:string.
   @std::string                          part                           1;	///< Required attribute.
/// Attribute ct of type xs:string.
   @std::string                          ct                             1;	///< Required attribute.
/// Attribute s of type xs:int.
   @int*                                 s                              0;	///< Optional attribute.
/// Attribute cd of type xs:string.
   @std::string*                         cd                             0;	///< Optional attribute.
/// Attribute filename of type xs:string.
   @std::string*                         filename                       0;	///< Optional attribute.
/// Attribute ci of type xs:string.
   @std::string*                         ci                             0;	///< Optional attribute.
/// Attribute cl of type xs:string.
   @std::string*                         cl                             0;	///< Optional attribute.
/// Attribute body of type xs:boolean.
   @bool*                                body                           0;	///< Optional attribute.
/// Attribute truncated of type xs:boolean.
   @bool*                                truncated                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":notification is a complexType.
class ns5__notification
{ public:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Attribute truncated of type xs:boolean.
   @bool*                                truncated                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createContactRequest is a complexType.
class ns5__createContactRequest
{ public:
/// Element cn of type "urn:zimbraMail":contactSpec.
    ns5__contactSpec*                    cn                             1;	///< Required element.
/// Attribute verbose of type xs:boolean.
   @bool*                                verbose                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":contactSpec is a complexType.
class ns5__contactSpec
{ public:
/// Element vcard of type "urn:zimbraMail":vCardInfo.
    ns5__vCardInfo*                      vcard                          0;	///< Optional element.
/// Vector of ns5__newContactAttr* with length 0..unbounded
    std::vector<ns5__newContactAttr*   > a                              0;
/// Vector of ns5__newContactGroupMember* with length 0..unbounded
    std::vector<ns5__newContactGroupMember*> m                              0;
/// Attribute id of type xs:int.
   @int*                                 id                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":newContactGroupMember is a complexType.
class ns5__newContactGroupMember
{ public:
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createContactResponse is a complexType.
class ns5__createContactResponse
{ public:
/// Element cn of type "urn:zimbraMail":contactInfo.
    ns5__contactInfo*                    cn                             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":contactInfo is a complexType.
class ns5__contactInfo
{ public:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Vector of ns3__contactAttr* with length 0..unbounded
    std::vector<ns3__contactAttr*      > a                              0;
/// Vector of ns5__contactGroupMember* with length 0..unbounded
    std::vector<ns5__contactGroupMember*> m                              0;
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// Attribute exp of type xs:boolean.
   @bool*                                exp                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute fileAsStr of type xs:string.
   @std::string*                         fileAsStr                      0;	///< Optional attribute.
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// Attribute email2 of type xs:string.
   @std::string*                         email2                         0;	///< Optional attribute.
/// Attribute email3 of type xs:string.
   @std::string*                         email3                         0;	///< Optional attribute.
/// Attribute type of type xs:string.
   @std::string*                         type                           0;	///< Optional attribute.
/// Attribute dlist of type xs:string.
   @std::string*                         dlist                          0;	///< Optional attribute.
/// Attribute ref of type xs:string.
   @std::string*                         ref                            0;	///< Optional attribute.
/// Attribute tooManyMembers of type xs:boolean.
   @bool*                                tooManyMembers                 0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":contactGroupMember is a complexType.
class ns5__contactGroupMember
{ public:
/// Element cn of type "urn:zimbraMail":contactInfo.
    ns5__contactInfo*                    cn                             0;	///< Optional element.
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createDataSourceRequest is a complexType.
class ns5__createDataSourceRequest
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_createDataSourceRequest 0;	///< Union _ns5__union_createDataSourceRequest selector: set to SOAP_UNION__ns5__union_createDataSourceRequest_<fieldname> or 0
    union _ns5__union_createDataSourceRequest
    {
/// Element imap of type "urn:zimbraMail":mailImapDataSource.
    ns5__mailImapDataSource*             imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraMail":mailPop3DataSource.
    ns5__mailPop3DataSource*             pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraMail":mailCaldavDataSource.
    ns5__mailCaldavDataSource*           caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraMail":mailYabDataSource.
    ns5__mailYabDataSource*              yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraMail":mailRssDataSource.
    ns5__mailRssDataSource*              rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraMail":mailGalDataSource.
    ns5__mailGalDataSource*              gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraMail":mailCalDataSource.
    ns5__mailCalDataSource*              cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraMail":mailUnknownDataSource.
    ns5__mailUnknownDataSource*          unknown                        1;	///< Required element.
    }                                    union_createDataSourceRequest ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":mailDataSource is an abstract complexType.
class ns5__mailDataSource
{ public:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createDataSourceResponse is a complexType.
class ns5__createDataSourceResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_createDataSourceResponse 0;	///< Union _ns5__union_createDataSourceResponse selector: set to SOAP_UNION__ns5__union_createDataSourceResponse_<fieldname> or 0
    union _ns5__union_createDataSourceResponse
    {
/// Element imap of type "urn:zimbraMail":imapDataSourceId.
    ns5__imapDataSourceId*               imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraMail":pop3DataSourceId.
    ns5__pop3DataSourceId*               pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraMail":caldavDataSourceId.
    ns5__caldavDataSourceId*             caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraMail":yabDataSourceId.
    ns5__yabDataSourceId*                yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraMail":rssDataSourceId.
    ns5__rssDataSourceId*                rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraMail":galDataSourceId.
    ns5__galDataSourceId*                gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraMail":calDataSourceId.
    ns5__calDataSourceId*                cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraMail":unknownDataSourceId.
    ns5__unknownDataSourceId*            unknown                        1;	///< Required element.
    }                                    union_createDataSourceResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createFolderRequest is a complexType.
class ns5__createFolderRequest
{ public:
/// Element folder of type "urn:zimbraMail":newFolderSpec.
    ns5__newFolderSpec*                  folder                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":newFolderSpec is a complexType.
class ns5__newFolderSpec
{ public:
    class _ns5__newFolderSpec_acl
    {
/// Vector of ns5__actionGrantSelector* with length 0..unbounded
    std::vector<ns5__actionGrantSelector*> grant                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *acl                            0;	///< Optional element.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute view of type xs:string.
   @std::string*                         view                           0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute fie of type xs:boolean.
   @bool*                                fie                            0;	///< Optional attribute.
/// Attribute sync of type xs:boolean.
   @bool*                                sync                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createFolderResponse is a complexType.
class ns5__createFolderResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_createFolderResponse   0;	///< Union _ns5__union_createFolderResponse selector: set to SOAP_UNION__ns5__union_createFolderResponse_<fieldname> or 0
    union _ns5__union_createFolderResponse
    {
/// Element reference "urn:zimbraMail":folder.
    ns5__folder*                         folder                         1;	///< Required element.
/// Element reference "urn:zimbraMail":link.
    ns5__mountpoint*                     link                           1;	///< Required element.
/// Element reference "urn:zimbraMail":search.
    ns5__searchFolder*                   search                         1;	///< Required element.
    }                                    union_createFolderResponse    ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":folder is a complexType.
class ns5__folder
{ public:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element acl of type "urn:zimbraMail":acl.
    ns5__acl*                            acl                            0;	///< Optional element.
/// Element reference "urn:zimbraMail":retentionPolicy.
    ns5__retentionPolicy*                retentionPolicy                0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_folder                  0;
    class __ns5__union_folder
    {
   $int                                  __union_folder                 0;	///< Union _ns5__union_folder selector: set to SOAP_UNION__ns5__union_folder_<fieldname> or 0
    union _ns5__union_folder
    {
/// Element reference "urn:zimbraMail":folder.
    ns5__folder*                         folder                         1;	///< Required element.
/// Element reference "urn:zimbraMail":link.
    ns5__mountpoint*                     link                           1;	///< Required element.
/// Element reference "urn:zimbraMail":search.
    ns5__searchFolder*                   search                         1;	///< Required element.
    }                                    union_folder                  ;
    }                                   *__union_folder                ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute uuid of type xs:string.
   @std::string                          uuid                           1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute absFolderPath of type xs:string.
   @std::string*                         absFolderPath                  0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute luuid of type xs:string.
   @std::string*                         luuid                          0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute color of type xs:int.
   @int*                                 color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute u of type xs:int.
   @int*                                 u                              0;	///< Optional attribute.
/// Attribute i4u of type xs:int.
   @int*                                 i4u                            0;	///< Optional attribute.
/// Attribute view of type "urn:zimbraMail":view.
   @enum ns5__view*                      view                           0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute n of type xs:int.
   @int*                                 n                              0;	///< Optional attribute.
/// Attribute i4n of type xs:int.
   @int*                                 i4n                            0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute i4ms of type xs:int.
   @int*                                 i4ms                           0;	///< Optional attribute.
/// Attribute i4next of type xs:int.
   @int*                                 i4next                         0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute activesyncdisabled of type xs:boolean.
   @bool*                                activesyncdisabled             0;	///< Optional attribute.
/// Attribute perm of type xs:string.
   @std::string*                         perm                           0;	///< Optional attribute.
/// Attribute recursive of type xs:boolean.
   @bool*                                recursive                      0;	///< Optional attribute.
/// Attribute rest of type xs:string.
   @std::string*                         rest                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":acl is a complexType.
class ns5__acl
{ public:
/// Vector of ns5__grant* with length 0..unbounded
    std::vector<ns5__grant*            > grant                          0;
/// Attribute internalGrantExpiry of type xs:long.
   @LONG64*                              internalGrantExpiry            0;	///< Optional attribute.
/// Attribute guestGrantExpiry of type xs:long.
   @LONG64*                              guestGrantExpiry               0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":grant is a complexType.
class ns5__grant
{ public:
/// Attribute perm of type xs:string.
   @std::string                          perm                           1;	///< Required attribute.
/// Attribute gt of type "urn:zimbra":grantGranteeType.
   @enum ns3__grantGranteeType           gt                             1;	///< Required attribute.
/// Attribute zid of type xs:string.
   @std::string                          zid                            1;	///< Required attribute.
/// Attribute expiry of type xs:long.
   @LONG64*                              expiry                         0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute pw of type xs:string.
   @std::string*                         pw                             0;	///< Optional attribute.
/// Attribute key of type xs:string.
   @std::string*                         key                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createMountpointRequest is a complexType.
class ns5__createMountpointRequest
{ public:
/// Element link of type "urn:zimbraMail":newMountpointSpec.
    ns5__newMountpointSpec*              link                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":newMountpointSpec is a complexType.
class ns5__newMountpointSpec
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute view of type xs:string.
   @std::string*                         view                           0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute fie of type xs:boolean.
   @bool*                                fie                            0;	///< Optional attribute.
/// Attribute reminder of type xs:boolean.
   @bool*                                reminder                       0;	///< Optional attribute.
/// Attribute zid of type xs:string.
   @std::string*                         zid                            0;	///< Optional attribute.
/// Attribute owner of type xs:string.
   @std::string*                         owner                          0;	///< Optional attribute.
/// Attribute rid of type xs:int.
   @int*                                 rid                            0;	///< Optional attribute.
/// Attribute path of type xs:string.
   @std::string*                         path                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createMountpointResponse is a complexType.
class ns5__createMountpointResponse
{ public:
/// Element reference "urn:zimbraMail":link.
    ns5__mountpoint*                     link                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createNoteRequest is a complexType.
class ns5__createNoteRequest
{ public:
/// Element note of type "urn:zimbraMail":newNoteSpec.
    ns5__newNoteSpec*                    note                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":newNoteSpec is a complexType.
class ns5__newNoteSpec
{ public:
/// Attribute l of type xs:string.
   @std::string                          l                              1;	///< Required attribute.
/// Attribute content of type xs:string.
   @std::string                          content                        1;	///< Required attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute pos of type xs:string.
   @std::string*                         pos                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createNoteResponse is a complexType.
class ns5__createNoteResponse
{ public:
/// Element note of type "urn:zimbraMail":noteInfo.
    ns5__noteInfo*                       note                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":noteInfo is a complexType.
class ns5__noteInfo
{ public:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute pos of type xs:string.
   @std::string*                         pos                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createSearchFolderRequest is a complexType.
class ns5__createSearchFolderRequest
{ public:
/// Element search of type "urn:zimbraMail":newSearchFolderSpec.
    ns5__newSearchFolderSpec*            search                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":newSearchFolderSpec is a complexType.
class ns5__newSearchFolderSpec
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute query of type xs:string.
   @std::string                          query                          1;	///< Required attribute.
/// Attribute types of type xs:string.
   @std::string*                         types                          0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createSearchFolderResponse is a complexType.
class ns5__createSearchFolderResponse
{ public:
/// Element reference "urn:zimbraMail":search.
    ns5__searchFolder*                   search                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createTagRequest is a complexType.
class ns5__createTagRequest
{ public:
/// Element tag of type "urn:zimbraMail":tagSpec.
    ns5__tagSpec*                        tag                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":tagSpec is a complexType.
class ns5__tagSpec
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createTagResponse is a complexType.
class ns5__createTagResponse
{ public:
/// Element tag of type "urn:zimbraMail":tagInfo.
    ns5__tagInfo*                        tag                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":tagInfo is a complexType.
class ns5__tagInfo
{ public:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element reference "urn:zimbraMail":retentionPolicy.
    ns5__retentionPolicy*                retentionPolicy                0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute u of type xs:int.
   @int*                                 u                              0;	///< Optional attribute.
/// Attribute n of type xs:int.
   @int*                                 n                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createWaitSetRequest is a complexType.
class ns5__createWaitSetRequest
{ public:
    class _ns5__createWaitSetRequest_add
    {
/// Vector of ns3__waitSetAddSpec* with length 0..unbounded
    std::vector<ns3__waitSetAddSpec*   > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *add                            0;	///< Optional element.
/// Attribute defTypes of type xs:string.
   @std::string                          defTypes                       1;	///< Required attribute.
/// Attribute allAccounts of type xs:boolean.
   @bool*                                allAccounts                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":createWaitSetResponse is a complexType.
class ns5__createWaitSetResponse
{ public:
/// Vector of ns3__idAndType* with length 0..unbounded
    std::vector<ns3__idAndType*        > error                          0;
/// Attribute waitSet of type xs:string.
   @std::string                          waitSet                        1;	///< Required attribute.
/// Attribute defTypes of type xs:string.
   @std::string                          defTypes                       1;	///< Required attribute.
/// Attribute seq of type xs:int.
   @int                                  seq                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":declineCounterAppointmentRequest is a complexType.
class ns5__declineCounterAppointmentRequest
{ public:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":declineCounterAppointmentResponse is a complexType.
class ns5__declineCounterAppointmentResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":deleteDataSourceRequest is a complexType.
class ns5__deleteDataSourceRequest
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_deleteDataSourceRequest 0;
    class __ns5__union_deleteDataSourceRequest
    {
   $int                                  __union_deleteDataSourceRequest 0;	///< Union _ns5__union_deleteDataSourceRequest selector: set to SOAP_UNION__ns5__union_deleteDataSourceRequest_<fieldname> or 0
    union _ns5__union_deleteDataSourceRequest
    {
/// Element imap of type "urn:zimbraMail":imapDataSourceNameOrId.
    ns5__imapDataSourceNameOrId*         imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraMail":pop3DataSourceNameOrId.
    ns5__pop3DataSourceNameOrId*         pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraMail":caldavDataSourceNameOrId.
    ns5__caldavDataSourceNameOrId*       caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraMail":yabDataSourceNameOrId.
    ns5__yabDataSourceNameOrId*          yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraMail":rssDataSourceNameOrId.
    ns5__rssDataSourceNameOrId*          rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraMail":galDataSourceNameOrId.
    ns5__galDataSourceNameOrId*          gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraMail":calDataSourceNameOrId.
    ns5__calDataSourceNameOrId*          cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraMail":unknownDataSourceNameOrId.
    ns5__unknownDataSourceNameOrId*      unknown                        1;	///< Required element.
    }                                    union_deleteDataSourceRequest ;
    }                                   *__union_deleteDataSourceRequest;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":nameOrId is a complexType.
class ns5__nameOrId
{ public:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":deleteDataSourceResponse is a complexType.
class ns5__deleteDataSourceResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":deleteDeviceRequest is a complexType.
class ns5__deleteDeviceRequest
{ public:
/// Element device of type "urn:zimbra":id.
    ns3__id*                             device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":deleteDeviceResponse is a complexType.
class ns5__deleteDeviceResponse
{ public:
/// Element device of type "urn:zimbraMail":nameId.
    ns5__nameId*                         device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":nameId is a complexType.
class ns5__nameId
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":destroyWaitSetRequest is a complexType.
class ns5__destroyWaitSetRequest
{ public:
/// Attribute waitSet of type xs:string.
   @std::string                          waitSet                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":destroyWaitSetResponse is a complexType.
class ns5__destroyWaitSetResponse
{ public:
/// Attribute waitSet of type xs:string.
   @std::string                          waitSet                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":diffDocumentRequest is a complexType.
class ns5__diffDocumentRequest
{ public:
/// Element doc of type "urn:zimbraMail":diffDocumentVersionSpec.
    ns5__diffDocumentVersionSpec*        doc                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":diffDocumentVersionSpec is a complexType.
class ns5__diffDocumentVersionSpec
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute v1 of type xs:int.
   @int*                                 v1                             0;	///< Optional attribute.
/// Attribute v2 of type xs:int.
   @int*                                 v2                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":diffDocumentResponse is a complexType.
class ns5__diffDocumentResponse
{ public:
/// Vector of ns5__dispositionAndText* with length 0..unbounded
    std::vector<ns5__dispositionAndText*> chunk                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":dismissCalendarItemAlarmRequest is a complexType.
class ns5__dismissCalendarItemAlarmRequest
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_dismissCalendarItemAlarmRequest 0;
    class __ns5__union_dismissCalendarItemAlarmRequest
    {
   $int                                  __union_dismissCalendarItemAlarmRequest 0;	///< Union _ns5__union_dismissCalendarItemAlarmRequest selector: set to SOAP_UNION__ns5__union_dismissCalendarItemAlarmRequest_<fieldname> or 0
    union _ns5__union_dismissCalendarItemAlarmRequest
    {
/// Element appt of type "urn:zimbraMail":dismissAppointmentAlarm.
    ns5__dismissAppointmentAlarm*        appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":dismissTaskAlarm.
    ns5__dismissTaskAlarm*               task                           1;	///< Required element.
    }                                    union_dismissCalendarItemAlarmRequest;
    }                                   *__union_dismissCalendarItemAlarmRequest;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":dismissAlarm is a complexType.
class ns5__dismissAlarm
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute dismissedAt of type xs:long.
   @LONG64                               dismissedAt                    1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":dismissCalendarItemAlarmResponse is a complexType.
class ns5__dismissCalendarItemAlarmResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_dismissCalendarItemAlarmResponse 0;
    class __ns5__union_dismissCalendarItemAlarmResponse
    {
   $int                                  __union_dismissCalendarItemAlarmResponse 0;	///< Union _ns5__union_dismissCalendarItemAlarmResponse selector: set to SOAP_UNION__ns5__union_dismissCalendarItemAlarmResponse_<fieldname> or 0
    union _ns5__union_dismissCalendarItemAlarmResponse
    {
/// Element appt of type "urn:zimbraMail":updatedAppointmentAlarmInfo.
    ns5__updatedAppointmentAlarmInfo*    appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":updatedTaskAlarmInfo.
    ns5__updatedTaskAlarmInfo*           task                           1;	///< Required element.
    }                                    union_dismissCalendarItemAlarmResponse;
    }                                   *__union_dismissCalendarItemAlarmResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":updatedAlarmInfo is a complexType.
class ns5__updatedAlarmInfo
{ public:
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string                          calItemId                      1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":alarmDataInfo is a complexType.
class ns5__alarmDataInfo
{ public:
/// Element alarm of type "urn:zimbraMail":alarmInfo.
    ns5__alarmInfo*                      alarm                          0;	///< Optional element.
/// Attribute nextAlarm of type xs:long.
   @LONG64*                              nextAlarm                      0;	///< Optional attribute.
/// Attribute alarmInstStart of type xs:long.
   @LONG64*                              alarmInstStart                 0;	///< Optional attribute.
/// Attribute invId of type xs:int.
   @int*                                 invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":documentActionRequest is a complexType.
class ns5__documentActionRequest
{ public:
/// Element action of type "urn:zimbraMail":documentActionSelector.
    ns5__documentActionSelector*         action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":documentActionGrant is a complexType.
class ns5__documentActionGrant
{ public:
/// Attribute perm of type xs:string.
   @std::string                          perm                           1;	///< Required attribute.
/// Attribute gt of type xs:string.
   @std::string                          gt                             1;	///< Required attribute.
/// Attribute expiry of type xs:long.
   @LONG64*                              expiry                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":documentActionResponse is a complexType.
class ns5__documentActionResponse
{ public:
/// Element action of type "urn:zimbraMail":idAndOperation.
    ns5__idAndOperation*                 action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":emptyDumpsterRequest is a complexType.
class ns5__emptyDumpsterRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":emptyDumpsterResponse is a complexType.
class ns5__emptyDumpsterResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":enableSharedReminderRequest is a complexType.
class ns5__enableSharedReminderRequest
{ public:
/// Element link of type "urn:zimbraMail":sharedReminderMount.
    ns5__sharedReminderMount*            link                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sharedReminderMount is a complexType.
class ns5__sharedReminderMount
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute reminder of type xs:boolean.
   @bool*                                reminder                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":enableSharedReminderResponse is a complexType.
class ns5__enableSharedReminderResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":expandRecurRequest is a complexType.
class ns5__expandRecurRequest
{ public:
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_expandRecurRequest      0;
    class __ns5__union_expandRecurRequest
    {
   $int                                  __union_expandRecurRequest     0;	///< Union _ns5__union_expandRecurRequest selector: set to SOAP_UNION__ns5__union_expandRecurRequest_<fieldname> or 0
    union _ns5__union_expandRecurRequest
    {
/// Element comp of type "urn:zimbraMail":expandedRecurrenceInvite.
    ns5__expandedRecurrenceInvite*       comp                           1;	///< Required element.
/// Element except of type "urn:zimbraMail":expandedRecurrenceException.
    ns5__expandedRecurrenceException*    except                         1;	///< Required element.
/// Element cancel of type "urn:zimbraMail":expandedRecurrenceCancel.
    ns5__expandedRecurrenceCancel*       cancel                         1;	///< Required element.
    }                                    union_expandRecurRequest      ;
    }                                   *__union_expandRecurRequest    ;
//  END OF CHOICE
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":expandRecurResponse is a complexType.
class ns5__expandRecurResponse
{ public:
/// Vector of ns5__expandedRecurrenceInstance* with length 0..unbounded
    std::vector<ns5__expandedRecurrenceInstance*> inst                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":exportContactsRequest is a complexType.
class ns5__exportContactsRequest
{ public:
/// Attribute ct of type xs:string.
   @std::string                          ct                             1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute csvfmt of type xs:string.
   @std::string*                         csvfmt                         0;	///< Optional attribute.
/// Attribute csvlocale of type xs:string.
   @std::string*                         csvlocale                      0;	///< Optional attribute.
/// Attribute csvsep of type xs:string.
   @std::string*                         csvsep                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":exportContactsResponse is a complexType.
class ns5__exportContactsResponse
{ public:
/// Element content of type xs:string.
    std::string                          content                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":folderActionRequest is a complexType.
class ns5__folderActionRequest
{ public:
/// Element action of type "urn:zimbraMail":folderActionSelector.
    ns5__folderActionSelector*           action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":folderActionResponse is a complexType.
class ns5__folderActionResponse
{ public:
/// Element action of type "urn:zimbraMail":folderActionResult.
    ns5__folderActionResult*             action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":forwardAppointmentInviteRequest is a complexType.
class ns5__forwardAppointmentInviteRequest
{ public:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":forwardAppointmentInviteResponse is a complexType.
class ns5__forwardAppointmentInviteResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":forwardAppointmentRequest is a complexType.
class ns5__forwardAppointmentRequest
{ public:
/// Element exceptId of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     exceptId                       0;	///< Optional element.
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":forwardAppointmentResponse is a complexType.
class ns5__forwardAppointmentResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":generateUUIDRequest is a complexType.
class ns5__generateUUIDRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getActivityStreamRequest is a complexType.
class ns5__getActivityStreamRequest
{ public:
/// Element filter of type "urn:zimbraMail":activityFilter.
    ns5__activityFilter*                 filter                         0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":activityFilter is a complexType.
class ns5__activityFilter
{ public:
/// Attribute account of type xs:string.
   @std::string*                         account                        0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string*                         op                             0;	///< Optional attribute.
/// Attribute session of type xs:string.
   @std::string*                         session                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getActivityStreamResponse is a complexType.
class ns5__getActivityStreamResponse
{ public:
/// Vector of ns3__namedElement* with length 0..unbounded
    std::vector<ns3__namedElement*     > op                             0;
/// Vector of ns5__idEmailName* with length 0..unbounded
    std::vector<ns5__idEmailName*      > user                           0;
/// Vector of ns5__activityInfo* with length 0..unbounded
    std::vector<ns5__activityInfo*     > a                              0;
/// Attribute session of type xs:string.
   @std::string*                         session                        0;	///< Optional attribute.
/// Attribute count of type xs:string.
   @std::string*                         count                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":idEmailName is a complexType.
class ns5__idEmailName
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":activityInfo is a complexType.
class ns5__activityInfo
{ public:
/// Vector of ns3__namedValue* with length 0..unbounded
    std::vector<ns3__namedValue*       > arg                            0;
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute ts of type xs:long.
   @LONG64                               ts                             1;	///< Required attribute.
/// Attribute itemId of type xs:string.
   @std::string                          itemId                         1;	///< Required attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
/// Attribute ua of type xs:string.
   @std::string*                         ua                             0;	///< Optional attribute.
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getAllDevicesRequest is a complexType.
class ns5__getAllDevicesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getAllDevicesResponse is a complexType.
class ns5__getAllDevicesResponse
{ public:
/// Vector of ns5__deviceInfo* with length 0..unbounded
    std::vector<ns5__deviceInfo*       > device                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getCalendarItemRequestBase is an abstract complexType.
class ns5__getCalendarItemRequestBase
{ public:
/// Attribute sync of type xs:boolean.
   @bool*                                sync                           0;	///< Optional attribute.
/// Attribute includeContent of type xs:boolean.
   @bool*                                includeContent                 0;	///< Optional attribute.
/// Attribute includeInvites of type xs:boolean.
   @bool*                                includeInvites                 0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getAppointmentResponse is a complexType.
class ns5__getAppointmentResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_getAppointmentResponse 0;	///< Union _ns5__union_getAppointmentResponse selector: set to SOAP_UNION__ns5__union_getAppointmentResponse_<fieldname> or 0
    union _ns5__union_getAppointmentResponse
    {
/// Element appt of type "urn:zimbraMail":calendarItemInfo.
    ns5__calendarItemInfo*               appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":taskItemInfo.
    ns5__taskItemInfo*                   task                           1;	///< Required element.
    }                                    union_getAppointmentResponse  ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":calendarItemInfo is a complexType.
class ns5__calendarItemInfo
{ public:
/// Vector of ns5__invitation* with length 0..unbounded
    std::vector<ns5__invitation*       > inv                            0;
    class _ns5__calendarItemInfo_replies
    {
/// Vector of ns5__calendarReply* with length 0..unbounded
    std::vector<ns5__calendarReply*    > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute nextAlarm of type xs:long.
   @LONG64*                              nextAlarm                      0;	///< Optional attribute.
/// Attribute orphan of type xs:boolean.
   @bool*                                orphan                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":invitation is a complexType.
class ns5__invitation
{ public:
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// Element comp of type "urn:zimbraMail":inviteComponent.
    ns5__inviteComponent*                comp                           0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_invitation              0;
    class __ns5__union_invitation
    {
   $int                                  __union_invitation             0;	///< Union _ns5__union_invitation selector: set to SOAP_UNION__ns5__union_invitation_<fieldname> or 0
    union _ns5__union_invitation
    {
/// Element mp of type "urn:zimbraMail":partInfo.
    ns5__partInfo*                       mp                             1;	///< Required element.
/// Element shr of type "urn:zimbraMail":shareNotification.
    ns5__shareNotification*              shr                            1;	///< Required element.
/// Element dlSubs of type "urn:zimbraMail":dlSubscriptionNotification.
    ns5__dlSubscriptionNotification*     dlSubs                         1;	///< Required element.
    }                                    union_invitation              ;
    }                                   *__union_invitation            ;
//  END OF CHOICE
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// Attribute seq of type xs:int.
   @int                                  seq                            1;	///< Required attribute.
/// Attribute id of type xs:int.
   @int                                  id                             1;	///< Required attribute.
/// Attribute compNum of type xs:int.
   @int                                  compNum                        1;	///< Required attribute.
/// Attribute recurId of type xs:string.
   @std::string*                         recurId                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getApptSummariesRequest is a complexType.
class ns5__getApptSummariesRequest
{ public:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getApptSummariesResponse is a complexType.
class ns5__getApptSummariesResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_getApptSummariesResponse 0;
    class __ns5__union_getApptSummariesResponse
    {
   $int                                  __union_getApptSummariesResponse 0;	///< Union _ns5__union_getApptSummariesResponse selector: set to SOAP_UNION__ns5__union_getApptSummariesResponse_<fieldname> or 0
    union _ns5__union_getApptSummariesResponse
    {
/// Element appt of type "urn:zimbraMail":legacyAppointmentData.
    ns5__legacyAppointmentData*          appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":legacyTaskData.
    ns5__legacyTaskData*                 task                           1;	///< Required element.
    }                                    union_getApptSummariesResponse;
    }                                   *__union_getApptSummariesResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":commonInstanceDataAttrs is a complexType.
class ns5__commonInstanceDataAttrs
{ public:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getCalendarItemSummariesRequest is a complexType.
class ns5__getCalendarItemSummariesRequest
{ public:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getCalendarItemSummariesResponse is a complexType.
class ns5__getCalendarItemSummariesResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_getCalendarItemSummariesResponse 0;
    class __ns5__union_getCalendarItemSummariesResponse
    {
   $int                                  __union_getCalendarItemSummariesResponse 0;	///< Union _ns5__union_getCalendarItemSummariesResponse selector: set to SOAP_UNION__ns5__union_getCalendarItemSummariesResponse_<fieldname> or 0
    union _ns5__union_getCalendarItemSummariesResponse
    {
/// Element appt of type "urn:zimbraMail":legacyAppointmentData.
    ns5__legacyAppointmentData*          appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":legacyTaskData.
    ns5__legacyTaskData*                 task                           1;	///< Required element.
    }                                    union_getCalendarItemSummariesResponse;
    }                                   *__union_getCalendarItemSummariesResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getCommentsRequest is a complexType.
class ns5__getCommentsRequest
{ public:
/// Element comment of type "urn:zimbraMail":parentId.
    ns5__parentId*                       comment                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":parentId is a complexType.
class ns5__parentId
{ public:
/// Attribute parentId of type xs:string.
   @std::string                          parentId                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getCommentsResponse is a complexType.
class ns5__getCommentsResponse
{ public:
/// Vector of ns5__idEmailName* with length 0..unbounded
    std::vector<ns5__idEmailName*      > user                           0;
/// Vector of ns5__commentInfo* with length 0..unbounded
    std::vector<ns5__commentInfo*      > comment                        0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":commentInfo is a complexType.
class ns5__commentInfo
{ public:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute parentId of type xs:string.
   @std::string*                         parentId                       0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute uuid of type xs:string.
   @std::string*                         uuid                           0;	///< Optional attribute.
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// TODO: this mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getContactsRequest is a complexType.
class ns5__getContactsRequest
{ public:
/// Vector of ns3__attributeName* with length 0..unbounded
    std::vector<ns3__attributeName*    > a                              0;
/// Vector of ns3__attributeName* with length 0..unbounded
    std::vector<ns3__attributeName*    > ma                             0;
/// Vector of ns3__id* with length 0..unbounded
    std::vector<ns3__id*               > cn                             0;
/// Attribute sync of type xs:boolean.
   @bool*                                sync                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute derefGroupMember of type xs:boolean.
   @bool*                                derefGroupMember               0;	///< Optional attribute.
/// Attribute returnHiddenAttrs of type xs:boolean.
   @bool*                                returnHiddenAttrs              0;	///< Optional attribute.
/// Attribute maxMembers of type xs:long.
   @LONG64*                              maxMembers                     0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getContactsResponse is a complexType.
class ns5__getContactsResponse
{ public:
/// Vector of ns5__contactInfo* with length 0..unbounded
    std::vector<ns5__contactInfo*      > cn                             0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getConvRequest is a complexType.
class ns5__getConvRequest
{ public:
/// Element c of type "urn:zimbraMail":conversationSpec.
    ns5__conversationSpec*               c                              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":conversationSpec is a complexType.
class ns5__conversationSpec
{ public:
/// Vector of ns3__attributeName* with length 0..unbounded
    std::vector<ns3__attributeName*    > header                         0;
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute fetch of type xs:string.
   @std::string*                         fetch                          0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getConvResponse is a complexType.
class ns5__getConvResponse
{ public:
/// Element c of type "urn:zimbraMail":conversationInfo.
    ns5__conversationInfo*               c                              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":conversationInfo is a complexType.
class ns5__conversationInfo
{ public:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_conversationInfo        0;
    class __ns5__union_conversationInfo
    {
   $int                                  __union_conversationInfo       0;	///< Union _ns5__union_conversationInfo selector: set to SOAP_UNION__ns5__union_conversationInfo_<fieldname> or 0
    union _ns5__union_conversationInfo
    {
/// Element chat of type "urn:zimbraMail":chatMessageInfo.
    ns5__chatMessageInfo*                chat                           1;	///< Required element.
/// Element m of type "urn:zimbraMail":messageInfo.
    ns5__messageInfo*                    m                              1;	///< Required element.
    }                                    union_conversationInfo        ;
    }                                   *__union_conversationInfo      ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute n of type xs:int.
   @int*                                 n                              0;	///< Optional attribute.
/// Attribute total of type xs:int.
   @int*                                 total                          0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getCustomMetadataRequest is a complexType.
class ns5__getCustomMetadataRequest
{ public:
/// Element meta of type "urn:zimbra":sectionAttr.
    ns3__sectionAttr*                    meta                           0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getCustomMetadataResponse is a complexType.
class ns5__getCustomMetadataResponse
{ public:
/// Element reference "urn:zimbraMail":meta.
    ns5__mailCustomMetadata*             meta                           0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getDataSourcesRequest is a complexType.
class ns5__getDataSourcesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getDataSourcesResponse is a complexType.
class ns5__getDataSourcesResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_getDataSourcesResponse  0;
    class __ns5__union_getDataSourcesResponse
    {
   $int                                  __union_getDataSourcesResponse 0;	///< Union _ns5__union_getDataSourcesResponse selector: set to SOAP_UNION__ns5__union_getDataSourcesResponse_<fieldname> or 0
    union _ns5__union_getDataSourcesResponse
    {
/// Element imap of type "urn:zimbraMail":mailImapDataSource.
    ns5__mailImapDataSource*             imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraMail":mailPop3DataSource.
    ns5__mailPop3DataSource*             pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraMail":mailCaldavDataSource.
    ns5__mailCaldavDataSource*           caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraMail":mailYabDataSource.
    ns5__mailYabDataSource*              yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraMail":mailRssDataSource.
    ns5__mailRssDataSource*              rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraMail":mailGalDataSource.
    ns5__mailGalDataSource*              gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraMail":mailCalDataSource.
    ns5__mailCalDataSource*              cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraMail":mailUnknownDataSource.
    ns5__mailUnknownDataSource*          unknown                        1;	///< Required element.
    }                                    union_getDataSourcesResponse  ;
    }                                   *__union_getDataSourcesResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getDocumentShareURLRequest is a complexType.
class ns5__getDocumentShareURLRequest
{ public:
/// Element item of type "urn:zimbraMail":itemSpec.
    ns5__itemSpec*                       item                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":itemSpec is a complexType.
class ns5__itemSpec
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute path of type xs:string.
   @std::string*                         path                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getEffectiveFolderPermsRequest is a complexType.
class ns5__getEffectiveFolderPermsRequest
{ public:
/// Element folder of type "urn:zimbraMail":folderSpec.
    ns5__folderSpec*                     folder                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":folderSpec is a complexType.
class ns5__folderSpec
{ public:
/// Attribute l of type xs:string.
   @std::string                          l                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getEffectiveFolderPermsResponse is a complexType.
class ns5__getEffectiveFolderPermsResponse
{ public:
/// Element folder of type "urn:zimbraMail":rights.
    ns5__rights*                         folder                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":rights is a complexType.
class ns5__rights
{ public:
/// Attribute perm of type xs:string.
   @std::string                          perm                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getFilterRulesRequest is a complexType.
class ns5__getFilterRulesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getFilterRulesResponse is a complexType.
class ns5__getFilterRulesResponse
{ public:
    class _ns5__getFilterRulesResponse_filterRules
    {
/// Vector of ns5__filterRule* with length 0..unbounded
    std::vector<ns5__filterRule*       > filterRule                     0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                    filterRules                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":filterRule is a complexType.
class ns5__filterRule
{ public:
/// Element filterTests of type "urn:zimbraMail":filterTests.
    ns5__filterTests*                    filterTests                    1;	///< Required element.
    class _ns5__filterRule_filterActions
    {
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_filterRule_filterActions 0;
    class __ns5__union_filterRule_filterActions
    {
   $int                                  __union_filterRule_filterActions 0;	///< Union _ns5__union_filterRule_filterActions selector: set to SOAP_UNION__ns5__union_filterRule_filterActions_<fieldname> or 0
    union _ns5__union_filterRule_filterActions
    {
/// Element actionKeep of type "urn:zimbraMail":keepAction.
    ns5__keepAction*                     actionKeep                     1;	///< Required element.
/// Element actionDiscard of type "urn:zimbraMail":discardAction.
    ns5__discardAction*                  actionDiscard                  1;	///< Required element.
/// Element actionFileInto of type "urn:zimbraMail":fileIntoAction.
    ns5__fileIntoAction*                 actionFileInto                 1;	///< Required element.
/// Element actionFlag of type "urn:zimbraMail":flagAction.
    ns5__flagAction*                     actionFlag                     1;	///< Required element.
/// Element actionTag of type "urn:zimbraMail":tagAction.
    ns5__tagAction*                      actionTag                      1;	///< Required element.
/// Element actionRedirect of type "urn:zimbraMail":redirectAction.
    ns5__redirectAction*                 actionRedirect                 1;	///< Required element.
/// Element actionReply of type "urn:zimbraMail":replyAction.
    ns5__replyAction*                    actionReply                    1;	///< Required element.
/// Element actionNotify of type "urn:zimbraMail":notifyAction.
    ns5__notifyAction*                   actionNotify                   1;	///< Required element.
/// Element actionStop of type "urn:zimbraMail":stopAction.
    ns5__stopAction*                     actionStop                     1;	///< Required element.
    }                                    union_filterRule_filterActions;
    }                                   *__union_filterRule_filterActions;
//  END OF CHOICE
    }                                   *filterActions                  0;	///< Optional element.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute active of type xs:boolean.
   @bool                                 active                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":filterTests is a complexType.
class ns5__filterTests
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_filterTests             0;
    class __ns5__union_filterTests
    {
   $int                                  __union_filterTests            0;	///< Union _ns5__union_filterTests selector: set to SOAP_UNION__ns5__union_filterTests_<fieldname> or 0
    union _ns5__union_filterTests
    {
/// Element addressBookTest of type "urn:zimbraMail":addressBookTest.
    ns5__addressBookTest*                addressBookTest                1;	///< Required element.
/// Element addressTest of type "urn:zimbraMail":addressTest.
    ns5__addressTest*                    addressTest                    1;	///< Required element.
/// Element attachmentTest of type "urn:zimbraMail":attachmentTest.
    ns5__attachmentTest*                 attachmentTest                 1;	///< Required element.
/// Element bodyTest of type "urn:zimbraMail":bodyTest.
    ns5__bodyTest*                       bodyTest                       1;	///< Required element.
/// Element bulkTest of type "urn:zimbraMail":bulkTest.
    ns5__bulkTest*                       bulkTest                       1;	///< Required element.
/// Element contactRankingTest of type "urn:zimbraMail":contactRankingTest.
    ns5__contactRankingTest*             contactRankingTest             1;	///< Required element.
/// Element conversationTest of type "urn:zimbraMail":conversationTest.
    ns5__conversationTest*               conversationTest               1;	///< Required element.
/// Element currentDayOfWeekTest of type "urn:zimbraMail":currentDayOfWeekTest.
    ns5__currentDayOfWeekTest*           currentDayOfWeekTest           1;	///< Required element.
/// Element currentTimeTest of type "urn:zimbraMail":currentTimeTest.
    ns5__currentTimeTest*                currentTimeTest                1;	///< Required element.
/// Element dateTest of type "urn:zimbraMail":dateTest.
    ns5__dateTest*                       dateTest                       1;	///< Required element.
/// Element facebookTest of type "urn:zimbraMail":facebookTest.
    ns5__facebookTest*                   facebookTest                   1;	///< Required element.
/// Element flaggedTest of type "urn:zimbraMail":flaggedTest.
    ns5__flaggedTest*                    flaggedTest                    1;	///< Required element.
/// Element headerExistsTest of type "urn:zimbraMail":headerExistsTest.
    ns5__headerExistsTest*               headerExistsTest               1;	///< Required element.
/// Element headerTest of type "urn:zimbraMail":headerTest.
    ns5__headerTest*                     headerTest                     1;	///< Required element.
/// Element importanceTest of type "urn:zimbraMail":importanceTest.
    ns5__importanceTest*                 importanceTest                 1;	///< Required element.
/// Element inviteTest of type "urn:zimbraMail":inviteTest.
    ns5__inviteTest*                     inviteTest                     1;	///< Required element.
/// Element linkedinTest of type "urn:zimbraMail":linkedInTest.
    ns5__linkedInTest*                   linkedinTest                   1;	///< Required element.
/// Element listTest of type "urn:zimbraMail":listTest.
    ns5__listTest*                       listTest                       1;	///< Required element.
/// Element meTest of type "urn:zimbraMail":meTest.
    ns5__meTest*                         meTest                         1;	///< Required element.
/// Element mimeHeaderTest of type "urn:zimbraMail":mimeHeaderTest.
    ns5__mimeHeaderTest*                 mimeHeaderTest                 1;	///< Required element.
/// Element sizeTest of type "urn:zimbraMail":sizeTest.
    ns5__sizeTest*                       sizeTest                       1;	///< Required element.
/// Element socialcastTest of type "urn:zimbraMail":socialcastTest.
    ns5__socialcastTest*                 socialcastTest                 1;	///< Required element.
/// Element trueTest of type "urn:zimbraMail":trueTest.
    ns5__trueTest*                       trueTest                       1;	///< Required element.
/// Element twitterTest of type "urn:zimbraMail":twitterTest.
    ns5__twitterTest*                    twitterTest                    1;	///< Required element.
    }                                    union_filterTests             ;
    }                                   *__union_filterTests           ;
//  END OF CHOICE
/// Attribute condition of type xs:string.
   @std::string                          condition                      1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":filterTest is a complexType.
class ns5__filterTest
{ public:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":filterAction is a complexType.
class ns5__filterAction
{ public:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getFolderRequest is a complexType.
class ns5__getFolderRequest
{ public:
/// Element folder of type "urn:zimbraMail":getFolderSpec.
    ns5__getFolderSpec*                  folder                         0;	///< Optional element.
/// Attribute visible of type xs:boolean.
   @bool*                                visible                        0;	///< Optional attribute.
/// Attribute needGranteeName of type xs:boolean.
   @bool*                                needGranteeName                0;	///< Optional attribute.
/// Attribute view of type xs:string.
   @std::string*                         view                           0;	///< Optional attribute.
/// Attribute depth of type xs:int.
   @int*                                 depth                          0;	///< Optional attribute.
/// Attribute tr of type xs:boolean.
   @bool*                                tr                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getFolderSpec is a complexType.
class ns5__getFolderSpec
{ public:
/// Attribute uuid of type xs:string.
   @std::string*                         uuid                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute path of type xs:string.
   @std::string*                         path                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getFolderResponse is a complexType.
class ns5__getFolderResponse
{ public:
/// Element reference "urn:zimbraMail":folder.
    ns5__folder*                         folder                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getFreeBusyRequest is a complexType.
class ns5__getFreeBusyRequest
{ public:
/// Vector of ns5__freeBusyUserSpec* with length 0..unbounded
    std::vector<ns5__freeBusyUserSpec* > usr                            0;
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute excludeUid of type xs:string.
   @std::string*                         excludeUid                     0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getFreeBusyResponse is a complexType.
class ns5__getFreeBusyResponse
{ public:
/// Vector of ns5__freeBusyUserInfo* with length 0..unbounded
    std::vector<ns5__freeBusyUserInfo* > usr                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":freeBusyUserInfo is a complexType.
class ns5__freeBusyUserInfo
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_freeBusyUserInfo        0;
    class __ns5__union_freeBusyUserInfo
    {
   $int                                  __union_freeBusyUserInfo       0;	///< Union _ns5__union_freeBusyUserInfo selector: set to SOAP_UNION__ns5__union_freeBusyUserInfo_<fieldname> or 0
    union _ns5__union_freeBusyUserInfo
    {
/// Element f of type "urn:zimbraMail":freeBusyFREEslot.
    ns5__freeBusyFREEslot*               f                              1;	///< Required element.
/// Element b of type "urn:zimbraMail":freeBusyBUSYslot.
    ns5__freeBusyBUSYslot*               b                              1;	///< Required element.
/// Element t of type "urn:zimbraMail":freeBusyBUSYTENTATIVEslot.
    ns5__freeBusyBUSYTENTATIVEslot*      t                              1;	///< Required element.
/// Element u of type "urn:zimbraMail":freeBusyBUSYUNAVAILABLEslot.
    ns5__freeBusyBUSYUNAVAILABLEslot*    u                              1;	///< Required element.
/// Element n of type "urn:zimbraMail":freeBusyNODATAslot.
    ns5__freeBusyNODATAslot*             n                              1;	///< Required element.
    }                                    union_freeBusyUserInfo        ;
    }                                   *__union_freeBusyUserInfo      ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":freeBusySlot is a complexType.
class ns5__freeBusySlot
{ public:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getICalRequest is a complexType.
class ns5__getICalRequest
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute e of type xs:long.
   @LONG64*                              e                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getICalResponse is a complexType.
class ns5__getICalResponse
{ public:
/// Element ical of type "urn:zimbraMail":iCalContent.
    ns5__iCalContent*                    ical                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getImportStatusRequest is a complexType.
class ns5__getImportStatusRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getImportStatusResponse is a complexType.
class ns5__getImportStatusResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_getImportStatusResponse 0;
    class __ns5__union_getImportStatusResponse
    {
   $int                                  __union_getImportStatusResponse 0;	///< Union _ns5__union_getImportStatusResponse selector: set to SOAP_UNION__ns5__union_getImportStatusResponse_<fieldname> or 0
    union _ns5__union_getImportStatusResponse
    {
/// Element imap of type "urn:zimbraMail":imapImportStatusInfo.
    ns5__imapImportStatusInfo*           imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraMail":pop3ImportStatusInfo.
    ns5__pop3ImportStatusInfo*           pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraMail":caldavImportStatusInfo.
    ns5__caldavImportStatusInfo*         caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraMail":yabImportStatusInfo.
    ns5__yabImportStatusInfo*            yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraMail":rssImportStatusInfo.
    ns5__rssImportStatusInfo*            rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraMail":galImportStatusInfo.
    ns5__galImportStatusInfo*            gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraMail":calImportStatusInfo.
    ns5__calImportStatusInfo*            cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraMail":unknownImportStatusInfo.
    ns5__unknownImportStatusInfo*        unknown                        1;	///< Required element.
    }                                    union_getImportStatusResponse ;
    }                                   *__union_getImportStatusResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":importStatusInfo is an abstract complexType.
class ns5__importStatusInfo
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getItemRequest is a complexType.
class ns5__getItemRequest
{ public:
/// Element item of type "urn:zimbraMail":itemSpec.
    ns5__itemSpec*                       item                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getItemResponse is a complexType.
class ns5__getItemResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_getItemResponse        0;	///< Union _ns5__union_getItemResponse selector: set to SOAP_UNION__ns5__union_getItemResponse_<fieldname> or 0
    union _ns5__union_getItemResponse
    {
/// Element reference "urn:zimbraMail":folder.
    ns5__folder*                         folder                         1;	///< Required element.
/// Element tag of type "urn:zimbraMail":tagInfo.
    ns5__tagInfo*                        tag                            1;	///< Required element.
/// Element note of type "urn:zimbraMail":noteInfo.
    ns5__noteInfo*                       note                           1;	///< Required element.
/// Element cn of type "urn:zimbraMail":contactInfo.
    ns5__contactInfo*                    cn                             1;	///< Required element.
/// Element appt of type "urn:zimbraMail":calendarItemInfo.
    ns5__calendarItemInfo*               appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":taskItemInfo.
    ns5__taskItemInfo*                   task                           1;	///< Required element.
/// Element c of type "urn:zimbraMail":conversationSummary.
    ns5__conversationSummary*            c                              1;	///< Required element.
/// Element w of type "urn:zimbraMail":commonDocumentInfo.
    ns5__commonDocumentInfo*             w                              1;	///< Required element.
/// Element doc of type "urn:zimbraMail":documentInfo.
    ns5__documentInfo*                   doc                            1;	///< Required element.
/// Element m of type "urn:zimbraMail":messageSummary.
    ns5__messageSummary*                 m                              1;	///< Required element.
/// Element chat of type "urn:zimbraMail":chatSummary.
    ns5__chatSummary*                    chat                           1;	///< Required element.
    }                                    union_getItemResponse         ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":conversationSummary is a complexType.
class ns5__conversationSummary
{ public:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute n of type xs:int.
   @int*                                 n                              0;	///< Optional attribute.
/// Attribute total of type xs:int.
   @int*                                 total                          0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute elided of type xs:boolean.
   @bool*                                elided                         0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":commonDocumentInfo is a complexType.
class ns5__commonDocumentInfo
{ public:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element acl of type "urn:zimbraMail":acl.
    ns5__acl*                            acl                            0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute uuid of type xs:string.
   @std::string*                         uuid                           0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute luuid of type xs:string.
   @std::string*                         luuid                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute mdver of type xs:int.
   @int*                                 mdver                          0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute desc of type xs:string.
   @std::string*                         desc                           0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute descEnabled of type xs:boolean.
   @bool*                                descEnabled                    0;	///< Optional attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
/// Attribute leb of type xs:string.
   @std::string*                         leb                            0;	///< Optional attribute.
/// Attribute cr of type xs:string.
   @std::string*                         cr                             0;	///< Optional attribute.
/// Attribute cd of type xs:long.
   @LONG64*                              cd                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getMailboxMetadataRequest is a complexType.
class ns5__getMailboxMetadataRequest
{ public:
/// Element meta of type "urn:zimbra":sectionAttr.
    ns3__sectionAttr*                    meta                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getMailboxMetadataResponse is a complexType.
class ns5__getMailboxMetadataResponse
{ public:
/// Element reference "urn:zimbraMail":meta.
    ns5__mailCustomMetadata*             meta                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getMiniCalRequest is a complexType.
class ns5__getMiniCalRequest
{ public:
/// Vector of ns3__id* with length 0..unbounded
    std::vector<ns3__id*               > folder                         0;
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getMiniCalResponse is a complexType.
class ns5__getMiniCalResponse
{ public:
/// Vector of ns5__miniCalError* with length 0..unbounded
    std::vector<ns5__miniCalError*     > error                          0;
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > date                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getMsgMetadataRequest is a complexType.
class ns5__getMsgMetadataRequest
{ public:
/// Element m of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        m                              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getMsgMetadataResponse is a complexType.
class ns5__getMsgMetadataResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_getMsgMetadataResponse  0;
    class __ns5__union_getMsgMetadataResponse
    {
   $int                                  __union_getMsgMetadataResponse 0;	///< Union _ns5__union_getMsgMetadataResponse selector: set to SOAP_UNION__ns5__union_getMsgMetadataResponse_<fieldname> or 0
    union _ns5__union_getMsgMetadataResponse
    {
/// Element chat of type "urn:zimbraMail":chatSummary.
    ns5__chatSummary*                    chat                           1;	///< Required element.
/// Element m of type "urn:zimbraMail":messageSummary.
    ns5__messageSummary*                 m                              1;	///< Required element.
    }                                    union_getMsgMetadataResponse  ;
    }                                   *__union_getMsgMetadataResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getMsgRequest is a complexType.
class ns5__getMsgRequest
{ public:
/// Element m of type "urn:zimbraMail":msgSpec.
    ns5__msgSpec*                        m                              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":msgSpec is a complexType.
class ns5__msgSpec
{ public:
/// Vector of ns3__attributeName* with length 0..unbounded
    std::vector<ns3__attributeName*    > header                         0;
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
/// Attribute raw of type xs:boolean.
   @bool*                                raw                            0;	///< Optional attribute.
/// Attribute read of type xs:boolean.
   @bool*                                read                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute needExp of type xs:boolean.
   @bool*                                needExp                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getMsgResponse is a complexType.
class ns5__getMsgResponse
{ public:
/// Element m of type "urn:zimbraMail":msgWithGroupInfo.
    ns5__msgWithGroupInfo*               m                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":inviteWithGroupInfo is a complexType.
class ns5__inviteWithGroupInfo
{ public:
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// Vector of ns5__inviteComponentWithGroupInfo* with length 0..unbounded
    std::vector<ns5__inviteComponentWithGroupInfo*> comp                           0;
    class _ns5__inviteWithGroupInfo_replies
    {
/// Vector of ns5__calendarReply* with length 0..unbounded
    std::vector<ns5__calendarReply*    > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getNoteRequest is a complexType.
class ns5__getNoteRequest
{ public:
/// Element note of type "urn:zimbra":id.
    ns3__id*                             note                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getNoteResponse is a complexType.
class ns5__getNoteResponse
{ public:
/// Element note of type "urn:zimbraMail":noteInfo.
    ns5__noteInfo*                       note                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getNotificationsRequest is a complexType.
class ns5__getNotificationsRequest
{ public:
/// Attribute markSeen of type xs:boolean.
   @bool*                                markSeen                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getNotificationsResponse is a complexType.
class ns5__getNotificationsResponse
{ public:
/// Vector of ns3__namedElement* with length 0..unbounded
    std::vector<ns3__namedElement*     > op                             0;
/// Vector of ns5__idEmailName* with length 0..unbounded
    std::vector<ns5__idEmailName*      > user                           0;
/// Vector of ns5__activityInfo* with length 0..unbounded
    std::vector<ns5__activityInfo*     > a                              0;
/// Attribute lastSeen of type xs:long.
   @LONG64                               lastSeen                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getOutgoingFilterRulesRequest is a complexType.
class ns5__getOutgoingFilterRulesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getOutgoingFilterRulesResponse is a complexType.
class ns5__getOutgoingFilterRulesResponse
{ public:
    class _ns5__getOutgoingFilterRulesResponse_filterRules
    {
/// Vector of ns5__filterRule* with length 0..unbounded
    std::vector<ns5__filterRule*       > filterRule                     0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                    filterRules                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getPermissionRequest is a complexType.
class ns5__getPermissionRequest
{ public:
/// Vector of ns5__right* with length 0..unbounded
    std::vector<ns5__right*            > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":right is a complexType.
class ns5__right
{ public:
/// Attribute right of type xs:string.
   @std::string                          right                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getPermissionResponse is a complexType.
class ns5__getPermissionResponse
{ public:
/// Vector of ns5__accountACEinfo* with length 0..unbounded
    std::vector<ns5__accountACEinfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":accountACEinfo is a complexType.
class ns5__accountACEinfo
{ public:
/// Attribute zid of type xs:string.
   @std::string*                         zid                            0;	///< Optional attribute.
/// Attribute gt of type "urn:zimbra":granteeType.
   @enum ns3__granteeType                gt                             1;	///< Required attribute.
/// Attribute right of type xs:string.
   @std::string                          right                          1;	///< Required attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute key of type xs:string.
   @std::string*                         key                            0;	///< Optional attribute.
/// Attribute pw of type xs:string.
   @std::string*                         pw                             0;	///< Optional attribute.
/// Attribute deny of type xs:boolean.
   @bool*                                deny                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getRecurRequest is a complexType.
class ns5__getRecurRequest
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getRecurResponse is a complexType.
class ns5__getRecurResponse
{ public:
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_getRecurResponse        0;
    class __ns5__union_getRecurResponse
    {
   $int                                  __union_getRecurResponse       0;	///< Union _ns5__union_getRecurResponse selector: set to SOAP_UNION__ns5__union_getRecurResponse_<fieldname> or 0
    union _ns5__union_getRecurResponse
    {
/// Element cancel of type "urn:zimbraMail":cancelItemRecur.
    ns5__cancelItemRecur*                cancel                         1;	///< Required element.
/// Element except of type "urn:zimbraMail":exceptionItemRecur.
    ns5__exceptionItemRecur*             except                         1;	///< Required element.
/// Element comp of type "urn:zimbraMail":inviteItemRecur.
    ns5__inviteItemRecur*                comp                           1;	///< Required element.
    }                                    union_getRecurResponse        ;
    }                                   *__union_getRecurResponse      ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":calendarItemRecur is a complexType.
class ns5__calendarItemRecur
{ public:
/// Element exceptId of type "urn:zimbraMail":exceptionRecurIdInfo.
    ns5__exceptionRecurIdInfo*           exceptId                       0;	///< Optional element.
/// Element s of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     s                              0;	///< Optional element.
/// Element e of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     e                              0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getSearchFolderRequest is a complexType.
class ns5__getSearchFolderRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getSearchFolderResponse is a complexType.
class ns5__getSearchFolderResponse
{ public:
/// Vector of ns5__searchFolder* element refs with length 0..unbounded
    std::vector<ns5__searchFolder*     > search                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getShareDetailsRequest is a complexType.
class ns5__getShareDetailsRequest
{ public:
/// Element item of type "urn:zimbra":id.
    ns3__id*                             item                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getShareDetailsResponse is a complexType.
class ns5__getShareDetailsResponse
{ public:
/// Element item of type "urn:zimbraMail":shareDetails.
    ns5__shareDetails*                   item                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":shareDetails is a complexType.
class ns5__shareDetails
{ public:
/// Vector of ns5__shareGrantee* with length 0..unbounded
    std::vector<ns5__shareGrantee*     > grantee                        0;
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":shareGrantee is a complexType.
class ns5__shareGrantee
{ public:
/// Attribute perm of type xs:string.
   @std::string                          perm                           1;	///< Required attribute.
/// Attribute gt of type "urn:zimbra":grantGranteeType.
   @enum ns3__grantGranteeType           gt                             1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getShareNotificationsRequest is a complexType.
class ns5__getShareNotificationsRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getShareNotificationsResponse is a complexType.
class ns5__getShareNotificationsResponse
{ public:
/// Vector of ns5__shareNotificationInfo* with length 0..unbounded
    std::vector<ns5__shareNotificationInfo*> share                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":shareNotificationInfo is a complexType.
class ns5__shareNotificationInfo
{ public:
/// Element grantor of type "urn:zimbraMail":grantor.
    ns5__grantor*                        grantor                        1;	///< Required element.
/// Element link of type "urn:zimbraMail":linkInfo.
    ns5__linkInfo*                       link                           1;	///< Required element.
/// Attribute status of type xs:string.
   @std::string                          status                         1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute d of type xs:long.
   @LONG64                               d                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":grantor is a complexType.
class ns5__grantor
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute email of type xs:string.
   @std::string                          email                          1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":linkInfo is a complexType.
class ns5__linkInfo
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute uuid of type xs:string.
   @std::string                          uuid                           1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute view of type xs:string.
   @std::string                          view                           1;	///< Required attribute.
/// Attribute perm of type xs:string.
   @std::string*                         perm                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getSpellDictionariesRequest is a complexType.
class ns5__getSpellDictionariesRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getSpellDictionariesResponse is a complexType.
class ns5__getSpellDictionariesResponse
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > dictionary                     0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getSystemRetentionPolicyRequest is a complexType.
class ns5__getSystemRetentionPolicyRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getSystemRetentionPolicyResponse is a complexType.
class ns5__getSystemRetentionPolicyResponse
{ public:
/// Element reference "urn:zimbraMail":retentionPolicy.
    ns5__retentionPolicy*                retentionPolicy                0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getTagRequest is a complexType.
class ns5__getTagRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getTagResponse is a complexType.
class ns5__getTagResponse
{ public:
/// Vector of ns5__tagInfo* with length 0..unbounded
    std::vector<ns5__tagInfo*          > tag                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getTaskResponse is a complexType.
class ns5__getTaskResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_getTaskResponse        0;	///< Union _ns5__union_getTaskResponse selector: set to SOAP_UNION__ns5__union_getTaskResponse_<fieldname> or 0
    union _ns5__union_getTaskResponse
    {
/// Element appt of type "urn:zimbraMail":calendarItemInfo.
    ns5__calendarItemInfo*               appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":taskItemInfo.
    ns5__taskItemInfo*                   task                           1;	///< Required element.
    }                                    union_getTaskResponse         ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getTaskSummariesRequest is a complexType.
class ns5__getTaskSummariesRequest
{ public:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getTaskSummariesResponse is a complexType.
class ns5__getTaskSummariesResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_getTaskSummariesResponse 0;
    class __ns5__union_getTaskSummariesResponse
    {
   $int                                  __union_getTaskSummariesResponse 0;	///< Union _ns5__union_getTaskSummariesResponse selector: set to SOAP_UNION__ns5__union_getTaskSummariesResponse_<fieldname> or 0
    union _ns5__union_getTaskSummariesResponse
    {
/// Element appt of type "urn:zimbraMail":legacyAppointmentData.
    ns5__legacyAppointmentData*          appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":legacyTaskData.
    ns5__legacyTaskData*                 task                           1;	///< Required element.
    }                                    union_getTaskSummariesResponse;
    }                                   *__union_getTaskSummariesResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getWatchersRequest is a complexType.
class ns5__getWatchersRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getWatchersResponse is a complexType.
class ns5__getWatchersResponse
{ public:
/// Vector of ns5__watcherInfo* with length 0..unbounded
    std::vector<ns5__watcherInfo*      > watcher                        0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":watcherInfo is a complexType.
class ns5__watcherInfo
{ public:
/// Vector of ns5__integerIdAttr* with length 0..unbounded
    std::vector<ns5__integerIdAttr*    > item                           0;
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute email of type xs:string.
   @std::string                          email                          1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":integerIdAttr is a complexType.
class ns5__integerIdAttr
{ public:
/// Attribute id of type xs:int.
   @int                                  id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getWatchingItemsRequest is a complexType.
class ns5__getWatchingItemsRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getWatchingItemsResponse is a complexType.
class ns5__getWatchingItemsResponse
{ public:
/// Vector of ns5__watchingTarget* with length 0..unbounded
    std::vector<ns5__watchingTarget*   > target                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":watchingTarget is a complexType.
class ns5__watchingTarget
{ public:
/// Vector of ns3__id* with length 0..unbounded
    std::vector<ns3__id*               > item                           0;
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute email of type xs:string.
   @std::string                          email                          1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getWorkingHoursRequest is a complexType.
class ns5__getWorkingHoursRequest
{ public:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getWorkingHoursResponse is a complexType.
class ns5__getWorkingHoursResponse
{ public:
/// Vector of ns5__freeBusyUserInfo* with length 0..unbounded
    std::vector<ns5__freeBusyUserInfo* > usr                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getYahooAuthTokenRequest is a complexType.
class ns5__getYahooAuthTokenRequest
{ public:
/// Attribute user of type xs:string.
   @std::string                          user                           1;	///< Required attribute.
/// Attribute password of type xs:string.
   @std::string                          password                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getYahooAuthTokenResponse is a complexType.
class ns5__getYahooAuthTokenResponse
{ public:
/// Attribute failed of type xs:boolean.
   @bool*                                failed                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getYahooCookieRequest is a complexType.
class ns5__getYahooCookieRequest
{ public:
/// Attribute user of type xs:string.
   @std::string                          user                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":getYahooCookieResponse is a complexType.
class ns5__getYahooCookieResponse
{ public:
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
/// Attribute crumb of type xs:string.
   @std::string*                         crumb                          0;	///< Optional attribute.
/// Attribute y of type xs:string.
   @std::string*                         y                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":grantPermissionRequest is a complexType.
class ns5__grantPermissionRequest
{ public:
/// Vector of ns5__accountACEinfo* with length 0..unbounded
    std::vector<ns5__accountACEinfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":grantPermissionResponse is a complexType.
class ns5__grantPermissionResponse
{ public:
/// Vector of ns5__accountACEinfo* with length 0..unbounded
    std::vector<ns5__accountACEinfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":iCalReplyRequest is a complexType.
class ns5__iCalReplyRequest
{ public:
/// Element ical of type xs:string.
    std::string                          ical                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":iCalReplyResponse is a complexType.
class ns5__iCalReplyResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":importAppointmentsRequest is a complexType.
class ns5__importAppointmentsRequest
{ public:
/// Element content of type "urn:zimbraMail":contentSpec.
    ns5__contentSpec*                    content                        1;	///< Required element.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string                          ct                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":importAppointmentsResponse is a complexType.
class ns5__importAppointmentsResponse
{ public:
/// Attribute ids of type xs:string.
   @std::string                          ids                            1;	///< Required attribute.
/// Attribute n of type xs:int.
   @int                                  n                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":importContactsRequest is a complexType.
class ns5__importContactsRequest
{ public:
/// Element reference "urn:zimbraMail":content.
    ns5__content*                        content                        1;	///< Required element.
/// Attribute ct of type xs:string.
   @std::string                          ct                             1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute csvfmt of type xs:string.
   @std::string*                         csvfmt                         0;	///< Optional attribute.
/// Attribute csvlocale of type xs:string.
   @std::string*                         csvlocale                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":importContactsResponse is a complexType.
class ns5__importContactsResponse
{ public:
/// Element cn of type "urn:zimbraMail":importContact.
    ns5__importContact*                  cn                             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":importContact is a complexType.
class ns5__importContact
{ public:
/// Attribute n of type xs:long.
   @LONG64                               n                              1;	///< Required attribute.
/// Attribute ids of type xs:string.
   @std::string                          ids                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":importDataRequest is a complexType.
class ns5__importDataRequest
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_importDataRequest       0;
    class __ns5__union_importDataRequest
    {
   $int                                  __union_importDataRequest      0;	///< Union _ns5__union_importDataRequest selector: set to SOAP_UNION__ns5__union_importDataRequest_<fieldname> or 0
    union _ns5__union_importDataRequest
    {
/// Element imap of type "urn:zimbraMail":imapDataSourceNameOrId.
    ns5__imapDataSourceNameOrId*         imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraMail":pop3DataSourceNameOrId.
    ns5__pop3DataSourceNameOrId*         pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraMail":caldavDataSourceNameOrId.
    ns5__caldavDataSourceNameOrId*       caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraMail":yabDataSourceNameOrId.
    ns5__yabDataSourceNameOrId*          yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraMail":rssDataSourceNameOrId.
    ns5__rssDataSourceNameOrId*          rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraMail":galDataSourceNameOrId.
    ns5__galDataSourceNameOrId*          gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraMail":calDataSourceNameOrId.
    ns5__calDataSourceNameOrId*          cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraMail":unknownDataSourceNameOrId.
    ns5__unknownDataSourceNameOrId*      unknown                        1;	///< Required element.
    }                                    union_importDataRequest       ;
    }                                   *__union_importDataRequest     ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":importDataResponse is a complexType.
class ns5__importDataResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":invalidateReminderDeviceRequest is a complexType.
class ns5__invalidateReminderDeviceRequest
{ public:
/// Attribute a of type xs:string.
   @std::string                          a                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":invalidateReminderDeviceResponse is a complexType.
class ns5__invalidateReminderDeviceResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":itemActionRequest is a complexType.
class ns5__itemActionRequest
{ public:
/// Element action of type "urn:zimbraMail":actionSelector.
    ns5__actionSelector*                 action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":itemActionResponse is a complexType.
class ns5__itemActionResponse
{ public:
/// Element action of type "urn:zimbraMail":idAndOperation.
    ns5__idAndOperation*                 action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":listDocumentRevisionsRequest is a complexType.
class ns5__listDocumentRevisionsRequest
{ public:
/// Element doc of type "urn:zimbraMail":listDocumentRevisionsSpec.
    ns5__listDocumentRevisionsSpec*      doc                            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":listDocumentRevisionsSpec is a complexType.
class ns5__listDocumentRevisionsSpec
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
/// Attribute count of type xs:int.
   @int*                                 count                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":listDocumentRevisionsResponse is a complexType.
class ns5__listDocumentRevisionsResponse
{ public:
/// Vector of ns5__documentInfo* with length 0..unbounded
    std::vector<ns5__documentInfo*     > doc                            0;
/// Vector of ns5__idEmailName* with length 0..unbounded
    std::vector<ns5__idEmailName*      > user                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyContactRequest is a complexType.
class ns5__modifyContactRequest
{ public:
/// Element cn of type "urn:zimbraMail":modifyContactSpec.
    ns5__modifyContactSpec*              cn                             1;	///< Required element.
/// Attribute replace of type xs:boolean.
   @bool*                                replace                        0;	///< Optional attribute.
/// Attribute verbose of type xs:boolean.
   @bool*                                verbose                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyContactSpec is a complexType.
class ns5__modifyContactSpec
{ public:
/// Vector of ns5__modifyContactAttr* with length 0..unbounded
    std::vector<ns5__modifyContactAttr*> a                              0;
/// Vector of ns5__modifyContactGroupMember* with length 0..unbounded
    std::vector<ns5__modifyContactGroupMember*> m                              0;
/// Attribute id of type xs:int.
   @int*                                 id                             0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyContactGroupMember is a complexType.
class ns5__modifyContactGroupMember
{ public:
/// Attribute op of type "urn:zimbraMail":modifyGroupMemberOperation.
   @enum ns5__modifyGroupMemberOperation*  op                             0;	///< Optional attribute.
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyContactResponse is a complexType.
class ns5__modifyContactResponse
{ public:
/// Element cn of type "urn:zimbraMail":contactInfo.
    ns5__contactInfo*                    cn                             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyDataSourceRequest is a complexType.
class ns5__modifyDataSourceRequest
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_modifyDataSourceRequest 0;	///< Union _ns5__union_modifyDataSourceRequest selector: set to SOAP_UNION__ns5__union_modifyDataSourceRequest_<fieldname> or 0
    union _ns5__union_modifyDataSourceRequest
    {
/// Element imap of type "urn:zimbraMail":mailImapDataSource.
    ns5__mailImapDataSource*             imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraMail":mailPop3DataSource.
    ns5__mailPop3DataSource*             pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraMail":mailCaldavDataSource.
    ns5__mailCaldavDataSource*           caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraMail":mailYabDataSource.
    ns5__mailYabDataSource*              yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraMail":mailRssDataSource.
    ns5__mailRssDataSource*              rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraMail":mailGalDataSource.
    ns5__mailGalDataSource*              gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraMail":mailCalDataSource.
    ns5__mailCalDataSource*              cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraMail":mailUnknownDataSource.
    ns5__mailUnknownDataSource*          unknown                        1;	///< Required element.
    }                                    union_modifyDataSourceRequest ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyDataSourceResponse is a complexType.
class ns5__modifyDataSourceResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyFilterRulesRequest is a complexType.
class ns5__modifyFilterRulesRequest
{ public:
    class _ns5__modifyFilterRulesRequest_filterRules
    {
/// Vector of ns5__filterRule* with length 0..unbounded
    std::vector<ns5__filterRule*       > filterRule                     0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                    filterRules                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyFilterRulesResponse is a complexType.
class ns5__modifyFilterRulesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyMailboxMetadataRequest is a complexType.
class ns5__modifyMailboxMetadataRequest
{ public:
/// Element reference "urn:zimbraMail":meta.
    ns5__mailCustomMetadata*             meta                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyMailboxMetadataResponse is a complexType.
class ns5__modifyMailboxMetadataResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyOutgoingFilterRulesRequest is a complexType.
class ns5__modifyOutgoingFilterRulesRequest
{ public:
    class _ns5__modifyOutgoingFilterRulesRequest_filterRules
    {
/// Vector of ns5__filterRule* with length 0..unbounded
    std::vector<ns5__filterRule*       > filterRule                     0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                    filterRules                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyOutgoingFilterRulesResponse is a complexType.
class ns5__modifyOutgoingFilterRulesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifySearchFolderRequest is a complexType.
class ns5__modifySearchFolderRequest
{ public:
/// Element search of type "urn:zimbraMail":modifySearchFolderSpec.
    ns5__modifySearchFolderSpec*         search                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifySearchFolderSpec is a complexType.
class ns5__modifySearchFolderSpec
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute query of type xs:string.
   @std::string                          query                          1;	///< Required attribute.
/// Attribute types of type xs:string.
   @std::string*                         types                          0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifySearchFolderResponse is a complexType.
class ns5__modifySearchFolderResponse
{ public:
/// Element reference "urn:zimbraMail":search.
    ns5__searchFolder*                   search                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":msgActionRequest is a complexType.
class ns5__msgActionRequest
{ public:
/// Element action of type "urn:zimbraMail":actionSelector.
    ns5__actionSelector*                 action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":msgActionResponse is a complexType.
class ns5__msgActionResponse
{ public:
/// Element action of type "urn:zimbraMail":idAndOperation.
    ns5__idAndOperation*                 action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":noOpRequest is a complexType.
class ns5__noOpRequest
{ public:
/// Attribute wait of type xs:boolean.
   @bool*                                wait                           0;	///< Optional attribute.
/// Attribute delegate of type xs:boolean.
   @bool*                                delegate                       0;	///< Optional attribute.
/// Attribute limitToOneBlocked of type xs:boolean.
   @bool*                                limitToOneBlocked              0;	///< Optional attribute.
/// Attribute timeout of type xs:long.
   @LONG64*                              timeout                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":noOpResponse is a complexType.
class ns5__noOpResponse
{ public:
/// Attribute waitDisallowed of type xs:boolean.
   @bool*                                waitDisallowed                 0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":noteActionRequest is a complexType.
class ns5__noteActionRequest
{ public:
/// Element action of type "urn:zimbraMail":noteActionSelector.
    ns5__noteActionSelector*             action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":noteActionResponse is a complexType.
class ns5__noteActionResponse
{ public:
/// Element action of type "urn:zimbraMail":idAndOperation.
    ns5__idAndOperation*                 action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":purgeRevisionRequest is a complexType.
class ns5__purgeRevisionRequest
{ public:
/// Element revision of type "urn:zimbraMail":purgeRevisionSpec.
    ns5__purgeRevisionSpec*              revision                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":purgeRevisionSpec is a complexType.
class ns5__purgeRevisionSpec
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute ver of type xs:int.
   @int                                  ver                            1;	///< Required attribute.
/// Attribute includeOlderRevisions of type xs:boolean.
   @bool*                                includeOlderRevisions          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":purgeRevisionResponse is a complexType.
class ns5__purgeRevisionResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":rankingActionRequest is a complexType.
class ns5__rankingActionRequest
{ public:
/// Element action of type "urn:zimbraMail":rankingActionSpec.
    ns5__rankingActionSpec*              action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":rankingActionSpec is a complexType.
class ns5__rankingActionSpec
{ public:
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute email of type xs:string.
   @std::string*                         email                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":rankingActionResponse is a complexType.
class ns5__rankingActionResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":registerDeviceRequest is a complexType.
class ns5__registerDeviceRequest
{ public:
/// Element device of type "urn:zimbra":namedElement.
    ns3__namedElement*                   device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":registerDeviceResponse is a complexType.
class ns5__registerDeviceResponse
{ public:
/// Element device of type "urn:zimbraMail":nameId.
    ns5__nameId*                         device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":removeAttachmentsRequest is a complexType.
class ns5__removeAttachmentsRequest
{ public:
/// Element m of type "urn:zimbraMail":msgPartIds.
    ns5__msgPartIds*                     m                              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":msgPartIds is a complexType.
class ns5__msgPartIds
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute part of type xs:string.
   @std::string                          part                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":removeAttachmentsResponse is a complexType.
class ns5__removeAttachmentsResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_removeAttachmentsResponse 0;	///< Union _ns5__union_removeAttachmentsResponse selector: set to SOAP_UNION__ns5__union_removeAttachmentsResponse_<fieldname> or 0
    union _ns5__union_removeAttachmentsResponse
    {
/// Element chat of type "urn:zimbraMail":chatMessageInfo.
    ns5__chatMessageInfo*                chat                           1;	///< Required element.
/// Element m of type "urn:zimbraMail":messageInfo.
    ns5__messageInfo*                    m                              1;	///< Required element.
    }                                    union_removeAttachmentsResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":revokePermissionRequest is a complexType.
class ns5__revokePermissionRequest
{ public:
/// Vector of ns5__accountACEinfo* with length 0..unbounded
    std::vector<ns5__accountACEinfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":revokePermissionResponse is a complexType.
class ns5__revokePermissionResponse
{ public:
/// Vector of ns5__accountACEinfo* with length 0..unbounded
    std::vector<ns5__accountACEinfo*   > ace                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":saveDocumentRequest is a complexType.
class ns5__saveDocumentRequest
{ public:
/// Element doc of type "urn:zimbraMail":documentSpec.
    ns5__documentSpec*                   doc                            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":documentSpec is a complexType.
class ns5__documentSpec
{ public:
/// Element upload of type "urn:zimbra":id.
    ns3__id*                             upload                         0;	///< Optional element.
/// Element m of type "urn:zimbraMail":messagePartSpec.
    ns5__messagePartSpec*                m                              0;	///< Optional element.
/// Element doc of type "urn:zimbraMail":idVersion.
    ns5__idVersion*                      doc                            0;	///< Optional element.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute desc of type xs:string.
   @std::string*                         desc                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
/// Attribute content of type xs:string.
   @std::string*                         content                        0;	///< Optional attribute.
/// Attribute descEnabled of type xs:boolean.
   @bool*                                descEnabled                    0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":messagePartSpec is a complexType.
class ns5__messagePartSpec
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute part of type xs:string.
   @std::string                          part                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":idVersion is a complexType.
class ns5__idVersion
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":saveDocumentResponse is a complexType.
class ns5__saveDocumentResponse
{ public:
/// Element doc of type "urn:zimbraMail":idVersionName.
    ns5__idVersionName*                  doc                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":idVersionName is a complexType.
class ns5__idVersionName
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute ver of type xs:int.
   @int                                  ver                            1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":saveDraftRequest is a complexType.
class ns5__saveDraftRequest
{ public:
/// Element m of type "urn:zimbraMail":saveDraftMsg.
    ns5__saveDraftMsg*                   m                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":saveDraftResponse is a complexType.
class ns5__saveDraftResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_saveDraftResponse      0;	///< Union _ns5__union_saveDraftResponse selector: set to SOAP_UNION__ns5__union_saveDraftResponse_<fieldname> or 0
    union _ns5__union_saveDraftResponse
    {
/// Element chat of type "urn:zimbraMail":chatMessageInfo.
    ns5__chatMessageInfo*                chat                           1;	///< Required element.
/// Element m of type "urn:zimbraMail":messageInfo.
    ns5__messageInfo*                    m                              1;	///< Required element.
    }                                    union_saveDraftResponse       ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":mailSearchParams is a complexType.
class ns5__mailSearchParams
{ public:
/// Element query of type xs:string.
    std::string*                         query                          0;	///< Optional element.
/// Vector of ns3__attributeName* with length 0..unbounded
    std::vector<ns3__attributeName*    > header                         0;
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Element locale of type xs:string.
    std::string*                         locale                         0;	///< Optional element.
/// Element cursor of type "urn:zimbra":cursorInfo.
    ns3__cursorInfo*                     cursor                         0;	///< Optional element.
/// Attribute includeTagDeleted of type xs:boolean.
   @bool*                                includeTagDeleted              0;	///< Optional attribute.
/// Attribute includeTagMuted of type xs:boolean.
   @bool*                                includeTagMuted                0;	///< Optional attribute.
/// Attribute allowableTaskStatus of type xs:string.
   @std::string*                         allowableTaskStatus            0;	///< Optional attribute.
/// Attribute calExpandInstStart of type xs:long.
   @LONG64*                              calExpandInstStart             0;	///< Optional attribute.
/// Attribute calExpandInstEnd of type xs:long.
   @LONG64*                              calExpandInstEnd               0;	///< Optional attribute.
/// Attribute inDumpster of type xs:boolean.
   @bool*                                inDumpster                     0;	///< Optional attribute.
/// Attribute types of type xs:string.
   @std::string*                         types                          0;	///< Optional attribute.
/// Attribute groupBy of type xs:string.
   @std::string*                         groupBy                        0;	///< Optional attribute.
/// Attribute quick of type xs:boolean.
   @bool*                                quick                          0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute fetch of type xs:string.
   @std::string*                         fetch                          0;	///< Optional attribute.
/// Attribute read of type xs:boolean.
   @bool*                                read                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute needExp of type xs:boolean.
   @bool*                                needExp                        0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute recip of type xs:boolean.
   @bool*                                recip                          0;	///< Optional attribute.
/// Attribute prefetch of type xs:boolean.
   @bool*                                prefetch                       0;	///< Optional attribute.
/// Attribute resultMode of type xs:string.
   @std::string*                         resultMode                     0;	///< Optional attribute.
/// Attribute field of type xs:string.
   @std::string*                         field                          0;	///< Optional attribute.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":searchConvResponse is a complexType.
class ns5__searchConvResponse
{ public:
/// Element c of type "urn:zimbraMail":nestedSearchConversation.
    ns5__nestedSearchConversation*       c                              0;	///< Optional element.
/// Vector of ns5__messageHitInfo* with length 0..unbounded
    std::vector<ns5__messageHitInfo*   > m                              0;
    class _ns5__searchConvResponse_info
    {
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_searchConvResponse_info 0;
    class __ns5__union_searchConvResponse_info
    {
   $int                                  __union_searchConvResponse_info 0;	///< Union _ns5__union_searchConvResponse_info selector: set to SOAP_UNION__ns5__union_searchConvResponse_info_<fieldname> or 0
    union _ns5__union_searchConvResponse_info
    {
/// Element suggest of type "urn:zimbraMail":suggestedQueryString.
    ns5__suggestedQueryString*           suggest                        1;	///< Required element.
/// Element wildcard of type "urn:zimbra":wildcardExpansionQueryInfo.
    ns3__wildcardExpansionQueryInfo*     wildcard                       1;	///< Required element.
    }                                    union_searchConvResponse_info ;
    }                                   *__union_searchConvResponse_info;
//  END OF CHOICE
    }                                   *info                           0;	///< Optional element.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// Attribute more of type xs:boolean.
   @bool*                                more                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":nestedSearchConversation is a complexType.
class ns5__nestedSearchConversation
{ public:
/// Vector of ns5__messageHitInfo* with length 0..unbounded
    std::vector<ns5__messageHitInfo*   > m                              0;
    class _ns5__nestedSearchConversation_info
    {
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_nestedSearchConversation_info 0;
    class __ns5__union_nestedSearchConversation_info
    {
   $int                                  __union_nestedSearchConversation_info 0;	///< Union _ns5__union_nestedSearchConversation_info selector: set to SOAP_UNION__ns5__union_nestedSearchConversation_info_<fieldname> or 0
    union _ns5__union_nestedSearchConversation_info
    {
/// Element suggest of type "urn:zimbraMail":suggestedQueryString.
    ns5__suggestedQueryString*           suggest                        1;	///< Required element.
/// Element wildcard of type "urn:zimbra":wildcardExpansionQueryInfo.
    ns3__wildcardExpansionQueryInfo*     wildcard                       1;	///< Required element.
    }                                    union_nestedSearchConversation_info;
    }                                   *__union_nestedSearchConversation_info;
//  END OF CHOICE
    }                                   *info                           0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute n of type xs:int.
   @int*                                 n                              0;	///< Optional attribute.
/// Attribute total of type xs:int.
   @int*                                 total                          0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":part is a complexType.
class ns5__part
{ public:
/// Attribute part of type xs:string.
   @std::string                          part                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":searchResponse is a complexType.
class ns5__searchResponse
{ public:
    class _ns5__searchResponse_info
    {
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_searchResponse_info     0;
    class __ns5__union_searchResponse_info
    {
   $int                                  __union_searchResponse_info    0;	///< Union _ns5__union_searchResponse_info selector: set to SOAP_UNION__ns5__union_searchResponse_info_<fieldname> or 0
    union _ns5__union_searchResponse_info
    {
/// Element suggest of type "urn:zimbraMail":suggestedQueryString.
    ns5__suggestedQueryString*           suggest                        1;	///< Required element.
/// Element wildcard of type "urn:zimbra":wildcardExpansionQueryInfo.
    ns3__wildcardExpansionQueryInfo*     wildcard                       1;	///< Required element.
    }                                    union_searchResponse_info     ;
    }                                   *__union_searchResponse_info   ;
//  END OF CHOICE
    }                                   *info                           0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_searchResponse          0;
    class __ns5__union_searchResponse
    {
   $int                                  __union_searchResponse         0;	///< Union _ns5__union_searchResponse selector: set to SOAP_UNION__ns5__union_searchResponse_<fieldname> or 0
    union _ns5__union_searchResponse
    {
/// Element hit of type "urn:zimbra":simpleSearchHit.
    ns3__simpleSearchHit*                hit                            1;	///< Required element.
/// Element c of type "urn:zimbraMail":conversationHitInfo.
    ns5__conversationHitInfo*            c                              1;	///< Required element.
/// Element m of type "urn:zimbraMail":messageHitInfo.
    ns5__messageHitInfo*                 m                              1;	///< Required element.
/// Element chat of type "urn:zimbraMail":chatHitInfo.
    ns5__chatHitInfo*                    chat                           1;	///< Required element.
/// Element mp of type "urn:zimbraMail":messagePartHitInfo.
    ns5__messagePartHitInfo*             mp                             1;	///< Required element.
/// Element cn of type "urn:zimbraMail":contactInfo.
    ns5__contactInfo*                    cn                             1;	///< Required element.
/// Element note of type "urn:zimbraMail":noteHitInfo.
    ns5__noteHitInfo*                    note                           1;	///< Required element.
/// Element doc of type "urn:zimbraMail":documentHitInfo.
    ns5__documentHitInfo*                doc                            1;	///< Required element.
/// Element w of type "urn:zimbraMail":wikiHitInfo.
    ns5__wikiHitInfo*                    w                              1;	///< Required element.
/// Element appt of type "urn:zimbraMail":appointmentHitInfo.
    ns5__appointmentHitInfo*             appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":taskHitInfo.
    ns5__taskHitInfo*                    task                           1;	///< Required element.
    }                                    union_searchResponse          ;
    }                                   *__union_searchResponse        ;
//  END OF CHOICE
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// Attribute more of type xs:boolean.
   @bool*                                more                           0;	///< Optional attribute.
/// Attribute total of type xs:long.
   @LONG64*                              total                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":conversationMsgHitInfo is a complexType.
class ns5__conversationMsgHitInfo
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute l of type xs:int.
   @int*                                 l                              0;	///< Optional attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":messagePartHitInfo is a complexType.
class ns5__messagePartHitInfo
{ public:
/// Element e of type "urn:zimbraMail":emailInfo.
    ns5__emailInfo*                      e                              0;	///< Optional element.
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute cid of type xs:int.
   @int*                                 cid                            0;	///< Optional attribute.
/// Attribute mid of type xs:int.
   @int*                                 mid                            0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendDeliveryReportRequest is a complexType.
class ns5__sendDeliveryReportRequest
{ public:
/// Attribute mid of type xs:string.
   @std::string                          mid                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendDeliveryReportResponse is a complexType.
class ns5__sendDeliveryReportResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendInviteReplyRequest is a complexType.
class ns5__sendInviteReplyRequest
{ public:
/// Element exceptId of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     exceptId                       0;	///< Optional element.
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute compNum of type xs:int.
   @int                                  compNum                        1;	///< Required attribute.
/// Attribute verb of type xs:string.
   @std::string                          verb                           1;	///< Required attribute.
/// Attribute updateOrganizer of type xs:boolean.
   @bool*                                updateOrganizer                0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendMsgRequest is a complexType.
class ns5__sendMsgRequest
{ public:
/// Element m of type "urn:zimbraMail":msgToSend.
    ns5__msgToSend*                      m                              0;	///< Optional element.
/// Attribute needCalendarSentByFixup of type xs:boolean.
   @bool*                                needCalendarSentByFixup        0;	///< Optional attribute.
/// Attribute isCalendarForward of type xs:boolean.
   @bool*                                isCalendarForward              0;	///< Optional attribute.
/// Attribute noSave of type xs:boolean.
   @bool*                                noSave                         0;	///< Optional attribute.
/// Attribute suid of type xs:string.
   @std::string*                         suid                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendMsgResponse is a complexType.
class ns5__sendMsgResponse
{ public:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendShareNotificationRequest is a complexType.
class ns5__sendShareNotificationRequest
{ public:
/// Element item of type "urn:zimbra":id.
    ns3__id*                             item                           0;	///< Optional element.
/// Vector of ns5__emailAddrInfo* with length 0..unbounded
    std::vector<ns5__emailAddrInfo*    > e                              0;
/// Element notes of type xs:string.
    std::string*                         notes                          0;	///< Optional element.
/// Attribute action of type "urn:zimbraMail":action.
   @enum ns5__action*                    action                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendShareNotificationResponse is a complexType.
class ns5__sendShareNotificationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendVerificationCodeRequest is a complexType.
class ns5__sendVerificationCodeRequest
{ public:
/// Attribute a of type xs:string.
   @std::string*                         a                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":sendVerificationCodeResponse is a complexType.
class ns5__sendVerificationCodeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":setAppointmentRequest is a complexType.
class ns5__setAppointmentRequest
{ public:
/// Element default of type "urn:zimbraMail":setCalendarItemInfo.
    ns5__setCalendarItemInfo*            default_                       0;	///< Optional element.
/// Vector of ns5__setCalendarItemInfo* with length 0..unbounded
    std::vector<ns5__setCalendarItemInfo*> except                         0;
/// Vector of ns5__setCalendarItemInfo* with length 0..unbounded
    std::vector<ns5__setCalendarItemInfo*> cancel                         0;
    class _ns5__setAppointmentRequest_replies
    {
/// Vector of ns5__calReply* with length 0..unbounded
    std::vector<ns5__calReply*         > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute noNextAlarm of type xs:boolean.
   @bool*                                noNextAlarm                    0;	///< Optional attribute.
/// Attribute nextAlarm of type xs:long.
   @LONG64*                              nextAlarm                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":setAppointmentResponse is a complexType.
class ns5__setAppointmentResponse
{ public:
/// Element default of type "urn:zimbra":id.
    ns3__id*                             default_                       0;	///< Optional element.
/// Vector of ns5__exceptIdInfo* with length 0..unbounded
    std::vector<ns5__exceptIdInfo*     > except                         0;
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":exceptIdInfo is a complexType.
class ns5__exceptIdInfo
{ public:
/// Attribute recurId of type xs:string.
   @std::string                          recurId                        1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":setCustomMetadataRequest is a complexType.
class ns5__setCustomMetadataRequest
{ public:
/// Element reference "urn:zimbraMail":meta.
    ns5__mailCustomMetadata*             meta                           0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":setCustomMetadataResponse is a complexType.
class ns5__setCustomMetadataResponse
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":setMailboxMetadataRequest is a complexType.
class ns5__setMailboxMetadataRequest
{ public:
/// Element reference "urn:zimbraMail":meta.
    ns5__mailCustomMetadata*             meta                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":setMailboxMetadataResponse is a complexType.
class ns5__setMailboxMetadataResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":snoozeCalendarItemAlarmRequest is a complexType.
class ns5__snoozeCalendarItemAlarmRequest
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_snoozeCalendarItemAlarmRequest 0;
    class __ns5__union_snoozeCalendarItemAlarmRequest
    {
   $int                                  __union_snoozeCalendarItemAlarmRequest 0;	///< Union _ns5__union_snoozeCalendarItemAlarmRequest selector: set to SOAP_UNION__ns5__union_snoozeCalendarItemAlarmRequest_<fieldname> or 0
    union _ns5__union_snoozeCalendarItemAlarmRequest
    {
/// Element appt of type "urn:zimbraMail":snoozeAppointmentAlarm.
    ns5__snoozeAppointmentAlarm*         appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":snoozeTaskAlarm.
    ns5__snoozeTaskAlarm*                task                           1;	///< Required element.
    }                                    union_snoozeCalendarItemAlarmRequest;
    }                                   *__union_snoozeCalendarItemAlarmRequest;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":snoozeAlarm is a complexType.
class ns5__snoozeAlarm
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute until of type xs:long.
   @LONG64                               until                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":snoozeCalendarItemAlarmResponse is a complexType.
class ns5__snoozeCalendarItemAlarmResponse
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_snoozeCalendarItemAlarmResponse 0;
    class __ns5__union_snoozeCalendarItemAlarmResponse
    {
   $int                                  __union_snoozeCalendarItemAlarmResponse 0;	///< Union _ns5__union_snoozeCalendarItemAlarmResponse selector: set to SOAP_UNION__ns5__union_snoozeCalendarItemAlarmResponse_<fieldname> or 0
    union _ns5__union_snoozeCalendarItemAlarmResponse
    {
/// Element appt of type "urn:zimbraMail":updatedAppointmentAlarmInfo.
    ns5__updatedAppointmentAlarmInfo*    appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":updatedTaskAlarmInfo.
    ns5__updatedTaskAlarmInfo*           task                           1;	///< Required element.
    }                                    union_snoozeCalendarItemAlarmResponse;
    }                                   *__union_snoozeCalendarItemAlarmResponse;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":syncRequest is a complexType.
class ns5__syncRequest
{ public:
/// Attribute token of type xs:string.
   @std::string*                         token                          0;	///< Optional attribute.
/// Attribute calCutoff of type xs:long.
   @LONG64*                              calCutoff                      0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute typed of type xs:boolean.
   @bool*                                typed                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":syncResponse is a complexType.
class ns5__syncResponse
{ public:
/// Element deleted of type "urn:zimbraMail":syncDeletedInfo.
    ns5__syncDeletedInfo*                deleted                        0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_syncResponse            0;
    class __ns5__union_syncResponse
    {
   $int                                  __union_syncResponse           0;	///< Union _ns5__union_syncResponse selector: set to SOAP_UNION__ns5__union_syncResponse_<fieldname> or 0
    union _ns5__union_syncResponse
    {
/// Element reference "urn:zimbraMail":folder.
    ns5__folder*                         folder                         1;	///< Required element.
/// Element tag of type "urn:zimbraMail":tagInfo.
    ns5__tagInfo*                        tag                            1;	///< Required element.
/// Element note of type "urn:zimbraMail":noteInfo.
    ns5__noteInfo*                       note                           1;	///< Required element.
/// Element cn of type "urn:zimbraMail":contactInfo.
    ns5__contactInfo*                    cn                             1;	///< Required element.
/// Element appt of type "urn:zimbraMail":calendarItemInfo.
    ns5__calendarItemInfo*               appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":taskItemInfo.
    ns5__taskItemInfo*                   task                           1;	///< Required element.
/// Element c of type "urn:zimbraMail":conversationSummary.
    ns5__conversationSummary*            c                              1;	///< Required element.
/// Element w of type "urn:zimbraMail":commonDocumentInfo.
    ns5__commonDocumentInfo*             w                              1;	///< Required element.
/// Element doc of type "urn:zimbraMail":documentInfo.
    ns5__documentInfo*                   doc                            1;	///< Required element.
/// Element m of type "urn:zimbraMail":messageSummary.
    ns5__messageSummary*                 m                              1;	///< Required element.
/// Element chat of type "urn:zimbraMail":chatSummary.
    ns5__chatSummary*                    chat                           1;	///< Required element.
    }                                    union_syncResponse            ;
    }                                   *__union_syncResponse          ;
//  END OF CHOICE
/// Attribute md of type xs:long.
   @LONG64                               md                             1;	///< Required attribute.
/// Attribute token of type xs:string.
   @std::string*                         token                          0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute more of type xs:boolean.
   @bool*                                more                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":syncDeletedInfo is a complexType.
class ns5__syncDeletedInfo
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_syncDeletedInfo         0;
    class __ns5__union_syncDeletedInfo
    {
   $int                                  __union_syncDeletedInfo        0;	///< Union _ns5__union_syncDeletedInfo selector: set to SOAP_UNION__ns5__union_syncDeletedInfo_<fieldname> or 0
    union _ns5__union_syncDeletedInfo
    {
/// Element folder of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        folder                         1;	///< Required element.
/// Element search of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        search                         1;	///< Required element.
/// Element link of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        link                           1;	///< Required element.
/// Element tag of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        tag                            1;	///< Required element.
/// Element c of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        c                              1;	///< Required element.
/// Element chat of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        chat                           1;	///< Required element.
/// Element m of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        m                              1;	///< Required element.
/// Element cn of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        cn                             1;	///< Required element.
/// Element appt of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        appt                           1;	///< Required element.
/// Element task of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        task                           1;	///< Required element.
/// Element notes of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        notes                          1;	///< Required element.
/// Element w of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        w                              1;	///< Required element.
/// Element doc of type "urn:zimbraMail":idsAttr.
    ns5__idsAttr*                        doc                            1;	///< Required element.
    }                                    union_syncDeletedInfo         ;
    }                                   *__union_syncDeletedInfo       ;
//  END OF CHOICE
/// Attribute ids of type xs:string.
   @std::string                          ids                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":tagActionRequest is a complexType.
class ns5__tagActionRequest
{ public:
/// Element action of type "urn:zimbraMail":tagActionSelector.
    ns5__tagActionSelector*              action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":tagActionResponse is a complexType.
class ns5__tagActionResponse
{ public:
/// Element action of type "urn:zimbraMail":tagActionInfo.
    ns5__tagActionInfo*                  action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":tagActionInfo is a complexType.
class ns5__tagActionInfo
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":testDataSourceRequest is a complexType.
class ns5__testDataSourceRequest
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0">
   $int                                  __union_testDataSourceRequest  0;	///< Union _ns5__union_testDataSourceRequest selector: set to SOAP_UNION__ns5__union_testDataSourceRequest_<fieldname> or 0
    union _ns5__union_testDataSourceRequest
    {
/// Element imap of type "urn:zimbraMail":mailImapDataSource.
    ns5__mailImapDataSource*             imap                           1;	///< Required element.
/// Element pop3 of type "urn:zimbraMail":mailPop3DataSource.
    ns5__mailPop3DataSource*             pop3                           1;	///< Required element.
/// Element caldav of type "urn:zimbraMail":mailCaldavDataSource.
    ns5__mailCaldavDataSource*           caldav                         1;	///< Required element.
/// Element yab of type "urn:zimbraMail":mailYabDataSource.
    ns5__mailYabDataSource*              yab                            1;	///< Required element.
/// Element rss of type "urn:zimbraMail":mailRssDataSource.
    ns5__mailRssDataSource*              rss                            1;	///< Required element.
/// Element gal of type "urn:zimbraMail":mailGalDataSource.
    ns5__mailGalDataSource*              gal                            1;	///< Required element.
/// Element cal of type "urn:zimbraMail":mailCalDataSource.
    ns5__mailCalDataSource*              cal                            1;	///< Required element.
/// Element unknown of type "urn:zimbraMail":mailUnknownDataSource.
    ns5__mailUnknownDataSource*          unknown                        1;	///< Required element.
    }                                    union_testDataSourceRequest   ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":testDataSourceResponse is a complexType.
class ns5__testDataSourceResponse
{ public:
/// Attribute success of type xs:boolean.
   @bool                                 success                        1;	///< Required attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":updateDeviceStatusRequest is a complexType.
class ns5__updateDeviceStatusRequest
{ public:
/// Element device of type "urn:zimbraMail":idStatus.
    ns5__idStatus*                       device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":updateDeviceStatusResponse is a complexType.
class ns5__updateDeviceStatusResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":verifyCodeRequest is a complexType.
class ns5__verifyCodeRequest
{ public:
/// Attribute a of type xs:string.
   @std::string*                         a                              0;	///< Optional attribute.
/// Attribute code of type xs:string.
   @std::string*                         code                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":verifyCodeResponse is a complexType.
class ns5__verifyCodeResponse
{ public:
/// Attribute success of type xs:boolean.
   @bool                                 success                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":waitSetRequest is a complexType.
class ns5__waitSetRequest
{ public:
    class _ns5__waitSetRequest_add
    {
/// Vector of ns3__waitSetAddSpec* with length 0..unbounded
    std::vector<ns3__waitSetAddSpec*   > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *add                            0;	///< Optional element.
    class _ns5__waitSetRequest_update
    {
/// Vector of ns3__waitSetAddSpec* with length 0..unbounded
    std::vector<ns3__waitSetAddSpec*   > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *update                         0;	///< Optional element.
    class _ns5__waitSetRequest_remove
    {
/// Vector of ns3__id* with length 0..unbounded
    std::vector<ns3__id*               > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *remove                         0;	///< Optional element.
/// Attribute waitSet of type xs:string.
   @std::string                          waitSet                        1;	///< Required attribute.
/// Attribute seq of type xs:string.
   @std::string                          seq                            1;	///< Required attribute.
/// Attribute block of type xs:boolean.
   @bool*                                block                          0;	///< Optional attribute.
/// Attribute defTypes of type xs:string.
   @std::string*                         defTypes                       0;	///< Optional attribute.
/// Attribute timeout of type xs:long.
   @LONG64*                              timeout                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":waitSetResponse is a complexType.
class ns5__waitSetResponse
{ public:
/// Vector of ns3__id* with length 0..unbounded
    std::vector<ns3__id*               > a                              0;
/// Vector of ns3__idAndType* with length 0..unbounded
    std::vector<ns3__idAndType*        > error                          0;
/// Attribute waitSet of type xs:string.
   @std::string                          waitSet                        1;	///< Required attribute.
/// Attribute canceled of type xs:boolean.
   @bool*                                canceled                       0;	///< Optional attribute.
/// Attribute seq of type xs:string.
   @std::string*                         seq                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":itemIdSpec is a complexType.
class ns5__itemIdSpec
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:zimbraRepl                                                           *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbraRepl":becomeMasterRequest is a complexType.
class ns6__becomeMasterRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":becomeMasterResponse is a complexType.
class ns6__becomeMasterResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":bringDownServiceIPRequest is a complexType.
class ns6__bringDownServiceIPRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":bringDownServiceIPResponse is a complexType.
class ns6__bringDownServiceIPResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":bringUpServiceIPRequest is a complexType.
class ns6__bringUpServiceIPRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":bringUpServiceIPResponse is a complexType.
class ns6__bringUpServiceIPResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":replicationStatusRequest is a complexType.
class ns6__replicationStatusRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":replicationStatusResponse is a complexType.
class ns6__replicationStatusResponse
{ public:
/// Element masterStatus of type "urn:zimbraRepl":replicationMasterStatus.
    ns6__replicationMasterStatus*        masterStatus                   0;	///< Optional element.
/// Element slaveStatus of type "urn:zimbraRepl":replicationSlaveStatus.
    ns6__replicationSlaveStatus*         slaveStatus                    0;	///< Optional element.
/// Attribute replicationEnabled of type xs:boolean.
   @bool                                 replicationEnabled             1;	///< Required attribute.
/// Attribute currentRole of type xs:string.
   @std::string*                         currentRole                    0;	///< Optional attribute.
/// Attribute originalRole of type xs:string.
   @std::string*                         originalRole                   0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":replicationMasterStatus is a complexType.
class ns6__replicationMasterStatus
{ public:
/// Element catchupStatus of type "urn:zimbraRepl":replicationMasterCatchupStatus.
    ns6__replicationMasterCatchupStatus*  catchupStatus                  0;	///< Optional element.
/// Attribute masterOperatingMode of type xs:string.
   @std::string                          masterOperatingMode            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":replicationMasterCatchupStatus is a complexType.
class ns6__replicationMasterCatchupStatus
{ public:
/// Attribute remainingFiles of type xs:int.
   @int                                  remainingFiles                 1;	///< Required attribute.
/// Attribute remainingBytes of type xs:long.
   @LONG64                               remainingBytes                 1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":replicationSlaveStatus is a complexType.
class ns6__replicationSlaveStatus
{ public:
/// Element catchupStatus of type "urn:zimbraRepl":replicationSlaveCatchupStatus.
    ns6__replicationSlaveCatchupStatus*  catchupStatus                  0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":replicationSlaveCatchupStatus is a complexType.
class ns6__replicationSlaveCatchupStatus
{ public:
/// Attribute remainingOps of type xs:int.
   @int                                  remainingOps                   1;	///< Required attribute.
/// Attribute remainingFiles of type xs:int.
   @int                                  remainingFiles                 1;	///< Required attribute.
/// Attribute remainingBytes of type xs:long.
   @LONG64                               remainingBytes                 1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":startCatchupRequest is a complexType.
class ns6__startCatchupRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":startCatchupResponse is a complexType.
class ns6__startCatchupResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":startFailoverClientRequest is a complexType.
class ns6__startFailoverClientRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":startFailoverClientResponse is a complexType.
class ns6__startFailoverClientResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":startFailoverDaemonRequest is a complexType.
class ns6__startFailoverDaemonRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":startFailoverDaemonResponse is a complexType.
class ns6__startFailoverDaemonResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":stopFailoverClientRequest is a complexType.
class ns6__stopFailoverClientRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":stopFailoverClientResponse is a complexType.
class ns6__stopFailoverClientResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":stopFailoverDaemonRequest is a complexType.
class ns6__stopFailoverDaemonRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraRepl":stopFailoverDaemonResponse is a complexType.
class ns6__stopFailoverDaemonResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:zimbraSync                                                           *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbraSync":cancelPendingRemoteWipeRequest is a complexType.
class ns7__cancelPendingRemoteWipeRequest
{ public:
/// Element device of type "urn:zimbraSync":deviceId.
    ns7__deviceId*                       device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":deviceId is a complexType.
class ns7__deviceId
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":cancelPendingRemoteWipeResponse is a complexType.
class ns7__cancelPendingRemoteWipeResponse
{ public:
/// Element device of type "urn:zimbraSync":deviceStatusInfo.
    ns7__deviceStatusInfo*               device                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":deviceStatusInfo is a complexType.
class ns7__deviceStatusInfo
{ public:
/// Element provisionable of type xs:boolean.
    bool                                 provisionable                  1;	///< Required element.
/// Element status of type xs:byte.
    xsd__byte                            status                         1;	///< Required element.
/// Element firstReqReceived of type xs:int.
    int                                  firstReqReceived               1;	///< Required element.
/// Element lastPolicyUpdate of type xs:int.
    int*                                 lastPolicyUpdate               0;	///< Optional element.
/// Element remoteWipeReqTime of type xs:int.
    int*                                 remoteWipeReqTime              0;	///< Optional element.
/// Element remoteWipeAckTime of type xs:int.
    int*                                 remoteWipeAckTime              0;	///< Optional element.
/// Element recoveryPassword of type xs:string.
    std::string*                         recoveryPassword               0;	///< Optional element.
/// Element lastUsedDate of type xs:string.
    std::string*                         lastUsedDate                   0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute type of type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// Attribute ua of type xs:string.
   @std::string*                         ua                             0;	///< Optional attribute.
/// Attribute protocol of type xs:string.
   @std::string*                         protocol                       0;	///< Optional attribute.
/// Attribute model of type xs:string.
   @std::string*                         model                          0;	///< Optional attribute.
/// Attribute imei of type xs:string.
   @std::string*                         imei                           0;	///< Optional attribute.
/// Attribute friendly_name of type xs:string.
   @std::string*                         friendly_USCOREname            0;	///< Optional attribute.
/// Attribute os of type xs:string.
   @std::string*                         os                             0;	///< Optional attribute.
/// Attribute os_language of type xs:string.
   @std::string*                         os_USCORElanguage              0;	///< Optional attribute.
/// Attribute phone_number of type xs:string.
   @std::string*                         phone_USCOREnumber             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":getDeviceStatusRequest is a complexType.
class ns7__getDeviceStatusRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":getDeviceStatusResponse is a complexType.
class ns7__getDeviceStatusResponse
{ public:
/// Vector of ns7__deviceStatusInfo* with length 0..unbounded
    std::vector<ns7__deviceStatusInfo* > device                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":remoteWipeRequest is a complexType.
class ns7__remoteWipeRequest
{ public:
/// Element device of type "urn:zimbraSync":deviceId.
    ns7__deviceId*                       device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":remoteWipeResponse is a complexType.
class ns7__remoteWipeResponse
{ public:
/// Element device of type "urn:zimbraSync":deviceStatusInfo.
    ns7__deviceStatusInfo*               device                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":removeDeviceRequest is a complexType.
class ns7__removeDeviceRequest
{ public:
/// Element device of type "urn:zimbraSync":deviceId.
    ns7__deviceId*                       device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":removeDeviceResponse is a complexType.
class ns7__removeDeviceResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":resumeDeviceRequest is a complexType.
class ns7__resumeDeviceRequest
{ public:
/// Element device of type "urn:zimbraSync":deviceId.
    ns7__deviceId*                       device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":resumeDeviceResponse is a complexType.
class ns7__resumeDeviceResponse
{ public:
/// Element device of type "urn:zimbraSync":deviceStatusInfo.
    ns7__deviceStatusInfo*               device                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":suspendDeviceRequest is a complexType.
class ns7__suspendDeviceRequest
{ public:
/// Element device of type "urn:zimbraSync":deviceId.
    ns7__deviceId*                       device                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraSync":suspendDeviceResponse is a complexType.
class ns7__suspendDeviceResponse
{ public:
/// Element device of type "urn:zimbraSync":deviceStatusInfo.
    ns7__deviceStatusInfo*               device                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:zimbraVoice                                                          *
 *                                                                            *
\******************************************************************************/


/// "urn:zimbraVoice":changeUCPasswordRequest is a complexType.
class ns8__changeUCPasswordRequest
{ public:
/// Attribute password of type xs:string.
   @std::string                          password                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":changeUCPasswordResponse is a complexType.
class ns8__changeUCPasswordResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getUCInfoRequest is a complexType.
class ns8__getUCInfoRequest
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getUCInfoResponse is a complexType.
class ns8__getUCInfoResponse
{ public:
    class _ns8__getUCInfoResponse_attrs
    {
/// Vector of ns8__attr* with length 0..unbounded
    std::vector<ns8__attr*             > attr                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *attrs                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getVoiceFeaturesRequest is a complexType.
class ns8__getVoiceFeaturesRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element phone of type "urn:zimbraVoice":phoneVoiceFeaturesSpec.
    ns8__phoneVoiceFeaturesSpec*         phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":storePrincipalSpec is a complexType.
class ns8__storePrincipalSpec
{ public:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute accountNumber of type xs:string.
   @std::string*                         accountNumber                  0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":phoneVoiceFeaturesSpec is a complexType.
class ns8__phoneVoiceFeaturesSpec
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_phoneVoiceFeaturesSpec  0;
    class __ns8__union_phoneVoiceFeaturesSpec
    {
   $int                                  __union_phoneVoiceFeaturesSpec 0;	///< Union _ns8__union_phoneVoiceFeaturesSpec selector: set to SOAP_UNION__ns8__union_phoneVoiceFeaturesSpec_<fieldname> or 0
    union _ns8__union_phoneVoiceFeaturesSpec
    {
/// Element voicemailprefs of type "urn:zimbraVoice":voiceMailPrefsReq.
    ns8__voiceMailPrefsReq*              voicemailprefs                 1;	///< Required element.
/// Element anoncallrejection of type "urn:zimbraVoice":anonCallRejectionReq.
    ns8__anonCallRejectionReq*           anoncallrejection              1;	///< Required element.
/// Element calleridblocking of type "urn:zimbraVoice":callerIdBlockingReq.
    ns8__callerIdBlockingReq*            calleridblocking               1;	///< Required element.
/// Element callforward of type "urn:zimbraVoice":callForwardReq.
    ns8__callForwardReq*                 callforward                    1;	///< Required element.
/// Element callforwardbusyline of type "urn:zimbraVoice":callForwardBusyLineReq.
    ns8__callForwardBusyLineReq*         callforwardbusyline            1;	///< Required element.
/// Element callforwardnoanswer of type "urn:zimbraVoice":callForwardNoAnswerReq.
    ns8__callForwardNoAnswerReq*         callforwardnoanswer            1;	///< Required element.
/// Element callwaiting of type "urn:zimbraVoice":callWaitingReq.
    ns8__callWaitingReq*                 callwaiting                    1;	///< Required element.
/// Element selectivecallforward of type "urn:zimbraVoice":selectiveCallForwardReq.
    ns8__selectiveCallForwardReq*        selectivecallforward           1;	///< Required element.
/// Element selectivecallacceptance of type "urn:zimbraVoice":selectiveCallAcceptanceReq.
    ns8__selectiveCallAcceptanceReq*     selectivecallacceptance        1;	///< Required element.
/// Element selectivecallrejection of type "urn:zimbraVoice":selectiveCallRejectionReq.
    ns8__selectiveCallRejectionReq*      selectivecallrejection         1;	///< Required element.
    }                                    union_phoneVoiceFeaturesSpec  ;
    }                                   *__union_phoneVoiceFeaturesSpec;
//  END OF CHOICE
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMailPrefsReq is a complexType.
class ns8__voiceMailPrefsReq
{ public:
/// Vector of ns8__voiceMailPrefName* with length 0..unbounded
    std::vector<ns8__voiceMailPrefName*> pref                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMailPrefName is a complexType.
class ns8__voiceMailPrefName
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":anonCallRejectionReq is a complexType.
class ns8__anonCallRejectionReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":callerIdBlockingReq is a complexType.
class ns8__callerIdBlockingReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":callForwardReq is a complexType.
class ns8__callForwardReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":callForwardBusyLineReq is a complexType.
class ns8__callForwardBusyLineReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":callForwardNoAnswerReq is a complexType.
class ns8__callForwardNoAnswerReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":callWaitingReq is a complexType.
class ns8__callWaitingReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":selectiveCallForwardReq is a complexType.
class ns8__selectiveCallForwardReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":selectiveCallAcceptanceReq is a complexType.
class ns8__selectiveCallAcceptanceReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":selectiveCallRejectionReq is a complexType.
class ns8__selectiveCallRejectionReq
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getVoiceFeaturesResponse is a complexType.
class ns8__getVoiceFeaturesResponse
{ public:
/// Element phone of type "urn:zimbraVoice":phoneVoiceFeaturesInfo.
    ns8__phoneVoiceFeaturesInfo*         phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":phoneVoiceFeaturesInfo is a complexType.
class ns8__phoneVoiceFeaturesInfo
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_phoneVoiceFeaturesInfo  0;
    class __ns8__union_phoneVoiceFeaturesInfo
    {
   $int                                  __union_phoneVoiceFeaturesInfo 0;	///< Union _ns8__union_phoneVoiceFeaturesInfo selector: set to SOAP_UNION__ns8__union_phoneVoiceFeaturesInfo_<fieldname> or 0
    union _ns8__union_phoneVoiceFeaturesInfo
    {
/// Element voicemailprefs of type "urn:zimbraVoice":voiceMailPrefsFeature.
    ns8__voiceMailPrefsFeature*          voicemailprefs                 1;	///< Required element.
/// Element anoncallrejection of type "urn:zimbraVoice":anonCallRejectionFeature.
    ns8__anonCallRejectionFeature*       anoncallrejection              1;	///< Required element.
/// Element calleridblocking of type "urn:zimbraVoice":callerIdBlockingFeature.
    ns8__callerIdBlockingFeature*        calleridblocking               1;	///< Required element.
/// Element callforward of type "urn:zimbraVoice":callForwardFeature.
    ns8__callForwardFeature*             callforward                    1;	///< Required element.
/// Element callforwardbusyline of type "urn:zimbraVoice":callForwardBusyLineFeature.
    ns8__callForwardBusyLineFeature*     callforwardbusyline            1;	///< Required element.
/// Element callforwardnoanswer of type "urn:zimbraVoice":callForwardNoAnswerFeature.
    ns8__callForwardNoAnswerFeature*     callforwardnoanswer            1;	///< Required element.
/// Element callwaiting of type "urn:zimbraVoice":callWaitingFeature.
    ns8__callWaitingFeature*             callwaiting                    1;	///< Required element.
/// Element selectivecallforward of type "urn:zimbraVoice":selectiveCallForwardFeature.
    ns8__selectiveCallForwardFeature*    selectivecallforward           1;	///< Required element.
/// Element selectivecallacceptance of type "urn:zimbraVoice":selectiveCallAcceptanceFeature.
    ns8__selectiveCallAcceptanceFeature*  selectivecallacceptance        1;	///< Required element.
/// Element selectivecallrejection of type "urn:zimbraVoice":selectiveCallRejectionFeature.
    ns8__selectiveCallRejectionFeature*  selectivecallrejection         1;	///< Required element.
    }                                    union_phoneVoiceFeaturesInfo  ;
    }                                   *__union_phoneVoiceFeaturesInfo;
//  END OF CHOICE
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":callFeatureInfo is an abstract complexType.
class ns8__callFeatureInfo
{ public:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":callerListEntry is a complexType.
class ns8__callerListEntry
{ public:
/// Attribute pn of type xs:string.
   @std::string                          pn                             1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getVoiceFolderRequest is a complexType.
class ns8__getVoiceFolderRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Vector of ns8__phoneSpec* with length 0..unbounded
    std::vector<ns8__phoneSpec*        > phone                          0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":phoneSpec is a complexType.
class ns8__phoneSpec
{ public:
/// Vector of ns8__prefSpec* with length 0..unbounded
    std::vector<ns8__prefSpec*         > pref                           0;
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":prefSpec is a complexType.
class ns8__prefSpec
{ public:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getVoiceFolderResponse is a complexType.
class ns8__getVoiceFolderResponse
{ public:
/// Vector of ns8__voiceFolderInfo* with length 0..unbounded
    std::vector<ns8__voiceFolderInfo*  > phone                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceFolderInfo is a complexType.
class ns8__voiceFolderInfo
{ public:
/// Element folder of type "urn:zimbraVoice":rootVoiceFolder.
    ns8__rootVoiceFolder*                folder                         1;	///< Required element.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute vm of type xs:boolean.
   @bool                                 vm                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceFolder is a complexType.
class ns8__voiceFolder
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string                          l                              1;	///< Required attribute.
/// Attribute view of type xs:string.
   @std::string*                         view                           0;	///< Optional attribute.
/// Attribute u of type xs:long.
   @LONG64*                              u                              0;	///< Optional attribute.
/// Attribute n of type xs:long.
   @LONG64*                              n                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getVoiceInfoRequest is a complexType.
class ns8__getVoiceInfoRequest
{ public:
/// Vector of ns8__phoneSpec* with length 0..unbounded
    std::vector<ns8__phoneSpec*        > phone                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getVoiceInfoResponse is a complexType.
class ns8__getVoiceInfoResponse
{ public:
/// Element audioType of type xs:string.
    std::string                          audioType                      1;	///< Required element.
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 1;	///< Required element.
/// Vector of ns8__voiceInfo* with length 0..unbounded
    std::vector<ns8__voiceInfo*        > phone                          0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceInfo is a complexType.
class ns8__voiceInfo
{ public:
/// Element folder of type "urn:zimbraVoice":rootVoiceFolder.
    ns8__rootVoiceFolder*                folder                         1;	///< Required element.
    class _ns8__voiceInfo_callfeatures
    {
/// Vector of ns8__callFeature* with length 0..unbounded
    std::vector<ns8__callFeature*      > callfeature                    0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *callfeatures                   0;	///< Optional element.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute label of type xs:string.
   @std::string                          label                          1;	///< Required attribute.
/// Attribute callable of type xs:boolean.
   @bool                                 callable                       1;	///< Required attribute.
/// Attribute editable of type xs:boolean.
   @bool                                 editable                       1;	///< Required attribute.
/// Attribute type of type xs:string.
   @std::string*                         type                           0;	///< Optional attribute.
/// Attribute c2cDeviceId of type xs:string.
   @std::string*                         c2cDeviceId                    0;	///< Optional attribute.
/// Attribute vm of type xs:boolean.
   @bool                                 vm                             1;	///< Required attribute.
/// Attribute used of type xs:long.
   @LONG64*                              used                           0;	///< Optional attribute.
/// Attribute limit of type xs:long.
   @LONG64*                              limit                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":callFeature is a complexType.
class ns8__callFeature
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getVoiceMailPrefsRequest is a complexType.
class ns8__getVoiceMailPrefsRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element phone of type "urn:zimbraVoice":phoneSpec.
    ns8__phoneSpec*                      phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":getVoiceMailPrefsResponse is a complexType.
class ns8__getVoiceMailPrefsResponse
{ public:
/// Element phone of type "urn:zimbraVoice":phoneInfo.
    ns8__phoneInfo*                      phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":phoneInfo is a complexType.
class ns8__phoneInfo
{ public:
/// Vector of ns8__prefInfo* with length 0..unbounded
    std::vector<ns8__prefInfo*         > pref                           0;
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyFromNumRequest is a complexType.
class ns8__modifyFromNumRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element phone of type "urn:zimbraVoice":modifyFromNumSpec.
    ns8__modifyFromNumSpec*              phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyFromNumSpec is a complexType.
class ns8__modifyFromNumSpec
{ public:
/// Attribute oldPhone of type xs:string.
   @std::string                          oldPhone                       1;	///< Required attribute.
/// Attribute phone of type xs:string.
   @std::string                          phone                          1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute label of type xs:string.
   @std::string                          label                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyFromNumResponse is a complexType.
class ns8__modifyFromNumResponse
{ public:
/// Element phone of type "urn:zimbraVoice":phoneName.
    ns8__phoneName*                      phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":phoneName is a complexType.
class ns8__phoneName
{ public:
/// Element name of type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyVoiceFeaturesRequest is a complexType.
class ns8__modifyVoiceFeaturesRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element phone of type "urn:zimbraVoice":modifyVoiceFeaturesSpec.
    ns8__modifyVoiceFeaturesSpec*        phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyVoiceFeaturesSpec is a complexType.
class ns8__modifyVoiceFeaturesSpec
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_modifyVoiceFeaturesSpec 0;
    class __ns8__union_modifyVoiceFeaturesSpec
    {
   $int                                  __union_modifyVoiceFeaturesSpec 0;	///< Union _ns8__union_modifyVoiceFeaturesSpec selector: set to SOAP_UNION__ns8__union_modifyVoiceFeaturesSpec_<fieldname> or 0
    union _ns8__union_modifyVoiceFeaturesSpec
    {
/// Element voicemailprefs of type "urn:zimbraVoice":voiceMailPrefsFeature.
    ns8__voiceMailPrefsFeature*          voicemailprefs                 1;	///< Required element.
/// Element anoncallrejection of type "urn:zimbraVoice":anonCallRejectionFeature.
    ns8__anonCallRejectionFeature*       anoncallrejection              1;	///< Required element.
/// Element calleridblocking of type "urn:zimbraVoice":callerIdBlockingFeature.
    ns8__callerIdBlockingFeature*        calleridblocking               1;	///< Required element.
/// Element callforward of type "urn:zimbraVoice":callForwardFeature.
    ns8__callForwardFeature*             callforward                    1;	///< Required element.
/// Element callforwardbusyline of type "urn:zimbraVoice":callForwardBusyLineFeature.
    ns8__callForwardBusyLineFeature*     callforwardbusyline            1;	///< Required element.
/// Element callforwardnoanswer of type "urn:zimbraVoice":callForwardNoAnswerFeature.
    ns8__callForwardNoAnswerFeature*     callforwardnoanswer            1;	///< Required element.
/// Element callwaiting of type "urn:zimbraVoice":callWaitingFeature.
    ns8__callWaitingFeature*             callwaiting                    1;	///< Required element.
/// Element selectivecallforward of type "urn:zimbraVoice":selectiveCallForwardFeature.
    ns8__selectiveCallForwardFeature*    selectivecallforward           1;	///< Required element.
/// Element selectivecallacceptance of type "urn:zimbraVoice":selectiveCallAcceptanceFeature.
    ns8__selectiveCallAcceptanceFeature*  selectivecallacceptance        1;	///< Required element.
/// Element selectivecallrejection of type "urn:zimbraVoice":selectiveCallRejectionFeature.
    ns8__selectiveCallRejectionFeature*  selectivecallrejection         1;	///< Required element.
    }                                    union_modifyVoiceFeaturesSpec ;
    }                                   *__union_modifyVoiceFeaturesSpec;
//  END OF CHOICE
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyVoiceFeaturesResponse is a complexType.
class ns8__modifyVoiceFeaturesResponse
{ public:
/// Element phone of type "urn:zimbraVoice":phoneName.
    ns8__phoneName*                      phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyVoiceMailPinRequest is a complexType.
class ns8__modifyVoiceMailPinRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element phone of type "urn:zimbraVoice":modifyVoiceMailPinSpec.
    ns8__modifyVoiceMailPinSpec*         phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyVoiceMailPinSpec is a complexType.
class ns8__modifyVoiceMailPinSpec
{ public:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute oldPin of type xs:string.
   @std::string                          oldPin                         1;	///< Required attribute.
/// Attribute pin of type xs:string.
   @std::string                          pin                            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyVoiceMailPinResponse is a complexType.
class ns8__modifyVoiceMailPinResponse
{ public:
/// Element phone of type "urn:zimbraVoice":phoneName.
    ns8__phoneName*                      phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyVoiceMailPrefsRequest is a complexType.
class ns8__modifyVoiceMailPrefsRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element phone of type "urn:zimbraVoice":phoneInfo.
    ns8__phoneInfo*                      phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":modifyVoiceMailPrefsResponse is a complexType.
class ns8__modifyVoiceMailPrefsResponse
{ public:
/// Element phone of type "urn:zimbraVoice":phoneName.
    ns8__phoneName*                      phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":resetVoiceFeaturesRequest is a complexType.
class ns8__resetVoiceFeaturesRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element phone of type "urn:zimbraVoice":resetPhoneVoiceFeaturesSpec.
    ns8__resetPhoneVoiceFeaturesSpec*    phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":resetPhoneVoiceFeaturesSpec is a complexType.
class ns8__resetPhoneVoiceFeaturesSpec
{ public:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_resetPhoneVoiceFeaturesSpec 0;
    class __ns8__union_resetPhoneVoiceFeaturesSpec
    {
   $int                                  __union_resetPhoneVoiceFeaturesSpec 0;	///< Union _ns8__union_resetPhoneVoiceFeaturesSpec selector: set to SOAP_UNION__ns8__union_resetPhoneVoiceFeaturesSpec_<fieldname> or 0
    union _ns8__union_resetPhoneVoiceFeaturesSpec
    {
/// Element anoncallrejection of type "urn:zimbraVoice":anonCallRejectionReq.
    ns8__anonCallRejectionReq*           anoncallrejection              1;	///< Required element.
/// Element calleridblocking of type "urn:zimbraVoice":callerIdBlockingReq.
    ns8__callerIdBlockingReq*            calleridblocking               1;	///< Required element.
/// Element callforward of type "urn:zimbraVoice":callForwardReq.
    ns8__callForwardReq*                 callforward                    1;	///< Required element.
/// Element callforwardbusyline of type "urn:zimbraVoice":callForwardBusyLineReq.
    ns8__callForwardBusyLineReq*         callforwardbusyline            1;	///< Required element.
/// Element callforwardnoanswer of type "urn:zimbraVoice":callForwardNoAnswerReq.
    ns8__callForwardNoAnswerReq*         callforwardnoanswer            1;	///< Required element.
/// Element callwaiting of type "urn:zimbraVoice":callWaitingReq.
    ns8__callWaitingReq*                 callwaiting                    1;	///< Required element.
/// Element selectivecallforward of type "urn:zimbraVoice":selectiveCallForwardReq.
    ns8__selectiveCallForwardReq*        selectivecallforward           1;	///< Required element.
/// Element selectivecallacceptance of type "urn:zimbraVoice":selectiveCallAcceptanceReq.
    ns8__selectiveCallAcceptanceReq*     selectivecallacceptance        1;	///< Required element.
/// Element selectivecallrejection of type "urn:zimbraVoice":selectiveCallRejectionReq.
    ns8__selectiveCallRejectionReq*      selectivecallrejection         1;	///< Required element.
    }                                    union_resetPhoneVoiceFeaturesSpec;
    }                                   *__union_resetPhoneVoiceFeaturesSpec;
//  END OF CHOICE
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":resetVoiceFeaturesResponse is a complexType.
class ns8__resetVoiceFeaturesResponse
{ public:
/// Element phone of type "urn:zimbraVoice":phoneName.
    ns8__phoneName*                      phone                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":searchVoiceRequest is a complexType.
class ns8__searchVoiceRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Attribute query of type xs:string.
   @std::string                          query                          1;	///< Required attribute.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// Attribute types of type xs:string.
   @std::string*                         types                          0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":searchVoiceResponse is a complexType.
class ns8__searchVoiceResponse
{ public:
/// Vector of ns8__voiceFolderSummary* with length 0..unbounded
    std::vector<ns8__voiceFolderSummary*> vfi                            0;
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_searchVoiceResponse     0;
    class __ns8__union_searchVoiceResponse
    {
   $int                                  __union_searchVoiceResponse    0;	///< Union _ns8__union_searchVoiceResponse selector: set to SOAP_UNION__ns8__union_searchVoiceResponse_<fieldname> or 0
    union _ns8__union_searchVoiceResponse
    {
/// Element vm of type "urn:zimbraVoice":voiceMailItem.
    ns8__voiceMailItem*                  vm                             1;	///< Required element.
/// Element cl of type "urn:zimbraVoice":callLogItem.
    ns8__callLogItem*                    cl                             1;	///< Required element.
    }                                    union_searchVoiceResponse     ;
    }                                   *__union_searchVoiceResponse   ;
//  END OF CHOICE
/// Attribute sortBy of type xs:string.
   @std::string                          sortBy                         1;	///< Required attribute.
/// Attribute offset of type xs:int.
   @int                                  offset                         1;	///< Required attribute.
/// Attribute more of type xs:boolean.
   @bool                                 more                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceFolderSummary is a complexType.
class ns8__voiceFolderSummary
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute u of type xs:long.
   @LONG64                               u                              1;	///< Required attribute.
/// Attribute n of type xs:long.
   @LONG64                               n                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceCallItem is a complexType.
class ns8__voiceCallItem
{ public:
/// Attribute phone of type xs:string.
   @std::string                          phone                          1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string                          l                              1;	///< Required attribute.
/// Attribute sf of type xs:string.
   @std::string                          sf                             1;	///< Required attribute.
/// Attribute du of type xs:int.
   @int                                  du                             1;	///< Required attribute.
/// Attribute d of type xs:long.
   @LONG64                               d                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMailCallParty is a complexType.
class ns8__voiceMailCallParty
{ public:
/// Attribute t of type xs:string.
   @std::string                          t                              1;	///< Required attribute.
/// Attribute p of type xs:string.
   @std::string                          p                              1;	///< Required attribute.
/// Attribute n of type xs:string.
   @std::string                          n                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMailContent is a complexType.
class ns8__voiceMailContent
{ public:
/// Attribute url of type xs:string.
   @std::string                          url                            1;	///< Required attribute.
/// Attribute ct of type xs:string.
   @std::string                          ct                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":uploadVoiceMailRequest is a complexType.
class ns8__uploadVoiceMailRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element vm of type "urn:zimbraVoice":voiceMsgUploadSpec.
    ns8__voiceMsgUploadSpec*             vm                             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMsgUploadSpec is a complexType.
class ns8__voiceMsgUploadSpec
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute phone of type xs:string.
   @std::string                          phone                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":uploadVoiceMailResponse is a complexType.
class ns8__uploadVoiceMailResponse
{ public:
/// Element upload of type "urn:zimbraVoice":voiceMsgUploadInfo.
    ns8__voiceMsgUploadInfo*             upload                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMsgUploadInfo is a complexType.
class ns8__voiceMsgUploadInfo
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMsgActionRequest is a complexType.
class ns8__voiceMsgActionRequest
{ public:
/// Element storeprincipal of type "urn:zimbraVoice":storePrincipalSpec.
    ns8__storePrincipalSpec*             storeprincipal                 0;	///< Optional element.
/// Element action of type "urn:zimbraVoice":voiceMsgActionSpec.
    ns8__voiceMsgActionSpec*             action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMsgActionSpec is a complexType.
class ns8__voiceMsgActionSpec
{ public:
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute phone of type xs:string.
   @std::string                          phone                          1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMsgActionResponse is a complexType.
class ns8__voiceMsgActionResponse
{ public:
/// Element action of type "urn:zimbraVoice":voiceMsgActionInfo.
    ns8__voiceMsgActionInfo*             action                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMsgActionInfo is a complexType.
class ns8__voiceMsgActionInfo
{ public:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":accountSelector is a complexType with simpleContent.
class ns3__accountSelector
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute by of type "urn:zimbra":accountBy.
   @enum ns3__accountBy                  by                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":keyValuePair is a complexType with simpleContent.
class ns3__keyValuePair
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute n of type xs:string.
   @std::string                          n                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":distributionListSelector is a complexType with simpleContent.
class ns3__distributionListSelector
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute by of type "urn:zimbra":distributionListBy.
   @enum ns3__distributionListBy         by                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":namedValue is a complexType with simpleContent.
class ns3__namedValue
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":opValue is a complexType with simpleContent.
class ns3__opValue
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute op of type xs:string.
   @std::string*                         op                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbra":urlAndValue is a complexType with simpleContent.
class ns3__urlAndValue
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":preAuth is a complexType with simpleContent.
class ns4__preAuth
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute timestamp of type xs:long.
   @LONG64                               timestamp                      1;	///< Required attribute.
/// Attribute expiresTimestamp of type xs:long.
   @LONG64*                              expiresTimestamp               0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":authToken is a complexType with simpleContent.
class ns4__authToken
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute verifyAccount of type xs:boolean.
   @bool*                                verifyAccount                  0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":pref is a complexType with simpleContent.
class ns4__pref
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute modified of type xs:long.
   @LONG64*                              modified                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":attr is a complexType with simpleContent.
class ns4__attr
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute pd of type xs:boolean.
   @bool*                                pd                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":session is a complexType with simpleContent.
class ns4__session
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute type of type xs:string.
   @std::string*                         type                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountCustomMetadata is a complexType with complexContent extension of "urn:zimbraAccount":accountKeyValuePairs.
class ns4__accountCustomMetadata : public ns4__accountKeyValuePairs
{ public:
/*  INHERITED FROM ns4__accountKeyValuePairs:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute section of type xs:string.
   @std::string*                         section                        0;	///< Optional attribute.
};

/// "urn:zimbraAccount":checkRightsRightInfo is a complexType with simpleContent.
class ns4__checkRightsRightInfo
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute allow of type xs:boolean.
   @bool                                 allow                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":createDistributionListRequest is a complexType with complexContent extension of "urn:zimbraAccount":accountKeyValuePairs.
class ns4__createDistributionListRequest : public ns4__accountKeyValuePairs
{ public:
/*  INHERITED FROM ns4__accountKeyValuePairs:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute dynamic of type xs:boolean.
   @bool*                                dynamic                        0;	///< Optional attribute.
};

/// "urn:zimbraAccount":dlInfo is a complexType with complexContent extension of "urn:zimbraAccount":objectInfo.
class ns4__dlInfo : public ns4__objectInfo
{ public:
/*  INHERITED FROM ns4__objectInfo:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
    END OF INHERITED */
/// Attribute ref of type xs:string.
   @std::string                          ref                            1;	///< Required attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute dynamic of type xs:boolean.
   @bool*                                dynamic                        0;	///< Optional attribute.
/// Attribute via of type xs:string.
   @std::string*                         via                            0;	///< Optional attribute.
/// Attribute isOwner of type xs:boolean.
   @bool*                                isOwner                        0;	///< Optional attribute.
/// Attribute isMember of type xs:boolean.
   @bool*                                isMember                       0;	///< Optional attribute.
};

/// "urn:zimbraAccount":identity is a complexType with complexContent extension of "urn:zimbraAccount":attrsImpl.
class ns4__identity : public ns4__attrsImpl
{ public:
/*  INHERITED FROM ns4__attrsImpl:
/// Vector of ns4__attr* with length 0..unbounded
    std::vector<ns4__attr*             > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
};

/// "urn:zimbraAccount":signatureContent is a complexType with simpleContent.
class ns4__signatureContent
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute type of type xs:string.
   @std::string*                         type                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":distributionListActionRequest is a complexType with complexContent extension of "urn:zimbraAccount":attrsImpl.
class ns4__distributionListActionRequest : public ns4__attrsImpl
{ public:
/*  INHERITED FROM ns4__attrsImpl:
/// Vector of ns4__attr* with length 0..unbounded
    std::vector<ns4__attr*             > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/// Element dl of type "urn:zimbra":distributionListSelector.
    ns3__distributionListSelector*       dl                             1;	///< Required element.
/// Element action of type "urn:zimbraAccount":distributionListAction.
    ns4__distributionListAction*         action                         1;	///< Required element.
};

/// "urn:zimbraAccount":distributionListAction is a complexType with complexContent extension of "urn:zimbraAccount":accountKeyValuePairs.
class ns4__distributionListAction : public ns4__accountKeyValuePairs
{ public:
/*  INHERITED FROM ns4__accountKeyValuePairs:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > dlm                            0;
/// Element newName of type xs:string.
    std::string*                         newName                        0;	///< Optional element.
/// Vector of ns4__distributionListGranteeSelector* with length 0..unbounded
    std::vector<ns4__distributionListGranteeSelector*> owner                          0;
/// Vector of ns4__distributionListRightSpec* with length 0..unbounded
    std::vector<ns4__distributionListRightSpec*> right                          0;
/// Element reference "urn:zimbraAccount":subsReq.
    ns4__distributionListSubscribeReq*   subsReq                        0;	///< Optional element.
/// Attribute op of type "urn:zimbraAccount":operation.
   @enum ns4__operation                  op                             1;	///< Required attribute.
};

/// "urn:zimbraAccount":distributionListGranteeSelector is a complexType with simpleContent.
class ns4__distributionListGranteeSelector
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute type of type "urn:zimbra":granteeType.
   @enum ns3__granteeType                type                           1;	///< Required attribute.
/// Attribute by of type "urn:zimbra":distributionListGranteeBy.
   @enum ns3__distributionListGranteeBy  by                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":distributionListSubscribeReq is a complexType with simpleContent.
class ns4__distributionListSubscribeReq
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute op of type "urn:zimbraAccount":distributionListSubscribeOp.
   @enum ns4__distributionListSubscribeOp  op                             1;	///< Required attribute.
/// Attribute bccOwners of type xs:boolean.
   @bool*                                bccOwners                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":getDistributionListRequest is a complexType with complexContent extension of "urn:zimbraAccount":attrsImpl.
class ns4__getDistributionListRequest : public ns4__attrsImpl
{ public:
/*  INHERITED FROM ns4__attrsImpl:
/// Vector of ns4__attr* with length 0..unbounded
    std::vector<ns4__attr*             > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/// Element dl of type "urn:zimbra":distributionListSelector.
    ns3__distributionListSelector*       dl                             1;	///< Required element.
/// Attribute needOwners of type xs:boolean.
   @bool*                                needOwners                     0;	///< Optional attribute.
/// Attribute needRights of type xs:string.
   @std::string*                         needRights                     0;	///< Optional attribute.
};

/// "urn:zimbraAccount":distributionListInfo is a complexType with complexContent extension of "urn:zimbraAccount":objectInfo.
class ns4__distributionListInfo : public ns4__objectInfo
{ public:
/*  INHERITED FROM ns4__objectInfo:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
    END OF INHERITED */
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > dlm                            0;
    class _ns4__distributionListInfo_owners
    {
/// Vector of ns4__distributionListGranteeInfo* with length 0..unbounded
    std::vector<ns4__distributionListGranteeInfo*> owner                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *owners                         0;	///< Optional element.
    class _ns4__distributionListInfo_rights
    {
/// Vector of ns4__distributionListRightInfo* with length 0..unbounded
    std::vector<ns4__distributionListRightInfo*> right                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *rights                         0;	///< Optional element.
/// Attribute isOwner of type xs:boolean.
   @bool*                                isOwner                        0;	///< Optional attribute.
/// Attribute isMember of type xs:boolean.
   @bool*                                isMember                       0;	///< Optional attribute.
/// Attribute dynamic of type xs:boolean.
   @bool*                                dynamic                        0;	///< Optional attribute.
};

/// "urn:zimbraAccount":accountZimletProperty is a complexType with simpleContent.
class ns4__accountZimletProperty
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":prop is a complexType with simpleContent.
class ns4__prop
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute zimlet of type xs:string.
   @std::string                          zimlet                         1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":accountImapDataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountImapDataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraAccount":accountPop3DataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountPop3DataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute leaveOnServer of type xs:boolean.
   @bool*                                leaveOnServer                  0;	///< Optional attribute.
};

/// "urn:zimbraAccount":accountCaldavDataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountCaldavDataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraAccount":accountYabDataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountYabDataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraAccount":accountRssDataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountRssDataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraAccount":accountGalDataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountGalDataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraAccount":accountCalDataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountCalDataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraAccount":accountUnknownDataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountUnknownDataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraAccount":licenseAttr is a complexType with simpleContent.
class ns4__licenseAttr
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":smimePublicCertsStoreSpec is a complexType with simpleContent.
class ns4__smimePublicCertsStoreSpec
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute storeLookupOpt of type "urn:zimbra":storeLookupOpt.
   @enum ns3__storeLookupOpt*            storeLookupOpt                 0;	///< Optional attribute.
/// Attribute sourceLookupOpt of type "urn:zimbra":sourceLookupOpt.
   @enum ns3__sourceLookupOpt*           sourceLookupOpt                0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":smimePublicCertInfo is a complexType with simpleContent.
class ns4__smimePublicCertInfo
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute store of type "urn:zimbra":smimeStoreType.
   @enum ns3__smimeStoreType             store                          1;	///< Required attribute.
/// Attribute field of type xs:string.
   @std::string                          field                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraAccount":searchCalendarResourcesRequest is a complexType with complexContent extension of "urn:zimbra":attributeSelectorImpl.
class ns4__searchCalendarResourcesRequest : public ns3__attributeSelectorImpl
{ public:
/*  INHERITED FROM ns3__attributeSelectorImpl:
/// Attribute attrs of type xs:string.
   @std::string*                         attrs                          0;	///< Optional attribute.
    END OF INHERITED */
/// Element locale of type xs:string.
    std::string*                         locale                         0;	///< Optional element.
/// Element cursor of type "urn:zimbra":cursorInfo.
    ns3__cursorInfo*                     cursor                         0;	///< Optional element.
/// Element name of type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// Element searchFilter of type "urn:zimbraAccount":entrySearchFilterInfo.
    ns4__entrySearchFilterInfo*          searchFilter                   0;	///< Optional element.
/// Attribute quick of type xs:boolean.
   @bool*                                quick                          0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
/// Attribute galAcctId of type xs:string.
   @std::string*                         galAcctId                      0;	///< Optional attribute.
};

/// "urn:zimbraAccount":calendarResourceInfo is a complexType with complexContent extension of "urn:zimbraAccount":accountKeyValuePairs.
class ns4__calendarResourceInfo : public ns4__accountKeyValuePairs
{ public:
/*  INHERITED FROM ns4__accountKeyValuePairs:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
};

/// "urn:zimbraAccount":accountContactsDataSource is a complexType with complexContent extension of "urn:zimbraAccount":accountDataSource.
class ns4__accountContactsDataSource : public ns4__accountDataSource
{ public:
/*  INHERITED FROM ns4__accountDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraAccount":adsConnectionType.
   @enum ns4__adsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":addAppointmentInviteRequest is a complexType with complexContent extension of "urn:zimbraMail":setCalendarItemInfo.
class ns5__addAppointmentInviteRequest : public ns5__setCalendarItemInfo
{ public:
/*  INHERITED FROM ns5__setCalendarItemInfo:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":header is a complexType with simpleContent.
class ns5__header
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":mimePartAttachSpec is a complexType with complexContent extension of "urn:zimbraMail":attachSpec.
class ns5__mimePartAttachSpec : public ns5__attachSpec
{ public:
/*  INHERITED FROM ns5__attachSpec:
/// Attribute optional of type xs:boolean.
   @bool*                                optional                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute mid of type xs:string.
   @std::string                          mid                            1;	///< Required attribute.
/// Attribute part of type xs:string.
   @std::string                          part                           1;	///< Required attribute.
};

/// "urn:zimbraMail":msgAttachSpec is a complexType with complexContent extension of "urn:zimbraMail":attachSpec.
class ns5__msgAttachSpec : public ns5__attachSpec
{ public:
/*  INHERITED FROM ns5__attachSpec:
/// Attribute optional of type xs:boolean.
   @bool*                                optional                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
};

/// "urn:zimbraMail":contactAttachSpec is a complexType with complexContent extension of "urn:zimbraMail":attachSpec.
class ns5__contactAttachSpec : public ns5__attachSpec
{ public:
/*  INHERITED FROM ns5__attachSpec:
/// Attribute optional of type xs:boolean.
   @bool*                                optional                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
};

/// "urn:zimbraMail":docAttachSpec is a complexType with complexContent extension of "urn:zimbraMail":attachSpec.
class ns5__docAttachSpec : public ns5__attachSpec
{ public:
/*  INHERITED FROM ns5__attachSpec:
/// Attribute optional of type xs:boolean.
   @bool*                                optional                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute path of type xs:string.
   @std::string*                         path                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":inviteComponent is a complexType with complexContent extension of "urn:zimbraMail":inviteComponentCommon.
class ns5__inviteComponent : public ns5__inviteComponentCommon
{ public:
/*  INHERITED FROM ns5__inviteComponentCommon:
/// Attribute method of type xs:string.
   @std::string                          method                         1;	///< Required attribute.
/// Attribute compNum of type xs:int.
   @int                                  compNum                        1;	///< Required attribute.
/// Attribute rsvp of type xs:boolean.
   @bool                                 rsvp                           1;	///< Required attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute completed of type xs:string.
   @std::string*                         completed                      0;	///< Optional attribute.
/// Attribute noBlob of type xs:boolean.
   @bool*                                noBlob                         0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute x_uid of type xs:string.
   @std::string*                         x_USCOREuid                    0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute seq of type xs:int.
   @int*                                 seq                            0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute ciFolder of type xs:string.
   @std::string*                         ciFolder                       0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute ex of type xs:boolean.
   @bool*                                ex                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute changes of type xs:string.
   @std::string*                         changes                        0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > comment                        0;
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > contact                        0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Vector of ns5__calendarAttendee* with length 0..unbounded
    std::vector<ns5__calendarAttendee* > at                             0;
/// Vector of ns5__alarmInfo* with length 0..unbounded
    std::vector<ns5__alarmInfo*        > alarm                          0;
/// Vector of ns5__xProp* with length 0..unbounded
    std::vector<ns5__xProp*            > xprop                          0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element desc of type xs:string.
    std::string*                         desc                           0;	///< Optional element.
/// Element descHtml of type xs:string.
    std::string*                         descHtml                       0;	///< Optional element.
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
/// Element exceptId of type "urn:zimbraMail":exceptionRecurIdInfo.
    ns5__exceptionRecurIdInfo*           exceptId                       0;	///< Optional element.
/// Element s of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     s                              0;	///< Optional element.
/// Element e of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     e                              0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
};

/// "urn:zimbraMail":rawInvite is a complexType with simpleContent.
class ns5__rawInvite
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute summary of type xs:string.
   @std::string*                         summary                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":calendarAttach is a complexType with simpleContent.
class ns5__calendarAttach
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute uri of type xs:string.
   @std::string*                         uri                            0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":addRecurrenceInfo is a complexType with complexContent extension of "urn:zimbraMail":recurrenceInfo.
class ns5__addRecurrenceInfo : public ns5__recurrenceInfo
{ public:
/*  INHERITED FROM ns5__recurrenceInfo:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_addRecurrenceInfo       0;
    class __ns5__union_addRecurrenceInfo
    {
   $int                                  __union_addRecurrenceInfo      0;	///< Union _ns5__union_addRecurrenceInfo selector: set to SOAP_UNION__ns5__union_addRecurrenceInfo_<fieldname> or 0
    union _ns5__union_addRecurrenceInfo
    {
/// Element add of type "urn:zimbraMail":addRecurrenceInfo.
    ns5__addRecurrenceInfo*              add                            1;	///< Required element.
/// Element exclude of type "urn:zimbraMail":excludeRecurrenceInfo.
    ns5__excludeRecurrenceInfo*          exclude                        1;	///< Required element.
/// Element except of type "urn:zimbraMail":exceptionRuleInfo.
    ns5__exceptionRuleInfo*              except                         1;	///< Required element.
/// Element cancel of type "urn:zimbraMail":cancelRuleInfo.
    ns5__cancelRuleInfo*                 cancel                         1;	///< Required element.
/// Element dates of type "urn:zimbraMail":singleDates.
    ns5__singleDates*                    dates                          1;	///< Required element.
/// Element rule of type "urn:zimbraMail":simpleRepeatingRule.
    ns5__simpleRepeatingRule*            rule                           1;	///< Required element.
    }                                    union_addRecurrenceInfo       ;
    }                                   *__union_addRecurrenceInfo     ;
//  END OF CHOICE
    END OF INHERITED */
};

/// "urn:zimbraMail":excludeRecurrenceInfo is a complexType with complexContent extension of "urn:zimbraMail":recurrenceInfo.
class ns5__excludeRecurrenceInfo : public ns5__recurrenceInfo
{ public:
/*  INHERITED FROM ns5__recurrenceInfo:
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_excludeRecurrenceInfo   0;
    class __ns5__union_excludeRecurrenceInfo
    {
   $int                                  __union_excludeRecurrenceInfo  0;	///< Union _ns5__union_excludeRecurrenceInfo selector: set to SOAP_UNION__ns5__union_excludeRecurrenceInfo_<fieldname> or 0
    union _ns5__union_excludeRecurrenceInfo
    {
/// Element add of type "urn:zimbraMail":addRecurrenceInfo.
    ns5__addRecurrenceInfo*              add                            1;	///< Required element.
/// Element exclude of type "urn:zimbraMail":excludeRecurrenceInfo.
    ns5__excludeRecurrenceInfo*          exclude                        1;	///< Required element.
/// Element except of type "urn:zimbraMail":exceptionRuleInfo.
    ns5__exceptionRuleInfo*              except                         1;	///< Required element.
/// Element cancel of type "urn:zimbraMail":cancelRuleInfo.
    ns5__cancelRuleInfo*                 cancel                         1;	///< Required element.
/// Element dates of type "urn:zimbraMail":singleDates.
    ns5__singleDates*                    dates                          1;	///< Required element.
/// Element rule of type "urn:zimbraMail":simpleRepeatingRule.
    ns5__simpleRepeatingRule*            rule                           1;	///< Required element.
    }                                    union_excludeRecurrenceInfo   ;
    }                                   *__union_excludeRecurrenceInfo ;
//  END OF CHOICE
    END OF INHERITED */
};

/// "urn:zimbraMail":exceptionRuleInfo is a complexType with complexContent extension of "urn:zimbraMail":recurIdInfo.
class ns5__exceptionRuleInfo : public ns5__recurIdInfo
{ public:
/*  INHERITED FROM ns5__recurIdInfo:
/// Attribute rangeType of type xs:int.
   @int                                  rangeType                      1;	///< Required attribute.
/// Attribute recurId of type xs:string.
   @std::string                          recurId                        1;	///< Required attribute.
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
    END OF INHERITED */
/// Element add of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 add                            0;	///< Optional element.
/// Element exclude of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 exclude                        0;	///< Optional element.
};

/// "urn:zimbraMail":cancelRuleInfo is a complexType with complexContent extension of "urn:zimbraMail":recurIdInfo.
class ns5__cancelRuleInfo : public ns5__recurIdInfo
{ public:
/*  INHERITED FROM ns5__recurIdInfo:
/// Attribute rangeType of type xs:int.
   @int                                  rangeType                      1;	///< Required attribute.
/// Attribute recurId of type xs:string.
   @std::string                          recurId                        1;	///< Required attribute.
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":messageSummary is a complexType with complexContent extension of "urn:zimbraMail":messageCommon.
class ns5__messageSummary : public ns5__messageCommon
{ public:
/*  INHERITED FROM ns5__messageCommon:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":inviteInfo.
    ns5__inviteInfo*                     inv                            0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
};

/// "urn:zimbraMail":calendarReply is a complexType with complexContent extension of "urn:zimbraMail":recurIdInfo.
class ns5__calendarReply : public ns5__recurIdInfo
{ public:
/*  INHERITED FROM ns5__recurIdInfo:
/// Attribute rangeType of type xs:int.
   @int                                  rangeType                      1;	///< Required attribute.
/// Attribute recurId of type xs:string.
   @std::string                          recurId                        1;	///< Required attribute.
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute seq of type xs:int.
   @int                                  seq                            1;	///< Required attribute.
/// Attribute d of type xs:long.
   @LONG64                               d                              1;	///< Required attribute.
/// Attribute at of type xs:string.
   @std::string                          at                             1;	///< Required attribute.
/// Attribute sentBy of type xs:string.
   @std::string*                         sentBy                         0;	///< Optional attribute.
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
};

/// "urn:zimbraMail":mailCustomMetadata is a complexType with complexContent extension of "urn:zimbraMail":mailKeyValuePairs.
class ns5__mailCustomMetadata : public ns5__mailKeyValuePairs
{ public:
/*  INHERITED FROM ns5__mailKeyValuePairs:
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute section of type xs:string.
   @std::string*                         section                        0;	///< Optional attribute.
};

/// "urn:zimbraMail":addTaskInviteRequest is a complexType with complexContent extension of "urn:zimbraMail":setCalendarItemInfo.
class ns5__addTaskInviteRequest : public ns5__setCalendarItemInfo
{ public:
/*  INHERITED FROM ns5__setCalendarItemInfo:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":addTaskInviteResponse is a complexType with complexContent extension of "urn:zimbraMail":addAppointmentInviteResponse.
class ns5__addTaskInviteResponse : public ns5__addAppointmentInviteResponse
{ public:
/*  INHERITED FROM ns5__addAppointmentInviteResponse:
/// Attribute calItemId of type xs:int.
   @int*                                 calItemId                      0;	///< Optional attribute.
/// Attribute invId of type xs:int.
   @int*                                 invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":browseData is a complexType with simpleContent.
class ns5__browseData
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute h of type xs:string.
   @std::string*                         h                              0;	///< Optional attribute.
/// Attribute freq of type xs:int.
   @int                                  freq                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":cancelTaskRequest is a complexType with complexContent extension of "urn:zimbraMail":cancelAppointmentRequest.
class ns5__cancelTaskRequest : public ns5__cancelAppointmentRequest
{ public:
/*  INHERITED FROM ns5__cancelAppointmentRequest:
/// Element inst of type "urn:zimbraMail":instanceRecurIdInfo.
    ns5__instanceRecurIdInfo*            inst                           0;	///< Optional element.
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute comp of type xs:int.
   @int*                                 comp                           0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":cancelTaskResponse is a complexType with complexContent extension of "urn:zimbraMail":cancelAppointmentResponse.
class ns5__cancelTaskResponse : public ns5__cancelAppointmentResponse
{ public:
/*  INHERITED FROM ns5__cancelAppointmentResponse:
    END OF INHERITED */
};

/// "urn:zimbraMail":targetSpec is a complexType with simpleContent.
class ns5__targetSpec
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute type of type "urn:zimbra":targetType.
   @enum ns3__targetType                 type                           1;	///< Required attribute.
/// Attribute by of type "urn:zimbra":accountBy.
   @enum ns3__accountBy                  by                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":rightPermission is a complexType with simpleContent.
class ns5__rightPermission
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute allow of type xs:boolean.
   @bool                                 allow                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":expandedRecurrenceCancel is a complexType with complexContent extension of "urn:zimbraMail":expandedRecurrenceComponent.
class ns5__expandedRecurrenceCancel : public ns5__expandedRecurrenceComponent
{ public:
/*  INHERITED FROM ns5__expandedRecurrenceComponent:
/// Element exceptId of type "urn:zimbraMail":instanceRecurIdInfo.
    ns5__instanceRecurIdInfo*            exceptId                       0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute e of type xs:long.
   @LONG64*                              e                              0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":expandedRecurrenceInvite is a complexType with complexContent extension of "urn:zimbraMail":expandedRecurrenceComponent.
class ns5__expandedRecurrenceInvite : public ns5__expandedRecurrenceComponent
{ public:
/*  INHERITED FROM ns5__expandedRecurrenceComponent:
/// Element exceptId of type "urn:zimbraMail":instanceRecurIdInfo.
    ns5__instanceRecurIdInfo*            exceptId                       0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute e of type xs:long.
   @LONG64*                              e                              0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":expandedRecurrenceException is a complexType with complexContent extension of "urn:zimbraMail":expandedRecurrenceComponent.
class ns5__expandedRecurrenceException : public ns5__expandedRecurrenceComponent
{ public:
/*  INHERITED FROM ns5__expandedRecurrenceComponent:
/// Element exceptId of type "urn:zimbraMail":instanceRecurIdInfo.
    ns5__instanceRecurIdInfo*            exceptId                       0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute e of type xs:long.
   @LONG64*                              e                              0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":conflictRecurrenceInstance is a complexType with complexContent extension of "urn:zimbraMail":expandedRecurrenceInstance.
class ns5__conflictRecurrenceInstance : public ns5__expandedRecurrenceInstance
{ public:
/*  INHERITED FROM ns5__expandedRecurrenceInstance:
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute tzo of type xs:int.
   @int*                                 tzo                            0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of ns5__freeBusyUserStatus* with length 0..unbounded
    std::vector<ns5__freeBusyUserStatus*> usr                            0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
};

/// "urn:zimbraMail":checkSpellingRequest is a complexType with simpleContent.
class ns5__checkSpellingRequest
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute dictionary of type xs:string.
   @std::string*                         dictionary                     0;	///< Optional attribute.
/// Attribute ignore of type xs:string.
   @std::string*                         ignore                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":contactActionSelector is a complexType with complexContent extension of "urn:zimbraMail":actionSelector.
class ns5__contactActionSelector : public ns5__actionSelector
{ public:
/*  INHERITED FROM ns5__actionSelector:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute tcon of type xs:string.
   @std::string*                         tcon                           0;	///< Optional attribute.
/// Attribute tag of type xs:int.
   @int*                                 tag                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of ns5__newContactAttr* with length 0..unbounded
    std::vector<ns5__newContactAttr*   > a                              0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
};

/// "urn:zimbraMail":newContactAttr is a complexType with simpleContent.
class ns5__newContactAttr
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute n of type xs:string.
   @std::string                          n                              1;	///< Required attribute.
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// Attribute id of type xs:int.
   @int*                                 id                             0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":noteActionSelector is a complexType with complexContent extension of "urn:zimbraMail":actionSelector.
class ns5__noteActionSelector : public ns5__actionSelector
{ public:
/*  INHERITED FROM ns5__actionSelector:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute tcon of type xs:string.
   @std::string*                         tcon                           0;	///< Optional attribute.
/// Attribute tag of type xs:int.
   @int*                                 tag                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute content of type xs:string.
   @std::string*                         content                        0;	///< Optional attribute.
/// Attribute pos of type xs:string.
   @std::string*                         pos                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":folderActionSelector is a complexType with complexContent extension of "urn:zimbraMail":actionSelector.
class ns5__folderActionSelector : public ns5__actionSelector
{ public:
/*  INHERITED FROM ns5__actionSelector:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute tcon of type xs:string.
   @std::string*                         tcon                           0;	///< Optional attribute.
/// Attribute tag of type xs:int.
   @int*                                 tag                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
    END OF INHERITED */
/// Element grant of type "urn:zimbraMail":actionGrantSelector.
    ns5__actionGrantSelector*            grant                          0;	///< Optional element.
    class _ns5__folderActionSelector_acl
    {
/// Vector of ns5__actionGrantSelector* with length 0..unbounded
    std::vector<ns5__actionGrantSelector*> grant                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *acl                            0;	///< Optional element.
/// Element reference "urn:zimbraMail":retentionPolicy.
    ns5__retentionPolicy*                retentionPolicy                0;	///< Optional element.
/// Attribute recursive of type xs:boolean.
   @bool*                                recursive                      0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute excludeFreeBusy of type xs:boolean.
   @bool*                                excludeFreeBusy                0;	///< Optional attribute.
/// Attribute zid of type xs:string.
   @std::string*                         zid                            0;	///< Optional attribute.
/// Attribute gt of type xs:string.
   @std::string*                         gt                             0;	///< Optional attribute.
/// Attribute view of type xs:string.
   @std::string*                         view                           0;	///< Optional attribute.
};

/// "urn:zimbraMail":folderActionResult is a complexType with complexContent extension of "urn:zimbraMail":idAndOperation.
class ns5__folderActionResult : public ns5__idAndOperation
{ public:
/*  INHERITED FROM ns5__idAndOperation:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
    END OF INHERITED */
/// Attribute zid of type xs:string.
   @std::string*                         zid                            0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute key of type xs:string.
   @std::string*                         key                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":createAppointmentExceptionRequest is a complexType with complexContent extension of "urn:zimbraMail":calItemRequestBase.
class ns5__createAppointmentExceptionRequest : public ns5__calItemRequestBase
{ public:
/*  INHERITED FROM ns5__calItemRequestBase:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute echo of type xs:boolean.
   @bool*                                echo                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute forcesend of type xs:boolean.
   @bool*                                forcesend                      0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute comp of type xs:int.
   @int*                                 comp                           0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":createAppointmentExceptionResponse is a complexType with complexContent extension of "urn:zimbraMail":createCalendarItemResponse.
class ns5__createAppointmentExceptionResponse : public ns5__createCalendarItemResponse
{ public:
/*  INHERITED FROM ns5__createCalendarItemResponse:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              0;	///< Optional element.
/// Element echo of type "urn:zimbraMail":calEcho.
    ns5__calEcho*                        echo                           0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":inviteAsMP is a complexType with complexContent extension of "urn:zimbraMail":messageCommon.
class ns5__inviteAsMP : public ns5__messageCommon
{ public:
/*  INHERITED FROM ns5__messageCommon:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element mid of type xs:string.
    std::string*                         mid                            0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":mpInviteInfo.
    ns5__mpInviteInfo*                   inv                            0;	///< Optional element.
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > header                         0;
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_inviteAsMP              0;
    class __ns5__union_inviteAsMP
    {
   $int                                  __union_inviteAsMP             0;	///< Union _ns5__union_inviteAsMP selector: set to SOAP_UNION__ns5__union_inviteAsMP_<fieldname> or 0
    union _ns5__union_inviteAsMP
    {
/// Element mp of type "urn:zimbraMail":partInfo.
    ns5__partInfo*                       mp                             1;	///< Required element.
/// Element shr of type "urn:zimbraMail":shareNotification.
    ns5__shareNotification*              shr                            1;	///< Required element.
/// Element dlSubs of type "urn:zimbraMail":dlSubscriptionNotification.
    ns5__dlSubscriptionNotification*     dlSubs                         1;	///< Required element.
    }                                    union_inviteAsMP              ;
    }                                   *__union_inviteAsMP            ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
/// Attribute sd of type xs:long.
   @LONG64*                              sd                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":shareNotification is a complexType with complexContent extension of "urn:zimbraMail":notification.
class ns5__shareNotification : public ns5__notification
{ public:
/*  INHERITED FROM ns5__notification:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Attribute truncated of type xs:boolean.
   @bool*                                truncated                      0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":dlSubscriptionNotification is a complexType with complexContent extension of "urn:zimbraMail":notification.
class ns5__dlSubscriptionNotification : public ns5__notification
{ public:
/*  INHERITED FROM ns5__notification:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Attribute truncated of type xs:boolean.
   @bool*                                truncated                      0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":createAppointmentRequest is a complexType with complexContent extension of "urn:zimbraMail":calItemRequestBase.
class ns5__createAppointmentRequest : public ns5__calItemRequestBase
{ public:
/*  INHERITED FROM ns5__calItemRequestBase:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute echo of type xs:boolean.
   @bool*                                echo                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute forcesend of type xs:boolean.
   @bool*                                forcesend                      0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":createAppointmentResponse is a complexType with complexContent extension of "urn:zimbraMail":createCalendarItemResponse.
class ns5__createAppointmentResponse : public ns5__createCalendarItemResponse
{ public:
/*  INHERITED FROM ns5__createCalendarItemResponse:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              0;	///< Optional element.
/// Element echo of type "urn:zimbraMail":calEcho.
    ns5__calEcho*                        echo                           0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":vCardInfo is a complexType with simpleContent.
class ns5__vCardInfo
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute mid of type xs:string.
   @std::string*                         mid                            0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":mailImapDataSource is a complexType with complexContent extension of "urn:zimbraMail":mailDataSource.
class ns5__mailImapDataSource : public ns5__mailDataSource
{ public:
/*  INHERITED FROM ns5__mailDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":mailPop3DataSource is a complexType with complexContent extension of "urn:zimbraMail":mailDataSource.
class ns5__mailPop3DataSource : public ns5__mailDataSource
{ public:
/*  INHERITED FROM ns5__mailDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute leaveOnServer of type xs:boolean.
   @bool*                                leaveOnServer                  0;	///< Optional attribute.
};

/// "urn:zimbraMail":mailCaldavDataSource is a complexType with complexContent extension of "urn:zimbraMail":mailDataSource.
class ns5__mailCaldavDataSource : public ns5__mailDataSource
{ public:
/*  INHERITED FROM ns5__mailDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":mailYabDataSource is a complexType with complexContent extension of "urn:zimbraMail":mailDataSource.
class ns5__mailYabDataSource : public ns5__mailDataSource
{ public:
/*  INHERITED FROM ns5__mailDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":mailRssDataSource is a complexType with complexContent extension of "urn:zimbraMail":mailDataSource.
class ns5__mailRssDataSource : public ns5__mailDataSource
{ public:
/*  INHERITED FROM ns5__mailDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":mailGalDataSource is a complexType with complexContent extension of "urn:zimbraMail":mailDataSource.
class ns5__mailGalDataSource : public ns5__mailDataSource
{ public:
/*  INHERITED FROM ns5__mailDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":mailCalDataSource is a complexType with complexContent extension of "urn:zimbraMail":mailDataSource.
class ns5__mailCalDataSource : public ns5__mailDataSource
{ public:
/*  INHERITED FROM ns5__mailDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":mailUnknownDataSource is a complexType with complexContent extension of "urn:zimbraMail":mailDataSource.
class ns5__mailUnknownDataSource : public ns5__mailDataSource
{ public:
/*  INHERITED FROM ns5__mailDataSource:
/// Element lastError of type xs:string.
    std::string*                         lastError                      0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > a                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute isEnabled of type xs:boolean.
   @bool*                                isEnabled                      0;	///< Optional attribute.
/// Attribute importOnly of type xs:boolean.
   @bool*                                importOnly                     0;	///< Optional attribute.
/// Attribute host of type xs:string.
   @std::string*                         host                           0;	///< Optional attribute.
/// Attribute port of type xs:int.
   @int*                                 port                           0;	///< Optional attribute.
/// Attribute connectionType of type "urn:zimbraMail":mdsConnectionType.
   @enum ns5__mdsConnectionType*         connectionType                 0;	///< Optional attribute.
/// Attribute username of type xs:string.
   @std::string*                         username                       0;	///< Optional attribute.
/// Attribute password of type xs:string.
   @std::string*                         password                       0;	///< Optional attribute.
/// Attribute pollingInterval of type xs:string.
   @std::string*                         pollingInterval                0;	///< Optional attribute.
/// Attribute emailAddress of type xs:string.
   @std::string*                         emailAddress                   0;	///< Optional attribute.
/// Attribute useAddressForForwardReply of type xs:boolean.
   @bool*                                useAddressForForwardReply      0;	///< Optional attribute.
/// Attribute defaultSignature of type xs:string.
   @std::string*                         defaultSignature               0;	///< Optional attribute.
/// Attribute forwardReplySignature of type xs:string.
   @std::string*                         forwardReplySignature          0;	///< Optional attribute.
/// Attribute fromDisplay of type xs:string.
   @std::string*                         fromDisplay                    0;	///< Optional attribute.
/// Attribute replyToAddress of type xs:string.
   @std::string*                         replyToAddress                 0;	///< Optional attribute.
/// Attribute replyToDisplay of type xs:string.
   @std::string*                         replyToDisplay                 0;	///< Optional attribute.
/// Attribute importClass of type xs:string.
   @std::string*                         importClass                    0;	///< Optional attribute.
/// Attribute failingSince of type xs:long.
   @LONG64*                              failingSince                   0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":imapDataSourceId is a complexType with complexContent extension of "urn:zimbra":id.
class ns5__imapDataSourceId : public ns3__id
{ public:
/*  INHERITED FROM ns3__id:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":pop3DataSourceId is a complexType with complexContent extension of "urn:zimbra":id.
class ns5__pop3DataSourceId : public ns3__id
{ public:
/*  INHERITED FROM ns3__id:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":caldavDataSourceId is a complexType with complexContent extension of "urn:zimbra":id.
class ns5__caldavDataSourceId : public ns3__id
{ public:
/*  INHERITED FROM ns3__id:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":yabDataSourceId is a complexType with complexContent extension of "urn:zimbra":id.
class ns5__yabDataSourceId : public ns3__id
{ public:
/*  INHERITED FROM ns3__id:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":rssDataSourceId is a complexType with complexContent extension of "urn:zimbra":id.
class ns5__rssDataSourceId : public ns3__id
{ public:
/*  INHERITED FROM ns3__id:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":galDataSourceId is a complexType with complexContent extension of "urn:zimbra":id.
class ns5__galDataSourceId : public ns3__id
{ public:
/*  INHERITED FROM ns3__id:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":calDataSourceId is a complexType with complexContent extension of "urn:zimbra":id.
class ns5__calDataSourceId : public ns3__id
{ public:
/*  INHERITED FROM ns3__id:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":unknownDataSourceId is a complexType with complexContent extension of "urn:zimbra":id.
class ns5__unknownDataSourceId : public ns3__id
{ public:
/*  INHERITED FROM ns3__id:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":mountpoint is a complexType with complexContent extension of "urn:zimbraMail":folder.
class ns5__mountpoint : public ns5__folder
{ public:
/*  INHERITED FROM ns5__folder:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element acl of type "urn:zimbraMail":acl.
    ns5__acl*                            acl                            0;	///< Optional element.
/// Element reference "urn:zimbraMail":retentionPolicy.
    ns5__retentionPolicy*                retentionPolicy                0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_mountpoint              0;
    class __ns5__union_mountpoint
    {
   $int                                  __union_mountpoint             0;	///< Union _ns5__union_mountpoint selector: set to SOAP_UNION__ns5__union_mountpoint_<fieldname> or 0
    union _ns5__union_mountpoint
    {
/// Element reference "urn:zimbraMail":folder.
    ns5__folder*                         folder                         1;	///< Required element.
/// Element reference "urn:zimbraMail":link.
    ns5__mountpoint*                     link                           1;	///< Required element.
/// Element reference "urn:zimbraMail":search.
    ns5__searchFolder*                   search                         1;	///< Required element.
    }                                    union_mountpoint              ;
    }                                   *__union_mountpoint            ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute uuid of type xs:string.
   @std::string                          uuid                           1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute absFolderPath of type xs:string.
   @std::string*                         absFolderPath                  0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute luuid of type xs:string.
   @std::string*                         luuid                          0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute color of type xs:int.
   @int*                                 color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute u of type xs:int.
   @int*                                 u                              0;	///< Optional attribute.
/// Attribute i4u of type xs:int.
   @int*                                 i4u                            0;	///< Optional attribute.
/// Attribute view of type "urn:zimbraMail":view.
   @enum ns5__view*                      view                           0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute n of type xs:int.
   @int*                                 n                              0;	///< Optional attribute.
/// Attribute i4n of type xs:int.
   @int*                                 i4n                            0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute i4ms of type xs:int.
   @int*                                 i4ms                           0;	///< Optional attribute.
/// Attribute i4next of type xs:int.
   @int*                                 i4next                         0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute activesyncdisabled of type xs:boolean.
   @bool*                                activesyncdisabled             0;	///< Optional attribute.
/// Attribute perm of type xs:string.
   @std::string*                         perm                           0;	///< Optional attribute.
/// Attribute recursive of type xs:boolean.
   @bool*                                recursive                      0;	///< Optional attribute.
/// Attribute rest of type xs:string.
   @std::string*                         rest                           0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute owner of type xs:string.
   @std::string*                         owner                          0;	///< Optional attribute.
/// Attribute zid of type xs:string.
   @std::string*                         zid                            0;	///< Optional attribute.
/// Attribute rid of type xs:int.
   @int                                  rid                            1;	///< Required attribute.
/// Attribute ruuid of type xs:string.
   @std::string*                         ruuid                          0;	///< Optional attribute.
/// Attribute oname of type xs:string.
   @std::string*                         oname                          0;	///< Optional attribute.
/// Attribute reminder of type xs:boolean.
   @bool*                                reminder                       0;	///< Optional attribute.
/// Attribute broken of type xs:boolean.
   @bool*                                broken                         0;	///< Optional attribute.
};

/// "urn:zimbraMail":searchFolder is a complexType with complexContent extension of "urn:zimbraMail":folder.
class ns5__searchFolder : public ns5__folder
{ public:
/*  INHERITED FROM ns5__folder:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element acl of type "urn:zimbraMail":acl.
    ns5__acl*                            acl                            0;	///< Optional element.
/// Element reference "urn:zimbraMail":retentionPolicy.
    ns5__retentionPolicy*                retentionPolicy                0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_searchFolder            0;
    class __ns5__union_searchFolder
    {
   $int                                  __union_searchFolder           0;	///< Union _ns5__union_searchFolder selector: set to SOAP_UNION__ns5__union_searchFolder_<fieldname> or 0
    union _ns5__union_searchFolder
    {
/// Element reference "urn:zimbraMail":folder.
    ns5__folder*                         folder                         1;	///< Required element.
/// Element reference "urn:zimbraMail":link.
    ns5__mountpoint*                     link                           1;	///< Required element.
/// Element reference "urn:zimbraMail":search.
    ns5__searchFolder*                   search                         1;	///< Required element.
    }                                    union_searchFolder            ;
    }                                   *__union_searchFolder          ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute uuid of type xs:string.
   @std::string                          uuid                           1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute absFolderPath of type xs:string.
   @std::string*                         absFolderPath                  0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute luuid of type xs:string.
   @std::string*                         luuid                          0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute color of type xs:int.
   @int*                                 color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute u of type xs:int.
   @int*                                 u                              0;	///< Optional attribute.
/// Attribute i4u of type xs:int.
   @int*                                 i4u                            0;	///< Optional attribute.
/// Attribute view of type "urn:zimbraMail":view.
   @enum ns5__view*                      view                           0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute n of type xs:int.
   @int*                                 n                              0;	///< Optional attribute.
/// Attribute i4n of type xs:int.
   @int*                                 i4n                            0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute i4ms of type xs:int.
   @int*                                 i4ms                           0;	///< Optional attribute.
/// Attribute i4next of type xs:int.
   @int*                                 i4next                         0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute activesyncdisabled of type xs:boolean.
   @bool*                                activesyncdisabled             0;	///< Optional attribute.
/// Attribute perm of type xs:string.
   @std::string*                         perm                           0;	///< Optional attribute.
/// Attribute recursive of type xs:boolean.
   @bool*                                recursive                      0;	///< Optional attribute.
/// Attribute rest of type xs:string.
   @std::string*                         rest                           0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute query of type xs:string.
   @std::string*                         query                          0;	///< Optional attribute.
/// Attribute sortBy of type "urn:zimbra":searchSortBy.
   @enum ns3__searchSortBy*              sortBy                         0;	///< Optional attribute.
/// Attribute types of type xs:string.
   @std::string*                         types                          0;	///< Optional attribute.
};

/// "urn:zimbraMail":createTaskExceptionResponse is a complexType with complexContent extension of "urn:zimbraMail":createCalendarItemResponse.
class ns5__createTaskExceptionResponse : public ns5__createCalendarItemResponse
{ public:
/*  INHERITED FROM ns5__createCalendarItemResponse:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              0;	///< Optional element.
/// Element echo of type "urn:zimbraMail":calEcho.
    ns5__calEcho*                        echo                           0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":createTaskResponse is a complexType with complexContent extension of "urn:zimbraMail":createCalendarItemResponse.
class ns5__createTaskResponse : public ns5__createCalendarItemResponse
{ public:
/*  INHERITED FROM ns5__createCalendarItemResponse:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              0;	///< Optional element.
/// Element echo of type "urn:zimbraMail":calEcho.
    ns5__calEcho*                        echo                           0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":dataSourceNameOrId is an abstract complexType with complexContent extension of "urn:zimbraMail":nameOrId.
class ns5__dataSourceNameOrId : public ns5__nameOrId
{ public:
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":dispositionAndText is a complexType with simpleContent.
class ns5__dispositionAndText
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute disp of type xs:string.
   @std::string*                         disp                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":dismissAppointmentAlarm is a complexType with complexContent extension of "urn:zimbraMail":dismissAlarm.
class ns5__dismissAppointmentAlarm : public ns5__dismissAlarm
{ public:
/*  INHERITED FROM ns5__dismissAlarm:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute dismissedAt of type xs:long.
   @LONG64                               dismissedAt                    1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":dismissTaskAlarm is a complexType with complexContent extension of "urn:zimbraMail":dismissAlarm.
class ns5__dismissTaskAlarm : public ns5__dismissAlarm
{ public:
/*  INHERITED FROM ns5__dismissAlarm:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute dismissedAt of type xs:long.
   @LONG64                               dismissedAt                    1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":updatedAppointmentAlarmInfo is a complexType with complexContent extension of "urn:zimbraMail":updatedAlarmInfo.
class ns5__updatedAppointmentAlarmInfo : public ns5__updatedAlarmInfo
{ public:
/*  INHERITED FROM ns5__updatedAlarmInfo:
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string                          calItemId                      1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":updatedTaskAlarmInfo is a complexType with complexContent extension of "urn:zimbraMail":updatedAlarmInfo.
class ns5__updatedTaskAlarmInfo : public ns5__updatedAlarmInfo
{ public:
/*  INHERITED FROM ns5__updatedAlarmInfo:
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string                          calItemId                      1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":documentActionSelector is a complexType with complexContent extension of "urn:zimbraMail":actionSelector.
class ns5__documentActionSelector : public ns5__actionSelector
{ public:
/*  INHERITED FROM ns5__actionSelector:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute tcon of type xs:string.
   @std::string*                         tcon                           0;	///< Optional attribute.
/// Attribute tag of type xs:int.
   @int*                                 tag                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
    END OF INHERITED */
/// Element grant of type "urn:zimbraMail":documentActionGrant.
    ns5__documentActionGrant*            grant                          0;	///< Optional element.
/// Attribute zid of type xs:string.
   @std::string*                         zid                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":getAppointmentRequest is a complexType with complexContent extension of "urn:zimbraMail":getCalendarItemRequestBase.
class ns5__getAppointmentRequest : public ns5__getCalendarItemRequestBase
{ public:
/*  INHERITED FROM ns5__getCalendarItemRequestBase:
/// Attribute sync of type xs:boolean.
   @bool*                                sync                           0;	///< Optional attribute.
/// Attribute includeContent of type xs:boolean.
   @bool*                                includeContent                 0;	///< Optional attribute.
/// Attribute includeInvites of type xs:boolean.
   @bool*                                includeInvites                 0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":taskItemInfo is a complexType with complexContent extension of "urn:zimbraMail":calendarItemInfo.
class ns5__taskItemInfo : public ns5__calendarItemInfo
{ public:
/*  INHERITED FROM ns5__calendarItemInfo:
/// Vector of ns5__invitation* with length 0..unbounded
    std::vector<ns5__invitation*       > inv                            0;
    class _ns5__taskItemInfo_replies
    {
/// Vector of ns5__calendarReply* with length 0..unbounded
    std::vector<ns5__calendarReply*    > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute nextAlarm of type xs:long.
   @LONG64*                              nextAlarm                      0;	///< Optional attribute.
/// Attribute orphan of type xs:boolean.
   @bool*                                orphan                         0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":instanceDataAttrs is a complexType with complexContent extension of "urn:zimbraMail":commonInstanceDataAttrs.
class ns5__instanceDataAttrs : public ns5__commonInstanceDataAttrs
{ public:
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":legacyInstanceDataAttrs is a complexType with complexContent extension of "urn:zimbraMail":commonInstanceDataAttrs.
class ns5__legacyInstanceDataAttrs : public ns5__commonInstanceDataAttrs
{ public:
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
};

/// "urn:zimbraMail":messageInfo is a complexType with complexContent extension of "urn:zimbraMail":messageCommon.
class ns5__messageInfo : public ns5__messageCommon
{ public:
/*  INHERITED FROM ns5__messageCommon:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element mid of type xs:string.
    std::string*                         mid                            0;	///< Optional element.
/// Element irt of type xs:string.
    std::string*                         irt                            0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":inviteInfo.
    ns5__inviteInfo*                     inv                            0;	///< Optional element.
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > header                         0;
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_messageInfo             0;
    class __ns5__union_messageInfo
    {
   $int                                  __union_messageInfo            0;	///< Union _ns5__union_messageInfo selector: set to SOAP_UNION__ns5__union_messageInfo_<fieldname> or 0
    union _ns5__union_messageInfo
    {
/// Element mp of type "urn:zimbraMail":partInfo.
    ns5__partInfo*                       mp                             1;	///< Required element.
/// Element shr of type "urn:zimbraMail":shareNotification.
    ns5__shareNotification*              shr                            1;	///< Required element.
/// Element dlSubs of type "urn:zimbraMail":dlSubscriptionNotification.
    ns5__dlSubscriptionNotification*     dlSubs                         1;	///< Required element.
    }                                    union_messageInfo             ;
    }                                   *__union_messageInfo           ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute cif of type xs:string.
   @std::string*                         cif                            0;	///< Optional attribute.
/// Attribute origid of type xs:string.
   @std::string*                         origid                         0;	///< Optional attribute.
/// Attribute rt of type xs:string.
   @std::string*                         rt                             0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// Attribute forAcct of type xs:string.
   @std::string*                         forAcct                        0;	///< Optional attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
/// Attribute sd of type xs:long.
   @LONG64*                              sd                             0;	///< Optional attribute.
/// Attribute rd of type xs:long.
   @LONG64*                              rd                             0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
};

/// "urn:zimbraMail":addressBookTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__addressBookTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute header of type xs:string.
   @std::string                          header                         1;	///< Required attribute.
};

/// "urn:zimbraMail":addressTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__addressTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute header of type xs:string.
   @std::string                          header                         1;	///< Required attribute.
/// Attribute part of type xs:string.
   @std::string                          part                           1;	///< Required attribute.
/// Attribute stringComparison of type xs:string.
   @std::string                          stringComparison               1;	///< Required attribute.
/// Attribute caseSensitive of type xs:boolean.
   @bool*                                caseSensitive                  0;	///< Optional attribute.
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
};

/// "urn:zimbraMail":attachmentTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__attachmentTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":bodyTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__bodyTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute value of type xs:string.
   @std::string*                         value                          0;	///< Optional attribute.
/// Attribute caseSensitive of type xs:boolean.
   @bool*                                caseSensitive                  0;	///< Optional attribute.
};

/// "urn:zimbraMail":bulkTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__bulkTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":contactRankingTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__contactRankingTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute header of type xs:string.
   @std::string                          header                         1;	///< Required attribute.
};

/// "urn:zimbraMail":conversationTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__conversationTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute where of type xs:string.
   @std::string*                         where                          0;	///< Optional attribute.
};

/// "urn:zimbraMail":currentDayOfWeekTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__currentDayOfWeekTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute value of type xs:string.
   @std::string*                         value                          0;	///< Optional attribute.
};

/// "urn:zimbraMail":currentTimeTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__currentTimeTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute dateComparison of type xs:string.
   @std::string*                         dateComparison                 0;	///< Optional attribute.
/// Attribute time of type xs:string.
   @std::string*                         time                           0;	///< Optional attribute.
};

/// "urn:zimbraMail":dateTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__dateTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute dateComparison of type xs:string.
   @std::string*                         dateComparison                 0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
};

/// "urn:zimbraMail":facebookTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__facebookTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":flaggedTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__flaggedTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute flagName of type xs:string.
   @std::string                          flagName                       1;	///< Required attribute.
};

/// "urn:zimbraMail":headerExistsTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__headerExistsTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute header of type xs:string.
   @std::string                          header                         1;	///< Required attribute.
};

/// "urn:zimbraMail":headerTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__headerTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute header of type xs:string.
   @std::string*                         header                         0;	///< Optional attribute.
/// Attribute stringComparison of type xs:string.
   @std::string*                         stringComparison               0;	///< Optional attribute.
/// Attribute value of type xs:string.
   @std::string*                         value                          0;	///< Optional attribute.
/// Attribute caseSensitive of type xs:boolean.
   @bool*                                caseSensitive                  0;	///< Optional attribute.
};

/// "urn:zimbraMail":importanceTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__importanceTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute imp of type "urn:zimbraMail":importance.
   @enum ns5__importance                 imp                            1;	///< Required attribute.
};

/// "urn:zimbraMail":inviteTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__inviteTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > method                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
};

/// "urn:zimbraMail":linkedInTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__linkedInTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":listTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__listTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":meTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__meTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute header of type xs:string.
   @std::string                          header                         1;	///< Required attribute.
};

/// "urn:zimbraMail":mimeHeaderTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__mimeHeaderTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute header of type xs:string.
   @std::string*                         header                         0;	///< Optional attribute.
/// Attribute stringComparison of type xs:string.
   @std::string*                         stringComparison               0;	///< Optional attribute.
/// Attribute value of type xs:string.
   @std::string*                         value                          0;	///< Optional attribute.
/// Attribute caseSensitive of type xs:boolean.
   @bool*                                caseSensitive                  0;	///< Optional attribute.
};

/// "urn:zimbraMail":sizeTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__sizeTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute numberComparison of type xs:string.
   @std::string*                         numberComparison               0;	///< Optional attribute.
/// Attribute s of type xs:string.
   @std::string*                         s                              0;	///< Optional attribute.
};

/// "urn:zimbraMail":socialcastTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__socialcastTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":trueTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__trueTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":twitterTest is a complexType with complexContent extension of "urn:zimbraMail":filterTest.
class ns5__twitterTest : public ns5__filterTest
{ public:
/*  INHERITED FROM ns5__filterTest:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
/// Attribute negative of type xs:boolean.
   @bool*                                negative                       0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":keepAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__keepAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":discardAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__discardAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":fileIntoAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__fileIntoAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
/// Attribute folderPath of type xs:string.
   @std::string*                         folderPath                     0;	///< Optional attribute.
};

/// "urn:zimbraMail":flagAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__flagAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
/// Attribute flagName of type xs:string.
   @std::string*                         flagName                       0;	///< Optional attribute.
};

/// "urn:zimbraMail":tagAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__tagAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
/// Attribute tagName of type xs:string.
   @std::string                          tagName                        1;	///< Required attribute.
};

/// "urn:zimbraMail":redirectAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__redirectAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
/// Attribute a of type xs:string.
   @std::string*                         a                              0;	///< Optional attribute.
};

/// "urn:zimbraMail":replyAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__replyAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
};

/// "urn:zimbraMail":notifyAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__notifyAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Attribute a of type xs:string.
   @std::string*                         a                              0;	///< Optional attribute.
/// Attribute su of type xs:string.
   @std::string*                         su                             0;	///< Optional attribute.
/// Attribute maxBodySize of type xs:int.
   @int*                                 maxBodySize                    0;	///< Optional attribute.
/// Attribute origHeaders of type xs:string.
   @std::string*                         origHeaders                    0;	///< Optional attribute.
};

/// "urn:zimbraMail":stopAction is a complexType with complexContent extension of "urn:zimbraMail":filterAction.
class ns5__stopAction : public ns5__filterAction
{ public:
/*  INHERITED FROM ns5__filterAction:
/// Attribute index of type xs:int.
   @int                                  index                          1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":freeBusyFREEslot is a complexType with complexContent extension of "urn:zimbraMail":freeBusySlot.
class ns5__freeBusyFREEslot : public ns5__freeBusySlot
{ public:
/*  INHERITED FROM ns5__freeBusySlot:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":freeBusyBUSYslot is a complexType with complexContent extension of "urn:zimbraMail":freeBusySlot.
class ns5__freeBusyBUSYslot : public ns5__freeBusySlot
{ public:
/*  INHERITED FROM ns5__freeBusySlot:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":freeBusyBUSYTENTATIVEslot is a complexType with complexContent extension of "urn:zimbraMail":freeBusySlot.
class ns5__freeBusyBUSYTENTATIVEslot : public ns5__freeBusySlot
{ public:
/*  INHERITED FROM ns5__freeBusySlot:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":freeBusyBUSYUNAVAILABLEslot is a complexType with complexContent extension of "urn:zimbraMail":freeBusySlot.
class ns5__freeBusyBUSYUNAVAILABLEslot : public ns5__freeBusySlot
{ public:
/*  INHERITED FROM ns5__freeBusySlot:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":freeBusyNODATAslot is a complexType with complexContent extension of "urn:zimbraMail":freeBusySlot.
class ns5__freeBusyNODATAslot : public ns5__freeBusySlot
{ public:
/*  INHERITED FROM ns5__freeBusySlot:
/// Attribute s of type xs:long.
   @LONG64                               s                              1;	///< Required attribute.
/// Attribute e of type xs:long.
   @LONG64                               e                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":iCalContent is a complexType with simpleContent.
class ns5__iCalContent
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":imapImportStatusInfo is a complexType with complexContent extension of "urn:zimbraMail":importStatusInfo.
class ns5__imapImportStatusInfo : public ns5__importStatusInfo
{ public:
/*  INHERITED FROM ns5__importStatusInfo:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":pop3ImportStatusInfo is a complexType with complexContent extension of "urn:zimbraMail":importStatusInfo.
class ns5__pop3ImportStatusInfo : public ns5__importStatusInfo
{ public:
/*  INHERITED FROM ns5__importStatusInfo:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":caldavImportStatusInfo is a complexType with complexContent extension of "urn:zimbraMail":importStatusInfo.
class ns5__caldavImportStatusInfo : public ns5__importStatusInfo
{ public:
/*  INHERITED FROM ns5__importStatusInfo:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":yabImportStatusInfo is a complexType with complexContent extension of "urn:zimbraMail":importStatusInfo.
class ns5__yabImportStatusInfo : public ns5__importStatusInfo
{ public:
/*  INHERITED FROM ns5__importStatusInfo:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":rssImportStatusInfo is a complexType with complexContent extension of "urn:zimbraMail":importStatusInfo.
class ns5__rssImportStatusInfo : public ns5__importStatusInfo
{ public:
/*  INHERITED FROM ns5__importStatusInfo:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":galImportStatusInfo is a complexType with complexContent extension of "urn:zimbraMail":importStatusInfo.
class ns5__galImportStatusInfo : public ns5__importStatusInfo
{ public:
/*  INHERITED FROM ns5__importStatusInfo:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":calImportStatusInfo is a complexType with complexContent extension of "urn:zimbraMail":importStatusInfo.
class ns5__calImportStatusInfo : public ns5__importStatusInfo
{ public:
/*  INHERITED FROM ns5__importStatusInfo:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":unknownImportStatusInfo is a complexType with complexContent extension of "urn:zimbraMail":importStatusInfo.
class ns5__unknownImportStatusInfo : public ns5__importStatusInfo
{ public:
/*  INHERITED FROM ns5__importStatusInfo:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute isRunning of type xs:boolean.
   @bool*                                isRunning                      0;	///< Optional attribute.
/// Attribute success of type xs:boolean.
   @bool*                                success                        0;	///< Optional attribute.
/// Attribute error of type xs:string.
   @std::string*                         error                          0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":documentInfo is a complexType with complexContent extension of "urn:zimbraMail":commonDocumentInfo.
class ns5__documentInfo : public ns5__commonDocumentInfo
{ public:
/*  INHERITED FROM ns5__commonDocumentInfo:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element acl of type "urn:zimbraMail":acl.
    ns5__acl*                            acl                            0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute uuid of type xs:string.
   @std::string*                         uuid                           0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute luuid of type xs:string.
   @std::string*                         luuid                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute mdver of type xs:int.
   @int*                                 mdver                          0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute desc of type xs:string.
   @std::string*                         desc                           0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute descEnabled of type xs:boolean.
   @bool*                                descEnabled                    0;	///< Optional attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
/// Attribute leb of type xs:string.
   @std::string*                         leb                            0;	///< Optional attribute.
/// Attribute cr of type xs:string.
   @std::string*                         cr                             0;	///< Optional attribute.
/// Attribute cd of type xs:long.
   @LONG64*                              cd                             0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute loid of type xs:string.
   @std::string*                         loid                           0;	///< Optional attribute.
/// Attribute loe of type xs:string.
   @std::string*                         loe                            0;	///< Optional attribute.
/// Attribute lt of type xs:string.
   @std::string*                         lt                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":miniCalError is a complexType with simpleContent.
class ns5__miniCalError
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute code of type xs:string.
   @std::string                          code                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":msgWithGroupInfo is a complexType with complexContent extension of "urn:zimbraMail":messageCommon.
class ns5__msgWithGroupInfo : public ns5__messageCommon
{ public:
/*  INHERITED FROM ns5__messageCommon:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element mid of type xs:string.
    std::string*                         mid                            0;	///< Optional element.
/// Element irt of type xs:string.
    std::string*                         irt                            0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":inviteWithGroupInfo.
    ns5__inviteWithGroupInfo*            inv                            0;	///< Optional element.
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > header                         0;
/// Element content of type "urn:zimbra":urlAndValue.
    ns3__urlAndValue*                    content                        0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_msgWithGroupInfo        0;
    class __ns5__union_msgWithGroupInfo
    {
   $int                                  __union_msgWithGroupInfo       0;	///< Union _ns5__union_msgWithGroupInfo selector: set to SOAP_UNION__ns5__union_msgWithGroupInfo_<fieldname> or 0
    union _ns5__union_msgWithGroupInfo
    {
/// Element mp of type "urn:zimbraMail":partInfo.
    ns5__partInfo*                       mp                             1;	///< Required element.
/// Element shr of type "urn:zimbraMail":shareNotification.
    ns5__shareNotification*              shr                            1;	///< Required element.
/// Element dlSubs of type "urn:zimbraMail":dlSubscriptionNotification.
    ns5__dlSubscriptionNotification*     dlSubs                         1;	///< Required element.
    }                                    union_msgWithGroupInfo        ;
    }                                   *__union_msgWithGroupInfo      ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute cif of type xs:string.
   @std::string*                         cif                            0;	///< Optional attribute.
/// Attribute origid of type xs:string.
   @std::string*                         origid                         0;	///< Optional attribute.
/// Attribute rt of type xs:string.
   @std::string*                         rt                             0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// Attribute forAcct of type xs:string.
   @std::string*                         forAcct                        0;	///< Optional attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
/// Attribute sd of type xs:long.
   @LONG64*                              sd                             0;	///< Optional attribute.
/// Attribute rd of type xs:long.
   @LONG64*                              rd                             0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
};

/// "urn:zimbraMail":inviteComponentWithGroupInfo is a complexType with complexContent extension of "urn:zimbraMail":inviteComponentCommon.
class ns5__inviteComponentWithGroupInfo : public ns5__inviteComponentCommon
{ public:
/*  INHERITED FROM ns5__inviteComponentCommon:
/// Attribute method of type xs:string.
   @std::string                          method                         1;	///< Required attribute.
/// Attribute compNum of type xs:int.
   @int                                  compNum                        1;	///< Required attribute.
/// Attribute rsvp of type xs:boolean.
   @bool                                 rsvp                           1;	///< Required attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute completed of type xs:string.
   @std::string*                         completed                      0;	///< Optional attribute.
/// Attribute noBlob of type xs:boolean.
   @bool*                                noBlob                         0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute x_uid of type xs:string.
   @std::string*                         x_USCOREuid                    0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute seq of type xs:int.
   @int*                                 seq                            0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute ciFolder of type xs:string.
   @std::string*                         ciFolder                       0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute ex of type xs:boolean.
   @bool*                                ex                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute changes of type xs:string.
   @std::string*                         changes                        0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > comment                        0;
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > contact                        0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Vector of ns5__calendarAttendeeWithGroupInfo* with length 0..unbounded
    std::vector<ns5__calendarAttendeeWithGroupInfo*> at                             0;
/// Vector of ns5__alarmInfo* with length 0..unbounded
    std::vector<ns5__alarmInfo*        > alarm                          0;
/// Vector of ns5__xProp* with length 0..unbounded
    std::vector<ns5__xProp*            > xprop                          0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element desc of type xs:string.
    std::string*                         desc                           0;	///< Optional element.
/// Element descHtml of type xs:string.
    std::string*                         descHtml                       0;	///< Optional element.
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
/// Element exceptId of type "urn:zimbraMail":exceptionRecurIdInfo.
    ns5__exceptionRecurIdInfo*           exceptId                       0;	///< Optional element.
/// Element s of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     s                              0;	///< Optional element.
/// Element e of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     e                              0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
};

/// "urn:zimbraMail":calendarAttendeeWithGroupInfo is a complexType with complexContent extension of "urn:zimbraMail":calendarAttendee.
class ns5__calendarAttendeeWithGroupInfo : public ns5__calendarAttendee
{ public:
/*  INHERITED FROM ns5__calendarAttendee:
/// Vector of ns5__xParam* with length 0..unbounded
    std::vector<ns5__xParam*           > xparam                         0;
/// Attribute a of type xs:string.
   @std::string*                         a                              0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute d of type xs:string.
   @std::string*                         d                              0;	///< Optional attribute.
/// Attribute sentBy of type xs:string.
   @std::string*                         sentBy                         0;	///< Optional attribute.
/// Attribute dir of type xs:string.
   @std::string*                         dir                            0;	///< Optional attribute.
/// Attribute lang of type xs:string.
   @std::string*                         lang                           0;	///< Optional attribute.
/// Attribute cutype of type xs:string.
   @std::string*                         cutype                         0;	///< Optional attribute.
/// Attribute role of type xs:string.
   @std::string*                         role                           0;	///< Optional attribute.
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute rsvp of type xs:boolean.
   @bool*                                rsvp                           0;	///< Optional attribute.
/// Attribute member of type xs:string.
   @std::string*                         member                         0;	///< Optional attribute.
/// Attribute delTo of type xs:string.
   @std::string*                         delTo                          0;	///< Optional attribute.
/// Attribute delFrom of type xs:string.
   @std::string*                         delFrom                        0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute isGroup of type xs:boolean.
   @bool*                                isGroup                        0;	///< Optional attribute.
/// Attribute exp of type xs:boolean.
   @bool*                                exp                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":cancelItemRecur is a complexType with complexContent extension of "urn:zimbraMail":calendarItemRecur.
class ns5__cancelItemRecur : public ns5__calendarItemRecur
{ public:
/*  INHERITED FROM ns5__calendarItemRecur:
/// Element exceptId of type "urn:zimbraMail":exceptionRecurIdInfo.
    ns5__exceptionRecurIdInfo*           exceptId                       0;	///< Optional element.
/// Element s of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     s                              0;	///< Optional element.
/// Element e of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     e                              0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
    END OF INHERITED */
};

/// "urn:zimbraMail":exceptionItemRecur is a complexType with complexContent extension of "urn:zimbraMail":calendarItemRecur.
class ns5__exceptionItemRecur : public ns5__calendarItemRecur
{ public:
/*  INHERITED FROM ns5__calendarItemRecur:
/// Element exceptId of type "urn:zimbraMail":exceptionRecurIdInfo.
    ns5__exceptionRecurIdInfo*           exceptId                       0;	///< Optional element.
/// Element s of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     s                              0;	///< Optional element.
/// Element e of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     e                              0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
    END OF INHERITED */
};

/// "urn:zimbraMail":inviteItemRecur is a complexType with complexContent extension of "urn:zimbraMail":calendarItemRecur.
class ns5__inviteItemRecur : public ns5__calendarItemRecur
{ public:
/*  INHERITED FROM ns5__calendarItemRecur:
/// Element exceptId of type "urn:zimbraMail":exceptionRecurIdInfo.
    ns5__exceptionRecurIdInfo*           exceptId                       0;	///< Optional element.
/// Element s of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     s                              0;	///< Optional element.
/// Element e of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     e                              0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
    END OF INHERITED */
};

/// "urn:zimbraMail":getTaskRequest is a complexType with complexContent extension of "urn:zimbraMail":getCalendarItemRequestBase.
class ns5__getTaskRequest : public ns5__getCalendarItemRequestBase
{ public:
/*  INHERITED FROM ns5__getCalendarItemRequestBase:
/// Attribute sync of type xs:boolean.
   @bool*                                sync                           0;	///< Optional attribute.
/// Attribute includeContent of type xs:boolean.
   @bool*                                includeContent                 0;	///< Optional attribute.
/// Attribute includeInvites of type xs:boolean.
   @bool*                                includeInvites                 0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":contentSpec is a complexType with simpleContent.
class ns5__contentSpec
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// Attribute mid of type xs:string.
   @std::string*                         mid                            0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":content is a complexType with simpleContent.
class ns5__content
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":modifyAppointmentRequest is a complexType with complexContent extension of "urn:zimbraMail":calItemRequestBase.
class ns5__modifyAppointmentRequest : public ns5__calItemRequestBase
{ public:
/*  INHERITED FROM ns5__calItemRequestBase:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute echo of type xs:boolean.
   @bool*                                echo                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute forcesend of type xs:boolean.
   @bool*                                forcesend                      0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute comp of type xs:int.
   @int*                                 comp                           0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":modifyAppointmentResponse is a complexType with complexContent extension of "urn:zimbraMail":createCalendarItemResponse.
class ns5__modifyAppointmentResponse : public ns5__createCalendarItemResponse
{ public:
/*  INHERITED FROM ns5__createCalendarItemResponse:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              0;	///< Optional element.
/// Element echo of type "urn:zimbraMail":calEcho.
    ns5__calEcho*                        echo                           0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":modifyContactAttr is a complexType with simpleContent.
class ns5__modifyContactAttr
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute n of type xs:string.
   @std::string                          n                              1;	///< Required attribute.
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// Attribute id of type xs:int.
   @int*                                 id                             0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string*                         op                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraMail":saveDraftMsg is a complexType with complexContent extension of "urn:zimbraMail":msg.
class ns5__saveDraftMsg : public ns5__msg
{ public:
/*  INHERITED FROM ns5__msg:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Vector of ns5__header* with length 0..unbounded
    std::vector<ns5__header*           > header                         0;
/// Element mp of type "urn:zimbraMail":mimePartInfo.
    ns5__mimePartInfo*                   mp                             0;	///< Optional element.
/// Element attach of type "urn:zimbraMail":attachmentsInfo.
    ns5__attachmentsInfo*                attach                         0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":invitationInfo.
    ns5__invitationInfo*                 inv                            0;	///< Optional element.
/// Vector of ns5__emailAddrInfo* with length 0..unbounded
    std::vector<ns5__emailAddrInfo*    > e                              0;
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// Attribute origid of type xs:string.
   @std::string*                         origid                         0;	///< Optional attribute.
/// Attribute rt of type xs:string.
   @std::string*                         rt                             0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// Attribute su of type xs:string.
   @std::string*                         su                             0;	///< Optional attribute.
/// Attribute irt of type xs:string.
   @std::string*                         irt                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute id of type xs:int.
   @int*                                 id                             0;	///< Optional attribute.
/// Attribute forAcct of type xs:string.
   @std::string*                         forAcct                        0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
};

/// "urn:zimbraMail":searchConvRequest is a complexType with complexContent extension of "urn:zimbraMail":mailSearchParams.
class ns5__searchConvRequest : public ns5__mailSearchParams
{ public:
/*  INHERITED FROM ns5__mailSearchParams:
/// Element query of type xs:string.
    std::string*                         query                          0;	///< Optional element.
/// Vector of ns3__attributeName* with length 0..unbounded
    std::vector<ns3__attributeName*    > header                         0;
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Element locale of type xs:string.
    std::string*                         locale                         0;	///< Optional element.
/// Element cursor of type "urn:zimbra":cursorInfo.
    ns3__cursorInfo*                     cursor                         0;	///< Optional element.
/// Attribute includeTagDeleted of type xs:boolean.
   @bool*                                includeTagDeleted              0;	///< Optional attribute.
/// Attribute includeTagMuted of type xs:boolean.
   @bool*                                includeTagMuted                0;	///< Optional attribute.
/// Attribute allowableTaskStatus of type xs:string.
   @std::string*                         allowableTaskStatus            0;	///< Optional attribute.
/// Attribute calExpandInstStart of type xs:long.
   @LONG64*                              calExpandInstStart             0;	///< Optional attribute.
/// Attribute calExpandInstEnd of type xs:long.
   @LONG64*                              calExpandInstEnd               0;	///< Optional attribute.
/// Attribute inDumpster of type xs:boolean.
   @bool*                                inDumpster                     0;	///< Optional attribute.
/// Attribute types of type xs:string.
   @std::string*                         types                          0;	///< Optional attribute.
/// Attribute groupBy of type xs:string.
   @std::string*                         groupBy                        0;	///< Optional attribute.
/// Attribute quick of type xs:boolean.
   @bool*                                quick                          0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute fetch of type xs:string.
   @std::string*                         fetch                          0;	///< Optional attribute.
/// Attribute read of type xs:boolean.
   @bool*                                read                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute needExp of type xs:boolean.
   @bool*                                needExp                        0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute recip of type xs:boolean.
   @bool*                                recip                          0;	///< Optional attribute.
/// Attribute prefetch of type xs:boolean.
   @bool*                                prefetch                       0;	///< Optional attribute.
/// Attribute resultMode of type xs:string.
   @std::string*                         resultMode                     0;	///< Optional attribute.
/// Attribute field of type xs:string.
   @std::string*                         field                          0;	///< Optional attribute.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute cid of type xs:string.
   @std::string                          cid                            1;	///< Required attribute.
/// Attribute nest of type xs:boolean.
   @bool*                                nest                           0;	///< Optional attribute.
};

/// "urn:zimbraMail":searchRequest is a complexType with complexContent extension of "urn:zimbraMail":mailSearchParams.
class ns5__searchRequest : public ns5__mailSearchParams
{ public:
/*  INHERITED FROM ns5__mailSearchParams:
/// Element query of type xs:string.
    std::string*                         query                          0;	///< Optional element.
/// Vector of ns3__attributeName* with length 0..unbounded
    std::vector<ns3__attributeName*    > header                         0;
/// Element tz of type "urn:zimbraMail":calTZInfo.
    ns5__calTZInfo*                      tz                             0;	///< Optional element.
/// Element locale of type xs:string.
    std::string*                         locale                         0;	///< Optional element.
/// Element cursor of type "urn:zimbra":cursorInfo.
    ns3__cursorInfo*                     cursor                         0;	///< Optional element.
/// Attribute includeTagDeleted of type xs:boolean.
   @bool*                                includeTagDeleted              0;	///< Optional attribute.
/// Attribute includeTagMuted of type xs:boolean.
   @bool*                                includeTagMuted                0;	///< Optional attribute.
/// Attribute allowableTaskStatus of type xs:string.
   @std::string*                         allowableTaskStatus            0;	///< Optional attribute.
/// Attribute calExpandInstStart of type xs:long.
   @LONG64*                              calExpandInstStart             0;	///< Optional attribute.
/// Attribute calExpandInstEnd of type xs:long.
   @LONG64*                              calExpandInstEnd               0;	///< Optional attribute.
/// Attribute inDumpster of type xs:boolean.
   @bool*                                inDumpster                     0;	///< Optional attribute.
/// Attribute types of type xs:string.
   @std::string*                         types                          0;	///< Optional attribute.
/// Attribute groupBy of type xs:string.
   @std::string*                         groupBy                        0;	///< Optional attribute.
/// Attribute quick of type xs:boolean.
   @bool*                                quick                          0;	///< Optional attribute.
/// Attribute sortBy of type xs:string.
   @std::string*                         sortBy                         0;	///< Optional attribute.
/// Attribute fetch of type xs:string.
   @std::string*                         fetch                          0;	///< Optional attribute.
/// Attribute read of type xs:boolean.
   @bool*                                read                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute needExp of type xs:boolean.
   @bool*                                needExp                        0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute recip of type xs:boolean.
   @bool*                                recip                          0;	///< Optional attribute.
/// Attribute prefetch of type xs:boolean.
   @bool*                                prefetch                       0;	///< Optional attribute.
/// Attribute resultMode of type xs:string.
   @std::string*                         resultMode                     0;	///< Optional attribute.
/// Attribute field of type xs:string.
   @std::string*                         field                          0;	///< Optional attribute.
/// Attribute limit of type xs:int.
   @int*                                 limit                          0;	///< Optional attribute.
/// Attribute offset of type xs:int.
   @int*                                 offset                         0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute warmup of type xs:boolean.
   @bool*                                warmup                         0;	///< Optional attribute.
};

/// "urn:zimbraMail":conversationHitInfo is a complexType with complexContent extension of "urn:zimbraMail":conversationSummary.
class ns5__conversationHitInfo : public ns5__conversationSummary
{ public:
/*  INHERITED FROM ns5__conversationSummary:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute n of type xs:int.
   @int*                                 n                              0;	///< Optional attribute.
/// Attribute total of type xs:int.
   @int*                                 total                          0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute elided of type xs:boolean.
   @bool*                                elided                         0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of ns5__conversationMsgHitInfo* with length 0..unbounded
    std::vector<ns5__conversationMsgHitInfo*> m                              0;
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":noteHitInfo is a complexType with complexContent extension of "urn:zimbraMail":noteInfo.
class ns5__noteHitInfo : public ns5__noteInfo
{ public:
/*  INHERITED FROM ns5__noteInfo:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute pos of type xs:string.
   @std::string*                         pos                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":wikiHitInfo is a complexType with complexContent extension of "urn:zimbraMail":commonDocumentInfo.
class ns5__wikiHitInfo : public ns5__commonDocumentInfo
{ public:
/*  INHERITED FROM ns5__commonDocumentInfo:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element acl of type "urn:zimbraMail":acl.
    ns5__acl*                            acl                            0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute uuid of type xs:string.
   @std::string*                         uuid                           0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute luuid of type xs:string.
   @std::string*                         luuid                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute mdver of type xs:int.
   @int*                                 mdver                          0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute desc of type xs:string.
   @std::string*                         desc                           0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute descEnabled of type xs:boolean.
   @bool*                                descEnabled                    0;	///< Optional attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
/// Attribute leb of type xs:string.
   @std::string*                         leb                            0;	///< Optional attribute.
/// Attribute cr of type xs:string.
   @std::string*                         cr                             0;	///< Optional attribute.
/// Attribute cd of type xs:long.
   @LONG64*                              cd                             0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":calReply is a complexType with complexContent extension of "urn:zimbraMail":recurIdInfo.
class ns5__calReply : public ns5__recurIdInfo
{ public:
/*  INHERITED FROM ns5__recurIdInfo:
/// Attribute rangeType of type xs:int.
   @int                                  rangeType                      1;	///< Required attribute.
/// Attribute recurId of type xs:string.
   @std::string                          recurId                        1;	///< Required attribute.
/// Attribute tz of type xs:string.
   @std::string*                         tz                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute at of type xs:string.
   @std::string                          at                             1;	///< Required attribute.
/// Attribute sentBy of type xs:string.
   @std::string*                         sentBy                         0;	///< Optional attribute.
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute seq of type xs:int.
   @int                                  seq                            1;	///< Required attribute.
/// Attribute d of type xs:int.
   @int                                  d                              1;	///< Required attribute.
};

/// "urn:zimbraMail":sendInviteReplyResponse is a complexType with complexContent extension of "urn:zimbraMail":createCalendarItemResponse.
class ns5__sendInviteReplyResponse : public ns5__createCalendarItemResponse
{ public:
/*  INHERITED FROM ns5__createCalendarItemResponse:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              0;	///< Optional element.
/// Element echo of type "urn:zimbraMail":calEcho.
    ns5__calEcho*                        echo                           0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":msgToSend is a complexType with complexContent extension of "urn:zimbraMail":msg.
class ns5__msgToSend : public ns5__msg
{ public:
/*  INHERITED FROM ns5__msg:
/// Element content of type xs:string.
    std::string*                         content                        0;	///< Optional element.
/// Vector of ns5__header* with length 0..unbounded
    std::vector<ns5__header*           > header                         0;
/// Element mp of type "urn:zimbraMail":mimePartInfo.
    ns5__mimePartInfo*                   mp                             0;	///< Optional element.
/// Element attach of type "urn:zimbraMail":attachmentsInfo.
    ns5__attachmentsInfo*                attach                         0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":invitationInfo.
    ns5__invitationInfo*                 inv                            0;	///< Optional element.
/// Vector of ns5__emailAddrInfo* with length 0..unbounded
    std::vector<ns5__emailAddrInfo*    > e                              0;
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Attribute aid of type xs:string.
   @std::string*                         aid                            0;	///< Optional attribute.
/// Attribute origid of type xs:string.
   @std::string*                         origid                         0;	///< Optional attribute.
/// Attribute rt of type xs:string.
   @std::string*                         rt                             0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// Attribute su of type xs:string.
   @std::string*                         su                             0;	///< Optional attribute.
/// Attribute irt of type xs:string.
   @std::string*                         irt                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute did of type xs:string.
   @std::string*                         did                            0;	///< Optional attribute.
/// Attribute sfd of type xs:boolean.
   @bool*                                sfd                            0;	///< Optional attribute.
};

/// "urn:zimbraMail":setTaskRequest is a complexType with complexContent extension of "urn:zimbraMail":setAppointmentRequest.
class ns5__setTaskRequest : public ns5__setAppointmentRequest
{ public:
/*  INHERITED FROM ns5__setAppointmentRequest:
/// Element default of type "urn:zimbraMail":setCalendarItemInfo.
    ns5__setCalendarItemInfo*            default_                       0;	///< Optional element.
/// Vector of ns5__setCalendarItemInfo* with length 0..unbounded
    std::vector<ns5__setCalendarItemInfo*> except                         0;
/// Vector of ns5__setCalendarItemInfo* with length 0..unbounded
    std::vector<ns5__setCalendarItemInfo*> cancel                         0;
    class _ns5__setTaskRequest_replies
    {
/// Vector of ns5__calReply* with length 0..unbounded
    std::vector<ns5__calReply*         > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute noNextAlarm of type xs:boolean.
   @bool*                                noNextAlarm                    0;	///< Optional attribute.
/// Attribute nextAlarm of type xs:long.
   @LONG64*                              nextAlarm                      0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":setTaskResponse is a complexType with complexContent extension of "urn:zimbraMail":setAppointmentResponse.
class ns5__setTaskResponse : public ns5__setAppointmentResponse
{ public:
/*  INHERITED FROM ns5__setAppointmentResponse:
/// Element default of type "urn:zimbra":id.
    ns3__id*                             default_                       0;	///< Optional element.
/// Vector of ns5__exceptIdInfo* with length 0..unbounded
    std::vector<ns5__exceptIdInfo*     > except                         0;
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":snoozeAppointmentAlarm is a complexType with complexContent extension of "urn:zimbraMail":snoozeAlarm.
class ns5__snoozeAppointmentAlarm : public ns5__snoozeAlarm
{ public:
/*  INHERITED FROM ns5__snoozeAlarm:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute until of type xs:long.
   @LONG64                               until                          1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":snoozeTaskAlarm is a complexType with complexContent extension of "urn:zimbraMail":snoozeAlarm.
class ns5__snoozeTaskAlarm : public ns5__snoozeAlarm
{ public:
/*  INHERITED FROM ns5__snoozeAlarm:
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute until of type xs:long.
   @LONG64                               until                          1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":tagActionSelector is a complexType with complexContent extension of "urn:zimbraMail":actionSelector.
class ns5__tagActionSelector : public ns5__actionSelector
{ public:
/*  INHERITED FROM ns5__actionSelector:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute op of type xs:string.
   @std::string                          op                             1;	///< Required attribute.
/// Attribute tcon of type xs:string.
   @std::string*                         tcon                           0;	///< Optional attribute.
/// Attribute tag of type xs:int.
   @int*                                 tag                            0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute rgb of type xs:string.
   @std::string*                         rgb                            0;	///< Optional attribute.
/// Attribute color of type xs:byte.
   @xsd__byte*                           color                          0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
    END OF INHERITED */
/// Element reference "urn:zimbraMail":retentionPolicy.
    ns5__retentionPolicy*                retentionPolicy                0;	///< Optional element.
};

/// "urn:zimbraVoice":attr is a complexType with simpleContent.
class ns8__attr
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":voiceMailPrefsFeature is a complexType with complexContent extension of "urn:zimbraVoice":callFeatureInfo.
class ns8__voiceMailPrefsFeature : public ns8__callFeatureInfo
{ public:
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
/// Vector of ns8__prefInfo* with length 0..unbounded
    std::vector<ns8__prefInfo*         > pref                           0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
};

/// "urn:zimbraVoice":prefInfo is a complexType with simpleContent.
class ns8__prefInfo
{ public:
/// __item wraps 'xs:string' simpleContent.
    std::string                          __item                        ;
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:zimbraVoice":anonCallRejectionFeature is a complexType with complexContent extension of "urn:zimbraVoice":callFeatureInfo.
class ns8__anonCallRejectionFeature : public ns8__callFeatureInfo
{ public:
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraVoice":callerIdBlockingFeature is a complexType with complexContent extension of "urn:zimbraVoice":callFeatureInfo.
class ns8__callerIdBlockingFeature : public ns8__callFeatureInfo
{ public:
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraVoice":callForwardFeature is a complexType with complexContent extension of "urn:zimbraVoice":callFeatureInfo.
class ns8__callForwardFeature : public ns8__callFeatureInfo
{ public:
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
/// Attribute ft of type xs:string.
   @std::string*                         ft                             0;	///< Optional attribute.
};

/// "urn:zimbraVoice":callForwardBusyLineFeature is a complexType with complexContent extension of "urn:zimbraVoice":callFeatureInfo.
class ns8__callForwardBusyLineFeature : public ns8__callFeatureInfo
{ public:
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
/// Attribute ft of type xs:string.
   @std::string*                         ft                             0;	///< Optional attribute.
};

/// "urn:zimbraVoice":callForwardNoAnswerFeature is a complexType with complexContent extension of "urn:zimbraVoice":callFeatureInfo.
class ns8__callForwardNoAnswerFeature : public ns8__callFeatureInfo
{ public:
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
/// Attribute ft of type xs:string.
   @std::string*                         ft                             0;	///< Optional attribute.
/// Attribute nr of type xs:string.
   @std::string*                         nr                             0;	///< Optional attribute.
};

/// "urn:zimbraVoice":callWaitingFeature is a complexType with complexContent extension of "urn:zimbraVoice":callFeatureInfo.
class ns8__callWaitingFeature : public ns8__callFeatureInfo
{ public:
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraVoice":featureWithCallerList is a complexType with complexContent extension of "urn:zimbraVoice":callFeatureInfo.
class ns8__featureWithCallerList : public ns8__callFeatureInfo
{ public:
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
/// Vector of ns8__callerListEntry* with length 0..unbounded
    std::vector<ns8__callerListEntry*  > phone                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
};

/// "urn:zimbraVoice":rootVoiceFolder is a complexType with complexContent extension of "urn:zimbraVoice":voiceFolder.
class ns8__rootVoiceFolder : public ns8__voiceFolder
{ public:
/*  INHERITED FROM ns8__voiceFolder:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string                          l                              1;	///< Required attribute.
/// Attribute view of type xs:string.
   @std::string*                         view                           0;	///< Optional attribute.
/// Attribute u of type xs:long.
   @LONG64*                              u                              0;	///< Optional attribute.
/// Attribute n of type xs:long.
   @LONG64*                              n                              0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of ns8__voiceFolder* with length 0..unbounded
    std::vector<ns8__voiceFolder*      > folder                         0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
};

/// "urn:zimbraVoice":voiceMailItem is a complexType with complexContent extension of "urn:zimbraVoice":voiceCallItem.
class ns8__voiceMailItem : public ns8__voiceCallItem
{ public:
/*  INHERITED FROM ns8__voiceCallItem:
/// Attribute phone of type xs:string.
   @std::string                          phone                          1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string                          l                              1;	///< Required attribute.
/// Attribute sf of type xs:string.
   @std::string                          sf                             1;	///< Required attribute.
/// Attribute du of type xs:int.
   @int                                  du                             1;	///< Required attribute.
/// Attribute d of type xs:long.
   @LONG64                               d                              1;	///< Required attribute.
    END OF INHERITED */
/// Element cp of type "urn:zimbraVoice":voiceMailCallParty.
    ns8__voiceMailCallParty*             cp                             0;	///< Optional element.
/// Element content of type "urn:zimbraVoice":voiceMailContent.
    ns8__voiceMailContent*               content                        0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
};

/// "urn:zimbraVoice":callLogItem is a complexType with complexContent extension of "urn:zimbraVoice":voiceCallItem.
class ns8__callLogItem : public ns8__voiceCallItem
{ public:
/*  INHERITED FROM ns8__voiceCallItem:
/// Attribute phone of type xs:string.
   @std::string                          phone                          1;	///< Required attribute.
/// Attribute l of type xs:string.
   @std::string                          l                              1;	///< Required attribute.
/// Attribute sf of type xs:string.
   @std::string                          sf                             1;	///< Required attribute.
/// Attribute du of type xs:int.
   @int                                  du                             1;	///< Required attribute.
/// Attribute d of type xs:long.
   @LONG64                               d                              1;	///< Required attribute.
    END OF INHERITED */
/// Vector of ns8__callLogCallParty* with length 0..unbounded
    std::vector<ns8__callLogCallParty* > cp                             0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
};

/// "urn:zimbraVoice":callLogCallParty is a complexType with complexContent extension of "urn:zimbraVoice":voiceMailCallParty.
class ns8__callLogCallParty : public ns8__voiceMailCallParty
{ public:
/*  INHERITED FROM ns8__voiceMailCallParty:
/// Attribute t of type xs:string.
   @std::string                          t                              1;	///< Required attribute.
/// Attribute p of type xs:string.
   @std::string                          p                              1;	///< Required attribute.
/// Attribute n of type xs:string.
   @std::string                          n                              1;	///< Required attribute.
    END OF INHERITED */
/// Attribute ci of type xs:string.
   @std::string                          ci                             1;	///< Required attribute.
/// Attribute st of type xs:string.
   @std::string                          st                             1;	///< Required attribute.
/// Attribute co of type xs:string.
   @std::string                          co                             1;	///< Required attribute.
};

/// "urn:zimbra":contactAttr is a complexType with simpleContent.
class ns3__contactAttr : public ns3__keyValuePair
{ public:
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute s of type xs:int.
   @int*                                 s                              0;	///< Optional attribute.
/// Attribute filename of type xs:string.
   @std::string*                         filename                       0;	///< Optional attribute.
};

/// "urn:zimbraMail":invitationInfo is a complexType with complexContent extension of "urn:zimbraMail":inviteComponent.
class ns5__invitationInfo : public ns5__inviteComponent
{ public:
/*  INHERITED FROM ns5__inviteComponent:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > comment                        0;
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > contact                        0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Vector of ns5__calendarAttendee* with length 0..unbounded
    std::vector<ns5__calendarAttendee* > at                             0;
/// Vector of ns5__alarmInfo* with length 0..unbounded
    std::vector<ns5__alarmInfo*        > alarm                          0;
/// Vector of ns5__xProp* with length 0..unbounded
    std::vector<ns5__xProp*            > xprop                          0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element desc of type xs:string.
    std::string*                         desc                           0;	///< Optional element.
/// Element descHtml of type xs:string.
    std::string*                         descHtml                       0;	///< Optional element.
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Element recur of type "urn:zimbraMail":recurrenceInfo.
    ns5__recurrenceInfo*                 recur                          0;	///< Optional element.
/// Element exceptId of type "urn:zimbraMail":exceptionRecurIdInfo.
    ns5__exceptionRecurIdInfo*           exceptId                       0;	///< Optional element.
/// Element s of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     s                              0;	///< Optional element.
/// Element e of type "urn:zimbraMail":dtTimeInfo.
    ns5__dtTimeInfo*                     e                              0;	///< Optional element.
/// Element dur of type "urn:zimbraMail":durationInfo.
    ns5__durationInfo*                   dur                            0;	///< Optional element.
    END OF INHERITED */
/*  INHERITED FROM ns5__inviteComponentCommon:
/// Attribute method of type xs:string.
   @std::string                          method                         1;	///< Required attribute.
/// Attribute compNum of type xs:int.
   @int                                  compNum                        1;	///< Required attribute.
/// Attribute rsvp of type xs:boolean.
   @bool                                 rsvp                           1;	///< Required attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute completed of type xs:string.
   @std::string*                         completed                      0;	///< Optional attribute.
/// Attribute noBlob of type xs:boolean.
   @bool*                                noBlob                         0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute x_uid of type xs:string.
   @std::string*                         x_USCOREuid                    0;	///< Optional attribute.
/// Attribute uid of type xs:string.
   @std::string*                         uid                            0;	///< Optional attribute.
/// Attribute seq of type xs:int.
   @int*                                 seq                            0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute ciFolder of type xs:string.
   @std::string*                         ciFolder                       0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute url of type xs:string.
   @std::string*                         url                            0;	///< Optional attribute.
/// Attribute ex of type xs:boolean.
   @bool*                                ex                             0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute changes of type xs:string.
   @std::string*                         changes                        0;	///< Optional attribute.
    END OF INHERITED */
/// Element content of type "urn:zimbraMail":rawInvite.
    ns5__rawInvite*                      content                        0;	///< Optional element.
/// Element comp of type "urn:zimbraMail":inviteComponent.
    ns5__inviteComponent*                comp                           0;	///< Optional element.
/// Vector of ns5__calTZInfo* with length 0..unbounded
    std::vector<ns5__calTZInfo*        > tz                             0;
/// Vector of ns5__mimePartInfo* with length 0..unbounded
    std::vector<ns5__mimePartInfo*     > mp                             0;
/// Element attach of type "urn:zimbraMail":attachmentsInfo.
    ns5__attachmentsInfo*                attach                         0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute ci of type xs:string.
   @std::string*                         ci                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":chatSummary is a complexType with complexContent extension of "urn:zimbraMail":messageSummary.
class ns5__chatSummary : public ns5__messageSummary
{ public:
/*  INHERITED FROM ns5__messageSummary:
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":inviteInfo.
    ns5__inviteInfo*                     inv                            0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__messageCommon:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":createTaskExceptionRequest is a complexType with complexContent extension of "urn:zimbraMail":createAppointmentExceptionRequest.
class ns5__createTaskExceptionRequest : public ns5__createAppointmentExceptionRequest
{ public:
/*  INHERITED FROM ns5__createAppointmentExceptionRequest:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute comp of type xs:int.
   @int*                                 comp                           0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__calItemRequestBase:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute echo of type xs:boolean.
   @bool*                                echo                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute forcesend of type xs:boolean.
   @bool*                                forcesend                      0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":createTaskRequest is a complexType with complexContent extension of "urn:zimbraMail":createAppointmentRequest.
class ns5__createTaskRequest : public ns5__createAppointmentRequest
{ public:
/*  INHERITED FROM ns5__createAppointmentRequest:
    END OF INHERITED */
/*  INHERITED FROM ns5__calItemRequestBase:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute echo of type xs:boolean.
   @bool*                                echo                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute forcesend of type xs:boolean.
   @bool*                                forcesend                      0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":imapDataSourceNameOrId is a complexType with complexContent extension of "urn:zimbraMail":dataSourceNameOrId.
class ns5__imapDataSourceNameOrId : public ns5__dataSourceNameOrId
{ public:
/*  INHERITED FROM ns5__dataSourceNameOrId:
    END OF INHERITED */
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":pop3DataSourceNameOrId is a complexType with complexContent extension of "urn:zimbraMail":dataSourceNameOrId.
class ns5__pop3DataSourceNameOrId : public ns5__dataSourceNameOrId
{ public:
/*  INHERITED FROM ns5__dataSourceNameOrId:
    END OF INHERITED */
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":caldavDataSourceNameOrId is a complexType with complexContent extension of "urn:zimbraMail":dataSourceNameOrId.
class ns5__caldavDataSourceNameOrId : public ns5__dataSourceNameOrId
{ public:
/*  INHERITED FROM ns5__dataSourceNameOrId:
    END OF INHERITED */
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":yabDataSourceNameOrId is a complexType with complexContent extension of "urn:zimbraMail":dataSourceNameOrId.
class ns5__yabDataSourceNameOrId : public ns5__dataSourceNameOrId
{ public:
/*  INHERITED FROM ns5__dataSourceNameOrId:
    END OF INHERITED */
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":rssDataSourceNameOrId is a complexType with complexContent extension of "urn:zimbraMail":dataSourceNameOrId.
class ns5__rssDataSourceNameOrId : public ns5__dataSourceNameOrId
{ public:
/*  INHERITED FROM ns5__dataSourceNameOrId:
    END OF INHERITED */
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":galDataSourceNameOrId is a complexType with complexContent extension of "urn:zimbraMail":dataSourceNameOrId.
class ns5__galDataSourceNameOrId : public ns5__dataSourceNameOrId
{ public:
/*  INHERITED FROM ns5__dataSourceNameOrId:
    END OF INHERITED */
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":calDataSourceNameOrId is a complexType with complexContent extension of "urn:zimbraMail":dataSourceNameOrId.
class ns5__calDataSourceNameOrId : public ns5__dataSourceNameOrId
{ public:
/*  INHERITED FROM ns5__dataSourceNameOrId:
    END OF INHERITED */
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":unknownDataSourceNameOrId is a complexType with complexContent extension of "urn:zimbraMail":dataSourceNameOrId.
class ns5__unknownDataSourceNameOrId : public ns5__dataSourceNameOrId
{ public:
/*  INHERITED FROM ns5__dataSourceNameOrId:
    END OF INHERITED */
/*  INHERITED FROM ns5__nameOrId:
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":commonCalendaringData is an abstract complexType with complexContent extension of "urn:zimbraMail":instanceDataAttrs.
class ns5__commonCalendaringData : public ns5__instanceDataAttrs
{ public:
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":legacyInstanceDataInfo is a complexType with complexContent extension of "urn:zimbraMail":legacyInstanceDataAttrs.
class ns5__legacyInstanceDataInfo : public ns5__legacyInstanceDataAttrs
{ public:
/*  INHERITED FROM ns5__legacyInstanceDataAttrs:
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute ex of type xs:boolean.
   @bool*                                ex                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":chatMessageInfo is a complexType with complexContent extension of "urn:zimbraMail":messageInfo.
class ns5__chatMessageInfo : public ns5__messageInfo
{ public:
/*  INHERITED FROM ns5__messageInfo:
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element mid of type xs:string.
    std::string*                         mid                            0;	///< Optional element.
/// Element irt of type xs:string.
    std::string*                         irt                            0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":inviteInfo.
    ns5__inviteInfo*                     inv                            0;	///< Optional element.
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > header                         0;
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_chatMessageInfo         0;
    class __ns5__union_chatMessageInfo
    {
   $int                                  __union_chatMessageInfo        0;	///< Union _ns5__union_chatMessageInfo selector: set to SOAP_UNION__ns5__union_chatMessageInfo_<fieldname> or 0
    union _ns5__union_chatMessageInfo
    {
/// Element mp of type "urn:zimbraMail":partInfo.
    ns5__partInfo*                       mp                             1;	///< Required element.
/// Element shr of type "urn:zimbraMail":shareNotification.
    ns5__shareNotification*              shr                            1;	///< Required element.
/// Element dlSubs of type "urn:zimbraMail":dlSubscriptionNotification.
    ns5__dlSubscriptionNotification*     dlSubs                         1;	///< Required element.
    }                                    union_chatMessageInfo         ;
    }                                   *__union_chatMessageInfo       ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute cif of type xs:string.
   @std::string*                         cif                            0;	///< Optional attribute.
/// Attribute origid of type xs:string.
   @std::string*                         origid                         0;	///< Optional attribute.
/// Attribute rt of type xs:string.
   @std::string*                         rt                             0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// Attribute forAcct of type xs:string.
   @std::string*                         forAcct                        0;	///< Optional attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
/// Attribute sd of type xs:long.
   @LONG64*                              sd                             0;	///< Optional attribute.
/// Attribute rd of type xs:long.
   @LONG64*                              rd                             0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__messageCommon:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":modifyTaskRequest is a complexType with complexContent extension of "urn:zimbraMail":modifyAppointmentRequest.
class ns5__modifyTaskRequest : public ns5__modifyAppointmentRequest
{ public:
/*  INHERITED FROM ns5__modifyAppointmentRequest:
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute comp of type xs:int.
   @int*                                 comp                           0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__calItemRequestBase:
/// Element m of type "urn:zimbraMail":msg.
    ns5__msg*                            m                              0;	///< Optional element.
/// Attribute echo of type xs:boolean.
   @bool*                                echo                           0;	///< Optional attribute.
/// Attribute max of type xs:int.
   @int*                                 max_                           0;	///< Optional attribute.
/// Attribute html of type xs:boolean.
   @bool*                                html                           0;	///< Optional attribute.
/// Attribute neuter of type xs:boolean.
   @bool*                                neuter                         0;	///< Optional attribute.
/// Attribute forcesend of type xs:boolean.
   @bool*                                forcesend                      0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":modifyTaskResponse is a complexType with complexContent extension of "urn:zimbraMail":modifyAppointmentResponse.
class ns5__modifyTaskResponse : public ns5__modifyAppointmentResponse
{ public:
/*  INHERITED FROM ns5__modifyAppointmentResponse:
    END OF INHERITED */
/*  INHERITED FROM ns5__createCalendarItemResponse:
/// Element m of type "urn:zimbra":id.
    ns3__id*                             m                              0;	///< Optional element.
/// Element echo of type "urn:zimbraMail":calEcho.
    ns5__calEcho*                        echo                           0;	///< Optional element.
/// Attribute calItemId of type xs:string.
   @std::string*                         calItemId                      0;	///< Optional attribute.
/// Attribute apptId of type xs:string.
   @std::string*                         apptId                         0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":messageHitInfo is a complexType with complexContent extension of "urn:zimbraMail":messageInfo.
class ns5__messageHitInfo : public ns5__messageInfo
{ public:
/*  INHERITED FROM ns5__messageInfo:
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element mid of type xs:string.
    std::string*                         mid                            0;	///< Optional element.
/// Element irt of type xs:string.
    std::string*                         irt                            0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":inviteInfo.
    ns5__inviteInfo*                     inv                            0;	///< Optional element.
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > header                         0;
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_messageHitInfo          0;
    class __ns5__union_messageHitInfo
    {
   $int                                  __union_messageHitInfo         0;	///< Union _ns5__union_messageHitInfo selector: set to SOAP_UNION__ns5__union_messageHitInfo_<fieldname> or 0
    union _ns5__union_messageHitInfo
    {
/// Element mp of type "urn:zimbraMail":partInfo.
    ns5__partInfo*                       mp                             1;	///< Required element.
/// Element shr of type "urn:zimbraMail":shareNotification.
    ns5__shareNotification*              shr                            1;	///< Required element.
/// Element dlSubs of type "urn:zimbraMail":dlSubscriptionNotification.
    ns5__dlSubscriptionNotification*     dlSubs                         1;	///< Required element.
    }                                    union_messageHitInfo          ;
    }                                   *__union_messageHitInfo        ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute cif of type xs:string.
   @std::string*                         cif                            0;	///< Optional attribute.
/// Attribute origid of type xs:string.
   @std::string*                         origid                         0;	///< Optional attribute.
/// Attribute rt of type xs:string.
   @std::string*                         rt                             0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// Attribute forAcct of type xs:string.
   @std::string*                         forAcct                        0;	///< Optional attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
/// Attribute sd of type xs:long.
   @LONG64*                              sd                             0;	///< Optional attribute.
/// Attribute rd of type xs:long.
   @LONG64*                              rd                             0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__messageCommon:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
/// Vector of ns5__part* with length 0..unbounded
    std::vector<ns5__part*             > hp                             0;
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// Attribute cm of type xs:boolean.
   @bool*                                cm                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":documentHitInfo is a complexType with complexContent extension of "urn:zimbraMail":documentInfo.
class ns5__documentHitInfo : public ns5__documentInfo
{ public:
/*  INHERITED FROM ns5__documentInfo:
/// Attribute loid of type xs:string.
   @std::string*                         loid                           0;	///< Optional attribute.
/// Attribute loe of type xs:string.
   @std::string*                         loe                            0;	///< Optional attribute.
/// Attribute lt of type xs:string.
   @std::string*                         lt                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonDocumentInfo:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Element acl of type "urn:zimbraMail":acl.
    ns5__acl*                            acl                            0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute uuid of type xs:string.
   @std::string*                         uuid                           0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute luuid of type xs:string.
   @std::string*                         luuid                          0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute mdver of type xs:int.
   @int*                                 mdver                          0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute desc of type xs:string.
   @std::string*                         desc                           0;	///< Optional attribute.
/// Attribute ct of type xs:string.
   @std::string*                         ct                             0;	///< Optional attribute.
/// Attribute descEnabled of type xs:boolean.
   @bool*                                descEnabled                    0;	///< Optional attribute.
/// Attribute ver of type xs:int.
   @int*                                 ver                            0;	///< Optional attribute.
/// Attribute leb of type xs:string.
   @std::string*                         leb                            0;	///< Optional attribute.
/// Attribute cr of type xs:string.
   @std::string*                         cr                             0;	///< Optional attribute.
/// Attribute cd of type xs:long.
   @LONG64*                              cd                             0;	///< Optional attribute.
    END OF INHERITED */
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
};

/// "urn:zimbraMail":instanceDataInfo is a complexType with complexContent extension of "urn:zimbraMail":instanceDataAttrs.
class ns5__instanceDataInfo : public ns5__instanceDataAttrs
{ public:
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute ex of type xs:boolean.
   @bool*                                ex                             0;	///< Optional attribute.
};

/// "urn:zimbraVoice":selectiveCallForwardFeature is a complexType with complexContent extension of "urn:zimbraVoice":featureWithCallerList.
class ns8__selectiveCallForwardFeature : public ns8__featureWithCallerList
{ public:
/*  INHERITED FROM ns8__featureWithCallerList:
/// Vector of ns8__callerListEntry* with length 0..unbounded
    std::vector<ns8__callerListEntry*  > phone                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
/// Attribute ft of type xs:string.
   @std::string*                         ft                             0;	///< Optional attribute.
};

/// "urn:zimbraVoice":selectiveCallAcceptanceFeature is a complexType with complexContent extension of "urn:zimbraVoice":featureWithCallerList.
class ns8__selectiveCallAcceptanceFeature : public ns8__featureWithCallerList
{ public:
/*  INHERITED FROM ns8__featureWithCallerList:
/// Vector of ns8__callerListEntry* with length 0..unbounded
    std::vector<ns8__callerListEntry*  > phone                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraVoice":selectiveCallRejectionFeature is a complexType with complexContent extension of "urn:zimbraVoice":featureWithCallerList.
class ns8__selectiveCallRejectionFeature : public ns8__featureWithCallerList
{ public:
/*  INHERITED FROM ns8__featureWithCallerList:
/// Vector of ns8__callerListEntry* with length 0..unbounded
    std::vector<ns8__callerListEntry*  > phone                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns8__callFeatureInfo:
/// Attribute s of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                s                              1;	///< Required attribute.
/// Attribute a of type "urn:zimbra":trueOrFalse.
   @enum ns3__trueOrFalse                a                              1;	///< Required attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":legacyCalendaringData is a complexType with complexContent extension of "urn:zimbraMail":commonCalendaringData.
class ns5__legacyCalendaringData : public ns5__commonCalendaringData
{ public:
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__legacyInstanceDataInfo* with length 0..unbounded
    std::vector<ns5__legacyInstanceDataInfo*> inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
};

/// "urn:zimbraMail":chatHitInfo is a complexType with complexContent extension of "urn:zimbraMail":messageHitInfo.
class ns5__chatHitInfo : public ns5__messageHitInfo
{ public:
/*  INHERITED FROM ns5__messageHitInfo:
/// Vector of ns5__part* with length 0..unbounded
    std::vector<ns5__part*             > hp                             0;
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// Attribute cm of type xs:boolean.
   @bool*                                cm                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__messageInfo:
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__emailInfo* with length 0..unbounded
    std::vector<ns5__emailInfo*        > e                              0;
/// Element su of type xs:string.
    std::string*                         su                             0;	///< Optional element.
/// Element mid of type xs:string.
    std::string*                         mid                            0;	///< Optional element.
/// Element irt of type xs:string.
    std::string*                         irt                            0;	///< Optional element.
/// Element inv of type "urn:zimbraMail":inviteInfo.
    ns5__inviteInfo*                     inv                            0;	///< Optional element.
/// Vector of ns3__keyValuePair* with length 0..unbounded
    std::vector<ns3__keyValuePair*     > header                         0;
/// CHOICE OF ELEMENTS <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_chatHitInfo             0;
    class __ns5__union_chatHitInfo
    {
   $int                                  __union_chatHitInfo            0;	///< Union _ns5__union_chatHitInfo selector: set to SOAP_UNION__ns5__union_chatHitInfo_<fieldname> or 0
    union _ns5__union_chatHitInfo
    {
/// Element mp of type "urn:zimbraMail":partInfo.
    ns5__partInfo*                       mp                             1;	///< Required element.
/// Element shr of type "urn:zimbraMail":shareNotification.
    ns5__shareNotification*              shr                            1;	///< Required element.
/// Element dlSubs of type "urn:zimbraMail":dlSubscriptionNotification.
    ns5__dlSubscriptionNotification*     dlSubs                         1;	///< Required element.
    }                                    union_chatHitInfo             ;
    }                                   *__union_chatHitInfo           ;
//  END OF CHOICE
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
/// Attribute cif of type xs:string.
   @std::string*                         cif                            0;	///< Optional attribute.
/// Attribute origid of type xs:string.
   @std::string*                         origid                         0;	///< Optional attribute.
/// Attribute rt of type xs:string.
   @std::string*                         rt                             0;	///< Optional attribute.
/// Attribute idnt of type xs:string.
   @std::string*                         idnt                           0;	///< Optional attribute.
/// Attribute forAcct of type xs:string.
   @std::string*                         forAcct                        0;	///< Optional attribute.
/// Attribute autoSendTime of type xs:long.
   @LONG64*                              autoSendTime                   0;	///< Optional attribute.
/// Attribute sd of type xs:long.
   @LONG64*                              sd                             0;	///< Optional attribute.
/// Attribute rd of type xs:long.
   @LONG64*                              rd                             0;	///< Optional attribute.
/// Attribute part of type xs:string.
   @std::string*                         part                           0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__messageCommon:
/// Vector of ns5__mailCustomMetadata* element refs with length 0..unbounded
    std::vector<ns5__mailCustomMetadata*> meta                           0;
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute cid of type xs:string.
   @std::string*                         cid                            0;	///< Optional attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":calendarItemHitInfo is an abstract complexType with complexContent extension of "urn:zimbraMail":commonCalendaringData.
class ns5__calendarItemHitInfo : public ns5__commonCalendaringData
{ public:
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__instanceDataInfo* with length 0..unbounded
    std::vector<ns5__instanceDataInfo* > inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Vector of ns5__invitation* with length 0..unbounded
    std::vector<ns5__invitation*       > inv                            0;
    class _ns5__calendarItemHitInfo_replies
    {
/// Vector of ns5__calReply* with length 0..unbounded
    std::vector<ns5__calReply*         > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64                               d                              1;	///< Required attribute.
/// Attribute cm of type xs:boolean.
   @bool*                                cm                             0;	///< Optional attribute.
/// Attribute nextAlarm of type xs:long.
   @LONG64*                              nextAlarm                      0;	///< Optional attribute.
};

/// "urn:zimbraMail":calendaringData is an abstract complexType with complexContent extension of "urn:zimbraMail":commonCalendaringData.
class ns5__calendaringData : public ns5__commonCalendaringData
{ public:
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__instanceDataInfo* with length 0..unbounded
    std::vector<ns5__instanceDataInfo* > inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
};

/// "urn:zimbraMail":legacyAppointmentData is a complexType with complexContent extension of "urn:zimbraMail":legacyCalendaringData.
class ns5__legacyAppointmentData : public ns5__legacyCalendaringData
{ public:
/*  INHERITED FROM ns5__legacyCalendaringData:
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__legacyInstanceDataInfo* with length 0..unbounded
    std::vector<ns5__legacyInstanceDataInfo*> inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":legacyTaskData is a complexType with complexContent extension of "urn:zimbraMail":legacyCalendaringData.
class ns5__legacyTaskData : public ns5__legacyCalendaringData
{ public:
/*  INHERITED FROM ns5__legacyCalendaringData:
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__legacyInstanceDataInfo* with length 0..unbounded
    std::vector<ns5__legacyInstanceDataInfo*> inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":appointmentHitInfo is a complexType with complexContent extension of "urn:zimbraMail":calendarItemHitInfo.
class ns5__appointmentHitInfo : public ns5__calendarItemHitInfo
{ public:
/*  INHERITED FROM ns5__calendarItemHitInfo:
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__instanceDataInfo* with length 0..unbounded
    std::vector<ns5__instanceDataInfo* > inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Vector of ns5__invitation* with length 0..unbounded
    std::vector<ns5__invitation*       > inv                            0;
    class _ns5__appointmentHitInfo_replies
    {
/// Vector of ns5__calReply* with length 0..unbounded
    std::vector<ns5__calReply*         > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64                               d                              1;	///< Required attribute.
/// Attribute cm of type xs:boolean.
   @bool*                                cm                             0;	///< Optional attribute.
/// Attribute nextAlarm of type xs:long.
   @LONG64*                              nextAlarm                      0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":taskHitInfo is a complexType with complexContent extension of "urn:zimbraMail":calendarItemHitInfo.
class ns5__taskHitInfo : public ns5__calendarItemHitInfo
{ public:
/*  INHERITED FROM ns5__calendarItemHitInfo:
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__instanceDataInfo* with length 0..unbounded
    std::vector<ns5__instanceDataInfo* > inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Vector of ns5__invitation* with length 0..unbounded
    std::vector<ns5__invitation*       > inv                            0;
    class _ns5__taskHitInfo_replies
    {
/// Vector of ns5__calReply* with length 0..unbounded
    std::vector<ns5__calReply*         > reply                          0;
/// Attribute unusedCodeGenHelper of type xs:string.
   @std::string*                         unusedCodeGenHelper            0;	///< Optional attribute.
    }                                   *replies                        0;	///< Optional element.
/// Attribute sf of type xs:string.
   @std::string*                         sf                             0;	///< Optional attribute.
/// Attribute d of type xs:long.
   @LONG64                               d                              1;	///< Required attribute.
/// Attribute cm of type xs:boolean.
   @bool*                                cm                             0;	///< Optional attribute.
/// Attribute nextAlarm of type xs:long.
   @LONG64*                              nextAlarm                      0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":appointmentData is a complexType with complexContent extension of "urn:zimbraMail":calendaringData.
class ns5__appointmentData : public ns5__calendaringData
{ public:
/*  INHERITED FROM ns5__calendaringData:
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__instanceDataInfo* with length 0..unbounded
    std::vector<ns5__instanceDataInfo* > inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
};

/// "urn:zimbraMail":taskData is a complexType with complexContent extension of "urn:zimbraMail":calendaringData.
class ns5__taskData : public ns5__calendaringData
{ public:
/*  INHERITED FROM ns5__calendaringData:
/// Element or of type "urn:zimbraMail":calOrganizer.
    ns5__calOrganizer*                   or_                            0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > category                       0;
/// Element geo of type "urn:zimbraMail":geoInfo.
    ns5__geoInfo*                        geo                            0;	///< Optional element.
/// Element fr of type xs:string.
    std::string*                         fr                             0;	///< Optional element.
/// Vector of ns5__instanceDataInfo* with length 0..unbounded
    std::vector<ns5__instanceDataInfo* > inst                           0;
/// Element alarmData of type "urn:zimbraMail":alarmDataInfo.
    ns5__alarmDataInfo*                  alarmData                      0;	///< Optional element.
/// Attribute d of type xs:long.
   @LONG64*                              d                              0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonCalendaringData:
/// Attribute x_uid of type xs:string.
   @std::string                          x_USCOREuid                    1;	///< Required attribute.
/// Attribute uid of type xs:string.
   @std::string                          uid                            1;	///< Required attribute.
/// Attribute f of type xs:string.
   @std::string*                         f                              0;	///< Optional attribute.
/// Attribute t of type xs:string.
   @std::string*                         t                              0;	///< Optional attribute.
/// Attribute tn of type xs:string.
   @std::string*                         tn                             0;	///< Optional attribute.
/// Attribute l of type xs:string.
   @std::string*                         l                              0;	///< Optional attribute.
/// Attribute s of type xs:long.
   @LONG64*                              s                              0;	///< Optional attribute.
/// Attribute md of type xs:long.
   @LONG64*                              md                             0;	///< Optional attribute.
/// Attribute ms of type xs:int.
   @int*                                 ms                             0;	///< Optional attribute.
/// Attribute rev of type xs:int.
   @int*                                 rev                            0;	///< Optional attribute.
/// Attribute id of type xs:string.
   @std::string*                         id                             0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__instanceDataAttrs:
/// Attribute dur of type xs:long.
   @LONG64*                              dur                            0;	///< Optional attribute.
    END OF INHERITED */
/*  INHERITED FROM ns5__commonInstanceDataAttrs:
/// Attribute ptst of type xs:string.
   @std::string*                         ptst                           0;	///< Optional attribute.
/// Attribute ridZ of type xs:string.
   @std::string*                         ridZ                           0;	///< Optional attribute.
/// Attribute tzo of type xs:long.
   @LONG64*                              tzo                            0;	///< Optional attribute.
/// Attribute fba of type xs:string.
   @std::string*                         fba                            0;	///< Optional attribute.
/// Attribute percentComplete of type xs:string.
   @std::string*                         percentComplete                0;	///< Optional attribute.
/// Attribute recur of type xs:boolean.
   @bool*                                recur                          0;	///< Optional attribute.
/// Attribute hasEx of type xs:boolean.
   @bool*                                hasEx                          0;	///< Optional attribute.
/// Attribute priority of type xs:string.
   @std::string*                         priority                       0;	///< Optional attribute.
/// Attribute fb of type xs:string.
   @std::string*                         fb                             0;	///< Optional attribute.
/// Attribute transp of type xs:string.
   @std::string*                         transp                         0;	///< Optional attribute.
/// Attribute name of type xs:string.
   @std::string*                         name                           0;	///< Optional attribute.
/// Attribute loc of type xs:string.
   @std::string*                         loc                            0;	///< Optional attribute.
/// Attribute otherAtt of type xs:boolean.
   @bool*                                otherAtt                       0;	///< Optional attribute.
/// Attribute alarm of type xs:boolean.
   @bool*                                alarm                          0;	///< Optional attribute.
/// Attribute isOrg of type xs:boolean.
   @bool*                                isOrg                          0;	///< Optional attribute.
/// Attribute invId of type xs:string.
   @std::string*                         invId                          0;	///< Optional attribute.
/// Attribute compNum of type xs:int.
   @int*                                 compNum                        0;	///< Optional attribute.
/// Attribute status of type xs:string.
   @std::string*                         status                         0;	///< Optional attribute.
/// Attribute class of type xs:string.
   @std::string*                         class_                         0;	///< Optional attribute.
/// Attribute allDay of type xs:boolean.
   @bool*                                allDay                         0;	///< Optional attribute.
/// Attribute draft of type xs:boolean.
   @bool*                                draft                          0;	///< Optional attribute.
/// Attribute neverSent of type xs:boolean.
   @bool*                                neverSent                      0;	///< Optional attribute.
/// Attribute dueDate of type xs:long.
   @LONG64*                              dueDate                        0;	///< Optional attribute.
/// Attribute tzoDue of type xs:int.
   @int*                                 tzoDue                         0;	///< Optional attribute.
    END OF INHERITED */
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:zimbra                                                               *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:zimbra":context of type "urn:zimbra":HeaderContext.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:zimbra                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:zimbraAccount                                                        *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:zimbraAccount":AuthRequest of type "urn:zimbraAccount":authRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":AuthResponse of type "urn:zimbraAccount":authResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":AutoCompleteGalRequest of type "urn:zimbraAccount":autoCompleteGalRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":AutoCompleteGalResponse of type "urn:zimbraAccount":autoCompleteGalResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ChangePasswordRequest of type "urn:zimbraAccount":changePasswordRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ChangePasswordResponse of type "urn:zimbraAccount":changePasswordResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CheckLicenseRequest of type "urn:zimbraAccount":checkLicenseRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CheckLicenseResponse of type "urn:zimbraAccount":checkLicenseResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CheckRightsRequest of type "urn:zimbraAccount":checkRightsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CheckRightsResponse of type "urn:zimbraAccount":checkRightsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CreateDistributionListRequest of type "urn:zimbraAccount":createDistributionListRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CreateDistributionListResponse of type "urn:zimbraAccount":createDistributionListResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CreateIdentityRequest of type "urn:zimbraAccount":createIdentityRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CreateIdentityResponse of type "urn:zimbraAccount":createIdentityResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CreateSignatureRequest of type "urn:zimbraAccount":createSignatureRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":CreateSignatureResponse of type "urn:zimbraAccount":createSignatureResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":DeleteIdentityRequest of type "urn:zimbraAccount":deleteIdentityRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":DeleteIdentityResponse of type "urn:zimbraAccount":deleteIdentityResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":DeleteSignatureRequest of type "urn:zimbraAccount":deleteSignatureRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":DeleteSignatureResponse of type "urn:zimbraAccount":deleteSignatureResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":DiscoverRightsRequest of type "urn:zimbraAccount":discoverRightsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":DiscoverRightsResponse of type "urn:zimbraAccount":discoverRightsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":DistributionListActionRequest of type "urn:zimbraAccount":distributionListActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":DistributionListActionResponse of type "urn:zimbraAccount":distributionListActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":EndSessionRequest of type "urn:zimbraAccount":endSessionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":EndSessionResponse of type "urn:zimbraAccount":endSessionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAccountDistributionListsRequest of type "urn:zimbraAccount":getAccountDistributionListsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAccountDistributionListsResponse of type "urn:zimbraAccount":getAccountDistributionListsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAccountInfoRequest of type "urn:zimbraAccount":getAccountInfoRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAccountInfoResponse of type "urn:zimbraAccount":getAccountInfoResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAllLocalesRequest of type "urn:zimbraAccount":getAllLocalesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAllLocalesResponse of type "urn:zimbraAccount":getAllLocalesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAvailableCsvFormatsRequest of type "urn:zimbraAccount":getAvailableCsvFormatsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAvailableCsvFormatsResponse of type "urn:zimbraAccount":getAvailableCsvFormatsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAvailableLocalesRequest of type "urn:zimbraAccount":getAvailableLocalesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAvailableLocalesResponse of type "urn:zimbraAccount":getAvailableLocalesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAvailableSkinsRequest of type "urn:zimbraAccount":getAvailableSkinsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetAvailableSkinsResponse of type "urn:zimbraAccount":getAvailableSkinsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetDistributionListMembersRequest of type "urn:zimbraAccount":getDistributionListMembersRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetDistributionListMembersResponse of type "urn:zimbraAccount":getDistributionListMembersResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetDistributionListRequest of type "urn:zimbraAccount":getDistributionListRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetDistributionListResponse of type "urn:zimbraAccount":getDistributionListResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetIdentitiesRequest of type "urn:zimbraAccount":getIdentitiesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetIdentitiesResponse of type "urn:zimbraAccount":getIdentitiesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetInfoRequest of type "urn:zimbraAccount":getInfoRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetInfoResponse of type "urn:zimbraAccount":getInfoResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetPrefsRequest of type "urn:zimbraAccount":getPrefsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetPrefsResponse of type "urn:zimbraAccount":getPrefsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetRightsRequest of type "urn:zimbraAccount":getRightsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetRightsResponse of type "urn:zimbraAccount":getRightsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetSMIMEPublicCertsRequest of type "urn:zimbraAccount":getSMIMEPublicCertsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetSMIMEPublicCertsResponse of type "urn:zimbraAccount":getSMIMEPublicCertsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetShareInfoRequest of type "urn:zimbraAccount":getShareInfoRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetShareInfoResponse of type "urn:zimbraAccount":getShareInfoResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetSignaturesRequest of type "urn:zimbraAccount":getSignaturesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetSignaturesResponse of type "urn:zimbraAccount":getSignaturesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetVersionInfoRequest of type "urn:zimbraAccount":getVersionInfoRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetVersionInfoResponse of type "urn:zimbraAccount":getVersionInfoResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetWhiteBlackListRequest of type "urn:zimbraAccount":getWhiteBlackListRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GetWhiteBlackListResponse of type "urn:zimbraAccount":getWhiteBlackListResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GrantRightsRequest of type "urn:zimbraAccount":grantRightsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":GrantRightsResponse of type "urn:zimbraAccount":grantRightsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyIdentityRequest of type "urn:zimbraAccount":modifyIdentityRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyIdentityResponse of type "urn:zimbraAccount":modifyIdentityResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyPrefsRequest of type "urn:zimbraAccount":modifyPrefsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyPrefsResponse of type "urn:zimbraAccount":modifyPrefsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyPropertiesRequest of type "urn:zimbraAccount":modifyPropertiesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyPropertiesResponse of type "urn:zimbraAccount":modifyPropertiesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifySignatureRequest of type "urn:zimbraAccount":modifySignatureRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifySignatureResponse of type "urn:zimbraAccount":modifySignatureResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyWhiteBlackListRequest of type "urn:zimbraAccount":modifyWhiteBlackListRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyWhiteBlackListResponse of type "urn:zimbraAccount":modifyWhiteBlackListResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyZimletPrefsRequest of type "urn:zimbraAccount":modifyZimletPrefsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":ModifyZimletPrefsResponse of type "urn:zimbraAccount":modifyZimletPrefsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":RevokeRightsRequest of type "urn:zimbraAccount":revokeRightsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":RevokeRightsResponse of type "urn:zimbraAccount":revokeRightsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":SearchCalendarResourcesRequest of type "urn:zimbraAccount":searchCalendarResourcesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":SearchCalendarResourcesResponse of type "urn:zimbraAccount":searchCalendarResourcesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":SearchGalRequest of type "urn:zimbraAccount":searchGalRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":SearchGalResponse of type "urn:zimbraAccount":searchGalResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":SubscribeDistributionListRequest of type "urn:zimbraAccount":subscribeDistributionListRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":SubscribeDistributionListResponse of type "urn:zimbraAccount":subscribeDistributionListResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":SyncGalRequest of type "urn:zimbraAccount":syncGalRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":SyncGalResponse of type "urn:zimbraAccount":syncGalResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":accountDataSource of type "urn:zimbraAccount":accountDataSource.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":contacts of type "urn:zimbraAccount":accountContactsDataSource.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":cos of type "urn:zimbraAccount":dlInfo.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":dl of type "urn:zimbraAccount":distributionListInfo.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":include of type "urn:zimbraAccount":accountZimletInclude.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":includeCSS of type "urn:zimbraAccount":accountZimletIncludeCSS.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":meta of type "urn:zimbraAccount":accountCustomMetadata.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":serverExtension of type "urn:zimbraAccount":zimletServerExtension.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":signature of type "urn:zimbraAccount":signature.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":subsReq of type "urn:zimbraAccount":distributionListSubscribeReq.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraAccount":target of type "urn:zimbraAccount":accountZimletTarget.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:zimbraAccount                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:zimbraMail                                                           *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:zimbraMail":AddAppointmentInviteRequest of type "urn:zimbraMail":addAppointmentInviteRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AddAppointmentInviteResponse of type "urn:zimbraMail":addAppointmentInviteResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AddCommentRequest of type "urn:zimbraMail":addCommentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AddCommentResponse of type "urn:zimbraMail":addCommentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AddMsgRequest of type "urn:zimbraMail":addMsgRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AddMsgResponse of type "urn:zimbraMail":addMsgResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AddTaskInviteRequest of type "urn:zimbraMail":addTaskInviteRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AddTaskInviteResponse of type "urn:zimbraMail":addTaskInviteResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AnnounceOrganizerChangeRequest of type "urn:zimbraMail":announceOrganizerChangeRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AnnounceOrganizerChangeResponse of type "urn:zimbraMail":announceOrganizerChangeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ApplyFilterRulesRequest of type "urn:zimbraMail":applyFilterRulesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ApplyFilterRulesResponse of type "urn:zimbraMail":applyFilterRulesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ApplyOutgoingFilterRulesRequest of type "urn:zimbraMail":applyOutgoingFilterRulesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ApplyOutgoingFilterRulesResponse of type "urn:zimbraMail":applyOutgoingFilterRulesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AutoCompleteRequest of type "urn:zimbraMail":autoCompleteRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":AutoCompleteResponse of type "urn:zimbraMail":autoCompleteResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":BounceMsgRequest of type "urn:zimbraMail":bounceMsgRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":BounceMsgResponse of type "urn:zimbraMail":bounceMsgResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":BrowseRequest of type "urn:zimbraMail":browseRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":BrowseResponse of type "urn:zimbraMail":browseResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CancelAppointmentRequest of type "urn:zimbraMail":cancelAppointmentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CancelAppointmentResponse of type "urn:zimbraMail":cancelAppointmentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CancelTaskRequest of type "urn:zimbraMail":cancelTaskRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CancelTaskResponse of type "urn:zimbraMail":cancelTaskResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CheckDeviceStatusRequest of type "urn:zimbraMail":checkDeviceStatusRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CheckDeviceStatusResponse of type "urn:zimbraMail":checkDeviceStatusResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CheckPermissionRequest of type "urn:zimbraMail":checkPermissionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CheckPermissionResponse of type "urn:zimbraMail":checkPermissionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CheckRecurConflictsRequest of type "urn:zimbraMail":checkRecurConflictsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CheckRecurConflictsResponse of type "urn:zimbraMail":checkRecurConflictsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CheckSpellingRequest of type "urn:zimbraMail":checkSpellingRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CheckSpellingResponse of type "urn:zimbraMail":checkSpellingResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CompleteTaskInstanceRequest of type "urn:zimbraMail":completeTaskInstanceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CompleteTaskInstanceResponse of type "urn:zimbraMail":completeTaskInstanceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ContactActionRequest of type "urn:zimbraMail":contactActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ContactActionResponse of type "urn:zimbraMail":contactActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ConvActionRequest of type "urn:zimbraMail":convActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ConvActionResponse of type "urn:zimbraMail":convActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CounterAppointmentRequest of type "urn:zimbraMail":counterAppointmentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CounterAppointmentResponse of type "urn:zimbraMail":counterAppointmentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateAppointmentExceptionRequest of type "urn:zimbraMail":createAppointmentExceptionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateAppointmentExceptionResponse of type "urn:zimbraMail":createAppointmentExceptionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateAppointmentRequest of type "urn:zimbraMail":createAppointmentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateAppointmentResponse of type "urn:zimbraMail":createAppointmentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateContactRequest of type "urn:zimbraMail":createContactRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateContactResponse of type "urn:zimbraMail":createContactResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateDataSourceRequest of type "urn:zimbraMail":createDataSourceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateDataSourceResponse of type "urn:zimbraMail":createDataSourceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateFolderRequest of type "urn:zimbraMail":createFolderRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateFolderResponse of type "urn:zimbraMail":createFolderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateMountpointRequest of type "urn:zimbraMail":createMountpointRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateMountpointResponse of type "urn:zimbraMail":createMountpointResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateNoteRequest of type "urn:zimbraMail":createNoteRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateNoteResponse of type "urn:zimbraMail":createNoteResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateSearchFolderRequest of type "urn:zimbraMail":createSearchFolderRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateSearchFolderResponse of type "urn:zimbraMail":createSearchFolderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateTagRequest of type "urn:zimbraMail":createTagRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateTagResponse of type "urn:zimbraMail":createTagResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateTaskExceptionRequest of type "urn:zimbraMail":createTaskExceptionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateTaskExceptionResponse of type "urn:zimbraMail":createTaskExceptionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateTaskRequest of type "urn:zimbraMail":createTaskRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateTaskResponse of type "urn:zimbraMail":createTaskResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateWaitSetRequest of type "urn:zimbraMail":createWaitSetRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":CreateWaitSetResponse of type "urn:zimbraMail":createWaitSetResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DeclineCounterAppointmentRequest of type "urn:zimbraMail":declineCounterAppointmentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DeclineCounterAppointmentResponse of type "urn:zimbraMail":declineCounterAppointmentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DeleteDataSourceRequest of type "urn:zimbraMail":deleteDataSourceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DeleteDataSourceResponse of type "urn:zimbraMail":deleteDataSourceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DeleteDeviceRequest of type "urn:zimbraMail":deleteDeviceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DeleteDeviceResponse of type "urn:zimbraMail":deleteDeviceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DestroyWaitSetRequest of type "urn:zimbraMail":destroyWaitSetRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DestroyWaitSetResponse of type "urn:zimbraMail":destroyWaitSetResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DiffDocumentRequest of type "urn:zimbraMail":diffDocumentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DiffDocumentResponse of type "urn:zimbraMail":diffDocumentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DismissCalendarItemAlarmRequest of type "urn:zimbraMail":dismissCalendarItemAlarmRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DismissCalendarItemAlarmResponse of type "urn:zimbraMail":dismissCalendarItemAlarmResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DocumentActionRequest of type "urn:zimbraMail":documentActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":DocumentActionResponse of type "urn:zimbraMail":documentActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":EmptyDumpsterRequest of type "urn:zimbraMail":emptyDumpsterRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":EmptyDumpsterResponse of type "urn:zimbraMail":emptyDumpsterResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":EnableSharedReminderRequest of type "urn:zimbraMail":enableSharedReminderRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":EnableSharedReminderResponse of type "urn:zimbraMail":enableSharedReminderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ExpandRecurRequest of type "urn:zimbraMail":expandRecurRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ExpandRecurResponse of type "urn:zimbraMail":expandRecurResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ExportContactsRequest of type "urn:zimbraMail":exportContactsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ExportContactsResponse of type "urn:zimbraMail":exportContactsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":FolderActionRequest of type "urn:zimbraMail":folderActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":FolderActionResponse of type "urn:zimbraMail":folderActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ForwardAppointmentInviteRequest of type "urn:zimbraMail":forwardAppointmentInviteRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ForwardAppointmentInviteResponse of type "urn:zimbraMail":forwardAppointmentInviteResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ForwardAppointmentRequest of type "urn:zimbraMail":forwardAppointmentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ForwardAppointmentResponse of type "urn:zimbraMail":forwardAppointmentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GenerateUUIDRequest of type "urn:zimbraMail":generateUUIDRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GenerateUUIDResponse of type "urn:zimbraMail":generateUUIDResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetActivityStreamRequest of type "urn:zimbraMail":getActivityStreamRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetActivityStreamResponse of type "urn:zimbraMail":getActivityStreamResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetAllDevicesRequest of type "urn:zimbraMail":getAllDevicesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetAllDevicesResponse of type "urn:zimbraMail":getAllDevicesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetAppointmentRequest of type "urn:zimbraMail":getAppointmentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetAppointmentResponse of type "urn:zimbraMail":getAppointmentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetApptSummariesRequest of type "urn:zimbraMail":getApptSummariesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetApptSummariesResponse of type "urn:zimbraMail":getApptSummariesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetCalendarItemSummariesRequest of type "urn:zimbraMail":getCalendarItemSummariesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetCalendarItemSummariesResponse of type "urn:zimbraMail":getCalendarItemSummariesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetCommentsRequest of type "urn:zimbraMail":getCommentsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetCommentsResponse of type "urn:zimbraMail":getCommentsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetContactsRequest of type "urn:zimbraMail":getContactsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetContactsResponse of type "urn:zimbraMail":getContactsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetConvRequest of type "urn:zimbraMail":getConvRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetConvResponse of type "urn:zimbraMail":getConvResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetCustomMetadataRequest of type "urn:zimbraMail":getCustomMetadataRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetCustomMetadataResponse of type "urn:zimbraMail":getCustomMetadataResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetDataSourcesRequest of type "urn:zimbraMail":getDataSourcesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetDataSourcesResponse of type "urn:zimbraMail":getDataSourcesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetDocumentShareURLRequest of type "urn:zimbraMail":getDocumentShareURLRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetDocumentShareURLResponse of type "urn:zimbraMail":getDocumentShareURLResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetEffectiveFolderPermsRequest of type "urn:zimbraMail":getEffectiveFolderPermsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetEffectiveFolderPermsResponse of type "urn:zimbraMail":getEffectiveFolderPermsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetFilterRulesRequest of type "urn:zimbraMail":getFilterRulesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetFilterRulesResponse of type "urn:zimbraMail":getFilterRulesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetFolderRequest of type "urn:zimbraMail":getFolderRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetFolderResponse of type "urn:zimbraMail":getFolderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetFreeBusyRequest of type "urn:zimbraMail":getFreeBusyRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetFreeBusyResponse of type "urn:zimbraMail":getFreeBusyResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetICalRequest of type "urn:zimbraMail":getICalRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetICalResponse of type "urn:zimbraMail":getICalResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetImportStatusRequest of type "urn:zimbraMail":getImportStatusRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetImportStatusResponse of type "urn:zimbraMail":getImportStatusResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetItemRequest of type "urn:zimbraMail":getItemRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetItemResponse of type "urn:zimbraMail":getItemResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetMailboxMetadataRequest of type "urn:zimbraMail":getMailboxMetadataRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetMailboxMetadataResponse of type "urn:zimbraMail":getMailboxMetadataResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetMiniCalRequest of type "urn:zimbraMail":getMiniCalRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetMiniCalResponse of type "urn:zimbraMail":getMiniCalResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetMsgMetadataRequest of type "urn:zimbraMail":getMsgMetadataRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetMsgMetadataResponse of type "urn:zimbraMail":getMsgMetadataResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetMsgRequest of type "urn:zimbraMail":getMsgRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetMsgResponse of type "urn:zimbraMail":getMsgResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetNoteRequest of type "urn:zimbraMail":getNoteRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetNoteResponse of type "urn:zimbraMail":getNoteResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetNotificationsRequest of type "urn:zimbraMail":getNotificationsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetNotificationsResponse of type "urn:zimbraMail":getNotificationsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetOutgoingFilterRulesRequest of type "urn:zimbraMail":getOutgoingFilterRulesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetOutgoingFilterRulesResponse of type "urn:zimbraMail":getOutgoingFilterRulesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetPermissionRequest of type "urn:zimbraMail":getPermissionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetPermissionResponse of type "urn:zimbraMail":getPermissionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetRecurRequest of type "urn:zimbraMail":getRecurRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetRecurResponse of type "urn:zimbraMail":getRecurResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetSearchFolderRequest of type "urn:zimbraMail":getSearchFolderRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetSearchFolderResponse of type "urn:zimbraMail":getSearchFolderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetShareDetailsRequest of type "urn:zimbraMail":getShareDetailsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetShareDetailsResponse of type "urn:zimbraMail":getShareDetailsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetShareNotificationsRequest of type "urn:zimbraMail":getShareNotificationsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetShareNotificationsResponse of type "urn:zimbraMail":getShareNotificationsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetSpellDictionariesRequest of type "urn:zimbraMail":getSpellDictionariesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetSpellDictionariesResponse of type "urn:zimbraMail":getSpellDictionariesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetSystemRetentionPolicyRequest of type "urn:zimbraMail":getSystemRetentionPolicyRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetSystemRetentionPolicyResponse of type "urn:zimbraMail":getSystemRetentionPolicyResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetTagRequest of type "urn:zimbraMail":getTagRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetTagResponse of type "urn:zimbraMail":getTagResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetTaskRequest of type "urn:zimbraMail":getTaskRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetTaskResponse of type "urn:zimbraMail":getTaskResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetTaskSummariesRequest of type "urn:zimbraMail":getTaskSummariesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetTaskSummariesResponse of type "urn:zimbraMail":getTaskSummariesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetWatchersRequest of type "urn:zimbraMail":getWatchersRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetWatchersResponse of type "urn:zimbraMail":getWatchersResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetWatchingItemsRequest of type "urn:zimbraMail":getWatchingItemsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetWatchingItemsResponse of type "urn:zimbraMail":getWatchingItemsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetWorkingHoursRequest of type "urn:zimbraMail":getWorkingHoursRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetWorkingHoursResponse of type "urn:zimbraMail":getWorkingHoursResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetYahooAuthTokenRequest of type "urn:zimbraMail":getYahooAuthTokenRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetYahooAuthTokenResponse of type "urn:zimbraMail":getYahooAuthTokenResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetYahooCookieRequest of type "urn:zimbraMail":getYahooCookieRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GetYahooCookieResponse of type "urn:zimbraMail":getYahooCookieResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GrantPermissionRequest of type "urn:zimbraMail":grantPermissionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":GrantPermissionResponse of type "urn:zimbraMail":grantPermissionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ICalReplyRequest of type "urn:zimbraMail":iCalReplyRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ICalReplyResponse of type "urn:zimbraMail":iCalReplyResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ImportAppointmentsRequest of type "urn:zimbraMail":importAppointmentsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ImportAppointmentsResponse of type "urn:zimbraMail":importAppointmentsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ImportContactsRequest of type "urn:zimbraMail":importContactsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ImportContactsResponse of type "urn:zimbraMail":importContactsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ImportDataRequest of type "urn:zimbraMail":importDataRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ImportDataResponse of type "urn:zimbraMail":importDataResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":InvalidateReminderDeviceRequest of type "urn:zimbraMail":invalidateReminderDeviceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":InvalidateReminderDeviceResponse of type "urn:zimbraMail":invalidateReminderDeviceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ItemActionRequest of type "urn:zimbraMail":itemActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ItemActionResponse of type "urn:zimbraMail":itemActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ListDocumentRevisionsRequest of type "urn:zimbraMail":listDocumentRevisionsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ListDocumentRevisionsResponse of type "urn:zimbraMail":listDocumentRevisionsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyAppointmentRequest of type "urn:zimbraMail":modifyAppointmentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyAppointmentResponse of type "urn:zimbraMail":modifyAppointmentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyContactRequest of type "urn:zimbraMail":modifyContactRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyContactResponse of type "urn:zimbraMail":modifyContactResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyDataSourceRequest of type "urn:zimbraMail":modifyDataSourceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyDataSourceResponse of type "urn:zimbraMail":modifyDataSourceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyFilterRulesRequest of type "urn:zimbraMail":modifyFilterRulesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyFilterRulesResponse of type "urn:zimbraMail":modifyFilterRulesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyMailboxMetadataRequest of type "urn:zimbraMail":modifyMailboxMetadataRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyMailboxMetadataResponse of type "urn:zimbraMail":modifyMailboxMetadataResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyOutgoingFilterRulesRequest of type "urn:zimbraMail":modifyOutgoingFilterRulesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyOutgoingFilterRulesResponse of type "urn:zimbraMail":modifyOutgoingFilterRulesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifySearchFolderRequest of type "urn:zimbraMail":modifySearchFolderRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifySearchFolderResponse of type "urn:zimbraMail":modifySearchFolderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyTaskRequest of type "urn:zimbraMail":modifyTaskRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":ModifyTaskResponse of type "urn:zimbraMail":modifyTaskResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":MsgActionRequest of type "urn:zimbraMail":msgActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":MsgActionResponse of type "urn:zimbraMail":msgActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":NoOpRequest of type "urn:zimbraMail":noOpRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":NoOpResponse of type "urn:zimbraMail":noOpResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":NoteActionRequest of type "urn:zimbraMail":noteActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":NoteActionResponse of type "urn:zimbraMail":noteActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":PurgeRevisionRequest of type "urn:zimbraMail":purgeRevisionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":PurgeRevisionResponse of type "urn:zimbraMail":purgeRevisionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":RankingActionRequest of type "urn:zimbraMail":rankingActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":RankingActionResponse of type "urn:zimbraMail":rankingActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":RegisterDeviceRequest of type "urn:zimbraMail":registerDeviceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":RegisterDeviceResponse of type "urn:zimbraMail":registerDeviceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":RemoveAttachmentsRequest of type "urn:zimbraMail":removeAttachmentsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":RemoveAttachmentsResponse of type "urn:zimbraMail":removeAttachmentsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":RevokePermissionRequest of type "urn:zimbraMail":revokePermissionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":RevokePermissionResponse of type "urn:zimbraMail":revokePermissionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SaveDocumentRequest of type "urn:zimbraMail":saveDocumentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SaveDocumentResponse of type "urn:zimbraMail":saveDocumentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SaveDraftRequest of type "urn:zimbraMail":saveDraftRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SaveDraftResponse of type "urn:zimbraMail":saveDraftResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SearchConvRequest of type "urn:zimbraMail":searchConvRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SearchConvResponse of type "urn:zimbraMail":searchConvResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SearchRequest of type "urn:zimbraMail":searchRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SearchResponse of type "urn:zimbraMail":searchResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendDeliveryReportRequest of type "urn:zimbraMail":sendDeliveryReportRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendDeliveryReportResponse of type "urn:zimbraMail":sendDeliveryReportResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendInviteReplyRequest of type "urn:zimbraMail":sendInviteReplyRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendInviteReplyResponse of type "urn:zimbraMail":sendInviteReplyResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendMsgRequest of type "urn:zimbraMail":sendMsgRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendMsgResponse of type "urn:zimbraMail":sendMsgResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendShareNotificationRequest of type "urn:zimbraMail":sendShareNotificationRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendShareNotificationResponse of type "urn:zimbraMail":sendShareNotificationResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendVerificationCodeRequest of type "urn:zimbraMail":sendVerificationCodeRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SendVerificationCodeResponse of type "urn:zimbraMail":sendVerificationCodeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SetAppointmentRequest of type "urn:zimbraMail":setAppointmentRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SetAppointmentResponse of type "urn:zimbraMail":setAppointmentResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SetCustomMetadataRequest of type "urn:zimbraMail":setCustomMetadataRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SetCustomMetadataResponse of type "urn:zimbraMail":setCustomMetadataResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SetMailboxMetadataRequest of type "urn:zimbraMail":setMailboxMetadataRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SetMailboxMetadataResponse of type "urn:zimbraMail":setMailboxMetadataResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SetTaskRequest of type "urn:zimbraMail":setTaskRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SetTaskResponse of type "urn:zimbraMail":setTaskResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SnoozeCalendarItemAlarmRequest of type "urn:zimbraMail":snoozeCalendarItemAlarmRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SnoozeCalendarItemAlarmResponse of type "urn:zimbraMail":snoozeCalendarItemAlarmResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SyncRequest of type "urn:zimbraMail":syncRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":SyncResponse of type "urn:zimbraMail":syncResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":TagActionRequest of type "urn:zimbraMail":tagActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":TagActionResponse of type "urn:zimbraMail":tagActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":TestDataSourceRequest of type "urn:zimbraMail":testDataSourceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":TestDataSourceResponse of type "urn:zimbraMail":testDataSourceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":UpdateDeviceStatusRequest of type "urn:zimbraMail":updateDeviceStatusRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":UpdateDeviceStatusResponse of type "urn:zimbraMail":updateDeviceStatusResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":VerifyCodeRequest of type "urn:zimbraMail":verifyCodeRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":VerifyCodeResponse of type "urn:zimbraMail":verifyCodeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":WaitSetRequest of type "urn:zimbraMail":waitSetRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":WaitSetResponse of type "urn:zimbraMail":waitSetResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":cn of type "urn:zimbraMail":contactAttachSpec.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":content of type "urn:zimbraMail":content.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":doc of type "urn:zimbraMail":docAttachSpec.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":folder of type "urn:zimbraMail":folder.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":link of type "urn:zimbraMail":mountpoint.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":m of type "urn:zimbraMail":msgAttachSpec.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":meta of type "urn:zimbraMail":mailCustomMetadata.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":mp of type "urn:zimbraMail":mimePartAttachSpec.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":policy of type "urn:zimbraMail":policy.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":retentionPolicy of type "urn:zimbraMail":retentionPolicy.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraMail":search of type "urn:zimbraMail":searchFolder.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:zimbraMail                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:zimbraRepl                                                           *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:zimbraRepl":BecomeMasterRequest of type "urn:zimbraRepl":becomeMasterRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":BecomeMasterResponse of type "urn:zimbraRepl":becomeMasterResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":BringDownServiceIPRequest of type "urn:zimbraRepl":bringDownServiceIPRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":BringDownServiceIPResponse of type "urn:zimbraRepl":bringDownServiceIPResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":BringUpServiceIPRequest of type "urn:zimbraRepl":bringUpServiceIPRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":BringUpServiceIPResponse of type "urn:zimbraRepl":bringUpServiceIPResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":ReplicationStatusRequest of type "urn:zimbraRepl":replicationStatusRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":ReplicationStatusResponse of type "urn:zimbraRepl":replicationStatusResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StartCatchupRequest of type "urn:zimbraRepl":startCatchupRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StartCatchupResponse of type "urn:zimbraRepl":startCatchupResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StartFailoverClientRequest of type "urn:zimbraRepl":startFailoverClientRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StartFailoverClientResponse of type "urn:zimbraRepl":startFailoverClientResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StartFailoverDaemonRequest of type "urn:zimbraRepl":startFailoverDaemonRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StartFailoverDaemonResponse of type "urn:zimbraRepl":startFailoverDaemonResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StopFailoverClientRequest of type "urn:zimbraRepl":stopFailoverClientRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StopFailoverClientResponse of type "urn:zimbraRepl":stopFailoverClientResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StopFailoverDaemonRequest of type "urn:zimbraRepl":stopFailoverDaemonRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraRepl":StopFailoverDaemonResponse of type "urn:zimbraRepl":stopFailoverDaemonResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:zimbraRepl                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:zimbraSync                                                           *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:zimbraSync":CancelPendingRemoteWipeRequest of type "urn:zimbraSync":cancelPendingRemoteWipeRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":CancelPendingRemoteWipeResponse of type "urn:zimbraSync":cancelPendingRemoteWipeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":GetDeviceStatusRequest of type "urn:zimbraSync":getDeviceStatusRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":GetDeviceStatusResponse of type "urn:zimbraSync":getDeviceStatusResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":RemoteWipeRequest of type "urn:zimbraSync":remoteWipeRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":RemoteWipeResponse of type "urn:zimbraSync":remoteWipeResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":RemoveDeviceRequest of type "urn:zimbraSync":removeDeviceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":RemoveDeviceResponse of type "urn:zimbraSync":removeDeviceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":ResumeDeviceRequest of type "urn:zimbraSync":resumeDeviceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":ResumeDeviceResponse of type "urn:zimbraSync":resumeDeviceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":SuspendDeviceRequest of type "urn:zimbraSync":suspendDeviceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraSync":SuspendDeviceResponse of type "urn:zimbraSync":suspendDeviceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:zimbraSync                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:zimbraVoice                                                          *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:zimbraVoice":ChangeUCPasswordRequest of type "urn:zimbraVoice":changeUCPasswordRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ChangeUCPasswordResponse of type "urn:zimbraVoice":changeUCPasswordResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetUCInfoRequest of type "urn:zimbraVoice":getUCInfoRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetUCInfoResponse of type "urn:zimbraVoice":getUCInfoResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetVoiceFeaturesRequest of type "urn:zimbraVoice":getVoiceFeaturesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetVoiceFeaturesResponse of type "urn:zimbraVoice":getVoiceFeaturesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetVoiceFolderRequest of type "urn:zimbraVoice":getVoiceFolderRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetVoiceFolderResponse of type "urn:zimbraVoice":getVoiceFolderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetVoiceInfoRequest of type "urn:zimbraVoice":getVoiceInfoRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetVoiceInfoResponse of type "urn:zimbraVoice":getVoiceInfoResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetVoiceMailPrefsRequest of type "urn:zimbraVoice":getVoiceMailPrefsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":GetVoiceMailPrefsResponse of type "urn:zimbraVoice":getVoiceMailPrefsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ModifyFromNumRequest of type "urn:zimbraVoice":modifyFromNumRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ModifyFromNumResponse of type "urn:zimbraVoice":modifyFromNumResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ModifyVoiceFeaturesRequest of type "urn:zimbraVoice":modifyVoiceFeaturesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ModifyVoiceFeaturesResponse of type "urn:zimbraVoice":modifyVoiceFeaturesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ModifyVoiceMailPinRequest of type "urn:zimbraVoice":modifyVoiceMailPinRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ModifyVoiceMailPinResponse of type "urn:zimbraVoice":modifyVoiceMailPinResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ModifyVoiceMailPrefsRequest of type "urn:zimbraVoice":modifyVoiceMailPrefsRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ModifyVoiceMailPrefsResponse of type "urn:zimbraVoice":modifyVoiceMailPrefsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ResetVoiceFeaturesRequest of type "urn:zimbraVoice":resetVoiceFeaturesRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":ResetVoiceFeaturesResponse of type "urn:zimbraVoice":resetVoiceFeaturesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":SearchVoiceRequest of type "urn:zimbraVoice":searchVoiceRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":SearchVoiceResponse of type "urn:zimbraVoice":searchVoiceResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":UploadVoiceMailRequest of type "urn:zimbraVoice":uploadVoiceMailRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":UploadVoiceMailResponse of type "urn:zimbraVoice":uploadVoiceMailResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":VoiceMsgActionRequest of type "urn:zimbraVoice":voiceMsgActionRequest.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "urn:zimbraVoice":VoiceMsgActionResponse of type "urn:zimbraVoice":voiceMsgActionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:zimbraVoice                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	zcsPortBinding 
//gsoap ns1  service type:	zcsPortType 
//gsoap ns1  service port:	https://mail.ordzhonikidze-sanatorium.ru:443/service/soap/ 
//gsoap ns1  service namespace:	http://www.zimbra.com/wsdl/ZimbraService.wsdl 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ZimbraService Definitions

@section ZimbraService_bindings Service Bindings

  - @ref zcsPortBinding

@section ZimbraService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page zcsPortBinding Binding "zcsPortBinding"

@section zcsPortBinding_operations Operations of Binding  "zcsPortBinding"

  - @ref __ns1__authRequest

  - @ref __ns1__autoCompleteGalRequest

  - @ref __ns1__changePasswordRequest

  - @ref __ns1__checkLicenseRequest

  - @ref __ns1__checkRightsRequest

  - @ref __ns1__createDistributionListRequest

  - @ref __ns1__createIdentityRequest

  - @ref __ns1__createSignatureRequest

  - @ref __ns1__deleteIdentityRequest

  - @ref __ns1__deleteSignatureRequest

  - @ref __ns1__discoverRightsRequest

  - @ref __ns1__distributionListActionRequest

  - @ref __ns1__endSessionRequest

  - @ref __ns1__getAccountDistributionListsRequest

  - @ref __ns1__getAccountInfoRequest

  - @ref __ns1__getAllLocalesRequest

  - @ref __ns1__getAvailableCsvFormatsRequest

  - @ref __ns1__getAvailableLocalesRequest

  - @ref __ns1__getAvailableSkinsRequest

  - @ref __ns1__getDistributionListMembersRequest

  - @ref __ns1__getDistributionListRequest

  - @ref __ns1__getIdentitiesRequest

  - @ref __ns1__getInfoRequest

  - @ref __ns1__getPrefsRequest

  - @ref __ns1__getRightsRequest

  - @ref __ns1__getSMIMEPublicCertsRequest

  - @ref __ns1__getShareInfoRequest

  - @ref __ns1__getSignaturesRequest

  - @ref __ns1__getVersionInfoRequest

  - @ref __ns1__getWhiteBlackListRequest

  - @ref __ns1__grantRightsRequest

  - @ref __ns1__modifyIdentityRequest

  - @ref __ns1__modifyPrefsRequest

  - @ref __ns1__modifyPropertiesRequest

  - @ref __ns1__modifySignatureRequest

  - @ref __ns1__modifyWhiteBlackListRequest

  - @ref __ns1__modifyZimletPrefsRequest

  - @ref __ns1__revokeRightsRequest

  - @ref __ns1__searchCalendarResourcesRequest

  - @ref __ns1__searchGalRequest

  - @ref __ns1__subscribeDistributionListRequest

  - @ref __ns1__syncGalRequest

  - @ref __ns1__addAppointmentInviteRequest

  - @ref __ns1__addCommentRequest

  - @ref __ns1__addMsgRequest

  - @ref __ns1__addTaskInviteRequest

  - @ref __ns1__announceOrganizerChangeRequest

  - @ref __ns1__applyFilterRulesRequest

  - @ref __ns1__applyOutgoingFilterRulesRequest

  - @ref __ns1__autoCompleteRequest

  - @ref __ns1__bounceMsgRequest

  - @ref __ns1__browseRequest

  - @ref __ns1__cancelAppointmentRequest

  - @ref __ns1__cancelTaskRequest

  - @ref __ns1__checkDeviceStatusRequest

  - @ref __ns1__checkPermissionRequest

  - @ref __ns1__checkRecurConflictsRequest

  - @ref __ns1__checkSpellingRequest

  - @ref __ns1__completeTaskInstanceRequest

  - @ref __ns1__contactActionRequest

  - @ref __ns1__convActionRequest

  - @ref __ns1__counterAppointmentRequest

  - @ref __ns1__createAppointmentExceptionRequest

  - @ref __ns1__createAppointmentRequest

  - @ref __ns1__createContactRequest

  - @ref __ns1__createDataSourceRequest

  - @ref __ns1__createFolderRequest

  - @ref __ns1__createMountpointRequest

  - @ref __ns1__createNoteRequest

  - @ref __ns1__createSearchFolderRequest

  - @ref __ns1__createTagRequest

  - @ref __ns1__createTaskExceptionRequest

  - @ref __ns1__createTaskRequest

  - @ref __ns1__createWaitSetRequest

  - @ref __ns1__declineCounterAppointmentRequest

  - @ref __ns1__deleteDataSourceRequest

  - @ref __ns1__deleteDeviceRequest

  - @ref __ns1__destroyWaitSetRequest

  - @ref __ns1__diffDocumentRequest

  - @ref __ns1__dismissCalendarItemAlarmRequest

  - @ref __ns1__documentActionRequest

  - @ref __ns1__emptyDumpsterRequest

  - @ref __ns1__enableSharedReminderRequest

  - @ref __ns1__expandRecurRequest

  - @ref __ns1__exportContactsRequest

  - @ref __ns1__folderActionRequest

  - @ref __ns1__forwardAppointmentInviteRequest

  - @ref __ns1__forwardAppointmentRequest

  - @ref __ns1__generateUUIDRequest

  - @ref __ns1__getActivityStreamRequest

  - @ref __ns1__getAllDevicesRequest

  - @ref __ns1__getAppointmentRequest

  - @ref __ns1__getApptSummariesRequest

  - @ref __ns1__getCalendarItemSummariesRequest

  - @ref __ns1__getCommentsRequest

  - @ref __ns1__getContactsRequest

  - @ref __ns1__getConvRequest

  - @ref __ns1__getCustomMetadataRequest

  - @ref __ns1__getDataSourcesRequest

  - @ref __ns1__getDocumentShareURLRequest

  - @ref __ns1__getEffectiveFolderPermsRequest

  - @ref __ns1__getFilterRulesRequest

  - @ref __ns1__getFolderRequest

  - @ref __ns1__getFreeBusyRequest

  - @ref __ns1__getICalRequest

  - @ref __ns1__getImportStatusRequest

  - @ref __ns1__getItemRequest

  - @ref __ns1__getMailboxMetadataRequest

  - @ref __ns1__getMiniCalRequest

  - @ref __ns1__getMsgMetadataRequest

  - @ref __ns1__getMsgRequest

  - @ref __ns1__getNoteRequest

  - @ref __ns1__getNotificationsRequest

  - @ref __ns1__getOutgoingFilterRulesRequest

  - @ref __ns1__getPermissionRequest

  - @ref __ns1__getRecurRequest

  - @ref __ns1__getSearchFolderRequest

  - @ref __ns1__getShareDetailsRequest

  - @ref __ns1__getShareNotificationsRequest

  - @ref __ns1__getSpellDictionariesRequest

  - @ref __ns1__getSystemRetentionPolicyRequest

  - @ref __ns1__getTagRequest

  - @ref __ns1__getTaskRequest

  - @ref __ns1__getTaskSummariesRequest

  - @ref __ns1__getWatchersRequest

  - @ref __ns1__getWatchingItemsRequest

  - @ref __ns1__getWorkingHoursRequest

  - @ref __ns1__getYahooAuthTokenRequest

  - @ref __ns1__getYahooCookieRequest

  - @ref __ns1__grantPermissionRequest

  - @ref __ns1__iCalReplyRequest

  - @ref __ns1__importAppointmentsRequest

  - @ref __ns1__importContactsRequest

  - @ref __ns1__importDataRequest

  - @ref __ns1__invalidateReminderDeviceRequest

  - @ref __ns1__itemActionRequest

  - @ref __ns1__listDocumentRevisionsRequest

  - @ref __ns1__modifyAppointmentRequest

  - @ref __ns1__modifyContactRequest

  - @ref __ns1__modifyDataSourceRequest

  - @ref __ns1__modifyFilterRulesRequest

  - @ref __ns1__modifyMailboxMetadataRequest

  - @ref __ns1__modifyOutgoingFilterRulesRequest

  - @ref __ns1__modifySearchFolderRequest

  - @ref __ns1__modifyTaskRequest

  - @ref __ns1__msgActionRequest

  - @ref __ns1__noOpRequest

  - @ref __ns1__noteActionRequest

  - @ref __ns1__purgeRevisionRequest

  - @ref __ns1__rankingActionRequest

  - @ref __ns1__registerDeviceRequest

  - @ref __ns1__removeAttachmentsRequest

  - @ref __ns1__revokePermissionRequest

  - @ref __ns1__saveDocumentRequest

  - @ref __ns1__saveDraftRequest

  - @ref __ns1__searchConvRequest

  - @ref __ns1__searchRequest

  - @ref __ns1__sendDeliveryReportRequest

  - @ref __ns1__sendInviteReplyRequest

  - @ref __ns1__sendMsgRequest

  - @ref __ns1__sendShareNotificationRequest

  - @ref __ns1__sendVerificationCodeRequest

  - @ref __ns1__setAppointmentRequest

  - @ref __ns1__setCustomMetadataRequest

  - @ref __ns1__setMailboxMetadataRequest

  - @ref __ns1__setTaskRequest

  - @ref __ns1__snoozeCalendarItemAlarmRequest

  - @ref __ns1__syncRequest

  - @ref __ns1__tagActionRequest

  - @ref __ns1__testDataSourceRequest

  - @ref __ns1__updateDeviceStatusRequest

  - @ref __ns1__verifyCodeRequest

  - @ref __ns1__waitSetRequest

  - @ref __ns1__becomeMasterRequest

  - @ref __ns1__bringDownServiceIPRequest

  - @ref __ns1__bringUpServiceIPRequest

  - @ref __ns1__replicationStatusRequest

  - @ref __ns1__startCatchupRequest

  - @ref __ns1__startFailoverClientRequest

  - @ref __ns1__startFailoverDaemonRequest

  - @ref __ns1__stopFailoverClientRequest

  - @ref __ns1__stopFailoverDaemonRequest

  - @ref __ns1__cancelPendingRemoteWipeRequest

  - @ref __ns1__getDeviceStatusRequest

  - @ref __ns1__remoteWipeRequest

  - @ref __ns1__removeDeviceRequest

  - @ref __ns1__resumeDeviceRequest

  - @ref __ns1__suspendDeviceRequest

  - @ref __ns1__changeUCPasswordRequest

  - @ref __ns1__getUCInfoRequest

  - @ref __ns1__getVoiceFeaturesRequest

  - @ref __ns1__getVoiceFolderRequest

  - @ref __ns1__getVoiceInfoRequest

  - @ref __ns1__getVoiceMailPrefsRequest

  - @ref __ns1__modifyFromNumRequest

  - @ref __ns1__modifyVoiceFeaturesRequest

  - @ref __ns1__modifyVoiceMailPinRequest

  - @ref __ns1__modifyVoiceMailPrefsRequest

  - @ref __ns1__resetVoiceFeaturesRequest

  - @ref __ns1__searchVoiceRequest

  - @ref __ns1__uploadVoiceMailRequest

  - @ref __ns1__voiceMsgActionRequest

@section zcsPortBinding_ports Endpoints of Binding  "zcsPortBinding"

  - https://mail.ordzhonikidze-sanatorium.ru:443/service/soap/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Header                                                                *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Header is part of the gSOAP context and its content is accessed
through the soap.header variable. You may have to set the soap.actor variable
to serialize SOAP Headers with SOAP-ENV:actor or SOAP-ENV:role attributes.
Use option -j to remove entire SOAP Header definition.
Use option -k to remove the mustUnderstand qualifiers.

*/
struct SOAP_ENV__Header
{
    mustUnderstand                       // must be understood by receiver
/// "context" SOAP Header part element
    ns3__HeaderContext*                  ns3__context                  ;

};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   zcsPortBinding                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__authRequest                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__authRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/Auth"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__authRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__authRequest*                   ns4__AuthRequest,
    // response parameters:
    ns4__authResponse*                  ns4__AuthResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__authRequest(
    struct soap *soap,
    // request parameters:
    ns4__authRequest*                   ns4__AuthRequest,
    // response parameters:
    ns4__authResponse*                  ns4__AuthResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	authRequest document
//gsoap ns1  service method-encoding:	authRequest literal
//gsoap ns1  service method-action:	authRequest urn:zimbraAccount/Auth
//gsoap ns1  service method-input-header-part:	authRequest ns3__context
int __ns1__authRequest(
    ns4__authRequest*                   ns4__AuthRequest,	///< Request parameter
    ns4__authResponse*                  ns4__AuthResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__autoCompleteGalRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__autoCompleteGalRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/AutoCompleteGal"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__autoCompleteGalRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__autoCompleteGalRequest*        ns4__AutoCompleteGalRequest,
    // response parameters:
    ns4__autoCompleteGalResponse*       ns4__AutoCompleteGalResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__autoCompleteGalRequest(
    struct soap *soap,
    // request parameters:
    ns4__autoCompleteGalRequest*        ns4__AutoCompleteGalRequest,
    // response parameters:
    ns4__autoCompleteGalResponse*       ns4__AutoCompleteGalResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	autoCompleteGalRequest document
//gsoap ns1  service method-encoding:	autoCompleteGalRequest literal
//gsoap ns1  service method-action:	autoCompleteGalRequest urn:zimbraAccount/AutoCompleteGal
//gsoap ns1  service method-input-header-part:	autoCompleteGalRequest ns3__context
int __ns1__autoCompleteGalRequest(
    ns4__autoCompleteGalRequest*        ns4__AutoCompleteGalRequest,	///< Request parameter
    ns4__autoCompleteGalResponse*       ns4__AutoCompleteGalResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__changePasswordRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__changePasswordRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/ChangePassword"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__changePasswordRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__changePasswordRequest*         ns4__ChangePasswordRequest,
    // response parameters:
    ns4__changePasswordResponse*        ns4__ChangePasswordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__changePasswordRequest(
    struct soap *soap,
    // request parameters:
    ns4__changePasswordRequest*         ns4__ChangePasswordRequest,
    // response parameters:
    ns4__changePasswordResponse*        ns4__ChangePasswordResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	changePasswordRequest document
//gsoap ns1  service method-encoding:	changePasswordRequest literal
//gsoap ns1  service method-action:	changePasswordRequest urn:zimbraAccount/ChangePassword
//gsoap ns1  service method-input-header-part:	changePasswordRequest ns3__context
int __ns1__changePasswordRequest(
    ns4__changePasswordRequest*         ns4__ChangePasswordRequest,	///< Request parameter
    ns4__changePasswordResponse*        ns4__ChangePasswordResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkLicenseRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkLicenseRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/CheckLicense"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkLicenseRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__checkLicenseRequest*           ns4__CheckLicenseRequest,
    // response parameters:
    ns4__checkLicenseResponse*          ns4__CheckLicenseResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkLicenseRequest(
    struct soap *soap,
    // request parameters:
    ns4__checkLicenseRequest*           ns4__CheckLicenseRequest,
    // response parameters:
    ns4__checkLicenseResponse*          ns4__CheckLicenseResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	checkLicenseRequest document
//gsoap ns1  service method-encoding:	checkLicenseRequest literal
//gsoap ns1  service method-action:	checkLicenseRequest urn:zimbraAccount/CheckLicense
//gsoap ns1  service method-input-header-part:	checkLicenseRequest ns3__context
int __ns1__checkLicenseRequest(
    ns4__checkLicenseRequest*           ns4__CheckLicenseRequest,	///< Request parameter
    ns4__checkLicenseResponse*          ns4__CheckLicenseResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkRightsRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkRightsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/CheckRights"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkRightsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__checkRightsRequest*            ns4__CheckRightsRequest,
    // response parameters:
    ns4__checkRightsResponse*           ns4__CheckRightsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkRightsRequest(
    struct soap *soap,
    // request parameters:
    ns4__checkRightsRequest*            ns4__CheckRightsRequest,
    // response parameters:
    ns4__checkRightsResponse*           ns4__CheckRightsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	checkRightsRequest document
//gsoap ns1  service method-encoding:	checkRightsRequest literal
//gsoap ns1  service method-action:	checkRightsRequest urn:zimbraAccount/CheckRights
//gsoap ns1  service method-input-header-part:	checkRightsRequest ns3__context
int __ns1__checkRightsRequest(
    ns4__checkRightsRequest*            ns4__CheckRightsRequest,	///< Request parameter
    ns4__checkRightsResponse*           ns4__CheckRightsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createDistributionListRequest                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createDistributionListRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/CreateDistributionList"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createDistributionListRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__createDistributionListRequest* ns4__CreateDistributionListRequest,
    // response parameters:
    ns4__createDistributionListResponse* ns4__CreateDistributionListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createDistributionListRequest(
    struct soap *soap,
    // request parameters:
    ns4__createDistributionListRequest* ns4__CreateDistributionListRequest,
    // response parameters:
    ns4__createDistributionListResponse* ns4__CreateDistributionListResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createDistributionListRequest document
//gsoap ns1  service method-encoding:	createDistributionListRequest literal
//gsoap ns1  service method-action:	createDistributionListRequest urn:zimbraAccount/CreateDistributionList
//gsoap ns1  service method-input-header-part:	createDistributionListRequest ns3__context
int __ns1__createDistributionListRequest(
    ns4__createDistributionListRequest* ns4__CreateDistributionListRequest,	///< Request parameter
    ns4__createDistributionListResponse* ns4__CreateDistributionListResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createIdentityRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createIdentityRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/CreateIdentity"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createIdentityRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__createIdentityRequest*         ns4__CreateIdentityRequest,
    // response parameters:
    ns4__createIdentityResponse*        ns4__CreateIdentityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createIdentityRequest(
    struct soap *soap,
    // request parameters:
    ns4__createIdentityRequest*         ns4__CreateIdentityRequest,
    // response parameters:
    ns4__createIdentityResponse*        ns4__CreateIdentityResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createIdentityRequest document
//gsoap ns1  service method-encoding:	createIdentityRequest literal
//gsoap ns1  service method-action:	createIdentityRequest urn:zimbraAccount/CreateIdentity
//gsoap ns1  service method-input-header-part:	createIdentityRequest ns3__context
int __ns1__createIdentityRequest(
    ns4__createIdentityRequest*         ns4__CreateIdentityRequest,	///< Request parameter
    ns4__createIdentityResponse*        ns4__CreateIdentityResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createSignatureRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createSignatureRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/CreateSignature"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createSignatureRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__createSignatureRequest*        ns4__CreateSignatureRequest,
    // response parameters:
    ns4__createSignatureResponse*       ns4__CreateSignatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createSignatureRequest(
    struct soap *soap,
    // request parameters:
    ns4__createSignatureRequest*        ns4__CreateSignatureRequest,
    // response parameters:
    ns4__createSignatureResponse*       ns4__CreateSignatureResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createSignatureRequest document
//gsoap ns1  service method-encoding:	createSignatureRequest literal
//gsoap ns1  service method-action:	createSignatureRequest urn:zimbraAccount/CreateSignature
//gsoap ns1  service method-input-header-part:	createSignatureRequest ns3__context
int __ns1__createSignatureRequest(
    ns4__createSignatureRequest*        ns4__CreateSignatureRequest,	///< Request parameter
    ns4__createSignatureResponse*       ns4__CreateSignatureResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteIdentityRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__deleteIdentityRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/DeleteIdentity"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteIdentityRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__deleteIdentityRequest*         ns4__DeleteIdentityRequest,
    // response parameters:
    ns4__deleteIdentityResponse*        ns4__DeleteIdentityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteIdentityRequest(
    struct soap *soap,
    // request parameters:
    ns4__deleteIdentityRequest*         ns4__DeleteIdentityRequest,
    // response parameters:
    ns4__deleteIdentityResponse*        ns4__DeleteIdentityResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	deleteIdentityRequest document
//gsoap ns1  service method-encoding:	deleteIdentityRequest literal
//gsoap ns1  service method-action:	deleteIdentityRequest urn:zimbraAccount/DeleteIdentity
//gsoap ns1  service method-input-header-part:	deleteIdentityRequest ns3__context
int __ns1__deleteIdentityRequest(
    ns4__deleteIdentityRequest*         ns4__DeleteIdentityRequest,	///< Request parameter
    ns4__deleteIdentityResponse*        ns4__DeleteIdentityResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteSignatureRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__deleteSignatureRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/DeleteSignature"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteSignatureRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__deleteSignatureRequest*        ns4__DeleteSignatureRequest,
    // response parameters:
    ns4__deleteSignatureResponse*       ns4__DeleteSignatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteSignatureRequest(
    struct soap *soap,
    // request parameters:
    ns4__deleteSignatureRequest*        ns4__DeleteSignatureRequest,
    // response parameters:
    ns4__deleteSignatureResponse*       ns4__DeleteSignatureResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	deleteSignatureRequest document
//gsoap ns1  service method-encoding:	deleteSignatureRequest literal
//gsoap ns1  service method-action:	deleteSignatureRequest urn:zimbraAccount/DeleteSignature
//gsoap ns1  service method-input-header-part:	deleteSignatureRequest ns3__context
int __ns1__deleteSignatureRequest(
    ns4__deleteSignatureRequest*        ns4__DeleteSignatureRequest,	///< Request parameter
    ns4__deleteSignatureResponse*       ns4__DeleteSignatureResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__discoverRightsRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__discoverRightsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/DiscoverRights"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__discoverRightsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__discoverRightsRequest*         ns4__DiscoverRightsRequest,
    // response parameters:
    ns4__discoverRightsResponse*        ns4__DiscoverRightsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__discoverRightsRequest(
    struct soap *soap,
    // request parameters:
    ns4__discoverRightsRequest*         ns4__DiscoverRightsRequest,
    // response parameters:
    ns4__discoverRightsResponse*        ns4__DiscoverRightsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	discoverRightsRequest document
//gsoap ns1  service method-encoding:	discoverRightsRequest literal
//gsoap ns1  service method-action:	discoverRightsRequest urn:zimbraAccount/DiscoverRights
//gsoap ns1  service method-input-header-part:	discoverRightsRequest ns3__context
int __ns1__discoverRightsRequest(
    ns4__discoverRightsRequest*         ns4__DiscoverRightsRequest,	///< Request parameter
    ns4__discoverRightsResponse*        ns4__DiscoverRightsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__distributionListActionRequest                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__distributionListActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/DistributionListAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__distributionListActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__distributionListActionRequest* ns4__DistributionListActionRequest,
    // response parameters:
    ns4__distributionListActionResponse* ns4__DistributionListActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__distributionListActionRequest(
    struct soap *soap,
    // request parameters:
    ns4__distributionListActionRequest* ns4__DistributionListActionRequest,
    // response parameters:
    ns4__distributionListActionResponse* ns4__DistributionListActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	distributionListActionRequest document
//gsoap ns1  service method-encoding:	distributionListActionRequest literal
//gsoap ns1  service method-action:	distributionListActionRequest urn:zimbraAccount/DistributionListAction
//gsoap ns1  service method-input-header-part:	distributionListActionRequest ns3__context
int __ns1__distributionListActionRequest(
    ns4__distributionListActionRequest* ns4__DistributionListActionRequest,	///< Request parameter
    ns4__distributionListActionResponse* ns4__DistributionListActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__endSessionRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__endSessionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/EndSession"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__endSessionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__endSessionRequest*             ns4__EndSessionRequest,
    // response parameters:
    ns4__endSessionResponse*            ns4__EndSessionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__endSessionRequest(
    struct soap *soap,
    // request parameters:
    ns4__endSessionRequest*             ns4__EndSessionRequest,
    // response parameters:
    ns4__endSessionResponse*            ns4__EndSessionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	endSessionRequest document
//gsoap ns1  service method-encoding:	endSessionRequest literal
//gsoap ns1  service method-action:	endSessionRequest urn:zimbraAccount/EndSession
//gsoap ns1  service method-input-header-part:	endSessionRequest ns3__context
int __ns1__endSessionRequest(
    ns4__endSessionRequest*             ns4__EndSessionRequest,	///< Request parameter
    ns4__endSessionResponse*            ns4__EndSessionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAccountDistributionListsRequest                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAccountDistributionListsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetAccountDistributionLists"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAccountDistributionListsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getAccountDistributionListsRequest* ns4__GetAccountDistributionListsRequest,
    // response parameters:
    ns4__getAccountDistributionListsResponse* ns4__GetAccountDistributionListsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAccountDistributionListsRequest(
    struct soap *soap,
    // request parameters:
    ns4__getAccountDistributionListsRequest* ns4__GetAccountDistributionListsRequest,
    // response parameters:
    ns4__getAccountDistributionListsResponse* ns4__GetAccountDistributionListsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAccountDistributionListsRequest document
//gsoap ns1  service method-encoding:	getAccountDistributionListsRequest literal
//gsoap ns1  service method-action:	getAccountDistributionListsRequest urn:zimbraAccount/GetAccountDistributionLists
//gsoap ns1  service method-input-header-part:	getAccountDistributionListsRequest ns3__context
int __ns1__getAccountDistributionListsRequest(
    ns4__getAccountDistributionListsRequest* ns4__GetAccountDistributionListsRequest,	///< Request parameter
    ns4__getAccountDistributionListsResponse* ns4__GetAccountDistributionListsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAccountInfoRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAccountInfoRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetAccountInfo"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAccountInfoRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getAccountInfoRequest*         ns4__GetAccountInfoRequest,
    // response parameters:
    ns4__getAccountInfoResponse*        ns4__GetAccountInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAccountInfoRequest(
    struct soap *soap,
    // request parameters:
    ns4__getAccountInfoRequest*         ns4__GetAccountInfoRequest,
    // response parameters:
    ns4__getAccountInfoResponse*        ns4__GetAccountInfoResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAccountInfoRequest document
//gsoap ns1  service method-encoding:	getAccountInfoRequest literal
//gsoap ns1  service method-action:	getAccountInfoRequest urn:zimbraAccount/GetAccountInfo
//gsoap ns1  service method-input-header-part:	getAccountInfoRequest ns3__context
int __ns1__getAccountInfoRequest(
    ns4__getAccountInfoRequest*         ns4__GetAccountInfoRequest,	///< Request parameter
    ns4__getAccountInfoResponse*        ns4__GetAccountInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAllLocalesRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAllLocalesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetAllLocales"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAllLocalesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getAllLocalesRequest*          ns4__GetAllLocalesRequest,
    // response parameters:
    ns4__getAllLocalesResponse*         ns4__GetAllLocalesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAllLocalesRequest(
    struct soap *soap,
    // request parameters:
    ns4__getAllLocalesRequest*          ns4__GetAllLocalesRequest,
    // response parameters:
    ns4__getAllLocalesResponse*         ns4__GetAllLocalesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAllLocalesRequest document
//gsoap ns1  service method-encoding:	getAllLocalesRequest literal
//gsoap ns1  service method-action:	getAllLocalesRequest urn:zimbraAccount/GetAllLocales
//gsoap ns1  service method-input-header-part:	getAllLocalesRequest ns3__context
int __ns1__getAllLocalesRequest(
    ns4__getAllLocalesRequest*          ns4__GetAllLocalesRequest,	///< Request parameter
    ns4__getAllLocalesResponse*         ns4__GetAllLocalesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAvailableCsvFormatsRequest                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAvailableCsvFormatsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetAvailableCsvFormats"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAvailableCsvFormatsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getAvailableCsvFormatsRequest* ns4__GetAvailableCsvFormatsRequest,
    // response parameters:
    ns4__getAvailableCsvFormatsResponse* ns4__GetAvailableCsvFormatsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAvailableCsvFormatsRequest(
    struct soap *soap,
    // request parameters:
    ns4__getAvailableCsvFormatsRequest* ns4__GetAvailableCsvFormatsRequest,
    // response parameters:
    ns4__getAvailableCsvFormatsResponse* ns4__GetAvailableCsvFormatsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAvailableCsvFormatsRequest document
//gsoap ns1  service method-encoding:	getAvailableCsvFormatsRequest literal
//gsoap ns1  service method-action:	getAvailableCsvFormatsRequest urn:zimbraAccount/GetAvailableCsvFormats
//gsoap ns1  service method-input-header-part:	getAvailableCsvFormatsRequest ns3__context
int __ns1__getAvailableCsvFormatsRequest(
    ns4__getAvailableCsvFormatsRequest* ns4__GetAvailableCsvFormatsRequest,	///< Request parameter
    ns4__getAvailableCsvFormatsResponse* ns4__GetAvailableCsvFormatsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAvailableLocalesRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAvailableLocalesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetAvailableLocales"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAvailableLocalesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getAvailableLocalesRequest*    ns4__GetAvailableLocalesRequest,
    // response parameters:
    ns4__getAvailableLocalesResponse*   ns4__GetAvailableLocalesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAvailableLocalesRequest(
    struct soap *soap,
    // request parameters:
    ns4__getAvailableLocalesRequest*    ns4__GetAvailableLocalesRequest,
    // response parameters:
    ns4__getAvailableLocalesResponse*   ns4__GetAvailableLocalesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAvailableLocalesRequest document
//gsoap ns1  service method-encoding:	getAvailableLocalesRequest literal
//gsoap ns1  service method-action:	getAvailableLocalesRequest urn:zimbraAccount/GetAvailableLocales
//gsoap ns1  service method-input-header-part:	getAvailableLocalesRequest ns3__context
int __ns1__getAvailableLocalesRequest(
    ns4__getAvailableLocalesRequest*    ns4__GetAvailableLocalesRequest,	///< Request parameter
    ns4__getAvailableLocalesResponse*   ns4__GetAvailableLocalesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAvailableSkinsRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAvailableSkinsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetAvailableSkins"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAvailableSkinsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getAvailableSkinsRequest*      ns4__GetAvailableSkinsRequest,
    // response parameters:
    ns4__getAvailableSkinsResponse*     ns4__GetAvailableSkinsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAvailableSkinsRequest(
    struct soap *soap,
    // request parameters:
    ns4__getAvailableSkinsRequest*      ns4__GetAvailableSkinsRequest,
    // response parameters:
    ns4__getAvailableSkinsResponse*     ns4__GetAvailableSkinsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAvailableSkinsRequest document
//gsoap ns1  service method-encoding:	getAvailableSkinsRequest literal
//gsoap ns1  service method-action:	getAvailableSkinsRequest urn:zimbraAccount/GetAvailableSkins
//gsoap ns1  service method-input-header-part:	getAvailableSkinsRequest ns3__context
int __ns1__getAvailableSkinsRequest(
    ns4__getAvailableSkinsRequest*      ns4__GetAvailableSkinsRequest,	///< Request parameter
    ns4__getAvailableSkinsResponse*     ns4__GetAvailableSkinsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDistributionListMembersRequest                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getDistributionListMembersRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetDistributionListMembers"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDistributionListMembersRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getDistributionListMembersRequest* ns4__GetDistributionListMembersRequest,
    // response parameters:
    ns4__getDistributionListMembersResponse* ns4__GetDistributionListMembersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDistributionListMembersRequest(
    struct soap *soap,
    // request parameters:
    ns4__getDistributionListMembersRequest* ns4__GetDistributionListMembersRequest,
    // response parameters:
    ns4__getDistributionListMembersResponse* ns4__GetDistributionListMembersResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDistributionListMembersRequest document
//gsoap ns1  service method-encoding:	getDistributionListMembersRequest literal
//gsoap ns1  service method-action:	getDistributionListMembersRequest urn:zimbraAccount/GetDistributionListMembers
//gsoap ns1  service method-input-header-part:	getDistributionListMembersRequest ns3__context
int __ns1__getDistributionListMembersRequest(
    ns4__getDistributionListMembersRequest* ns4__GetDistributionListMembersRequest,	///< Request parameter
    ns4__getDistributionListMembersResponse* ns4__GetDistributionListMembersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDistributionListRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getDistributionListRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetDistributionList"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDistributionListRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getDistributionListRequest*    ns4__GetDistributionListRequest,
    // response parameters:
    ns4__getDistributionListResponse*   ns4__GetDistributionListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDistributionListRequest(
    struct soap *soap,
    // request parameters:
    ns4__getDistributionListRequest*    ns4__GetDistributionListRequest,
    // response parameters:
    ns4__getDistributionListResponse*   ns4__GetDistributionListResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDistributionListRequest document
//gsoap ns1  service method-encoding:	getDistributionListRequest literal
//gsoap ns1  service method-action:	getDistributionListRequest urn:zimbraAccount/GetDistributionList
//gsoap ns1  service method-input-header-part:	getDistributionListRequest ns3__context
int __ns1__getDistributionListRequest(
    ns4__getDistributionListRequest*    ns4__GetDistributionListRequest,	///< Request parameter
    ns4__getDistributionListResponse*   ns4__GetDistributionListResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getIdentitiesRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getIdentitiesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetIdentities"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getIdentitiesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getIdentitiesRequest*          ns4__GetIdentitiesRequest,
    // response parameters:
    ns4__getIdentitiesResponse*         ns4__GetIdentitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getIdentitiesRequest(
    struct soap *soap,
    // request parameters:
    ns4__getIdentitiesRequest*          ns4__GetIdentitiesRequest,
    // response parameters:
    ns4__getIdentitiesResponse*         ns4__GetIdentitiesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getIdentitiesRequest document
//gsoap ns1  service method-encoding:	getIdentitiesRequest literal
//gsoap ns1  service method-action:	getIdentitiesRequest urn:zimbraAccount/GetIdentities
//gsoap ns1  service method-input-header-part:	getIdentitiesRequest ns3__context
int __ns1__getIdentitiesRequest(
    ns4__getIdentitiesRequest*          ns4__GetIdentitiesRequest,	///< Request parameter
    ns4__getIdentitiesResponse*         ns4__GetIdentitiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getInfoRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getInfoRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetInfo"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getInfoRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getInfoRequest*                ns4__GetInfoRequest,
    // response parameters:
    ns4__getInfoResponse*               ns4__GetInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getInfoRequest(
    struct soap *soap,
    // request parameters:
    ns4__getInfoRequest*                ns4__GetInfoRequest,
    // response parameters:
    ns4__getInfoResponse*               ns4__GetInfoResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getInfoRequest document
//gsoap ns1  service method-encoding:	getInfoRequest literal
//gsoap ns1  service method-action:	getInfoRequest urn:zimbraAccount/GetInfo
//gsoap ns1  service method-input-header-part:	getInfoRequest ns3__context
int __ns1__getInfoRequest(
    ns4__getInfoRequest*                ns4__GetInfoRequest,	///< Request parameter
    ns4__getInfoResponse*               ns4__GetInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPrefsRequest                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getPrefsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetPrefs"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPrefsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getPrefsRequest*               ns4__GetPrefsRequest,
    // response parameters:
    ns4__getPrefsResponse*              ns4__GetPrefsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPrefsRequest(
    struct soap *soap,
    // request parameters:
    ns4__getPrefsRequest*               ns4__GetPrefsRequest,
    // response parameters:
    ns4__getPrefsResponse*              ns4__GetPrefsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getPrefsRequest document
//gsoap ns1  service method-encoding:	getPrefsRequest literal
//gsoap ns1  service method-action:	getPrefsRequest urn:zimbraAccount/GetPrefs
//gsoap ns1  service method-input-header-part:	getPrefsRequest ns3__context
int __ns1__getPrefsRequest(
    ns4__getPrefsRequest*               ns4__GetPrefsRequest,	///< Request parameter
    ns4__getPrefsResponse*              ns4__GetPrefsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRightsRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getRightsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetRights"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRightsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getRightsRequest*              ns4__GetRightsRequest,
    // response parameters:
    ns4__getRightsResponse*             ns4__GetRightsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRightsRequest(
    struct soap *soap,
    // request parameters:
    ns4__getRightsRequest*              ns4__GetRightsRequest,
    // response parameters:
    ns4__getRightsResponse*             ns4__GetRightsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getRightsRequest document
//gsoap ns1  service method-encoding:	getRightsRequest literal
//gsoap ns1  service method-action:	getRightsRequest urn:zimbraAccount/GetRights
//gsoap ns1  service method-input-header-part:	getRightsRequest ns3__context
int __ns1__getRightsRequest(
    ns4__getRightsRequest*              ns4__GetRightsRequest,	///< Request parameter
    ns4__getRightsResponse*             ns4__GetRightsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSMIMEPublicCertsRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSMIMEPublicCertsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetSMIMEPublicCerts"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSMIMEPublicCertsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getSMIMEPublicCertsRequest*    ns4__GetSMIMEPublicCertsRequest,
    // response parameters:
    ns4__getSMIMEPublicCertsResponse*   ns4__GetSMIMEPublicCertsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSMIMEPublicCertsRequest(
    struct soap *soap,
    // request parameters:
    ns4__getSMIMEPublicCertsRequest*    ns4__GetSMIMEPublicCertsRequest,
    // response parameters:
    ns4__getSMIMEPublicCertsResponse*   ns4__GetSMIMEPublicCertsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSMIMEPublicCertsRequest document
//gsoap ns1  service method-encoding:	getSMIMEPublicCertsRequest literal
//gsoap ns1  service method-action:	getSMIMEPublicCertsRequest urn:zimbraAccount/GetSMIMEPublicCerts
//gsoap ns1  service method-input-header-part:	getSMIMEPublicCertsRequest ns3__context
int __ns1__getSMIMEPublicCertsRequest(
    ns4__getSMIMEPublicCertsRequest*    ns4__GetSMIMEPublicCertsRequest,	///< Request parameter
    ns4__getSMIMEPublicCertsResponse*   ns4__GetSMIMEPublicCertsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getShareInfoRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getShareInfoRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetShareInfo"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getShareInfoRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getShareInfoRequest*           ns4__GetShareInfoRequest,
    // response parameters:
    ns4__getShareInfoResponse*          ns4__GetShareInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getShareInfoRequest(
    struct soap *soap,
    // request parameters:
    ns4__getShareInfoRequest*           ns4__GetShareInfoRequest,
    // response parameters:
    ns4__getShareInfoResponse*          ns4__GetShareInfoResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getShareInfoRequest document
//gsoap ns1  service method-encoding:	getShareInfoRequest literal
//gsoap ns1  service method-action:	getShareInfoRequest urn:zimbraAccount/GetShareInfo
//gsoap ns1  service method-input-header-part:	getShareInfoRequest ns3__context
int __ns1__getShareInfoRequest(
    ns4__getShareInfoRequest*           ns4__GetShareInfoRequest,	///< Request parameter
    ns4__getShareInfoResponse*          ns4__GetShareInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSignaturesRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSignaturesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetSignatures"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSignaturesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getSignaturesRequest*          ns4__GetSignaturesRequest,
    // response parameters:
    ns4__getSignaturesResponse*         ns4__GetSignaturesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSignaturesRequest(
    struct soap *soap,
    // request parameters:
    ns4__getSignaturesRequest*          ns4__GetSignaturesRequest,
    // response parameters:
    ns4__getSignaturesResponse*         ns4__GetSignaturesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSignaturesRequest document
//gsoap ns1  service method-encoding:	getSignaturesRequest literal
//gsoap ns1  service method-action:	getSignaturesRequest urn:zimbraAccount/GetSignatures
//gsoap ns1  service method-input-header-part:	getSignaturesRequest ns3__context
int __ns1__getSignaturesRequest(
    ns4__getSignaturesRequest*          ns4__GetSignaturesRequest,	///< Request parameter
    ns4__getSignaturesResponse*         ns4__GetSignaturesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getVersionInfoRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getVersionInfoRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetVersionInfo"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getVersionInfoRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getVersionInfoRequest*         ns4__GetVersionInfoRequest,
    // response parameters:
    ns4__getVersionInfoResponse*        ns4__GetVersionInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getVersionInfoRequest(
    struct soap *soap,
    // request parameters:
    ns4__getVersionInfoRequest*         ns4__GetVersionInfoRequest,
    // response parameters:
    ns4__getVersionInfoResponse*        ns4__GetVersionInfoResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getVersionInfoRequest document
//gsoap ns1  service method-encoding:	getVersionInfoRequest literal
//gsoap ns1  service method-action:	getVersionInfoRequest urn:zimbraAccount/GetVersionInfo
//gsoap ns1  service method-input-header-part:	getVersionInfoRequest ns3__context
int __ns1__getVersionInfoRequest(
    ns4__getVersionInfoRequest*         ns4__GetVersionInfoRequest,	///< Request parameter
    ns4__getVersionInfoResponse*        ns4__GetVersionInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWhiteBlackListRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getWhiteBlackListRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GetWhiteBlackList"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWhiteBlackListRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__getWhiteBlackListRequest*      ns4__GetWhiteBlackListRequest,
    // response parameters:
    ns4__getWhiteBlackListResponse*     ns4__GetWhiteBlackListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWhiteBlackListRequest(
    struct soap *soap,
    // request parameters:
    ns4__getWhiteBlackListRequest*      ns4__GetWhiteBlackListRequest,
    // response parameters:
    ns4__getWhiteBlackListResponse*     ns4__GetWhiteBlackListResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getWhiteBlackListRequest document
//gsoap ns1  service method-encoding:	getWhiteBlackListRequest literal
//gsoap ns1  service method-action:	getWhiteBlackListRequest urn:zimbraAccount/GetWhiteBlackList
//gsoap ns1  service method-input-header-part:	getWhiteBlackListRequest ns3__context
int __ns1__getWhiteBlackListRequest(
    ns4__getWhiteBlackListRequest*      ns4__GetWhiteBlackListRequest,	///< Request parameter
    ns4__getWhiteBlackListResponse*     ns4__GetWhiteBlackListResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__grantRightsRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__grantRightsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/GrantRights"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__grantRightsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__grantRightsRequest*            ns4__GrantRightsRequest,
    // response parameters:
    ns4__grantRightsResponse*           ns4__GrantRightsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__grantRightsRequest(
    struct soap *soap,
    // request parameters:
    ns4__grantRightsRequest*            ns4__GrantRightsRequest,
    // response parameters:
    ns4__grantRightsResponse*           ns4__GrantRightsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	grantRightsRequest document
//gsoap ns1  service method-encoding:	grantRightsRequest literal
//gsoap ns1  service method-action:	grantRightsRequest urn:zimbraAccount/GrantRights
//gsoap ns1  service method-input-header-part:	grantRightsRequest ns3__context
int __ns1__grantRightsRequest(
    ns4__grantRightsRequest*            ns4__GrantRightsRequest,	///< Request parameter
    ns4__grantRightsResponse*           ns4__GrantRightsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyIdentityRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyIdentityRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/ModifyIdentity"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyIdentityRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__modifyIdentityRequest*         ns4__ModifyIdentityRequest,
    // response parameters:
    ns4__modifyIdentityResponse*        ns4__ModifyIdentityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyIdentityRequest(
    struct soap *soap,
    // request parameters:
    ns4__modifyIdentityRequest*         ns4__ModifyIdentityRequest,
    // response parameters:
    ns4__modifyIdentityResponse*        ns4__ModifyIdentityResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyIdentityRequest document
//gsoap ns1  service method-encoding:	modifyIdentityRequest literal
//gsoap ns1  service method-action:	modifyIdentityRequest urn:zimbraAccount/ModifyIdentity
//gsoap ns1  service method-input-header-part:	modifyIdentityRequest ns3__context
int __ns1__modifyIdentityRequest(
    ns4__modifyIdentityRequest*         ns4__ModifyIdentityRequest,	///< Request parameter
    ns4__modifyIdentityResponse*        ns4__ModifyIdentityResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyPrefsRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyPrefsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/ModifyPrefs"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyPrefsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__modifyPrefsRequest*            ns4__ModifyPrefsRequest,
    // response parameters:
    ns4__modifyPrefsResponse*           ns4__ModifyPrefsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyPrefsRequest(
    struct soap *soap,
    // request parameters:
    ns4__modifyPrefsRequest*            ns4__ModifyPrefsRequest,
    // response parameters:
    ns4__modifyPrefsResponse*           ns4__ModifyPrefsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyPrefsRequest document
//gsoap ns1  service method-encoding:	modifyPrefsRequest literal
//gsoap ns1  service method-action:	modifyPrefsRequest urn:zimbraAccount/ModifyPrefs
//gsoap ns1  service method-input-header-part:	modifyPrefsRequest ns3__context
int __ns1__modifyPrefsRequest(
    ns4__modifyPrefsRequest*            ns4__ModifyPrefsRequest,	///< Request parameter
    ns4__modifyPrefsResponse*           ns4__ModifyPrefsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyPropertiesRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyPropertiesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/ModifyProperties"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyPropertiesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__modifyPropertiesRequest*       ns4__ModifyPropertiesRequest,
    // response parameters:
    ns4__modifyPropertiesResponse*      ns4__ModifyPropertiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyPropertiesRequest(
    struct soap *soap,
    // request parameters:
    ns4__modifyPropertiesRequest*       ns4__ModifyPropertiesRequest,
    // response parameters:
    ns4__modifyPropertiesResponse*      ns4__ModifyPropertiesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyPropertiesRequest document
//gsoap ns1  service method-encoding:	modifyPropertiesRequest literal
//gsoap ns1  service method-action:	modifyPropertiesRequest urn:zimbraAccount/ModifyProperties
//gsoap ns1  service method-input-header-part:	modifyPropertiesRequest ns3__context
int __ns1__modifyPropertiesRequest(
    ns4__modifyPropertiesRequest*       ns4__ModifyPropertiesRequest,	///< Request parameter
    ns4__modifyPropertiesResponse*      ns4__ModifyPropertiesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifySignatureRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifySignatureRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/ModifySignature"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifySignatureRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__modifySignatureRequest*        ns4__ModifySignatureRequest,
    // response parameters:
    ns4__modifySignatureResponse*       ns4__ModifySignatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifySignatureRequest(
    struct soap *soap,
    // request parameters:
    ns4__modifySignatureRequest*        ns4__ModifySignatureRequest,
    // response parameters:
    ns4__modifySignatureResponse*       ns4__ModifySignatureResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifySignatureRequest document
//gsoap ns1  service method-encoding:	modifySignatureRequest literal
//gsoap ns1  service method-action:	modifySignatureRequest urn:zimbraAccount/ModifySignature
//gsoap ns1  service method-input-header-part:	modifySignatureRequest ns3__context
int __ns1__modifySignatureRequest(
    ns4__modifySignatureRequest*        ns4__ModifySignatureRequest,	///< Request parameter
    ns4__modifySignatureResponse*       ns4__ModifySignatureResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyWhiteBlackListRequest                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyWhiteBlackListRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/ModifyWhiteBlackList"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyWhiteBlackListRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__modifyWhiteBlackListRequest*   ns4__ModifyWhiteBlackListRequest,
    // response parameters:
    ns4__modifyWhiteBlackListResponse*  ns4__ModifyWhiteBlackListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyWhiteBlackListRequest(
    struct soap *soap,
    // request parameters:
    ns4__modifyWhiteBlackListRequest*   ns4__ModifyWhiteBlackListRequest,
    // response parameters:
    ns4__modifyWhiteBlackListResponse*  ns4__ModifyWhiteBlackListResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyWhiteBlackListRequest document
//gsoap ns1  service method-encoding:	modifyWhiteBlackListRequest literal
//gsoap ns1  service method-action:	modifyWhiteBlackListRequest urn:zimbraAccount/ModifyWhiteBlackList
//gsoap ns1  service method-input-header-part:	modifyWhiteBlackListRequest ns3__context
int __ns1__modifyWhiteBlackListRequest(
    ns4__modifyWhiteBlackListRequest*   ns4__ModifyWhiteBlackListRequest,	///< Request parameter
    ns4__modifyWhiteBlackListResponse*  ns4__ModifyWhiteBlackListResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyZimletPrefsRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyZimletPrefsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/ModifyZimletPrefs"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyZimletPrefsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__modifyZimletPrefsRequest*      ns4__ModifyZimletPrefsRequest,
    // response parameters:
    ns4__modifyZimletPrefsResponse*     ns4__ModifyZimletPrefsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyZimletPrefsRequest(
    struct soap *soap,
    // request parameters:
    ns4__modifyZimletPrefsRequest*      ns4__ModifyZimletPrefsRequest,
    // response parameters:
    ns4__modifyZimletPrefsResponse*     ns4__ModifyZimletPrefsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyZimletPrefsRequest document
//gsoap ns1  service method-encoding:	modifyZimletPrefsRequest literal
//gsoap ns1  service method-action:	modifyZimletPrefsRequest urn:zimbraAccount/ModifyZimletPrefs
//gsoap ns1  service method-input-header-part:	modifyZimletPrefsRequest ns3__context
int __ns1__modifyZimletPrefsRequest(
    ns4__modifyZimletPrefsRequest*      ns4__ModifyZimletPrefsRequest,	///< Request parameter
    ns4__modifyZimletPrefsResponse*     ns4__ModifyZimletPrefsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__revokeRightsRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__revokeRightsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/RevokeRights"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__revokeRightsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__revokeRightsRequest*           ns4__RevokeRightsRequest,
    // response parameters:
    ns4__revokeRightsResponse*          ns4__RevokeRightsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__revokeRightsRequest(
    struct soap *soap,
    // request parameters:
    ns4__revokeRightsRequest*           ns4__RevokeRightsRequest,
    // response parameters:
    ns4__revokeRightsResponse*          ns4__RevokeRightsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	revokeRightsRequest document
//gsoap ns1  service method-encoding:	revokeRightsRequest literal
//gsoap ns1  service method-action:	revokeRightsRequest urn:zimbraAccount/RevokeRights
//gsoap ns1  service method-input-header-part:	revokeRightsRequest ns3__context
int __ns1__revokeRightsRequest(
    ns4__revokeRightsRequest*           ns4__RevokeRightsRequest,	///< Request parameter
    ns4__revokeRightsResponse*          ns4__RevokeRightsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchCalendarResourcesRequest                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__searchCalendarResourcesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/SearchCalendarResources"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchCalendarResourcesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__searchCalendarResourcesRequest* ns4__SearchCalendarResourcesRequest,
    // response parameters:
    ns4__searchCalendarResourcesResponse* ns4__SearchCalendarResourcesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchCalendarResourcesRequest(
    struct soap *soap,
    // request parameters:
    ns4__searchCalendarResourcesRequest* ns4__SearchCalendarResourcesRequest,
    // response parameters:
    ns4__searchCalendarResourcesResponse* ns4__SearchCalendarResourcesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	searchCalendarResourcesRequest document
//gsoap ns1  service method-encoding:	searchCalendarResourcesRequest literal
//gsoap ns1  service method-action:	searchCalendarResourcesRequest urn:zimbraAccount/SearchCalendarResources
//gsoap ns1  service method-input-header-part:	searchCalendarResourcesRequest ns3__context
int __ns1__searchCalendarResourcesRequest(
    ns4__searchCalendarResourcesRequest* ns4__SearchCalendarResourcesRequest,	///< Request parameter
    ns4__searchCalendarResourcesResponse* ns4__SearchCalendarResourcesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchGalRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__searchGalRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/SearchGal"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchGalRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__searchGalRequest*              ns4__SearchGalRequest,
    // response parameters:
    ns4__searchGalResponse*             ns4__SearchGalResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchGalRequest(
    struct soap *soap,
    // request parameters:
    ns4__searchGalRequest*              ns4__SearchGalRequest,
    // response parameters:
    ns4__searchGalResponse*             ns4__SearchGalResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	searchGalRequest document
//gsoap ns1  service method-encoding:	searchGalRequest literal
//gsoap ns1  service method-action:	searchGalRequest urn:zimbraAccount/SearchGal
//gsoap ns1  service method-input-header-part:	searchGalRequest ns3__context
int __ns1__searchGalRequest(
    ns4__searchGalRequest*              ns4__SearchGalRequest,	///< Request parameter
    ns4__searchGalResponse*             ns4__SearchGalResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__subscribeDistributionListRequest                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__subscribeDistributionListRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/SubscribeDistributionList"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__subscribeDistributionListRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__subscribeDistributionListRequest* ns4__SubscribeDistributionListRequest,
    // response parameters:
    ns4__subscribeDistributionListResponse* ns4__SubscribeDistributionListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__subscribeDistributionListRequest(
    struct soap *soap,
    // request parameters:
    ns4__subscribeDistributionListRequest* ns4__SubscribeDistributionListRequest,
    // response parameters:
    ns4__subscribeDistributionListResponse* ns4__SubscribeDistributionListResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	subscribeDistributionListRequest document
//gsoap ns1  service method-encoding:	subscribeDistributionListRequest literal
//gsoap ns1  service method-action:	subscribeDistributionListRequest urn:zimbraAccount/SubscribeDistributionList
//gsoap ns1  service method-input-header-part:	subscribeDistributionListRequest ns3__context
int __ns1__subscribeDistributionListRequest(
    ns4__subscribeDistributionListRequest* ns4__SubscribeDistributionListRequest,	///< Request parameter
    ns4__subscribeDistributionListResponse* ns4__SubscribeDistributionListResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__syncGalRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__syncGalRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraAccount/SyncGal"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__syncGalRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns4__syncGalRequest*                ns4__SyncGalRequest,
    // response parameters:
    ns4__syncGalResponse*               ns4__SyncGalResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__syncGalRequest(
    struct soap *soap,
    // request parameters:
    ns4__syncGalRequest*                ns4__SyncGalRequest,
    // response parameters:
    ns4__syncGalResponse*               ns4__SyncGalResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	syncGalRequest document
//gsoap ns1  service method-encoding:	syncGalRequest literal
//gsoap ns1  service method-action:	syncGalRequest urn:zimbraAccount/SyncGal
//gsoap ns1  service method-input-header-part:	syncGalRequest ns3__context
int __ns1__syncGalRequest(
    ns4__syncGalRequest*                ns4__SyncGalRequest,	///< Request parameter
    ns4__syncGalResponse*               ns4__SyncGalResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__addAppointmentInviteRequest                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__addAppointmentInviteRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/AddAppointmentInvite"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__addAppointmentInviteRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__addAppointmentInviteRequest*   ns5__AddAppointmentInviteRequest,
    // response parameters:
    ns5__addAppointmentInviteResponse*  ns5__AddAppointmentInviteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__addAppointmentInviteRequest(
    struct soap *soap,
    // request parameters:
    ns5__addAppointmentInviteRequest*   ns5__AddAppointmentInviteRequest,
    // response parameters:
    ns5__addAppointmentInviteResponse*  ns5__AddAppointmentInviteResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	addAppointmentInviteRequest document
//gsoap ns1  service method-encoding:	addAppointmentInviteRequest literal
//gsoap ns1  service method-action:	addAppointmentInviteRequest urn:zimbraMail/AddAppointmentInvite
//gsoap ns1  service method-input-header-part:	addAppointmentInviteRequest ns3__context
int __ns1__addAppointmentInviteRequest(
    ns5__addAppointmentInviteRequest*   ns5__AddAppointmentInviteRequest,	///< Request parameter
    ns5__addAppointmentInviteResponse*  ns5__AddAppointmentInviteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__addCommentRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__addCommentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/AddComment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__addCommentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__addCommentRequest*             ns5__AddCommentRequest,
    // response parameters:
    ns5__addCommentResponse*            ns5__AddCommentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__addCommentRequest(
    struct soap *soap,
    // request parameters:
    ns5__addCommentRequest*             ns5__AddCommentRequest,
    // response parameters:
    ns5__addCommentResponse*            ns5__AddCommentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	addCommentRequest document
//gsoap ns1  service method-encoding:	addCommentRequest literal
//gsoap ns1  service method-action:	addCommentRequest urn:zimbraMail/AddComment
//gsoap ns1  service method-input-header-part:	addCommentRequest ns3__context
int __ns1__addCommentRequest(
    ns5__addCommentRequest*             ns5__AddCommentRequest,	///< Request parameter
    ns5__addCommentResponse*            ns5__AddCommentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__addMsgRequest                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__addMsgRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/AddMsg"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__addMsgRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__addMsgRequest*                 ns5__AddMsgRequest,
    // response parameters:
    ns5__addMsgResponse*                ns5__AddMsgResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__addMsgRequest(
    struct soap *soap,
    // request parameters:
    ns5__addMsgRequest*                 ns5__AddMsgRequest,
    // response parameters:
    ns5__addMsgResponse*                ns5__AddMsgResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	addMsgRequest document
//gsoap ns1  service method-encoding:	addMsgRequest literal
//gsoap ns1  service method-action:	addMsgRequest urn:zimbraMail/AddMsg
//gsoap ns1  service method-input-header-part:	addMsgRequest ns3__context
int __ns1__addMsgRequest(
    ns5__addMsgRequest*                 ns5__AddMsgRequest,	///< Request parameter
    ns5__addMsgResponse*                ns5__AddMsgResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__addTaskInviteRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__addTaskInviteRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/AddTaskInvite"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__addTaskInviteRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__addTaskInviteRequest*          ns5__AddTaskInviteRequest,
    // response parameters:
    ns5__addTaskInviteResponse*         ns5__AddTaskInviteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__addTaskInviteRequest(
    struct soap *soap,
    // request parameters:
    ns5__addTaskInviteRequest*          ns5__AddTaskInviteRequest,
    // response parameters:
    ns5__addTaskInviteResponse*         ns5__AddTaskInviteResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	addTaskInviteRequest document
//gsoap ns1  service method-encoding:	addTaskInviteRequest literal
//gsoap ns1  service method-action:	addTaskInviteRequest urn:zimbraMail/AddTaskInvite
//gsoap ns1  service method-input-header-part:	addTaskInviteRequest ns3__context
int __ns1__addTaskInviteRequest(
    ns5__addTaskInviteRequest*          ns5__AddTaskInviteRequest,	///< Request parameter
    ns5__addTaskInviteResponse*         ns5__AddTaskInviteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__announceOrganizerChangeRequest                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__announceOrganizerChangeRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/AnnounceOrganizerChange"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__announceOrganizerChangeRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__announceOrganizerChangeRequest* ns5__AnnounceOrganizerChangeRequest,
    // response parameters:
    ns5__announceOrganizerChangeResponse* ns5__AnnounceOrganizerChangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__announceOrganizerChangeRequest(
    struct soap *soap,
    // request parameters:
    ns5__announceOrganizerChangeRequest* ns5__AnnounceOrganizerChangeRequest,
    // response parameters:
    ns5__announceOrganizerChangeResponse* ns5__AnnounceOrganizerChangeResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	announceOrganizerChangeRequest document
//gsoap ns1  service method-encoding:	announceOrganizerChangeRequest literal
//gsoap ns1  service method-action:	announceOrganizerChangeRequest urn:zimbraMail/AnnounceOrganizerChange
//gsoap ns1  service method-input-header-part:	announceOrganizerChangeRequest ns3__context
int __ns1__announceOrganizerChangeRequest(
    ns5__announceOrganizerChangeRequest* ns5__AnnounceOrganizerChangeRequest,	///< Request parameter
    ns5__announceOrganizerChangeResponse* ns5__AnnounceOrganizerChangeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__applyFilterRulesRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__applyFilterRulesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ApplyFilterRules"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__applyFilterRulesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__applyFilterRulesRequest*       ns5__ApplyFilterRulesRequest,
    // response parameters:
    ns5__applyFilterRulesResponse*      ns5__ApplyFilterRulesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__applyFilterRulesRequest(
    struct soap *soap,
    // request parameters:
    ns5__applyFilterRulesRequest*       ns5__ApplyFilterRulesRequest,
    // response parameters:
    ns5__applyFilterRulesResponse*      ns5__ApplyFilterRulesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	applyFilterRulesRequest document
//gsoap ns1  service method-encoding:	applyFilterRulesRequest literal
//gsoap ns1  service method-action:	applyFilterRulesRequest urn:zimbraMail/ApplyFilterRules
//gsoap ns1  service method-input-header-part:	applyFilterRulesRequest ns3__context
int __ns1__applyFilterRulesRequest(
    ns5__applyFilterRulesRequest*       ns5__ApplyFilterRulesRequest,	///< Request parameter
    ns5__applyFilterRulesResponse*      ns5__ApplyFilterRulesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__applyOutgoingFilterRulesRequest                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__applyOutgoingFilterRulesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ApplyOutgoingFilterRules"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__applyOutgoingFilterRulesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__applyOutgoingFilterRulesRequest* ns5__ApplyOutgoingFilterRulesRequest,
    // response parameters:
    ns5__applyOutgoingFilterRulesResponse* ns5__ApplyOutgoingFilterRulesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__applyOutgoingFilterRulesRequest(
    struct soap *soap,
    // request parameters:
    ns5__applyOutgoingFilterRulesRequest* ns5__ApplyOutgoingFilterRulesRequest,
    // response parameters:
    ns5__applyOutgoingFilterRulesResponse* ns5__ApplyOutgoingFilterRulesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	applyOutgoingFilterRulesRequest document
//gsoap ns1  service method-encoding:	applyOutgoingFilterRulesRequest literal
//gsoap ns1  service method-action:	applyOutgoingFilterRulesRequest urn:zimbraMail/ApplyOutgoingFilterRules
//gsoap ns1  service method-input-header-part:	applyOutgoingFilterRulesRequest ns3__context
int __ns1__applyOutgoingFilterRulesRequest(
    ns5__applyOutgoingFilterRulesRequest* ns5__ApplyOutgoingFilterRulesRequest,	///< Request parameter
    ns5__applyOutgoingFilterRulesResponse* ns5__ApplyOutgoingFilterRulesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__autoCompleteRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__autoCompleteRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/AutoComplete"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__autoCompleteRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__autoCompleteRequest*           ns5__AutoCompleteRequest,
    // response parameters:
    ns5__autoCompleteResponse*          ns5__AutoCompleteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__autoCompleteRequest(
    struct soap *soap,
    // request parameters:
    ns5__autoCompleteRequest*           ns5__AutoCompleteRequest,
    // response parameters:
    ns5__autoCompleteResponse*          ns5__AutoCompleteResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	autoCompleteRequest document
//gsoap ns1  service method-encoding:	autoCompleteRequest literal
//gsoap ns1  service method-action:	autoCompleteRequest urn:zimbraMail/AutoComplete
//gsoap ns1  service method-input-header-part:	autoCompleteRequest ns3__context
int __ns1__autoCompleteRequest(
    ns5__autoCompleteRequest*           ns5__AutoCompleteRequest,	///< Request parameter
    ns5__autoCompleteResponse*          ns5__AutoCompleteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__bounceMsgRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__bounceMsgRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/BounceMsg"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__bounceMsgRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__bounceMsgRequest*              ns5__BounceMsgRequest,
    // response parameters:
    ns5__bounceMsgResponse*             ns5__BounceMsgResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__bounceMsgRequest(
    struct soap *soap,
    // request parameters:
    ns5__bounceMsgRequest*              ns5__BounceMsgRequest,
    // response parameters:
    ns5__bounceMsgResponse*             ns5__BounceMsgResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	bounceMsgRequest document
//gsoap ns1  service method-encoding:	bounceMsgRequest literal
//gsoap ns1  service method-action:	bounceMsgRequest urn:zimbraMail/BounceMsg
//gsoap ns1  service method-input-header-part:	bounceMsgRequest ns3__context
int __ns1__bounceMsgRequest(
    ns5__bounceMsgRequest*              ns5__BounceMsgRequest,	///< Request parameter
    ns5__bounceMsgResponse*             ns5__BounceMsgResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__browseRequest                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__browseRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/Browse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__browseRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__browseRequest*                 ns5__BrowseRequest,
    // response parameters:
    ns5__browseResponse*                ns5__BrowseResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__browseRequest(
    struct soap *soap,
    // request parameters:
    ns5__browseRequest*                 ns5__BrowseRequest,
    // response parameters:
    ns5__browseResponse*                ns5__BrowseResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	browseRequest document
//gsoap ns1  service method-encoding:	browseRequest literal
//gsoap ns1  service method-action:	browseRequest urn:zimbraMail/Browse
//gsoap ns1  service method-input-header-part:	browseRequest ns3__context
int __ns1__browseRequest(
    ns5__browseRequest*                 ns5__BrowseRequest,	///< Request parameter
    ns5__browseResponse*                ns5__BrowseResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cancelAppointmentRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__cancelAppointmentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CancelAppointment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cancelAppointmentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__cancelAppointmentRequest*      ns5__CancelAppointmentRequest,
    // response parameters:
    ns5__cancelAppointmentResponse*     ns5__CancelAppointmentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cancelAppointmentRequest(
    struct soap *soap,
    // request parameters:
    ns5__cancelAppointmentRequest*      ns5__CancelAppointmentRequest,
    // response parameters:
    ns5__cancelAppointmentResponse*     ns5__CancelAppointmentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	cancelAppointmentRequest document
//gsoap ns1  service method-encoding:	cancelAppointmentRequest literal
//gsoap ns1  service method-action:	cancelAppointmentRequest urn:zimbraMail/CancelAppointment
//gsoap ns1  service method-input-header-part:	cancelAppointmentRequest ns3__context
int __ns1__cancelAppointmentRequest(
    ns5__cancelAppointmentRequest*      ns5__CancelAppointmentRequest,	///< Request parameter
    ns5__cancelAppointmentResponse*     ns5__CancelAppointmentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cancelTaskRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__cancelTaskRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CancelTask"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cancelTaskRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__cancelTaskRequest*             ns5__CancelTaskRequest,
    // response parameters:
    ns5__cancelTaskResponse*            ns5__CancelTaskResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cancelTaskRequest(
    struct soap *soap,
    // request parameters:
    ns5__cancelTaskRequest*             ns5__CancelTaskRequest,
    // response parameters:
    ns5__cancelTaskResponse*            ns5__CancelTaskResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	cancelTaskRequest document
//gsoap ns1  service method-encoding:	cancelTaskRequest literal
//gsoap ns1  service method-action:	cancelTaskRequest urn:zimbraMail/CancelTask
//gsoap ns1  service method-input-header-part:	cancelTaskRequest ns3__context
int __ns1__cancelTaskRequest(
    ns5__cancelTaskRequest*             ns5__CancelTaskRequest,	///< Request parameter
    ns5__cancelTaskResponse*            ns5__CancelTaskResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkDeviceStatusRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkDeviceStatusRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CheckDeviceStatus"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkDeviceStatusRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__checkDeviceStatusRequest*      ns5__CheckDeviceStatusRequest,
    // response parameters:
    ns5__checkDeviceStatusResponse*     ns5__CheckDeviceStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkDeviceStatusRequest(
    struct soap *soap,
    // request parameters:
    ns5__checkDeviceStatusRequest*      ns5__CheckDeviceStatusRequest,
    // response parameters:
    ns5__checkDeviceStatusResponse*     ns5__CheckDeviceStatusResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	checkDeviceStatusRequest document
//gsoap ns1  service method-encoding:	checkDeviceStatusRequest literal
//gsoap ns1  service method-action:	checkDeviceStatusRequest urn:zimbraMail/CheckDeviceStatus
//gsoap ns1  service method-input-header-part:	checkDeviceStatusRequest ns3__context
int __ns1__checkDeviceStatusRequest(
    ns5__checkDeviceStatusRequest*      ns5__CheckDeviceStatusRequest,	///< Request parameter
    ns5__checkDeviceStatusResponse*     ns5__CheckDeviceStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkPermissionRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkPermissionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CheckPermission"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkPermissionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__checkPermissionRequest*        ns5__CheckPermissionRequest,
    // response parameters:
    ns5__checkPermissionResponse*       ns5__CheckPermissionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkPermissionRequest(
    struct soap *soap,
    // request parameters:
    ns5__checkPermissionRequest*        ns5__CheckPermissionRequest,
    // response parameters:
    ns5__checkPermissionResponse*       ns5__CheckPermissionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	checkPermissionRequest document
//gsoap ns1  service method-encoding:	checkPermissionRequest literal
//gsoap ns1  service method-action:	checkPermissionRequest urn:zimbraMail/CheckPermission
//gsoap ns1  service method-input-header-part:	checkPermissionRequest ns3__context
int __ns1__checkPermissionRequest(
    ns5__checkPermissionRequest*        ns5__CheckPermissionRequest,	///< Request parameter
    ns5__checkPermissionResponse*       ns5__CheckPermissionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkRecurConflictsRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkRecurConflictsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CheckRecurConflicts"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkRecurConflictsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__checkRecurConflictsRequest*    ns5__CheckRecurConflictsRequest,
    // response parameters:
    ns5__checkRecurConflictsResponse*   ns5__CheckRecurConflictsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkRecurConflictsRequest(
    struct soap *soap,
    // request parameters:
    ns5__checkRecurConflictsRequest*    ns5__CheckRecurConflictsRequest,
    // response parameters:
    ns5__checkRecurConflictsResponse*   ns5__CheckRecurConflictsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	checkRecurConflictsRequest document
//gsoap ns1  service method-encoding:	checkRecurConflictsRequest literal
//gsoap ns1  service method-action:	checkRecurConflictsRequest urn:zimbraMail/CheckRecurConflicts
//gsoap ns1  service method-input-header-part:	checkRecurConflictsRequest ns3__context
int __ns1__checkRecurConflictsRequest(
    ns5__checkRecurConflictsRequest*    ns5__CheckRecurConflictsRequest,	///< Request parameter
    ns5__checkRecurConflictsResponse*   ns5__CheckRecurConflictsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkSpellingRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkSpellingRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CheckSpelling"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkSpellingRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__checkSpellingRequest*          ns5__CheckSpellingRequest,
    // response parameters:
    ns5__checkSpellingResponse*         ns5__CheckSpellingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkSpellingRequest(
    struct soap *soap,
    // request parameters:
    ns5__checkSpellingRequest*          ns5__CheckSpellingRequest,
    // response parameters:
    ns5__checkSpellingResponse*         ns5__CheckSpellingResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	checkSpellingRequest document
//gsoap ns1  service method-encoding:	checkSpellingRequest literal
//gsoap ns1  service method-action:	checkSpellingRequest urn:zimbraMail/CheckSpelling
//gsoap ns1  service method-input-header-part:	checkSpellingRequest ns3__context
int __ns1__checkSpellingRequest(
    ns5__checkSpellingRequest*          ns5__CheckSpellingRequest,	///< Request parameter
    ns5__checkSpellingResponse*         ns5__CheckSpellingResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__completeTaskInstanceRequest                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__completeTaskInstanceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CompleteTaskInstance"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__completeTaskInstanceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__completeTaskInstanceRequest*   ns5__CompleteTaskInstanceRequest,
    // response parameters:
    ns5__completeTaskInstanceResponse*  ns5__CompleteTaskInstanceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__completeTaskInstanceRequest(
    struct soap *soap,
    // request parameters:
    ns5__completeTaskInstanceRequest*   ns5__CompleteTaskInstanceRequest,
    // response parameters:
    ns5__completeTaskInstanceResponse*  ns5__CompleteTaskInstanceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	completeTaskInstanceRequest document
//gsoap ns1  service method-encoding:	completeTaskInstanceRequest literal
//gsoap ns1  service method-action:	completeTaskInstanceRequest urn:zimbraMail/CompleteTaskInstance
//gsoap ns1  service method-input-header-part:	completeTaskInstanceRequest ns3__context
int __ns1__completeTaskInstanceRequest(
    ns5__completeTaskInstanceRequest*   ns5__CompleteTaskInstanceRequest,	///< Request parameter
    ns5__completeTaskInstanceResponse*  ns5__CompleteTaskInstanceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__contactActionRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__contactActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ContactAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__contactActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__contactActionRequest*          ns5__ContactActionRequest,
    // response parameters:
    ns5__contactActionResponse*         ns5__ContactActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__contactActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__contactActionRequest*          ns5__ContactActionRequest,
    // response parameters:
    ns5__contactActionResponse*         ns5__ContactActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	contactActionRequest document
//gsoap ns1  service method-encoding:	contactActionRequest literal
//gsoap ns1  service method-action:	contactActionRequest urn:zimbraMail/ContactAction
//gsoap ns1  service method-input-header-part:	contactActionRequest ns3__context
int __ns1__contactActionRequest(
    ns5__contactActionRequest*          ns5__ContactActionRequest,	///< Request parameter
    ns5__contactActionResponse*         ns5__ContactActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__convActionRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__convActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ConvAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__convActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__convActionRequest*             ns5__ConvActionRequest,
    // response parameters:
    ns5__convActionResponse*            ns5__ConvActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__convActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__convActionRequest*             ns5__ConvActionRequest,
    // response parameters:
    ns5__convActionResponse*            ns5__ConvActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	convActionRequest document
//gsoap ns1  service method-encoding:	convActionRequest literal
//gsoap ns1  service method-action:	convActionRequest urn:zimbraMail/ConvAction
//gsoap ns1  service method-input-header-part:	convActionRequest ns3__context
int __ns1__convActionRequest(
    ns5__convActionRequest*             ns5__ConvActionRequest,	///< Request parameter
    ns5__convActionResponse*            ns5__ConvActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__counterAppointmentRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__counterAppointmentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CounterAppointment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__counterAppointmentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__counterAppointmentRequest*     ns5__CounterAppointmentRequest,
    // response parameters:
    ns5__counterAppointmentResponse*    ns5__CounterAppointmentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__counterAppointmentRequest(
    struct soap *soap,
    // request parameters:
    ns5__counterAppointmentRequest*     ns5__CounterAppointmentRequest,
    // response parameters:
    ns5__counterAppointmentResponse*    ns5__CounterAppointmentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	counterAppointmentRequest document
//gsoap ns1  service method-encoding:	counterAppointmentRequest literal
//gsoap ns1  service method-action:	counterAppointmentRequest urn:zimbraMail/CounterAppointment
//gsoap ns1  service method-input-header-part:	counterAppointmentRequest ns3__context
int __ns1__counterAppointmentRequest(
    ns5__counterAppointmentRequest*     ns5__CounterAppointmentRequest,	///< Request parameter
    ns5__counterAppointmentResponse*    ns5__CounterAppointmentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createAppointmentExceptionRequest                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createAppointmentExceptionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateAppointmentException"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createAppointmentExceptionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createAppointmentExceptionRequest* ns5__CreateAppointmentExceptionRequest,
    // response parameters:
    ns5__createAppointmentExceptionResponse* ns5__CreateAppointmentExceptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createAppointmentExceptionRequest(
    struct soap *soap,
    // request parameters:
    ns5__createAppointmentExceptionRequest* ns5__CreateAppointmentExceptionRequest,
    // response parameters:
    ns5__createAppointmentExceptionResponse* ns5__CreateAppointmentExceptionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createAppointmentExceptionRequest document
//gsoap ns1  service method-encoding:	createAppointmentExceptionRequest literal
//gsoap ns1  service method-action:	createAppointmentExceptionRequest urn:zimbraMail/CreateAppointmentException
//gsoap ns1  service method-input-header-part:	createAppointmentExceptionRequest ns3__context
int __ns1__createAppointmentExceptionRequest(
    ns5__createAppointmentExceptionRequest* ns5__CreateAppointmentExceptionRequest,	///< Request parameter
    ns5__createAppointmentExceptionResponse* ns5__CreateAppointmentExceptionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createAppointmentRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createAppointmentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateAppointment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createAppointmentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createAppointmentRequest*      ns5__CreateAppointmentRequest,
    // response parameters:
    ns5__createAppointmentResponse*     ns5__CreateAppointmentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createAppointmentRequest(
    struct soap *soap,
    // request parameters:
    ns5__createAppointmentRequest*      ns5__CreateAppointmentRequest,
    // response parameters:
    ns5__createAppointmentResponse*     ns5__CreateAppointmentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createAppointmentRequest document
//gsoap ns1  service method-encoding:	createAppointmentRequest literal
//gsoap ns1  service method-action:	createAppointmentRequest urn:zimbraMail/CreateAppointment
//gsoap ns1  service method-input-header-part:	createAppointmentRequest ns3__context
int __ns1__createAppointmentRequest(
    ns5__createAppointmentRequest*      ns5__CreateAppointmentRequest,	///< Request parameter
    ns5__createAppointmentResponse*     ns5__CreateAppointmentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createContactRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createContactRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateContact"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createContactRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createContactRequest*          ns5__CreateContactRequest,
    // response parameters:
    ns5__createContactResponse*         ns5__CreateContactResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createContactRequest(
    struct soap *soap,
    // request parameters:
    ns5__createContactRequest*          ns5__CreateContactRequest,
    // response parameters:
    ns5__createContactResponse*         ns5__CreateContactResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createContactRequest document
//gsoap ns1  service method-encoding:	createContactRequest literal
//gsoap ns1  service method-action:	createContactRequest urn:zimbraMail/CreateContact
//gsoap ns1  service method-input-header-part:	createContactRequest ns3__context
int __ns1__createContactRequest(
    ns5__createContactRequest*          ns5__CreateContactRequest,	///< Request parameter
    ns5__createContactResponse*         ns5__CreateContactResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createDataSourceRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createDataSourceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateDataSource"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createDataSourceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createDataSourceRequest*       ns5__CreateDataSourceRequest,
    // response parameters:
    ns5__createDataSourceResponse*      ns5__CreateDataSourceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createDataSourceRequest(
    struct soap *soap,
    // request parameters:
    ns5__createDataSourceRequest*       ns5__CreateDataSourceRequest,
    // response parameters:
    ns5__createDataSourceResponse*      ns5__CreateDataSourceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createDataSourceRequest document
//gsoap ns1  service method-encoding:	createDataSourceRequest literal
//gsoap ns1  service method-action:	createDataSourceRequest urn:zimbraMail/CreateDataSource
//gsoap ns1  service method-input-header-part:	createDataSourceRequest ns3__context
int __ns1__createDataSourceRequest(
    ns5__createDataSourceRequest*       ns5__CreateDataSourceRequest,	///< Request parameter
    ns5__createDataSourceResponse*      ns5__CreateDataSourceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createFolderRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createFolderRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateFolder"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createFolderRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createFolderRequest*           ns5__CreateFolderRequest,
    // response parameters:
    ns5__createFolderResponse*          ns5__CreateFolderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createFolderRequest(
    struct soap *soap,
    // request parameters:
    ns5__createFolderRequest*           ns5__CreateFolderRequest,
    // response parameters:
    ns5__createFolderResponse*          ns5__CreateFolderResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createFolderRequest document
//gsoap ns1  service method-encoding:	createFolderRequest literal
//gsoap ns1  service method-action:	createFolderRequest urn:zimbraMail/CreateFolder
//gsoap ns1  service method-input-header-part:	createFolderRequest ns3__context
int __ns1__createFolderRequest(
    ns5__createFolderRequest*           ns5__CreateFolderRequest,	///< Request parameter
    ns5__createFolderResponse*          ns5__CreateFolderResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createMountpointRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createMountpointRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateMountpoint"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createMountpointRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createMountpointRequest*       ns5__CreateMountpointRequest,
    // response parameters:
    ns5__createMountpointResponse*      ns5__CreateMountpointResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createMountpointRequest(
    struct soap *soap,
    // request parameters:
    ns5__createMountpointRequest*       ns5__CreateMountpointRequest,
    // response parameters:
    ns5__createMountpointResponse*      ns5__CreateMountpointResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createMountpointRequest document
//gsoap ns1  service method-encoding:	createMountpointRequest literal
//gsoap ns1  service method-action:	createMountpointRequest urn:zimbraMail/CreateMountpoint
//gsoap ns1  service method-input-header-part:	createMountpointRequest ns3__context
int __ns1__createMountpointRequest(
    ns5__createMountpointRequest*       ns5__CreateMountpointRequest,	///< Request parameter
    ns5__createMountpointResponse*      ns5__CreateMountpointResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createNoteRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createNoteRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateNote"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createNoteRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createNoteRequest*             ns5__CreateNoteRequest,
    // response parameters:
    ns5__createNoteResponse*            ns5__CreateNoteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createNoteRequest(
    struct soap *soap,
    // request parameters:
    ns5__createNoteRequest*             ns5__CreateNoteRequest,
    // response parameters:
    ns5__createNoteResponse*            ns5__CreateNoteResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createNoteRequest document
//gsoap ns1  service method-encoding:	createNoteRequest literal
//gsoap ns1  service method-action:	createNoteRequest urn:zimbraMail/CreateNote
//gsoap ns1  service method-input-header-part:	createNoteRequest ns3__context
int __ns1__createNoteRequest(
    ns5__createNoteRequest*             ns5__CreateNoteRequest,	///< Request parameter
    ns5__createNoteResponse*            ns5__CreateNoteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createSearchFolderRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createSearchFolderRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateSearchFolder"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createSearchFolderRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createSearchFolderRequest*     ns5__CreateSearchFolderRequest,
    // response parameters:
    ns5__createSearchFolderResponse*    ns5__CreateSearchFolderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createSearchFolderRequest(
    struct soap *soap,
    // request parameters:
    ns5__createSearchFolderRequest*     ns5__CreateSearchFolderRequest,
    // response parameters:
    ns5__createSearchFolderResponse*    ns5__CreateSearchFolderResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createSearchFolderRequest document
//gsoap ns1  service method-encoding:	createSearchFolderRequest literal
//gsoap ns1  service method-action:	createSearchFolderRequest urn:zimbraMail/CreateSearchFolder
//gsoap ns1  service method-input-header-part:	createSearchFolderRequest ns3__context
int __ns1__createSearchFolderRequest(
    ns5__createSearchFolderRequest*     ns5__CreateSearchFolderRequest,	///< Request parameter
    ns5__createSearchFolderResponse*    ns5__CreateSearchFolderResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createTagRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createTagRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateTag"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createTagRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createTagRequest*              ns5__CreateTagRequest,
    // response parameters:
    ns5__createTagResponse*             ns5__CreateTagResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createTagRequest(
    struct soap *soap,
    // request parameters:
    ns5__createTagRequest*              ns5__CreateTagRequest,
    // response parameters:
    ns5__createTagResponse*             ns5__CreateTagResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createTagRequest document
//gsoap ns1  service method-encoding:	createTagRequest literal
//gsoap ns1  service method-action:	createTagRequest urn:zimbraMail/CreateTag
//gsoap ns1  service method-input-header-part:	createTagRequest ns3__context
int __ns1__createTagRequest(
    ns5__createTagRequest*              ns5__CreateTagRequest,	///< Request parameter
    ns5__createTagResponse*             ns5__CreateTagResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createTaskExceptionRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createTaskExceptionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateTaskException"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createTaskExceptionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createTaskExceptionRequest*    ns5__CreateTaskExceptionRequest,
    // response parameters:
    ns5__createTaskExceptionResponse*   ns5__CreateTaskExceptionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createTaskExceptionRequest(
    struct soap *soap,
    // request parameters:
    ns5__createTaskExceptionRequest*    ns5__CreateTaskExceptionRequest,
    // response parameters:
    ns5__createTaskExceptionResponse*   ns5__CreateTaskExceptionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createTaskExceptionRequest document
//gsoap ns1  service method-encoding:	createTaskExceptionRequest literal
//gsoap ns1  service method-action:	createTaskExceptionRequest urn:zimbraMail/CreateTaskException
//gsoap ns1  service method-input-header-part:	createTaskExceptionRequest ns3__context
int __ns1__createTaskExceptionRequest(
    ns5__createTaskExceptionRequest*    ns5__CreateTaskExceptionRequest,	///< Request parameter
    ns5__createTaskExceptionResponse*   ns5__CreateTaskExceptionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createTaskRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createTaskRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateTask"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createTaskRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createTaskRequest*             ns5__CreateTaskRequest,
    // response parameters:
    ns5__createTaskResponse*            ns5__CreateTaskResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createTaskRequest(
    struct soap *soap,
    // request parameters:
    ns5__createTaskRequest*             ns5__CreateTaskRequest,
    // response parameters:
    ns5__createTaskResponse*            ns5__CreateTaskResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createTaskRequest document
//gsoap ns1  service method-encoding:	createTaskRequest literal
//gsoap ns1  service method-action:	createTaskRequest urn:zimbraMail/CreateTask
//gsoap ns1  service method-input-header-part:	createTaskRequest ns3__context
int __ns1__createTaskRequest(
    ns5__createTaskRequest*             ns5__CreateTaskRequest,	///< Request parameter
    ns5__createTaskResponse*            ns5__CreateTaskResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createWaitSetRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__createWaitSetRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/CreateWaitSet"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createWaitSetRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__createWaitSetRequest*          ns5__CreateWaitSetRequest,
    // response parameters:
    ns5__createWaitSetResponse*         ns5__CreateWaitSetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createWaitSetRequest(
    struct soap *soap,
    // request parameters:
    ns5__createWaitSetRequest*          ns5__CreateWaitSetRequest,
    // response parameters:
    ns5__createWaitSetResponse*         ns5__CreateWaitSetResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	createWaitSetRequest document
//gsoap ns1  service method-encoding:	createWaitSetRequest literal
//gsoap ns1  service method-action:	createWaitSetRequest urn:zimbraMail/CreateWaitSet
//gsoap ns1  service method-input-header-part:	createWaitSetRequest ns3__context
int __ns1__createWaitSetRequest(
    ns5__createWaitSetRequest*          ns5__CreateWaitSetRequest,	///< Request parameter
    ns5__createWaitSetResponse*         ns5__CreateWaitSetResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__declineCounterAppointmentRequest                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__declineCounterAppointmentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/DeclineCounterAppointment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__declineCounterAppointmentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__declineCounterAppointmentRequest* ns5__DeclineCounterAppointmentRequest,
    // response parameters:
    ns5__declineCounterAppointmentResponse* ns5__DeclineCounterAppointmentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__declineCounterAppointmentRequest(
    struct soap *soap,
    // request parameters:
    ns5__declineCounterAppointmentRequest* ns5__DeclineCounterAppointmentRequest,
    // response parameters:
    ns5__declineCounterAppointmentResponse* ns5__DeclineCounterAppointmentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	declineCounterAppointmentRequest document
//gsoap ns1  service method-encoding:	declineCounterAppointmentRequest literal
//gsoap ns1  service method-action:	declineCounterAppointmentRequest urn:zimbraMail/DeclineCounterAppointment
//gsoap ns1  service method-input-header-part:	declineCounterAppointmentRequest ns3__context
int __ns1__declineCounterAppointmentRequest(
    ns5__declineCounterAppointmentRequest* ns5__DeclineCounterAppointmentRequest,	///< Request parameter
    ns5__declineCounterAppointmentResponse* ns5__DeclineCounterAppointmentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteDataSourceRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__deleteDataSourceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/DeleteDataSource"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteDataSourceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__deleteDataSourceRequest*       ns5__DeleteDataSourceRequest,
    // response parameters:
    ns5__deleteDataSourceResponse*      ns5__DeleteDataSourceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteDataSourceRequest(
    struct soap *soap,
    // request parameters:
    ns5__deleteDataSourceRequest*       ns5__DeleteDataSourceRequest,
    // response parameters:
    ns5__deleteDataSourceResponse*      ns5__DeleteDataSourceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	deleteDataSourceRequest document
//gsoap ns1  service method-encoding:	deleteDataSourceRequest literal
//gsoap ns1  service method-action:	deleteDataSourceRequest urn:zimbraMail/DeleteDataSource
//gsoap ns1  service method-input-header-part:	deleteDataSourceRequest ns3__context
int __ns1__deleteDataSourceRequest(
    ns5__deleteDataSourceRequest*       ns5__DeleteDataSourceRequest,	///< Request parameter
    ns5__deleteDataSourceResponse*      ns5__DeleteDataSourceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteDeviceRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__deleteDeviceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/DeleteDevice"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteDeviceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__deleteDeviceRequest*           ns5__DeleteDeviceRequest,
    // response parameters:
    ns5__deleteDeviceResponse*          ns5__DeleteDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteDeviceRequest(
    struct soap *soap,
    // request parameters:
    ns5__deleteDeviceRequest*           ns5__DeleteDeviceRequest,
    // response parameters:
    ns5__deleteDeviceResponse*          ns5__DeleteDeviceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	deleteDeviceRequest document
//gsoap ns1  service method-encoding:	deleteDeviceRequest literal
//gsoap ns1  service method-action:	deleteDeviceRequest urn:zimbraMail/DeleteDevice
//gsoap ns1  service method-input-header-part:	deleteDeviceRequest ns3__context
int __ns1__deleteDeviceRequest(
    ns5__deleteDeviceRequest*           ns5__DeleteDeviceRequest,	///< Request parameter
    ns5__deleteDeviceResponse*          ns5__DeleteDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__destroyWaitSetRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__destroyWaitSetRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/DestroyWaitSet"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__destroyWaitSetRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__destroyWaitSetRequest*         ns5__DestroyWaitSetRequest,
    // response parameters:
    ns5__destroyWaitSetResponse*        ns5__DestroyWaitSetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__destroyWaitSetRequest(
    struct soap *soap,
    // request parameters:
    ns5__destroyWaitSetRequest*         ns5__DestroyWaitSetRequest,
    // response parameters:
    ns5__destroyWaitSetResponse*        ns5__DestroyWaitSetResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	destroyWaitSetRequest document
//gsoap ns1  service method-encoding:	destroyWaitSetRequest literal
//gsoap ns1  service method-action:	destroyWaitSetRequest urn:zimbraMail/DestroyWaitSet
//gsoap ns1  service method-input-header-part:	destroyWaitSetRequest ns3__context
int __ns1__destroyWaitSetRequest(
    ns5__destroyWaitSetRequest*         ns5__DestroyWaitSetRequest,	///< Request parameter
    ns5__destroyWaitSetResponse*        ns5__DestroyWaitSetResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__diffDocumentRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__diffDocumentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/DiffDocument"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__diffDocumentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__diffDocumentRequest*           ns5__DiffDocumentRequest,
    // response parameters:
    ns5__diffDocumentResponse*          ns5__DiffDocumentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__diffDocumentRequest(
    struct soap *soap,
    // request parameters:
    ns5__diffDocumentRequest*           ns5__DiffDocumentRequest,
    // response parameters:
    ns5__diffDocumentResponse*          ns5__DiffDocumentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	diffDocumentRequest document
//gsoap ns1  service method-encoding:	diffDocumentRequest literal
//gsoap ns1  service method-action:	diffDocumentRequest urn:zimbraMail/DiffDocument
//gsoap ns1  service method-input-header-part:	diffDocumentRequest ns3__context
int __ns1__diffDocumentRequest(
    ns5__diffDocumentRequest*           ns5__DiffDocumentRequest,	///< Request parameter
    ns5__diffDocumentResponse*          ns5__DiffDocumentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__dismissCalendarItemAlarmRequest                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__dismissCalendarItemAlarmRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/DismissCalendarItemAlarm"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__dismissCalendarItemAlarmRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__dismissCalendarItemAlarmRequest* ns5__DismissCalendarItemAlarmRequest,
    // response parameters:
    ns5__dismissCalendarItemAlarmResponse* ns5__DismissCalendarItemAlarmResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__dismissCalendarItemAlarmRequest(
    struct soap *soap,
    // request parameters:
    ns5__dismissCalendarItemAlarmRequest* ns5__DismissCalendarItemAlarmRequest,
    // response parameters:
    ns5__dismissCalendarItemAlarmResponse* ns5__DismissCalendarItemAlarmResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	dismissCalendarItemAlarmRequest document
//gsoap ns1  service method-encoding:	dismissCalendarItemAlarmRequest literal
//gsoap ns1  service method-action:	dismissCalendarItemAlarmRequest urn:zimbraMail/DismissCalendarItemAlarm
//gsoap ns1  service method-input-header-part:	dismissCalendarItemAlarmRequest ns3__context
int __ns1__dismissCalendarItemAlarmRequest(
    ns5__dismissCalendarItemAlarmRequest* ns5__DismissCalendarItemAlarmRequest,	///< Request parameter
    ns5__dismissCalendarItemAlarmResponse* ns5__DismissCalendarItemAlarmResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__documentActionRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__documentActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/DocumentAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__documentActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__documentActionRequest*         ns5__DocumentActionRequest,
    // response parameters:
    ns5__documentActionResponse*        ns5__DocumentActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__documentActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__documentActionRequest*         ns5__DocumentActionRequest,
    // response parameters:
    ns5__documentActionResponse*        ns5__DocumentActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	documentActionRequest document
//gsoap ns1  service method-encoding:	documentActionRequest literal
//gsoap ns1  service method-action:	documentActionRequest urn:zimbraMail/DocumentAction
//gsoap ns1  service method-input-header-part:	documentActionRequest ns3__context
int __ns1__documentActionRequest(
    ns5__documentActionRequest*         ns5__DocumentActionRequest,	///< Request parameter
    ns5__documentActionResponse*        ns5__DocumentActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__emptyDumpsterRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__emptyDumpsterRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/EmptyDumpster"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__emptyDumpsterRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__emptyDumpsterRequest*          ns5__EmptyDumpsterRequest,
    // response parameters:
    ns5__emptyDumpsterResponse*         ns5__EmptyDumpsterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__emptyDumpsterRequest(
    struct soap *soap,
    // request parameters:
    ns5__emptyDumpsterRequest*          ns5__EmptyDumpsterRequest,
    // response parameters:
    ns5__emptyDumpsterResponse*         ns5__EmptyDumpsterResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	emptyDumpsterRequest document
//gsoap ns1  service method-encoding:	emptyDumpsterRequest literal
//gsoap ns1  service method-action:	emptyDumpsterRequest urn:zimbraMail/EmptyDumpster
//gsoap ns1  service method-input-header-part:	emptyDumpsterRequest ns3__context
int __ns1__emptyDumpsterRequest(
    ns5__emptyDumpsterRequest*          ns5__EmptyDumpsterRequest,	///< Request parameter
    ns5__emptyDumpsterResponse*         ns5__EmptyDumpsterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__enableSharedReminderRequest                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__enableSharedReminderRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/EnableSharedReminder"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__enableSharedReminderRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__enableSharedReminderRequest*   ns5__EnableSharedReminderRequest,
    // response parameters:
    ns5__enableSharedReminderResponse*  ns5__EnableSharedReminderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__enableSharedReminderRequest(
    struct soap *soap,
    // request parameters:
    ns5__enableSharedReminderRequest*   ns5__EnableSharedReminderRequest,
    // response parameters:
    ns5__enableSharedReminderResponse*  ns5__EnableSharedReminderResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	enableSharedReminderRequest document
//gsoap ns1  service method-encoding:	enableSharedReminderRequest literal
//gsoap ns1  service method-action:	enableSharedReminderRequest urn:zimbraMail/EnableSharedReminder
//gsoap ns1  service method-input-header-part:	enableSharedReminderRequest ns3__context
int __ns1__enableSharedReminderRequest(
    ns5__enableSharedReminderRequest*   ns5__EnableSharedReminderRequest,	///< Request parameter
    ns5__enableSharedReminderResponse*  ns5__EnableSharedReminderResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__expandRecurRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__expandRecurRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ExpandRecur"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__expandRecurRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__expandRecurRequest*            ns5__ExpandRecurRequest,
    // response parameters:
    ns5__expandRecurResponse*           ns5__ExpandRecurResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__expandRecurRequest(
    struct soap *soap,
    // request parameters:
    ns5__expandRecurRequest*            ns5__ExpandRecurRequest,
    // response parameters:
    ns5__expandRecurResponse*           ns5__ExpandRecurResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	expandRecurRequest document
//gsoap ns1  service method-encoding:	expandRecurRequest literal
//gsoap ns1  service method-action:	expandRecurRequest urn:zimbraMail/ExpandRecur
//gsoap ns1  service method-input-header-part:	expandRecurRequest ns3__context
int __ns1__expandRecurRequest(
    ns5__expandRecurRequest*            ns5__ExpandRecurRequest,	///< Request parameter
    ns5__expandRecurResponse*           ns5__ExpandRecurResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__exportContactsRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__exportContactsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ExportContacts"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__exportContactsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__exportContactsRequest*         ns5__ExportContactsRequest,
    // response parameters:
    ns5__exportContactsResponse*        ns5__ExportContactsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__exportContactsRequest(
    struct soap *soap,
    // request parameters:
    ns5__exportContactsRequest*         ns5__ExportContactsRequest,
    // response parameters:
    ns5__exportContactsResponse*        ns5__ExportContactsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	exportContactsRequest document
//gsoap ns1  service method-encoding:	exportContactsRequest literal
//gsoap ns1  service method-action:	exportContactsRequest urn:zimbraMail/ExportContacts
//gsoap ns1  service method-input-header-part:	exportContactsRequest ns3__context
int __ns1__exportContactsRequest(
    ns5__exportContactsRequest*         ns5__ExportContactsRequest,	///< Request parameter
    ns5__exportContactsResponse*        ns5__ExportContactsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__folderActionRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__folderActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/FolderAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__folderActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__folderActionRequest*           ns5__FolderActionRequest,
    // response parameters:
    ns5__folderActionResponse*          ns5__FolderActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__folderActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__folderActionRequest*           ns5__FolderActionRequest,
    // response parameters:
    ns5__folderActionResponse*          ns5__FolderActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	folderActionRequest document
//gsoap ns1  service method-encoding:	folderActionRequest literal
//gsoap ns1  service method-action:	folderActionRequest urn:zimbraMail/FolderAction
//gsoap ns1  service method-input-header-part:	folderActionRequest ns3__context
int __ns1__folderActionRequest(
    ns5__folderActionRequest*           ns5__FolderActionRequest,	///< Request parameter
    ns5__folderActionResponse*          ns5__FolderActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__forwardAppointmentInviteRequest                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__forwardAppointmentInviteRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ForwardAppointmentInvite"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__forwardAppointmentInviteRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__forwardAppointmentInviteRequest* ns5__ForwardAppointmentInviteRequest,
    // response parameters:
    ns5__forwardAppointmentInviteResponse* ns5__ForwardAppointmentInviteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__forwardAppointmentInviteRequest(
    struct soap *soap,
    // request parameters:
    ns5__forwardAppointmentInviteRequest* ns5__ForwardAppointmentInviteRequest,
    // response parameters:
    ns5__forwardAppointmentInviteResponse* ns5__ForwardAppointmentInviteResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	forwardAppointmentInviteRequest document
//gsoap ns1  service method-encoding:	forwardAppointmentInviteRequest literal
//gsoap ns1  service method-action:	forwardAppointmentInviteRequest urn:zimbraMail/ForwardAppointmentInvite
//gsoap ns1  service method-input-header-part:	forwardAppointmentInviteRequest ns3__context
int __ns1__forwardAppointmentInviteRequest(
    ns5__forwardAppointmentInviteRequest* ns5__ForwardAppointmentInviteRequest,	///< Request parameter
    ns5__forwardAppointmentInviteResponse* ns5__ForwardAppointmentInviteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__forwardAppointmentRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__forwardAppointmentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ForwardAppointment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__forwardAppointmentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__forwardAppointmentRequest*     ns5__ForwardAppointmentRequest,
    // response parameters:
    ns5__forwardAppointmentResponse*    ns5__ForwardAppointmentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__forwardAppointmentRequest(
    struct soap *soap,
    // request parameters:
    ns5__forwardAppointmentRequest*     ns5__ForwardAppointmentRequest,
    // response parameters:
    ns5__forwardAppointmentResponse*    ns5__ForwardAppointmentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	forwardAppointmentRequest document
//gsoap ns1  service method-encoding:	forwardAppointmentRequest literal
//gsoap ns1  service method-action:	forwardAppointmentRequest urn:zimbraMail/ForwardAppointment
//gsoap ns1  service method-input-header-part:	forwardAppointmentRequest ns3__context
int __ns1__forwardAppointmentRequest(
    ns5__forwardAppointmentRequest*     ns5__ForwardAppointmentRequest,	///< Request parameter
    ns5__forwardAppointmentResponse*    ns5__ForwardAppointmentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__generateUUIDRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__generateUUIDRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GenerateUUID"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__generateUUIDRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__generateUUIDRequest*           ns5__GenerateUUIDRequest,
    // response parameters:
    ns5__generateUUIDResponse          &ns5__GenerateUUIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__generateUUIDRequest(
    struct soap *soap,
    // request parameters:
    ns5__generateUUIDRequest*           ns5__GenerateUUIDRequest,
    // response parameters:
    ns5__generateUUIDResponse          &ns5__GenerateUUIDResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	generateUUIDRequest document
//gsoap ns1  service method-encoding:	generateUUIDRequest literal
//gsoap ns1  service method-action:	generateUUIDRequest urn:zimbraMail/GenerateUUID
//gsoap ns1  service method-input-header-part:	generateUUIDRequest ns3__context
int __ns1__generateUUIDRequest(
    ns5__generateUUIDRequest*           ns5__GenerateUUIDRequest,	///< Request parameter
    ns5__generateUUIDResponse          &ns5__GenerateUUIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getActivityStreamRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getActivityStreamRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetActivityStream"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getActivityStreamRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getActivityStreamRequest*      ns5__GetActivityStreamRequest,
    // response parameters:
    ns5__getActivityStreamResponse*     ns5__GetActivityStreamResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getActivityStreamRequest(
    struct soap *soap,
    // request parameters:
    ns5__getActivityStreamRequest*      ns5__GetActivityStreamRequest,
    // response parameters:
    ns5__getActivityStreamResponse*     ns5__GetActivityStreamResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getActivityStreamRequest document
//gsoap ns1  service method-encoding:	getActivityStreamRequest literal
//gsoap ns1  service method-action:	getActivityStreamRequest urn:zimbraMail/GetActivityStream
//gsoap ns1  service method-input-header-part:	getActivityStreamRequest ns3__context
int __ns1__getActivityStreamRequest(
    ns5__getActivityStreamRequest*      ns5__GetActivityStreamRequest,	///< Request parameter
    ns5__getActivityStreamResponse*     ns5__GetActivityStreamResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAllDevicesRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAllDevicesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetAllDevices"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAllDevicesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getAllDevicesRequest*          ns5__GetAllDevicesRequest,
    // response parameters:
    ns5__getAllDevicesResponse*         ns5__GetAllDevicesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAllDevicesRequest(
    struct soap *soap,
    // request parameters:
    ns5__getAllDevicesRequest*          ns5__GetAllDevicesRequest,
    // response parameters:
    ns5__getAllDevicesResponse*         ns5__GetAllDevicesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAllDevicesRequest document
//gsoap ns1  service method-encoding:	getAllDevicesRequest literal
//gsoap ns1  service method-action:	getAllDevicesRequest urn:zimbraMail/GetAllDevices
//gsoap ns1  service method-input-header-part:	getAllDevicesRequest ns3__context
int __ns1__getAllDevicesRequest(
    ns5__getAllDevicesRequest*          ns5__GetAllDevicesRequest,	///< Request parameter
    ns5__getAllDevicesResponse*         ns5__GetAllDevicesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAppointmentRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAppointmentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetAppointment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAppointmentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getAppointmentRequest*         ns5__GetAppointmentRequest,
    // response parameters:
    ns5__getAppointmentResponse*        ns5__GetAppointmentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAppointmentRequest(
    struct soap *soap,
    // request parameters:
    ns5__getAppointmentRequest*         ns5__GetAppointmentRequest,
    // response parameters:
    ns5__getAppointmentResponse*        ns5__GetAppointmentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAppointmentRequest document
//gsoap ns1  service method-encoding:	getAppointmentRequest literal
//gsoap ns1  service method-action:	getAppointmentRequest urn:zimbraMail/GetAppointment
//gsoap ns1  service method-input-header-part:	getAppointmentRequest ns3__context
int __ns1__getAppointmentRequest(
    ns5__getAppointmentRequest*         ns5__GetAppointmentRequest,	///< Request parameter
    ns5__getAppointmentResponse*        ns5__GetAppointmentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getApptSummariesRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getApptSummariesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetApptSummaries"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getApptSummariesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getApptSummariesRequest*       ns5__GetApptSummariesRequest,
    // response parameters:
    ns5__getApptSummariesResponse*      ns5__GetApptSummariesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getApptSummariesRequest(
    struct soap *soap,
    // request parameters:
    ns5__getApptSummariesRequest*       ns5__GetApptSummariesRequest,
    // response parameters:
    ns5__getApptSummariesResponse*      ns5__GetApptSummariesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getApptSummariesRequest document
//gsoap ns1  service method-encoding:	getApptSummariesRequest literal
//gsoap ns1  service method-action:	getApptSummariesRequest urn:zimbraMail/GetApptSummaries
//gsoap ns1  service method-input-header-part:	getApptSummariesRequest ns3__context
int __ns1__getApptSummariesRequest(
    ns5__getApptSummariesRequest*       ns5__GetApptSummariesRequest,	///< Request parameter
    ns5__getApptSummariesResponse*      ns5__GetApptSummariesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getCalendarItemSummariesRequest                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getCalendarItemSummariesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetCalendarItemSummaries"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getCalendarItemSummariesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getCalendarItemSummariesRequest* ns5__GetCalendarItemSummariesRequest,
    // response parameters:
    ns5__getCalendarItemSummariesResponse* ns5__GetCalendarItemSummariesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getCalendarItemSummariesRequest(
    struct soap *soap,
    // request parameters:
    ns5__getCalendarItemSummariesRequest* ns5__GetCalendarItemSummariesRequest,
    // response parameters:
    ns5__getCalendarItemSummariesResponse* ns5__GetCalendarItemSummariesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getCalendarItemSummariesRequest document
//gsoap ns1  service method-encoding:	getCalendarItemSummariesRequest literal
//gsoap ns1  service method-action:	getCalendarItemSummariesRequest urn:zimbraMail/GetCalendarItemSummaries
//gsoap ns1  service method-input-header-part:	getCalendarItemSummariesRequest ns3__context
int __ns1__getCalendarItemSummariesRequest(
    ns5__getCalendarItemSummariesRequest* ns5__GetCalendarItemSummariesRequest,	///< Request parameter
    ns5__getCalendarItemSummariesResponse* ns5__GetCalendarItemSummariesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getCommentsRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getCommentsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetComments"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getCommentsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getCommentsRequest*            ns5__GetCommentsRequest,
    // response parameters:
    ns5__getCommentsResponse*           ns5__GetCommentsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getCommentsRequest(
    struct soap *soap,
    // request parameters:
    ns5__getCommentsRequest*            ns5__GetCommentsRequest,
    // response parameters:
    ns5__getCommentsResponse*           ns5__GetCommentsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getCommentsRequest document
//gsoap ns1  service method-encoding:	getCommentsRequest literal
//gsoap ns1  service method-action:	getCommentsRequest urn:zimbraMail/GetComments
//gsoap ns1  service method-input-header-part:	getCommentsRequest ns3__context
int __ns1__getCommentsRequest(
    ns5__getCommentsRequest*            ns5__GetCommentsRequest,	///< Request parameter
    ns5__getCommentsResponse*           ns5__GetCommentsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getContactsRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getContactsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetContacts"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getContactsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getContactsRequest*            ns5__GetContactsRequest,
    // response parameters:
    ns5__getContactsResponse*           ns5__GetContactsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getContactsRequest(
    struct soap *soap,
    // request parameters:
    ns5__getContactsRequest*            ns5__GetContactsRequest,
    // response parameters:
    ns5__getContactsResponse*           ns5__GetContactsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getContactsRequest document
//gsoap ns1  service method-encoding:	getContactsRequest literal
//gsoap ns1  service method-action:	getContactsRequest urn:zimbraMail/GetContacts
//gsoap ns1  service method-input-header-part:	getContactsRequest ns3__context
int __ns1__getContactsRequest(
    ns5__getContactsRequest*            ns5__GetContactsRequest,	///< Request parameter
    ns5__getContactsResponse*           ns5__GetContactsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getConvRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getConvRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetConv"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getConvRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getConvRequest*                ns5__GetConvRequest,
    // response parameters:
    ns5__getConvResponse*               ns5__GetConvResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getConvRequest(
    struct soap *soap,
    // request parameters:
    ns5__getConvRequest*                ns5__GetConvRequest,
    // response parameters:
    ns5__getConvResponse*               ns5__GetConvResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getConvRequest document
//gsoap ns1  service method-encoding:	getConvRequest literal
//gsoap ns1  service method-action:	getConvRequest urn:zimbraMail/GetConv
//gsoap ns1  service method-input-header-part:	getConvRequest ns3__context
int __ns1__getConvRequest(
    ns5__getConvRequest*                ns5__GetConvRequest,	///< Request parameter
    ns5__getConvResponse*               ns5__GetConvResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getCustomMetadataRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getCustomMetadataRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetCustomMetadata"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getCustomMetadataRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getCustomMetadataRequest*      ns5__GetCustomMetadataRequest,
    // response parameters:
    ns5__getCustomMetadataResponse*     ns5__GetCustomMetadataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getCustomMetadataRequest(
    struct soap *soap,
    // request parameters:
    ns5__getCustomMetadataRequest*      ns5__GetCustomMetadataRequest,
    // response parameters:
    ns5__getCustomMetadataResponse*     ns5__GetCustomMetadataResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getCustomMetadataRequest document
//gsoap ns1  service method-encoding:	getCustomMetadataRequest literal
//gsoap ns1  service method-action:	getCustomMetadataRequest urn:zimbraMail/GetCustomMetadata
//gsoap ns1  service method-input-header-part:	getCustomMetadataRequest ns3__context
int __ns1__getCustomMetadataRequest(
    ns5__getCustomMetadataRequest*      ns5__GetCustomMetadataRequest,	///< Request parameter
    ns5__getCustomMetadataResponse*     ns5__GetCustomMetadataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDataSourcesRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getDataSourcesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetDataSources"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDataSourcesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getDataSourcesRequest*         ns5__GetDataSourcesRequest,
    // response parameters:
    ns5__getDataSourcesResponse*        ns5__GetDataSourcesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDataSourcesRequest(
    struct soap *soap,
    // request parameters:
    ns5__getDataSourcesRequest*         ns5__GetDataSourcesRequest,
    // response parameters:
    ns5__getDataSourcesResponse*        ns5__GetDataSourcesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDataSourcesRequest document
//gsoap ns1  service method-encoding:	getDataSourcesRequest literal
//gsoap ns1  service method-action:	getDataSourcesRequest urn:zimbraMail/GetDataSources
//gsoap ns1  service method-input-header-part:	getDataSourcesRequest ns3__context
int __ns1__getDataSourcesRequest(
    ns5__getDataSourcesRequest*         ns5__GetDataSourcesRequest,	///< Request parameter
    ns5__getDataSourcesResponse*        ns5__GetDataSourcesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDocumentShareURLRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getDocumentShareURLRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetDocumentShareURL"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDocumentShareURLRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getDocumentShareURLRequest*    ns5__GetDocumentShareURLRequest,
    // response parameters:
    ns5__getDocumentShareURLResponse   &ns5__GetDocumentShareURLResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDocumentShareURLRequest(
    struct soap *soap,
    // request parameters:
    ns5__getDocumentShareURLRequest*    ns5__GetDocumentShareURLRequest,
    // response parameters:
    ns5__getDocumentShareURLResponse   &ns5__GetDocumentShareURLResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDocumentShareURLRequest document
//gsoap ns1  service method-encoding:	getDocumentShareURLRequest literal
//gsoap ns1  service method-action:	getDocumentShareURLRequest urn:zimbraMail/GetDocumentShareURL
//gsoap ns1  service method-input-header-part:	getDocumentShareURLRequest ns3__context
int __ns1__getDocumentShareURLRequest(
    ns5__getDocumentShareURLRequest*    ns5__GetDocumentShareURLRequest,	///< Request parameter
    ns5__getDocumentShareURLResponse   &ns5__GetDocumentShareURLResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getEffectiveFolderPermsRequest                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getEffectiveFolderPermsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetEffectiveFolderPerms"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getEffectiveFolderPermsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getEffectiveFolderPermsRequest* ns5__GetEffectiveFolderPermsRequest,
    // response parameters:
    ns5__getEffectiveFolderPermsResponse* ns5__GetEffectiveFolderPermsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getEffectiveFolderPermsRequest(
    struct soap *soap,
    // request parameters:
    ns5__getEffectiveFolderPermsRequest* ns5__GetEffectiveFolderPermsRequest,
    // response parameters:
    ns5__getEffectiveFolderPermsResponse* ns5__GetEffectiveFolderPermsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getEffectiveFolderPermsRequest document
//gsoap ns1  service method-encoding:	getEffectiveFolderPermsRequest literal
//gsoap ns1  service method-action:	getEffectiveFolderPermsRequest urn:zimbraMail/GetEffectiveFolderPerms
//gsoap ns1  service method-input-header-part:	getEffectiveFolderPermsRequest ns3__context
int __ns1__getEffectiveFolderPermsRequest(
    ns5__getEffectiveFolderPermsRequest* ns5__GetEffectiveFolderPermsRequest,	///< Request parameter
    ns5__getEffectiveFolderPermsResponse* ns5__GetEffectiveFolderPermsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getFilterRulesRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getFilterRulesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetFilterRules"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getFilterRulesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getFilterRulesRequest*         ns5__GetFilterRulesRequest,
    // response parameters:
    ns5__getFilterRulesResponse*        ns5__GetFilterRulesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getFilterRulesRequest(
    struct soap *soap,
    // request parameters:
    ns5__getFilterRulesRequest*         ns5__GetFilterRulesRequest,
    // response parameters:
    ns5__getFilterRulesResponse*        ns5__GetFilterRulesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getFilterRulesRequest document
//gsoap ns1  service method-encoding:	getFilterRulesRequest literal
//gsoap ns1  service method-action:	getFilterRulesRequest urn:zimbraMail/GetFilterRules
//gsoap ns1  service method-input-header-part:	getFilterRulesRequest ns3__context
int __ns1__getFilterRulesRequest(
    ns5__getFilterRulesRequest*         ns5__GetFilterRulesRequest,	///< Request parameter
    ns5__getFilterRulesResponse*        ns5__GetFilterRulesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getFolderRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getFolderRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetFolder"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getFolderRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getFolderRequest*              ns5__GetFolderRequest,
    // response parameters:
    ns5__getFolderResponse*             ns5__GetFolderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getFolderRequest(
    struct soap *soap,
    // request parameters:
    ns5__getFolderRequest*              ns5__GetFolderRequest,
    // response parameters:
    ns5__getFolderResponse*             ns5__GetFolderResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getFolderRequest document
//gsoap ns1  service method-encoding:	getFolderRequest literal
//gsoap ns1  service method-action:	getFolderRequest urn:zimbraMail/GetFolder
//gsoap ns1  service method-input-header-part:	getFolderRequest ns3__context
int __ns1__getFolderRequest(
    ns5__getFolderRequest*              ns5__GetFolderRequest,	///< Request parameter
    ns5__getFolderResponse*             ns5__GetFolderResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getFreeBusyRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getFreeBusyRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetFreeBusy"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getFreeBusyRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getFreeBusyRequest*            ns5__GetFreeBusyRequest,
    // response parameters:
    ns5__getFreeBusyResponse*           ns5__GetFreeBusyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getFreeBusyRequest(
    struct soap *soap,
    // request parameters:
    ns5__getFreeBusyRequest*            ns5__GetFreeBusyRequest,
    // response parameters:
    ns5__getFreeBusyResponse*           ns5__GetFreeBusyResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getFreeBusyRequest document
//gsoap ns1  service method-encoding:	getFreeBusyRequest literal
//gsoap ns1  service method-action:	getFreeBusyRequest urn:zimbraMail/GetFreeBusy
//gsoap ns1  service method-input-header-part:	getFreeBusyRequest ns3__context
int __ns1__getFreeBusyRequest(
    ns5__getFreeBusyRequest*            ns5__GetFreeBusyRequest,	///< Request parameter
    ns5__getFreeBusyResponse*           ns5__GetFreeBusyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getICalRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getICalRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetICal"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getICalRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getICalRequest*                ns5__GetICalRequest,
    // response parameters:
    ns5__getICalResponse*               ns5__GetICalResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getICalRequest(
    struct soap *soap,
    // request parameters:
    ns5__getICalRequest*                ns5__GetICalRequest,
    // response parameters:
    ns5__getICalResponse*               ns5__GetICalResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getICalRequest document
//gsoap ns1  service method-encoding:	getICalRequest literal
//gsoap ns1  service method-action:	getICalRequest urn:zimbraMail/GetICal
//gsoap ns1  service method-input-header-part:	getICalRequest ns3__context
int __ns1__getICalRequest(
    ns5__getICalRequest*                ns5__GetICalRequest,	///< Request parameter
    ns5__getICalResponse*               ns5__GetICalResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getImportStatusRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getImportStatusRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetImportStatus"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getImportStatusRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getImportStatusRequest*        ns5__GetImportStatusRequest,
    // response parameters:
    ns5__getImportStatusResponse*       ns5__GetImportStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getImportStatusRequest(
    struct soap *soap,
    // request parameters:
    ns5__getImportStatusRequest*        ns5__GetImportStatusRequest,
    // response parameters:
    ns5__getImportStatusResponse*       ns5__GetImportStatusResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getImportStatusRequest document
//gsoap ns1  service method-encoding:	getImportStatusRequest literal
//gsoap ns1  service method-action:	getImportStatusRequest urn:zimbraMail/GetImportStatus
//gsoap ns1  service method-input-header-part:	getImportStatusRequest ns3__context
int __ns1__getImportStatusRequest(
    ns5__getImportStatusRequest*        ns5__GetImportStatusRequest,	///< Request parameter
    ns5__getImportStatusResponse*       ns5__GetImportStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getItemRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getItemRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetItem"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getItemRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getItemRequest*                ns5__GetItemRequest,
    // response parameters:
    ns5__getItemResponse*               ns5__GetItemResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getItemRequest(
    struct soap *soap,
    // request parameters:
    ns5__getItemRequest*                ns5__GetItemRequest,
    // response parameters:
    ns5__getItemResponse*               ns5__GetItemResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getItemRequest document
//gsoap ns1  service method-encoding:	getItemRequest literal
//gsoap ns1  service method-action:	getItemRequest urn:zimbraMail/GetItem
//gsoap ns1  service method-input-header-part:	getItemRequest ns3__context
int __ns1__getItemRequest(
    ns5__getItemRequest*                ns5__GetItemRequest,	///< Request parameter
    ns5__getItemResponse*               ns5__GetItemResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMailboxMetadataRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getMailboxMetadataRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetMailboxMetadata"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMailboxMetadataRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getMailboxMetadataRequest*     ns5__GetMailboxMetadataRequest,
    // response parameters:
    ns5__getMailboxMetadataResponse*    ns5__GetMailboxMetadataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMailboxMetadataRequest(
    struct soap *soap,
    // request parameters:
    ns5__getMailboxMetadataRequest*     ns5__GetMailboxMetadataRequest,
    // response parameters:
    ns5__getMailboxMetadataResponse*    ns5__GetMailboxMetadataResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getMailboxMetadataRequest document
//gsoap ns1  service method-encoding:	getMailboxMetadataRequest literal
//gsoap ns1  service method-action:	getMailboxMetadataRequest urn:zimbraMail/GetMailboxMetadata
//gsoap ns1  service method-input-header-part:	getMailboxMetadataRequest ns3__context
int __ns1__getMailboxMetadataRequest(
    ns5__getMailboxMetadataRequest*     ns5__GetMailboxMetadataRequest,	///< Request parameter
    ns5__getMailboxMetadataResponse*    ns5__GetMailboxMetadataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMiniCalRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getMiniCalRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetMiniCal"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMiniCalRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getMiniCalRequest*             ns5__GetMiniCalRequest,
    // response parameters:
    ns5__getMiniCalResponse*            ns5__GetMiniCalResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMiniCalRequest(
    struct soap *soap,
    // request parameters:
    ns5__getMiniCalRequest*             ns5__GetMiniCalRequest,
    // response parameters:
    ns5__getMiniCalResponse*            ns5__GetMiniCalResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getMiniCalRequest document
//gsoap ns1  service method-encoding:	getMiniCalRequest literal
//gsoap ns1  service method-action:	getMiniCalRequest urn:zimbraMail/GetMiniCal
//gsoap ns1  service method-input-header-part:	getMiniCalRequest ns3__context
int __ns1__getMiniCalRequest(
    ns5__getMiniCalRequest*             ns5__GetMiniCalRequest,	///< Request parameter
    ns5__getMiniCalResponse*            ns5__GetMiniCalResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMsgMetadataRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getMsgMetadataRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetMsgMetadata"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMsgMetadataRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getMsgMetadataRequest*         ns5__GetMsgMetadataRequest,
    // response parameters:
    ns5__getMsgMetadataResponse*        ns5__GetMsgMetadataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMsgMetadataRequest(
    struct soap *soap,
    // request parameters:
    ns5__getMsgMetadataRequest*         ns5__GetMsgMetadataRequest,
    // response parameters:
    ns5__getMsgMetadataResponse*        ns5__GetMsgMetadataResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getMsgMetadataRequest document
//gsoap ns1  service method-encoding:	getMsgMetadataRequest literal
//gsoap ns1  service method-action:	getMsgMetadataRequest urn:zimbraMail/GetMsgMetadata
//gsoap ns1  service method-input-header-part:	getMsgMetadataRequest ns3__context
int __ns1__getMsgMetadataRequest(
    ns5__getMsgMetadataRequest*         ns5__GetMsgMetadataRequest,	///< Request parameter
    ns5__getMsgMetadataResponse*        ns5__GetMsgMetadataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMsgRequest                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getMsgRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetMsg"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMsgRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getMsgRequest*                 ns5__GetMsgRequest,
    // response parameters:
    ns5__getMsgResponse*                ns5__GetMsgResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMsgRequest(
    struct soap *soap,
    // request parameters:
    ns5__getMsgRequest*                 ns5__GetMsgRequest,
    // response parameters:
    ns5__getMsgResponse*                ns5__GetMsgResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getMsgRequest document
//gsoap ns1  service method-encoding:	getMsgRequest literal
//gsoap ns1  service method-action:	getMsgRequest urn:zimbraMail/GetMsg
//gsoap ns1  service method-input-header-part:	getMsgRequest ns3__context
int __ns1__getMsgRequest(
    ns5__getMsgRequest*                 ns5__GetMsgRequest,	///< Request parameter
    ns5__getMsgResponse*                ns5__GetMsgResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getNoteRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getNoteRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetNote"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getNoteRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getNoteRequest*                ns5__GetNoteRequest,
    // response parameters:
    ns5__getNoteResponse*               ns5__GetNoteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getNoteRequest(
    struct soap *soap,
    // request parameters:
    ns5__getNoteRequest*                ns5__GetNoteRequest,
    // response parameters:
    ns5__getNoteResponse*               ns5__GetNoteResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getNoteRequest document
//gsoap ns1  service method-encoding:	getNoteRequest literal
//gsoap ns1  service method-action:	getNoteRequest urn:zimbraMail/GetNote
//gsoap ns1  service method-input-header-part:	getNoteRequest ns3__context
int __ns1__getNoteRequest(
    ns5__getNoteRequest*                ns5__GetNoteRequest,	///< Request parameter
    ns5__getNoteResponse*               ns5__GetNoteResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getNotificationsRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getNotificationsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetNotifications"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getNotificationsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getNotificationsRequest*       ns5__GetNotificationsRequest,
    // response parameters:
    ns5__getNotificationsResponse*      ns5__GetNotificationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getNotificationsRequest(
    struct soap *soap,
    // request parameters:
    ns5__getNotificationsRequest*       ns5__GetNotificationsRequest,
    // response parameters:
    ns5__getNotificationsResponse*      ns5__GetNotificationsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getNotificationsRequest document
//gsoap ns1  service method-encoding:	getNotificationsRequest literal
//gsoap ns1  service method-action:	getNotificationsRequest urn:zimbraMail/GetNotifications
//gsoap ns1  service method-input-header-part:	getNotificationsRequest ns3__context
int __ns1__getNotificationsRequest(
    ns5__getNotificationsRequest*       ns5__GetNotificationsRequest,	///< Request parameter
    ns5__getNotificationsResponse*      ns5__GetNotificationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getOutgoingFilterRulesRequest                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getOutgoingFilterRulesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetOutgoingFilterRules"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getOutgoingFilterRulesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getOutgoingFilterRulesRequest* ns5__GetOutgoingFilterRulesRequest,
    // response parameters:
    ns5__getOutgoingFilterRulesResponse* ns5__GetOutgoingFilterRulesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getOutgoingFilterRulesRequest(
    struct soap *soap,
    // request parameters:
    ns5__getOutgoingFilterRulesRequest* ns5__GetOutgoingFilterRulesRequest,
    // response parameters:
    ns5__getOutgoingFilterRulesResponse* ns5__GetOutgoingFilterRulesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getOutgoingFilterRulesRequest document
//gsoap ns1  service method-encoding:	getOutgoingFilterRulesRequest literal
//gsoap ns1  service method-action:	getOutgoingFilterRulesRequest urn:zimbraMail/GetOutgoingFilterRules
//gsoap ns1  service method-input-header-part:	getOutgoingFilterRulesRequest ns3__context
int __ns1__getOutgoingFilterRulesRequest(
    ns5__getOutgoingFilterRulesRequest* ns5__GetOutgoingFilterRulesRequest,	///< Request parameter
    ns5__getOutgoingFilterRulesResponse* ns5__GetOutgoingFilterRulesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPermissionRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getPermissionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetPermission"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPermissionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getPermissionRequest*          ns5__GetPermissionRequest,
    // response parameters:
    ns5__getPermissionResponse*         ns5__GetPermissionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPermissionRequest(
    struct soap *soap,
    // request parameters:
    ns5__getPermissionRequest*          ns5__GetPermissionRequest,
    // response parameters:
    ns5__getPermissionResponse*         ns5__GetPermissionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getPermissionRequest document
//gsoap ns1  service method-encoding:	getPermissionRequest literal
//gsoap ns1  service method-action:	getPermissionRequest urn:zimbraMail/GetPermission
//gsoap ns1  service method-input-header-part:	getPermissionRequest ns3__context
int __ns1__getPermissionRequest(
    ns5__getPermissionRequest*          ns5__GetPermissionRequest,	///< Request parameter
    ns5__getPermissionResponse*         ns5__GetPermissionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRecurRequest                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getRecurRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetRecur"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRecurRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getRecurRequest*               ns5__GetRecurRequest,
    // response parameters:
    ns5__getRecurResponse*              ns5__GetRecurResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRecurRequest(
    struct soap *soap,
    // request parameters:
    ns5__getRecurRequest*               ns5__GetRecurRequest,
    // response parameters:
    ns5__getRecurResponse*              ns5__GetRecurResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getRecurRequest document
//gsoap ns1  service method-encoding:	getRecurRequest literal
//gsoap ns1  service method-action:	getRecurRequest urn:zimbraMail/GetRecur
//gsoap ns1  service method-input-header-part:	getRecurRequest ns3__context
int __ns1__getRecurRequest(
    ns5__getRecurRequest*               ns5__GetRecurRequest,	///< Request parameter
    ns5__getRecurResponse*              ns5__GetRecurResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSearchFolderRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSearchFolderRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetSearchFolder"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSearchFolderRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getSearchFolderRequest*        ns5__GetSearchFolderRequest,
    // response parameters:
    ns5__getSearchFolderResponse*       ns5__GetSearchFolderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSearchFolderRequest(
    struct soap *soap,
    // request parameters:
    ns5__getSearchFolderRequest*        ns5__GetSearchFolderRequest,
    // response parameters:
    ns5__getSearchFolderResponse*       ns5__GetSearchFolderResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSearchFolderRequest document
//gsoap ns1  service method-encoding:	getSearchFolderRequest literal
//gsoap ns1  service method-action:	getSearchFolderRequest urn:zimbraMail/GetSearchFolder
//gsoap ns1  service method-input-header-part:	getSearchFolderRequest ns3__context
int __ns1__getSearchFolderRequest(
    ns5__getSearchFolderRequest*        ns5__GetSearchFolderRequest,	///< Request parameter
    ns5__getSearchFolderResponse*       ns5__GetSearchFolderResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getShareDetailsRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getShareDetailsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetShareDetails"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getShareDetailsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getShareDetailsRequest*        ns5__GetShareDetailsRequest,
    // response parameters:
    ns5__getShareDetailsResponse*       ns5__GetShareDetailsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getShareDetailsRequest(
    struct soap *soap,
    // request parameters:
    ns5__getShareDetailsRequest*        ns5__GetShareDetailsRequest,
    // response parameters:
    ns5__getShareDetailsResponse*       ns5__GetShareDetailsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getShareDetailsRequest document
//gsoap ns1  service method-encoding:	getShareDetailsRequest literal
//gsoap ns1  service method-action:	getShareDetailsRequest urn:zimbraMail/GetShareDetails
//gsoap ns1  service method-input-header-part:	getShareDetailsRequest ns3__context
int __ns1__getShareDetailsRequest(
    ns5__getShareDetailsRequest*        ns5__GetShareDetailsRequest,	///< Request parameter
    ns5__getShareDetailsResponse*       ns5__GetShareDetailsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getShareNotificationsRequest                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getShareNotificationsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetShareNotifications"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getShareNotificationsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getShareNotificationsRequest*  ns5__GetShareNotificationsRequest,
    // response parameters:
    ns5__getShareNotificationsResponse* ns5__GetShareNotificationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getShareNotificationsRequest(
    struct soap *soap,
    // request parameters:
    ns5__getShareNotificationsRequest*  ns5__GetShareNotificationsRequest,
    // response parameters:
    ns5__getShareNotificationsResponse* ns5__GetShareNotificationsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getShareNotificationsRequest document
//gsoap ns1  service method-encoding:	getShareNotificationsRequest literal
//gsoap ns1  service method-action:	getShareNotificationsRequest urn:zimbraMail/GetShareNotifications
//gsoap ns1  service method-input-header-part:	getShareNotificationsRequest ns3__context
int __ns1__getShareNotificationsRequest(
    ns5__getShareNotificationsRequest*  ns5__GetShareNotificationsRequest,	///< Request parameter
    ns5__getShareNotificationsResponse* ns5__GetShareNotificationsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSpellDictionariesRequest                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSpellDictionariesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetSpellDictionaries"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSpellDictionariesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getSpellDictionariesRequest*   ns5__GetSpellDictionariesRequest,
    // response parameters:
    ns5__getSpellDictionariesResponse*  ns5__GetSpellDictionariesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSpellDictionariesRequest(
    struct soap *soap,
    // request parameters:
    ns5__getSpellDictionariesRequest*   ns5__GetSpellDictionariesRequest,
    // response parameters:
    ns5__getSpellDictionariesResponse*  ns5__GetSpellDictionariesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSpellDictionariesRequest document
//gsoap ns1  service method-encoding:	getSpellDictionariesRequest literal
//gsoap ns1  service method-action:	getSpellDictionariesRequest urn:zimbraMail/GetSpellDictionaries
//gsoap ns1  service method-input-header-part:	getSpellDictionariesRequest ns3__context
int __ns1__getSpellDictionariesRequest(
    ns5__getSpellDictionariesRequest*   ns5__GetSpellDictionariesRequest,	///< Request parameter
    ns5__getSpellDictionariesResponse*  ns5__GetSpellDictionariesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSystemRetentionPolicyRequest                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSystemRetentionPolicyRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetSystemRetentionPolicy"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSystemRetentionPolicyRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getSystemRetentionPolicyRequest* ns5__GetSystemRetentionPolicyRequest,
    // response parameters:
    ns5__getSystemRetentionPolicyResponse* ns5__GetSystemRetentionPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSystemRetentionPolicyRequest(
    struct soap *soap,
    // request parameters:
    ns5__getSystemRetentionPolicyRequest* ns5__GetSystemRetentionPolicyRequest,
    // response parameters:
    ns5__getSystemRetentionPolicyResponse* ns5__GetSystemRetentionPolicyResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSystemRetentionPolicyRequest document
//gsoap ns1  service method-encoding:	getSystemRetentionPolicyRequest literal
//gsoap ns1  service method-action:	getSystemRetentionPolicyRequest urn:zimbraMail/GetSystemRetentionPolicy
//gsoap ns1  service method-input-header-part:	getSystemRetentionPolicyRequest ns3__context
int __ns1__getSystemRetentionPolicyRequest(
    ns5__getSystemRetentionPolicyRequest* ns5__GetSystemRetentionPolicyRequest,	///< Request parameter
    ns5__getSystemRetentionPolicyResponse* ns5__GetSystemRetentionPolicyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getTagRequest                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getTagRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetTag"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getTagRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getTagRequest*                 ns5__GetTagRequest,
    // response parameters:
    ns5__getTagResponse*                ns5__GetTagResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getTagRequest(
    struct soap *soap,
    // request parameters:
    ns5__getTagRequest*                 ns5__GetTagRequest,
    // response parameters:
    ns5__getTagResponse*                ns5__GetTagResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getTagRequest document
//gsoap ns1  service method-encoding:	getTagRequest literal
//gsoap ns1  service method-action:	getTagRequest urn:zimbraMail/GetTag
//gsoap ns1  service method-input-header-part:	getTagRequest ns3__context
int __ns1__getTagRequest(
    ns5__getTagRequest*                 ns5__GetTagRequest,	///< Request parameter
    ns5__getTagResponse*                ns5__GetTagResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getTaskRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getTaskRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetTask"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getTaskRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getTaskRequest*                ns5__GetTaskRequest,
    // response parameters:
    ns5__getTaskResponse*               ns5__GetTaskResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getTaskRequest(
    struct soap *soap,
    // request parameters:
    ns5__getTaskRequest*                ns5__GetTaskRequest,
    // response parameters:
    ns5__getTaskResponse*               ns5__GetTaskResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getTaskRequest document
//gsoap ns1  service method-encoding:	getTaskRequest literal
//gsoap ns1  service method-action:	getTaskRequest urn:zimbraMail/GetTask
//gsoap ns1  service method-input-header-part:	getTaskRequest ns3__context
int __ns1__getTaskRequest(
    ns5__getTaskRequest*                ns5__GetTaskRequest,	///< Request parameter
    ns5__getTaskResponse*               ns5__GetTaskResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getTaskSummariesRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getTaskSummariesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetTaskSummaries"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getTaskSummariesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getTaskSummariesRequest*       ns5__GetTaskSummariesRequest,
    // response parameters:
    ns5__getTaskSummariesResponse*      ns5__GetTaskSummariesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getTaskSummariesRequest(
    struct soap *soap,
    // request parameters:
    ns5__getTaskSummariesRequest*       ns5__GetTaskSummariesRequest,
    // response parameters:
    ns5__getTaskSummariesResponse*      ns5__GetTaskSummariesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getTaskSummariesRequest document
//gsoap ns1  service method-encoding:	getTaskSummariesRequest literal
//gsoap ns1  service method-action:	getTaskSummariesRequest urn:zimbraMail/GetTaskSummaries
//gsoap ns1  service method-input-header-part:	getTaskSummariesRequest ns3__context
int __ns1__getTaskSummariesRequest(
    ns5__getTaskSummariesRequest*       ns5__GetTaskSummariesRequest,	///< Request parameter
    ns5__getTaskSummariesResponse*      ns5__GetTaskSummariesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWatchersRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getWatchersRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetWatchers"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWatchersRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getWatchersRequest*            ns5__GetWatchersRequest,
    // response parameters:
    ns5__getWatchersResponse*           ns5__GetWatchersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWatchersRequest(
    struct soap *soap,
    // request parameters:
    ns5__getWatchersRequest*            ns5__GetWatchersRequest,
    // response parameters:
    ns5__getWatchersResponse*           ns5__GetWatchersResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getWatchersRequest document
//gsoap ns1  service method-encoding:	getWatchersRequest literal
//gsoap ns1  service method-action:	getWatchersRequest urn:zimbraMail/GetWatchers
//gsoap ns1  service method-input-header-part:	getWatchersRequest ns3__context
int __ns1__getWatchersRequest(
    ns5__getWatchersRequest*            ns5__GetWatchersRequest,	///< Request parameter
    ns5__getWatchersResponse*           ns5__GetWatchersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWatchingItemsRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getWatchingItemsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetWatchingItems"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWatchingItemsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getWatchingItemsRequest*       ns5__GetWatchingItemsRequest,
    // response parameters:
    ns5__getWatchingItemsResponse*      ns5__GetWatchingItemsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWatchingItemsRequest(
    struct soap *soap,
    // request parameters:
    ns5__getWatchingItemsRequest*       ns5__GetWatchingItemsRequest,
    // response parameters:
    ns5__getWatchingItemsResponse*      ns5__GetWatchingItemsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getWatchingItemsRequest document
//gsoap ns1  service method-encoding:	getWatchingItemsRequest literal
//gsoap ns1  service method-action:	getWatchingItemsRequest urn:zimbraMail/GetWatchingItems
//gsoap ns1  service method-input-header-part:	getWatchingItemsRequest ns3__context
int __ns1__getWatchingItemsRequest(
    ns5__getWatchingItemsRequest*       ns5__GetWatchingItemsRequest,	///< Request parameter
    ns5__getWatchingItemsResponse*      ns5__GetWatchingItemsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWorkingHoursRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getWorkingHoursRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetWorkingHours"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWorkingHoursRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getWorkingHoursRequest*        ns5__GetWorkingHoursRequest,
    // response parameters:
    ns5__getWorkingHoursResponse*       ns5__GetWorkingHoursResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWorkingHoursRequest(
    struct soap *soap,
    // request parameters:
    ns5__getWorkingHoursRequest*        ns5__GetWorkingHoursRequest,
    // response parameters:
    ns5__getWorkingHoursResponse*       ns5__GetWorkingHoursResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getWorkingHoursRequest document
//gsoap ns1  service method-encoding:	getWorkingHoursRequest literal
//gsoap ns1  service method-action:	getWorkingHoursRequest urn:zimbraMail/GetWorkingHours
//gsoap ns1  service method-input-header-part:	getWorkingHoursRequest ns3__context
int __ns1__getWorkingHoursRequest(
    ns5__getWorkingHoursRequest*        ns5__GetWorkingHoursRequest,	///< Request parameter
    ns5__getWorkingHoursResponse*       ns5__GetWorkingHoursResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getYahooAuthTokenRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getYahooAuthTokenRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetYahooAuthToken"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getYahooAuthTokenRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getYahooAuthTokenRequest*      ns5__GetYahooAuthTokenRequest,
    // response parameters:
    ns5__getYahooAuthTokenResponse*     ns5__GetYahooAuthTokenResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getYahooAuthTokenRequest(
    struct soap *soap,
    // request parameters:
    ns5__getYahooAuthTokenRequest*      ns5__GetYahooAuthTokenRequest,
    // response parameters:
    ns5__getYahooAuthTokenResponse*     ns5__GetYahooAuthTokenResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getYahooAuthTokenRequest document
//gsoap ns1  service method-encoding:	getYahooAuthTokenRequest literal
//gsoap ns1  service method-action:	getYahooAuthTokenRequest urn:zimbraMail/GetYahooAuthToken
//gsoap ns1  service method-input-header-part:	getYahooAuthTokenRequest ns3__context
int __ns1__getYahooAuthTokenRequest(
    ns5__getYahooAuthTokenRequest*      ns5__GetYahooAuthTokenRequest,	///< Request parameter
    ns5__getYahooAuthTokenResponse*     ns5__GetYahooAuthTokenResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getYahooCookieRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getYahooCookieRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GetYahooCookie"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getYahooCookieRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__getYahooCookieRequest*         ns5__GetYahooCookieRequest,
    // response parameters:
    ns5__getYahooCookieResponse*        ns5__GetYahooCookieResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getYahooCookieRequest(
    struct soap *soap,
    // request parameters:
    ns5__getYahooCookieRequest*         ns5__GetYahooCookieRequest,
    // response parameters:
    ns5__getYahooCookieResponse*        ns5__GetYahooCookieResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getYahooCookieRequest document
//gsoap ns1  service method-encoding:	getYahooCookieRequest literal
//gsoap ns1  service method-action:	getYahooCookieRequest urn:zimbraMail/GetYahooCookie
//gsoap ns1  service method-input-header-part:	getYahooCookieRequest ns3__context
int __ns1__getYahooCookieRequest(
    ns5__getYahooCookieRequest*         ns5__GetYahooCookieRequest,	///< Request parameter
    ns5__getYahooCookieResponse*        ns5__GetYahooCookieResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__grantPermissionRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__grantPermissionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/GrantPermission"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__grantPermissionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__grantPermissionRequest*        ns5__GrantPermissionRequest,
    // response parameters:
    ns5__grantPermissionResponse*       ns5__GrantPermissionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__grantPermissionRequest(
    struct soap *soap,
    // request parameters:
    ns5__grantPermissionRequest*        ns5__GrantPermissionRequest,
    // response parameters:
    ns5__grantPermissionResponse*       ns5__GrantPermissionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	grantPermissionRequest document
//gsoap ns1  service method-encoding:	grantPermissionRequest literal
//gsoap ns1  service method-action:	grantPermissionRequest urn:zimbraMail/GrantPermission
//gsoap ns1  service method-input-header-part:	grantPermissionRequest ns3__context
int __ns1__grantPermissionRequest(
    ns5__grantPermissionRequest*        ns5__GrantPermissionRequest,	///< Request parameter
    ns5__grantPermissionResponse*       ns5__GrantPermissionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__iCalReplyRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__iCalReplyRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ICalReply"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__iCalReplyRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__iCalReplyRequest*              ns5__ICalReplyRequest,
    // response parameters:
    ns5__iCalReplyResponse*             ns5__ICalReplyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__iCalReplyRequest(
    struct soap *soap,
    // request parameters:
    ns5__iCalReplyRequest*              ns5__ICalReplyRequest,
    // response parameters:
    ns5__iCalReplyResponse*             ns5__ICalReplyResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	iCalReplyRequest document
//gsoap ns1  service method-encoding:	iCalReplyRequest literal
//gsoap ns1  service method-action:	iCalReplyRequest urn:zimbraMail/ICalReply
//gsoap ns1  service method-input-header-part:	iCalReplyRequest ns3__context
int __ns1__iCalReplyRequest(
    ns5__iCalReplyRequest*              ns5__ICalReplyRequest,	///< Request parameter
    ns5__iCalReplyResponse*             ns5__ICalReplyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__importAppointmentsRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__importAppointmentsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ImportAppointments"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__importAppointmentsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__importAppointmentsRequest*     ns5__ImportAppointmentsRequest,
    // response parameters:
    ns5__importAppointmentsResponse*    ns5__ImportAppointmentsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__importAppointmentsRequest(
    struct soap *soap,
    // request parameters:
    ns5__importAppointmentsRequest*     ns5__ImportAppointmentsRequest,
    // response parameters:
    ns5__importAppointmentsResponse*    ns5__ImportAppointmentsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	importAppointmentsRequest document
//gsoap ns1  service method-encoding:	importAppointmentsRequest literal
//gsoap ns1  service method-action:	importAppointmentsRequest urn:zimbraMail/ImportAppointments
//gsoap ns1  service method-input-header-part:	importAppointmentsRequest ns3__context
int __ns1__importAppointmentsRequest(
    ns5__importAppointmentsRequest*     ns5__ImportAppointmentsRequest,	///< Request parameter
    ns5__importAppointmentsResponse*    ns5__ImportAppointmentsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__importContactsRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__importContactsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ImportContacts"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__importContactsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__importContactsRequest*         ns5__ImportContactsRequest,
    // response parameters:
    ns5__importContactsResponse*        ns5__ImportContactsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__importContactsRequest(
    struct soap *soap,
    // request parameters:
    ns5__importContactsRequest*         ns5__ImportContactsRequest,
    // response parameters:
    ns5__importContactsResponse*        ns5__ImportContactsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	importContactsRequest document
//gsoap ns1  service method-encoding:	importContactsRequest literal
//gsoap ns1  service method-action:	importContactsRequest urn:zimbraMail/ImportContacts
//gsoap ns1  service method-input-header-part:	importContactsRequest ns3__context
int __ns1__importContactsRequest(
    ns5__importContactsRequest*         ns5__ImportContactsRequest,	///< Request parameter
    ns5__importContactsResponse*        ns5__ImportContactsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__importDataRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__importDataRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ImportData"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__importDataRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__importDataRequest*             ns5__ImportDataRequest,
    // response parameters:
    ns5__importDataResponse*            ns5__ImportDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__importDataRequest(
    struct soap *soap,
    // request parameters:
    ns5__importDataRequest*             ns5__ImportDataRequest,
    // response parameters:
    ns5__importDataResponse*            ns5__ImportDataResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	importDataRequest document
//gsoap ns1  service method-encoding:	importDataRequest literal
//gsoap ns1  service method-action:	importDataRequest urn:zimbraMail/ImportData
//gsoap ns1  service method-input-header-part:	importDataRequest ns3__context
int __ns1__importDataRequest(
    ns5__importDataRequest*             ns5__ImportDataRequest,	///< Request parameter
    ns5__importDataResponse*            ns5__ImportDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__invalidateReminderDeviceRequest                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__invalidateReminderDeviceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/InvalidateReminderDevice"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__invalidateReminderDeviceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__invalidateReminderDeviceRequest* ns5__InvalidateReminderDeviceRequest,
    // response parameters:
    ns5__invalidateReminderDeviceResponse* ns5__InvalidateReminderDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__invalidateReminderDeviceRequest(
    struct soap *soap,
    // request parameters:
    ns5__invalidateReminderDeviceRequest* ns5__InvalidateReminderDeviceRequest,
    // response parameters:
    ns5__invalidateReminderDeviceResponse* ns5__InvalidateReminderDeviceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	invalidateReminderDeviceRequest document
//gsoap ns1  service method-encoding:	invalidateReminderDeviceRequest literal
//gsoap ns1  service method-action:	invalidateReminderDeviceRequest urn:zimbraMail/InvalidateReminderDevice
//gsoap ns1  service method-input-header-part:	invalidateReminderDeviceRequest ns3__context
int __ns1__invalidateReminderDeviceRequest(
    ns5__invalidateReminderDeviceRequest* ns5__InvalidateReminderDeviceRequest,	///< Request parameter
    ns5__invalidateReminderDeviceResponse* ns5__InvalidateReminderDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__itemActionRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__itemActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ItemAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__itemActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__itemActionRequest*             ns5__ItemActionRequest,
    // response parameters:
    ns5__itemActionResponse*            ns5__ItemActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__itemActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__itemActionRequest*             ns5__ItemActionRequest,
    // response parameters:
    ns5__itemActionResponse*            ns5__ItemActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	itemActionRequest document
//gsoap ns1  service method-encoding:	itemActionRequest literal
//gsoap ns1  service method-action:	itemActionRequest urn:zimbraMail/ItemAction
//gsoap ns1  service method-input-header-part:	itemActionRequest ns3__context
int __ns1__itemActionRequest(
    ns5__itemActionRequest*             ns5__ItemActionRequest,	///< Request parameter
    ns5__itemActionResponse*            ns5__ItemActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__listDocumentRevisionsRequest                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__listDocumentRevisionsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ListDocumentRevisions"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__listDocumentRevisionsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__listDocumentRevisionsRequest*  ns5__ListDocumentRevisionsRequest,
    // response parameters:
    ns5__listDocumentRevisionsResponse* ns5__ListDocumentRevisionsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__listDocumentRevisionsRequest(
    struct soap *soap,
    // request parameters:
    ns5__listDocumentRevisionsRequest*  ns5__ListDocumentRevisionsRequest,
    // response parameters:
    ns5__listDocumentRevisionsResponse* ns5__ListDocumentRevisionsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	listDocumentRevisionsRequest document
//gsoap ns1  service method-encoding:	listDocumentRevisionsRequest literal
//gsoap ns1  service method-action:	listDocumentRevisionsRequest urn:zimbraMail/ListDocumentRevisions
//gsoap ns1  service method-input-header-part:	listDocumentRevisionsRequest ns3__context
int __ns1__listDocumentRevisionsRequest(
    ns5__listDocumentRevisionsRequest*  ns5__ListDocumentRevisionsRequest,	///< Request parameter
    ns5__listDocumentRevisionsResponse* ns5__ListDocumentRevisionsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyAppointmentRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyAppointmentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ModifyAppointment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyAppointmentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__modifyAppointmentRequest*      ns5__ModifyAppointmentRequest,
    // response parameters:
    ns5__modifyAppointmentResponse*     ns5__ModifyAppointmentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyAppointmentRequest(
    struct soap *soap,
    // request parameters:
    ns5__modifyAppointmentRequest*      ns5__ModifyAppointmentRequest,
    // response parameters:
    ns5__modifyAppointmentResponse*     ns5__ModifyAppointmentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyAppointmentRequest document
//gsoap ns1  service method-encoding:	modifyAppointmentRequest literal
//gsoap ns1  service method-action:	modifyAppointmentRequest urn:zimbraMail/ModifyAppointment
//gsoap ns1  service method-input-header-part:	modifyAppointmentRequest ns3__context
int __ns1__modifyAppointmentRequest(
    ns5__modifyAppointmentRequest*      ns5__ModifyAppointmentRequest,	///< Request parameter
    ns5__modifyAppointmentResponse*     ns5__ModifyAppointmentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyContactRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyContactRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ModifyContact"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyContactRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__modifyContactRequest*          ns5__ModifyContactRequest,
    // response parameters:
    ns5__modifyContactResponse*         ns5__ModifyContactResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyContactRequest(
    struct soap *soap,
    // request parameters:
    ns5__modifyContactRequest*          ns5__ModifyContactRequest,
    // response parameters:
    ns5__modifyContactResponse*         ns5__ModifyContactResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyContactRequest document
//gsoap ns1  service method-encoding:	modifyContactRequest literal
//gsoap ns1  service method-action:	modifyContactRequest urn:zimbraMail/ModifyContact
//gsoap ns1  service method-input-header-part:	modifyContactRequest ns3__context
int __ns1__modifyContactRequest(
    ns5__modifyContactRequest*          ns5__ModifyContactRequest,	///< Request parameter
    ns5__modifyContactResponse*         ns5__ModifyContactResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyDataSourceRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyDataSourceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ModifyDataSource"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyDataSourceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__modifyDataSourceRequest*       ns5__ModifyDataSourceRequest,
    // response parameters:
    ns5__modifyDataSourceResponse*      ns5__ModifyDataSourceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyDataSourceRequest(
    struct soap *soap,
    // request parameters:
    ns5__modifyDataSourceRequest*       ns5__ModifyDataSourceRequest,
    // response parameters:
    ns5__modifyDataSourceResponse*      ns5__ModifyDataSourceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyDataSourceRequest document
//gsoap ns1  service method-encoding:	modifyDataSourceRequest literal
//gsoap ns1  service method-action:	modifyDataSourceRequest urn:zimbraMail/ModifyDataSource
//gsoap ns1  service method-input-header-part:	modifyDataSourceRequest ns3__context
int __ns1__modifyDataSourceRequest(
    ns5__modifyDataSourceRequest*       ns5__ModifyDataSourceRequest,	///< Request parameter
    ns5__modifyDataSourceResponse*      ns5__ModifyDataSourceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyFilterRulesRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyFilterRulesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ModifyFilterRules"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyFilterRulesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__modifyFilterRulesRequest*      ns5__ModifyFilterRulesRequest,
    // response parameters:
    ns5__modifyFilterRulesResponse*     ns5__ModifyFilterRulesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyFilterRulesRequest(
    struct soap *soap,
    // request parameters:
    ns5__modifyFilterRulesRequest*      ns5__ModifyFilterRulesRequest,
    // response parameters:
    ns5__modifyFilterRulesResponse*     ns5__ModifyFilterRulesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyFilterRulesRequest document
//gsoap ns1  service method-encoding:	modifyFilterRulesRequest literal
//gsoap ns1  service method-action:	modifyFilterRulesRequest urn:zimbraMail/ModifyFilterRules
//gsoap ns1  service method-input-header-part:	modifyFilterRulesRequest ns3__context
int __ns1__modifyFilterRulesRequest(
    ns5__modifyFilterRulesRequest*      ns5__ModifyFilterRulesRequest,	///< Request parameter
    ns5__modifyFilterRulesResponse*     ns5__ModifyFilterRulesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyMailboxMetadataRequest                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyMailboxMetadataRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ModifyMailboxMetadata"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyMailboxMetadataRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__modifyMailboxMetadataRequest*  ns5__ModifyMailboxMetadataRequest,
    // response parameters:
    ns5__modifyMailboxMetadataResponse* ns5__ModifyMailboxMetadataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyMailboxMetadataRequest(
    struct soap *soap,
    // request parameters:
    ns5__modifyMailboxMetadataRequest*  ns5__ModifyMailboxMetadataRequest,
    // response parameters:
    ns5__modifyMailboxMetadataResponse* ns5__ModifyMailboxMetadataResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyMailboxMetadataRequest document
//gsoap ns1  service method-encoding:	modifyMailboxMetadataRequest literal
//gsoap ns1  service method-action:	modifyMailboxMetadataRequest urn:zimbraMail/ModifyMailboxMetadata
//gsoap ns1  service method-input-header-part:	modifyMailboxMetadataRequest ns3__context
int __ns1__modifyMailboxMetadataRequest(
    ns5__modifyMailboxMetadataRequest*  ns5__ModifyMailboxMetadataRequest,	///< Request parameter
    ns5__modifyMailboxMetadataResponse* ns5__ModifyMailboxMetadataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyOutgoingFilterRulesRequest                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyOutgoingFilterRulesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ModifyOutgoingFilterRules"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyOutgoingFilterRulesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__modifyOutgoingFilterRulesRequest* ns5__ModifyOutgoingFilterRulesRequest,
    // response parameters:
    ns5__modifyOutgoingFilterRulesResponse* ns5__ModifyOutgoingFilterRulesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyOutgoingFilterRulesRequest(
    struct soap *soap,
    // request parameters:
    ns5__modifyOutgoingFilterRulesRequest* ns5__ModifyOutgoingFilterRulesRequest,
    // response parameters:
    ns5__modifyOutgoingFilterRulesResponse* ns5__ModifyOutgoingFilterRulesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyOutgoingFilterRulesRequest document
//gsoap ns1  service method-encoding:	modifyOutgoingFilterRulesRequest literal
//gsoap ns1  service method-action:	modifyOutgoingFilterRulesRequest urn:zimbraMail/ModifyOutgoingFilterRules
//gsoap ns1  service method-input-header-part:	modifyOutgoingFilterRulesRequest ns3__context
int __ns1__modifyOutgoingFilterRulesRequest(
    ns5__modifyOutgoingFilterRulesRequest* ns5__ModifyOutgoingFilterRulesRequest,	///< Request parameter
    ns5__modifyOutgoingFilterRulesResponse* ns5__ModifyOutgoingFilterRulesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifySearchFolderRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifySearchFolderRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ModifySearchFolder"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifySearchFolderRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__modifySearchFolderRequest*     ns5__ModifySearchFolderRequest,
    // response parameters:
    ns5__modifySearchFolderResponse*    ns5__ModifySearchFolderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifySearchFolderRequest(
    struct soap *soap,
    // request parameters:
    ns5__modifySearchFolderRequest*     ns5__ModifySearchFolderRequest,
    // response parameters:
    ns5__modifySearchFolderResponse*    ns5__ModifySearchFolderResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifySearchFolderRequest document
//gsoap ns1  service method-encoding:	modifySearchFolderRequest literal
//gsoap ns1  service method-action:	modifySearchFolderRequest urn:zimbraMail/ModifySearchFolder
//gsoap ns1  service method-input-header-part:	modifySearchFolderRequest ns3__context
int __ns1__modifySearchFolderRequest(
    ns5__modifySearchFolderRequest*     ns5__ModifySearchFolderRequest,	///< Request parameter
    ns5__modifySearchFolderResponse*    ns5__ModifySearchFolderResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyTaskRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyTaskRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/ModifyTask"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyTaskRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__modifyTaskRequest*             ns5__ModifyTaskRequest,
    // response parameters:
    ns5__modifyTaskResponse*            ns5__ModifyTaskResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyTaskRequest(
    struct soap *soap,
    // request parameters:
    ns5__modifyTaskRequest*             ns5__ModifyTaskRequest,
    // response parameters:
    ns5__modifyTaskResponse*            ns5__ModifyTaskResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyTaskRequest document
//gsoap ns1  service method-encoding:	modifyTaskRequest literal
//gsoap ns1  service method-action:	modifyTaskRequest urn:zimbraMail/ModifyTask
//gsoap ns1  service method-input-header-part:	modifyTaskRequest ns3__context
int __ns1__modifyTaskRequest(
    ns5__modifyTaskRequest*             ns5__ModifyTaskRequest,	///< Request parameter
    ns5__modifyTaskResponse*            ns5__ModifyTaskResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__msgActionRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__msgActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/MsgAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__msgActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__msgActionRequest*              ns5__MsgActionRequest,
    // response parameters:
    ns5__msgActionResponse*             ns5__MsgActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__msgActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__msgActionRequest*              ns5__MsgActionRequest,
    // response parameters:
    ns5__msgActionResponse*             ns5__MsgActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	msgActionRequest document
//gsoap ns1  service method-encoding:	msgActionRequest literal
//gsoap ns1  service method-action:	msgActionRequest urn:zimbraMail/MsgAction
//gsoap ns1  service method-input-header-part:	msgActionRequest ns3__context
int __ns1__msgActionRequest(
    ns5__msgActionRequest*              ns5__MsgActionRequest,	///< Request parameter
    ns5__msgActionResponse*             ns5__MsgActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__noOpRequest                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__noOpRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/NoOp"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__noOpRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__noOpRequest*                   ns5__NoOpRequest,
    // response parameters:
    ns5__noOpResponse*                  ns5__NoOpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__noOpRequest(
    struct soap *soap,
    // request parameters:
    ns5__noOpRequest*                   ns5__NoOpRequest,
    // response parameters:
    ns5__noOpResponse*                  ns5__NoOpResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	noOpRequest document
//gsoap ns1  service method-encoding:	noOpRequest literal
//gsoap ns1  service method-action:	noOpRequest urn:zimbraMail/NoOp
//gsoap ns1  service method-input-header-part:	noOpRequest ns3__context
int __ns1__noOpRequest(
    ns5__noOpRequest*                   ns5__NoOpRequest,	///< Request parameter
    ns5__noOpResponse*                  ns5__NoOpResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__noteActionRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__noteActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/NoteAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__noteActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__noteActionRequest*             ns5__NoteActionRequest,
    // response parameters:
    ns5__noteActionResponse*            ns5__NoteActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__noteActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__noteActionRequest*             ns5__NoteActionRequest,
    // response parameters:
    ns5__noteActionResponse*            ns5__NoteActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	noteActionRequest document
//gsoap ns1  service method-encoding:	noteActionRequest literal
//gsoap ns1  service method-action:	noteActionRequest urn:zimbraMail/NoteAction
//gsoap ns1  service method-input-header-part:	noteActionRequest ns3__context
int __ns1__noteActionRequest(
    ns5__noteActionRequest*             ns5__NoteActionRequest,	///< Request parameter
    ns5__noteActionResponse*            ns5__NoteActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__purgeRevisionRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__purgeRevisionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/PurgeRevision"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__purgeRevisionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__purgeRevisionRequest*          ns5__PurgeRevisionRequest,
    // response parameters:
    ns5__purgeRevisionResponse*         ns5__PurgeRevisionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__purgeRevisionRequest(
    struct soap *soap,
    // request parameters:
    ns5__purgeRevisionRequest*          ns5__PurgeRevisionRequest,
    // response parameters:
    ns5__purgeRevisionResponse*         ns5__PurgeRevisionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	purgeRevisionRequest document
//gsoap ns1  service method-encoding:	purgeRevisionRequest literal
//gsoap ns1  service method-action:	purgeRevisionRequest urn:zimbraMail/PurgeRevision
//gsoap ns1  service method-input-header-part:	purgeRevisionRequest ns3__context
int __ns1__purgeRevisionRequest(
    ns5__purgeRevisionRequest*          ns5__PurgeRevisionRequest,	///< Request parameter
    ns5__purgeRevisionResponse*         ns5__PurgeRevisionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__rankingActionRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__rankingActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/RankingAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__rankingActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__rankingActionRequest*          ns5__RankingActionRequest,
    // response parameters:
    ns5__rankingActionResponse*         ns5__RankingActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__rankingActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__rankingActionRequest*          ns5__RankingActionRequest,
    // response parameters:
    ns5__rankingActionResponse*         ns5__RankingActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	rankingActionRequest document
//gsoap ns1  service method-encoding:	rankingActionRequest literal
//gsoap ns1  service method-action:	rankingActionRequest urn:zimbraMail/RankingAction
//gsoap ns1  service method-input-header-part:	rankingActionRequest ns3__context
int __ns1__rankingActionRequest(
    ns5__rankingActionRequest*          ns5__RankingActionRequest,	///< Request parameter
    ns5__rankingActionResponse*         ns5__RankingActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__registerDeviceRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__registerDeviceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/RegisterDevice"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__registerDeviceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__registerDeviceRequest*         ns5__RegisterDeviceRequest,
    // response parameters:
    ns5__registerDeviceResponse*        ns5__RegisterDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__registerDeviceRequest(
    struct soap *soap,
    // request parameters:
    ns5__registerDeviceRequest*         ns5__RegisterDeviceRequest,
    // response parameters:
    ns5__registerDeviceResponse*        ns5__RegisterDeviceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	registerDeviceRequest document
//gsoap ns1  service method-encoding:	registerDeviceRequest literal
//gsoap ns1  service method-action:	registerDeviceRequest urn:zimbraMail/RegisterDevice
//gsoap ns1  service method-input-header-part:	registerDeviceRequest ns3__context
int __ns1__registerDeviceRequest(
    ns5__registerDeviceRequest*         ns5__RegisterDeviceRequest,	///< Request parameter
    ns5__registerDeviceResponse*        ns5__RegisterDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeAttachmentsRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__removeAttachmentsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/RemoveAttachments"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeAttachmentsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__removeAttachmentsRequest*      ns5__RemoveAttachmentsRequest,
    // response parameters:
    ns5__removeAttachmentsResponse*     ns5__RemoveAttachmentsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeAttachmentsRequest(
    struct soap *soap,
    // request parameters:
    ns5__removeAttachmentsRequest*      ns5__RemoveAttachmentsRequest,
    // response parameters:
    ns5__removeAttachmentsResponse*     ns5__RemoveAttachmentsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	removeAttachmentsRequest document
//gsoap ns1  service method-encoding:	removeAttachmentsRequest literal
//gsoap ns1  service method-action:	removeAttachmentsRequest urn:zimbraMail/RemoveAttachments
//gsoap ns1  service method-input-header-part:	removeAttachmentsRequest ns3__context
int __ns1__removeAttachmentsRequest(
    ns5__removeAttachmentsRequest*      ns5__RemoveAttachmentsRequest,	///< Request parameter
    ns5__removeAttachmentsResponse*     ns5__RemoveAttachmentsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__revokePermissionRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__revokePermissionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/RevokePermission"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__revokePermissionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__revokePermissionRequest*       ns5__RevokePermissionRequest,
    // response parameters:
    ns5__revokePermissionResponse*      ns5__RevokePermissionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__revokePermissionRequest(
    struct soap *soap,
    // request parameters:
    ns5__revokePermissionRequest*       ns5__RevokePermissionRequest,
    // response parameters:
    ns5__revokePermissionResponse*      ns5__RevokePermissionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	revokePermissionRequest document
//gsoap ns1  service method-encoding:	revokePermissionRequest literal
//gsoap ns1  service method-action:	revokePermissionRequest urn:zimbraMail/RevokePermission
//gsoap ns1  service method-input-header-part:	revokePermissionRequest ns3__context
int __ns1__revokePermissionRequest(
    ns5__revokePermissionRequest*       ns5__RevokePermissionRequest,	///< Request parameter
    ns5__revokePermissionResponse*      ns5__RevokePermissionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__saveDocumentRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__saveDocumentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SaveDocument"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__saveDocumentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__saveDocumentRequest*           ns5__SaveDocumentRequest,
    // response parameters:
    ns5__saveDocumentResponse*          ns5__SaveDocumentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__saveDocumentRequest(
    struct soap *soap,
    // request parameters:
    ns5__saveDocumentRequest*           ns5__SaveDocumentRequest,
    // response parameters:
    ns5__saveDocumentResponse*          ns5__SaveDocumentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	saveDocumentRequest document
//gsoap ns1  service method-encoding:	saveDocumentRequest literal
//gsoap ns1  service method-action:	saveDocumentRequest urn:zimbraMail/SaveDocument
//gsoap ns1  service method-input-header-part:	saveDocumentRequest ns3__context
int __ns1__saveDocumentRequest(
    ns5__saveDocumentRequest*           ns5__SaveDocumentRequest,	///< Request parameter
    ns5__saveDocumentResponse*          ns5__SaveDocumentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__saveDraftRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__saveDraftRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SaveDraft"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__saveDraftRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__saveDraftRequest*              ns5__SaveDraftRequest,
    // response parameters:
    ns5__saveDraftResponse*             ns5__SaveDraftResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__saveDraftRequest(
    struct soap *soap,
    // request parameters:
    ns5__saveDraftRequest*              ns5__SaveDraftRequest,
    // response parameters:
    ns5__saveDraftResponse*             ns5__SaveDraftResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	saveDraftRequest document
//gsoap ns1  service method-encoding:	saveDraftRequest literal
//gsoap ns1  service method-action:	saveDraftRequest urn:zimbraMail/SaveDraft
//gsoap ns1  service method-input-header-part:	saveDraftRequest ns3__context
int __ns1__saveDraftRequest(
    ns5__saveDraftRequest*              ns5__SaveDraftRequest,	///< Request parameter
    ns5__saveDraftResponse*             ns5__SaveDraftResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchConvRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__searchConvRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SearchConv"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchConvRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__searchConvRequest*             ns5__SearchConvRequest,
    // response parameters:
    ns5__searchConvResponse*            ns5__SearchConvResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchConvRequest(
    struct soap *soap,
    // request parameters:
    ns5__searchConvRequest*             ns5__SearchConvRequest,
    // response parameters:
    ns5__searchConvResponse*            ns5__SearchConvResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	searchConvRequest document
//gsoap ns1  service method-encoding:	searchConvRequest literal
//gsoap ns1  service method-action:	searchConvRequest urn:zimbraMail/SearchConv
//gsoap ns1  service method-input-header-part:	searchConvRequest ns3__context
int __ns1__searchConvRequest(
    ns5__searchConvRequest*             ns5__SearchConvRequest,	///< Request parameter
    ns5__searchConvResponse*            ns5__SearchConvResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchRequest                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__searchRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/Search"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__searchRequest*                 ns5__SearchRequest,
    // response parameters:
    ns5__searchResponse*                ns5__SearchResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchRequest(
    struct soap *soap,
    // request parameters:
    ns5__searchRequest*                 ns5__SearchRequest,
    // response parameters:
    ns5__searchResponse*                ns5__SearchResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	searchRequest document
//gsoap ns1  service method-encoding:	searchRequest literal
//gsoap ns1  service method-action:	searchRequest urn:zimbraMail/Search
//gsoap ns1  service method-input-header-part:	searchRequest ns3__context
int __ns1__searchRequest(
    ns5__searchRequest*                 ns5__SearchRequest,	///< Request parameter
    ns5__searchResponse*                ns5__SearchResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendDeliveryReportRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__sendDeliveryReportRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SendDeliveryReport"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendDeliveryReportRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__sendDeliveryReportRequest*     ns5__SendDeliveryReportRequest,
    // response parameters:
    ns5__sendDeliveryReportResponse*    ns5__SendDeliveryReportResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendDeliveryReportRequest(
    struct soap *soap,
    // request parameters:
    ns5__sendDeliveryReportRequest*     ns5__SendDeliveryReportRequest,
    // response parameters:
    ns5__sendDeliveryReportResponse*    ns5__SendDeliveryReportResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	sendDeliveryReportRequest document
//gsoap ns1  service method-encoding:	sendDeliveryReportRequest literal
//gsoap ns1  service method-action:	sendDeliveryReportRequest urn:zimbraMail/SendDeliveryReport
//gsoap ns1  service method-input-header-part:	sendDeliveryReportRequest ns3__context
int __ns1__sendDeliveryReportRequest(
    ns5__sendDeliveryReportRequest*     ns5__SendDeliveryReportRequest,	///< Request parameter
    ns5__sendDeliveryReportResponse*    ns5__SendDeliveryReportResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendInviteReplyRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__sendInviteReplyRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SendInviteReply"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendInviteReplyRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__sendInviteReplyRequest*        ns5__SendInviteReplyRequest,
    // response parameters:
    ns5__sendInviteReplyResponse*       ns5__SendInviteReplyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendInviteReplyRequest(
    struct soap *soap,
    // request parameters:
    ns5__sendInviteReplyRequest*        ns5__SendInviteReplyRequest,
    // response parameters:
    ns5__sendInviteReplyResponse*       ns5__SendInviteReplyResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	sendInviteReplyRequest document
//gsoap ns1  service method-encoding:	sendInviteReplyRequest literal
//gsoap ns1  service method-action:	sendInviteReplyRequest urn:zimbraMail/SendInviteReply
//gsoap ns1  service method-input-header-part:	sendInviteReplyRequest ns3__context
int __ns1__sendInviteReplyRequest(
    ns5__sendInviteReplyRequest*        ns5__SendInviteReplyRequest,	///< Request parameter
    ns5__sendInviteReplyResponse*       ns5__SendInviteReplyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendMsgRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__sendMsgRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SendMsg"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendMsgRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__sendMsgRequest*                ns5__SendMsgRequest,
    // response parameters:
    ns5__sendMsgResponse*               ns5__SendMsgResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendMsgRequest(
    struct soap *soap,
    // request parameters:
    ns5__sendMsgRequest*                ns5__SendMsgRequest,
    // response parameters:
    ns5__sendMsgResponse*               ns5__SendMsgResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	sendMsgRequest document
//gsoap ns1  service method-encoding:	sendMsgRequest literal
//gsoap ns1  service method-action:	sendMsgRequest urn:zimbraMail/SendMsg
//gsoap ns1  service method-input-header-part:	sendMsgRequest ns3__context
int __ns1__sendMsgRequest(
    ns5__sendMsgRequest*                ns5__SendMsgRequest,	///< Request parameter
    ns5__sendMsgResponse*               ns5__SendMsgResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendShareNotificationRequest                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__sendShareNotificationRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SendShareNotification"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendShareNotificationRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__sendShareNotificationRequest*  ns5__SendShareNotificationRequest,
    // response parameters:
    ns5__sendShareNotificationResponse* ns5__SendShareNotificationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendShareNotificationRequest(
    struct soap *soap,
    // request parameters:
    ns5__sendShareNotificationRequest*  ns5__SendShareNotificationRequest,
    // response parameters:
    ns5__sendShareNotificationResponse* ns5__SendShareNotificationResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	sendShareNotificationRequest document
//gsoap ns1  service method-encoding:	sendShareNotificationRequest literal
//gsoap ns1  service method-action:	sendShareNotificationRequest urn:zimbraMail/SendShareNotification
//gsoap ns1  service method-input-header-part:	sendShareNotificationRequest ns3__context
int __ns1__sendShareNotificationRequest(
    ns5__sendShareNotificationRequest*  ns5__SendShareNotificationRequest,	///< Request parameter
    ns5__sendShareNotificationResponse* ns5__SendShareNotificationResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendVerificationCodeRequest                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__sendVerificationCodeRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SendVerificationCode"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendVerificationCodeRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__sendVerificationCodeRequest*   ns5__SendVerificationCodeRequest,
    // response parameters:
    ns5__sendVerificationCodeResponse*  ns5__SendVerificationCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendVerificationCodeRequest(
    struct soap *soap,
    // request parameters:
    ns5__sendVerificationCodeRequest*   ns5__SendVerificationCodeRequest,
    // response parameters:
    ns5__sendVerificationCodeResponse*  ns5__SendVerificationCodeResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	sendVerificationCodeRequest document
//gsoap ns1  service method-encoding:	sendVerificationCodeRequest literal
//gsoap ns1  service method-action:	sendVerificationCodeRequest urn:zimbraMail/SendVerificationCode
//gsoap ns1  service method-input-header-part:	sendVerificationCodeRequest ns3__context
int __ns1__sendVerificationCodeRequest(
    ns5__sendVerificationCodeRequest*   ns5__SendVerificationCodeRequest,	///< Request parameter
    ns5__sendVerificationCodeResponse*  ns5__SendVerificationCodeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setAppointmentRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__setAppointmentRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SetAppointment"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setAppointmentRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__setAppointmentRequest*         ns5__SetAppointmentRequest,
    // response parameters:
    ns5__setAppointmentResponse*        ns5__SetAppointmentResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setAppointmentRequest(
    struct soap *soap,
    // request parameters:
    ns5__setAppointmentRequest*         ns5__SetAppointmentRequest,
    // response parameters:
    ns5__setAppointmentResponse*        ns5__SetAppointmentResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	setAppointmentRequest document
//gsoap ns1  service method-encoding:	setAppointmentRequest literal
//gsoap ns1  service method-action:	setAppointmentRequest urn:zimbraMail/SetAppointment
//gsoap ns1  service method-input-header-part:	setAppointmentRequest ns3__context
int __ns1__setAppointmentRequest(
    ns5__setAppointmentRequest*         ns5__SetAppointmentRequest,	///< Request parameter
    ns5__setAppointmentResponse*        ns5__SetAppointmentResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setCustomMetadataRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__setCustomMetadataRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SetCustomMetadata"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setCustomMetadataRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__setCustomMetadataRequest*      ns5__SetCustomMetadataRequest,
    // response parameters:
    ns5__setCustomMetadataResponse*     ns5__SetCustomMetadataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setCustomMetadataRequest(
    struct soap *soap,
    // request parameters:
    ns5__setCustomMetadataRequest*      ns5__SetCustomMetadataRequest,
    // response parameters:
    ns5__setCustomMetadataResponse*     ns5__SetCustomMetadataResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	setCustomMetadataRequest document
//gsoap ns1  service method-encoding:	setCustomMetadataRequest literal
//gsoap ns1  service method-action:	setCustomMetadataRequest urn:zimbraMail/SetCustomMetadata
//gsoap ns1  service method-input-header-part:	setCustomMetadataRequest ns3__context
int __ns1__setCustomMetadataRequest(
    ns5__setCustomMetadataRequest*      ns5__SetCustomMetadataRequest,	///< Request parameter
    ns5__setCustomMetadataResponse*     ns5__SetCustomMetadataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setMailboxMetadataRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__setMailboxMetadataRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SetMailboxMetadata"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setMailboxMetadataRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__setMailboxMetadataRequest*     ns5__SetMailboxMetadataRequest,
    // response parameters:
    ns5__setMailboxMetadataResponse*    ns5__SetMailboxMetadataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setMailboxMetadataRequest(
    struct soap *soap,
    // request parameters:
    ns5__setMailboxMetadataRequest*     ns5__SetMailboxMetadataRequest,
    // response parameters:
    ns5__setMailboxMetadataResponse*    ns5__SetMailboxMetadataResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	setMailboxMetadataRequest document
//gsoap ns1  service method-encoding:	setMailboxMetadataRequest literal
//gsoap ns1  service method-action:	setMailboxMetadataRequest urn:zimbraMail/SetMailboxMetadata
//gsoap ns1  service method-input-header-part:	setMailboxMetadataRequest ns3__context
int __ns1__setMailboxMetadataRequest(
    ns5__setMailboxMetadataRequest*     ns5__SetMailboxMetadataRequest,	///< Request parameter
    ns5__setMailboxMetadataResponse*    ns5__SetMailboxMetadataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setTaskRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__setTaskRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SetTask"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setTaskRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__setTaskRequest*                ns5__SetTaskRequest,
    // response parameters:
    ns5__setTaskResponse*               ns5__SetTaskResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setTaskRequest(
    struct soap *soap,
    // request parameters:
    ns5__setTaskRequest*                ns5__SetTaskRequest,
    // response parameters:
    ns5__setTaskResponse*               ns5__SetTaskResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	setTaskRequest document
//gsoap ns1  service method-encoding:	setTaskRequest literal
//gsoap ns1  service method-action:	setTaskRequest urn:zimbraMail/SetTask
//gsoap ns1  service method-input-header-part:	setTaskRequest ns3__context
int __ns1__setTaskRequest(
    ns5__setTaskRequest*                ns5__SetTaskRequest,	///< Request parameter
    ns5__setTaskResponse*               ns5__SetTaskResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__snoozeCalendarItemAlarmRequest                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__snoozeCalendarItemAlarmRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/SnoozeCalendarItemAlarm"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__snoozeCalendarItemAlarmRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__snoozeCalendarItemAlarmRequest* ns5__SnoozeCalendarItemAlarmRequest,
    // response parameters:
    ns5__snoozeCalendarItemAlarmResponse* ns5__SnoozeCalendarItemAlarmResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__snoozeCalendarItemAlarmRequest(
    struct soap *soap,
    // request parameters:
    ns5__snoozeCalendarItemAlarmRequest* ns5__SnoozeCalendarItemAlarmRequest,
    // response parameters:
    ns5__snoozeCalendarItemAlarmResponse* ns5__SnoozeCalendarItemAlarmResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	snoozeCalendarItemAlarmRequest document
//gsoap ns1  service method-encoding:	snoozeCalendarItemAlarmRequest literal
//gsoap ns1  service method-action:	snoozeCalendarItemAlarmRequest urn:zimbraMail/SnoozeCalendarItemAlarm
//gsoap ns1  service method-input-header-part:	snoozeCalendarItemAlarmRequest ns3__context
int __ns1__snoozeCalendarItemAlarmRequest(
    ns5__snoozeCalendarItemAlarmRequest* ns5__SnoozeCalendarItemAlarmRequest,	///< Request parameter
    ns5__snoozeCalendarItemAlarmResponse* ns5__SnoozeCalendarItemAlarmResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__syncRequest                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__syncRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/Sync"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__syncRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__syncRequest*                   ns5__SyncRequest,
    // response parameters:
    ns5__syncResponse*                  ns5__SyncResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__syncRequest(
    struct soap *soap,
    // request parameters:
    ns5__syncRequest*                   ns5__SyncRequest,
    // response parameters:
    ns5__syncResponse*                  ns5__SyncResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	syncRequest document
//gsoap ns1  service method-encoding:	syncRequest literal
//gsoap ns1  service method-action:	syncRequest urn:zimbraMail/Sync
//gsoap ns1  service method-input-header-part:	syncRequest ns3__context
int __ns1__syncRequest(
    ns5__syncRequest*                   ns5__SyncRequest,	///< Request parameter
    ns5__syncResponse*                  ns5__SyncResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__tagActionRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__tagActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/TagAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__tagActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__tagActionRequest*              ns5__TagActionRequest,
    // response parameters:
    ns5__tagActionResponse*             ns5__TagActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__tagActionRequest(
    struct soap *soap,
    // request parameters:
    ns5__tagActionRequest*              ns5__TagActionRequest,
    // response parameters:
    ns5__tagActionResponse*             ns5__TagActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	tagActionRequest document
//gsoap ns1  service method-encoding:	tagActionRequest literal
//gsoap ns1  service method-action:	tagActionRequest urn:zimbraMail/TagAction
//gsoap ns1  service method-input-header-part:	tagActionRequest ns3__context
int __ns1__tagActionRequest(
    ns5__tagActionRequest*              ns5__TagActionRequest,	///< Request parameter
    ns5__tagActionResponse*             ns5__TagActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__testDataSourceRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__testDataSourceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/TestDataSource"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__testDataSourceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__testDataSourceRequest*         ns5__TestDataSourceRequest,
    // response parameters:
    ns5__testDataSourceResponse*        ns5__TestDataSourceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__testDataSourceRequest(
    struct soap *soap,
    // request parameters:
    ns5__testDataSourceRequest*         ns5__TestDataSourceRequest,
    // response parameters:
    ns5__testDataSourceResponse*        ns5__TestDataSourceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	testDataSourceRequest document
//gsoap ns1  service method-encoding:	testDataSourceRequest literal
//gsoap ns1  service method-action:	testDataSourceRequest urn:zimbraMail/TestDataSource
//gsoap ns1  service method-input-header-part:	testDataSourceRequest ns3__context
int __ns1__testDataSourceRequest(
    ns5__testDataSourceRequest*         ns5__TestDataSourceRequest,	///< Request parameter
    ns5__testDataSourceResponse*        ns5__TestDataSourceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateDeviceStatusRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__updateDeviceStatusRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/UpdateDeviceStatus"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateDeviceStatusRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__updateDeviceStatusRequest*     ns5__UpdateDeviceStatusRequest,
    // response parameters:
    ns5__updateDeviceStatusResponse*    ns5__UpdateDeviceStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateDeviceStatusRequest(
    struct soap *soap,
    // request parameters:
    ns5__updateDeviceStatusRequest*     ns5__UpdateDeviceStatusRequest,
    // response parameters:
    ns5__updateDeviceStatusResponse*    ns5__UpdateDeviceStatusResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	updateDeviceStatusRequest document
//gsoap ns1  service method-encoding:	updateDeviceStatusRequest literal
//gsoap ns1  service method-action:	updateDeviceStatusRequest urn:zimbraMail/UpdateDeviceStatus
//gsoap ns1  service method-input-header-part:	updateDeviceStatusRequest ns3__context
int __ns1__updateDeviceStatusRequest(
    ns5__updateDeviceStatusRequest*     ns5__UpdateDeviceStatusRequest,	///< Request parameter
    ns5__updateDeviceStatusResponse*    ns5__UpdateDeviceStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__verifyCodeRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__verifyCodeRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/VerifyCode"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__verifyCodeRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__verifyCodeRequest*             ns5__VerifyCodeRequest,
    // response parameters:
    ns5__verifyCodeResponse*            ns5__VerifyCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__verifyCodeRequest(
    struct soap *soap,
    // request parameters:
    ns5__verifyCodeRequest*             ns5__VerifyCodeRequest,
    // response parameters:
    ns5__verifyCodeResponse*            ns5__VerifyCodeResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	verifyCodeRequest document
//gsoap ns1  service method-encoding:	verifyCodeRequest literal
//gsoap ns1  service method-action:	verifyCodeRequest urn:zimbraMail/VerifyCode
//gsoap ns1  service method-input-header-part:	verifyCodeRequest ns3__context
int __ns1__verifyCodeRequest(
    ns5__verifyCodeRequest*             ns5__VerifyCodeRequest,	///< Request parameter
    ns5__verifyCodeResponse*            ns5__VerifyCodeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__waitSetRequest                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__waitSetRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraMail/WaitSet"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__waitSetRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns5__waitSetRequest*                ns5__WaitSetRequest,
    // response parameters:
    ns5__waitSetResponse*               ns5__WaitSetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__waitSetRequest(
    struct soap *soap,
    // request parameters:
    ns5__waitSetRequest*                ns5__WaitSetRequest,
    // response parameters:
    ns5__waitSetResponse*               ns5__WaitSetResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	waitSetRequest document
//gsoap ns1  service method-encoding:	waitSetRequest literal
//gsoap ns1  service method-action:	waitSetRequest urn:zimbraMail/WaitSet
//gsoap ns1  service method-input-header-part:	waitSetRequest ns3__context
int __ns1__waitSetRequest(
    ns5__waitSetRequest*                ns5__WaitSetRequest,	///< Request parameter
    ns5__waitSetResponse*               ns5__WaitSetResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__becomeMasterRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__becomeMasterRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/BecomeMaster"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__becomeMasterRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__becomeMasterRequest*           ns6__BecomeMasterRequest,
    // response parameters:
    ns6__becomeMasterResponse*          ns6__BecomeMasterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__becomeMasterRequest(
    struct soap *soap,
    // request parameters:
    ns6__becomeMasterRequest*           ns6__BecomeMasterRequest,
    // response parameters:
    ns6__becomeMasterResponse*          ns6__BecomeMasterResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	becomeMasterRequest document
//gsoap ns1  service method-encoding:	becomeMasterRequest literal
//gsoap ns1  service method-action:	becomeMasterRequest urn:zimbraRepl/BecomeMaster
//gsoap ns1  service method-input-header-part:	becomeMasterRequest ns3__context
int __ns1__becomeMasterRequest(
    ns6__becomeMasterRequest*           ns6__BecomeMasterRequest,	///< Request parameter
    ns6__becomeMasterResponse*          ns6__BecomeMasterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__bringDownServiceIPRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__bringDownServiceIPRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/BringDownServiceIP"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__bringDownServiceIPRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__bringDownServiceIPRequest*     ns6__BringDownServiceIPRequest,
    // response parameters:
    ns6__bringDownServiceIPResponse*    ns6__BringDownServiceIPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__bringDownServiceIPRequest(
    struct soap *soap,
    // request parameters:
    ns6__bringDownServiceIPRequest*     ns6__BringDownServiceIPRequest,
    // response parameters:
    ns6__bringDownServiceIPResponse*    ns6__BringDownServiceIPResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	bringDownServiceIPRequest document
//gsoap ns1  service method-encoding:	bringDownServiceIPRequest literal
//gsoap ns1  service method-action:	bringDownServiceIPRequest urn:zimbraRepl/BringDownServiceIP
//gsoap ns1  service method-input-header-part:	bringDownServiceIPRequest ns3__context
int __ns1__bringDownServiceIPRequest(
    ns6__bringDownServiceIPRequest*     ns6__BringDownServiceIPRequest,	///< Request parameter
    ns6__bringDownServiceIPResponse*    ns6__BringDownServiceIPResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__bringUpServiceIPRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__bringUpServiceIPRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/BringUpServiceIP"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__bringUpServiceIPRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__bringUpServiceIPRequest*       ns6__BringUpServiceIPRequest,
    // response parameters:
    ns6__bringUpServiceIPResponse*      ns6__BringUpServiceIPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__bringUpServiceIPRequest(
    struct soap *soap,
    // request parameters:
    ns6__bringUpServiceIPRequest*       ns6__BringUpServiceIPRequest,
    // response parameters:
    ns6__bringUpServiceIPResponse*      ns6__BringUpServiceIPResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	bringUpServiceIPRequest document
//gsoap ns1  service method-encoding:	bringUpServiceIPRequest literal
//gsoap ns1  service method-action:	bringUpServiceIPRequest urn:zimbraRepl/BringUpServiceIP
//gsoap ns1  service method-input-header-part:	bringUpServiceIPRequest ns3__context
int __ns1__bringUpServiceIPRequest(
    ns6__bringUpServiceIPRequest*       ns6__BringUpServiceIPRequest,	///< Request parameter
    ns6__bringUpServiceIPResponse*      ns6__BringUpServiceIPResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__replicationStatusRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__replicationStatusRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/ReplicationStatus"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__replicationStatusRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__replicationStatusRequest*      ns6__ReplicationStatusRequest,
    // response parameters:
    ns6__replicationStatusResponse*     ns6__ReplicationStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__replicationStatusRequest(
    struct soap *soap,
    // request parameters:
    ns6__replicationStatusRequest*      ns6__ReplicationStatusRequest,
    // response parameters:
    ns6__replicationStatusResponse*     ns6__ReplicationStatusResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	replicationStatusRequest document
//gsoap ns1  service method-encoding:	replicationStatusRequest literal
//gsoap ns1  service method-action:	replicationStatusRequest urn:zimbraRepl/ReplicationStatus
//gsoap ns1  service method-input-header-part:	replicationStatusRequest ns3__context
int __ns1__replicationStatusRequest(
    ns6__replicationStatusRequest*      ns6__ReplicationStatusRequest,	///< Request parameter
    ns6__replicationStatusResponse*     ns6__ReplicationStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__startCatchupRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__startCatchupRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/StartCatchup"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__startCatchupRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__startCatchupRequest*           ns6__StartCatchupRequest,
    // response parameters:
    ns6__startCatchupResponse*          ns6__StartCatchupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__startCatchupRequest(
    struct soap *soap,
    // request parameters:
    ns6__startCatchupRequest*           ns6__StartCatchupRequest,
    // response parameters:
    ns6__startCatchupResponse*          ns6__StartCatchupResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	startCatchupRequest document
//gsoap ns1  service method-encoding:	startCatchupRequest literal
//gsoap ns1  service method-action:	startCatchupRequest urn:zimbraRepl/StartCatchup
//gsoap ns1  service method-input-header-part:	startCatchupRequest ns3__context
int __ns1__startCatchupRequest(
    ns6__startCatchupRequest*           ns6__StartCatchupRequest,	///< Request parameter
    ns6__startCatchupResponse*          ns6__StartCatchupResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__startFailoverClientRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__startFailoverClientRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/StartFailoverClient"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__startFailoverClientRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__startFailoverClientRequest*    ns6__StartFailoverClientRequest,
    // response parameters:
    ns6__startFailoverClientResponse*   ns6__StartFailoverClientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__startFailoverClientRequest(
    struct soap *soap,
    // request parameters:
    ns6__startFailoverClientRequest*    ns6__StartFailoverClientRequest,
    // response parameters:
    ns6__startFailoverClientResponse*   ns6__StartFailoverClientResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	startFailoverClientRequest document
//gsoap ns1  service method-encoding:	startFailoverClientRequest literal
//gsoap ns1  service method-action:	startFailoverClientRequest urn:zimbraRepl/StartFailoverClient
//gsoap ns1  service method-input-header-part:	startFailoverClientRequest ns3__context
int __ns1__startFailoverClientRequest(
    ns6__startFailoverClientRequest*    ns6__StartFailoverClientRequest,	///< Request parameter
    ns6__startFailoverClientResponse*   ns6__StartFailoverClientResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__startFailoverDaemonRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__startFailoverDaemonRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/StartFailoverDaemon"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__startFailoverDaemonRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__startFailoverDaemonRequest*    ns6__StartFailoverDaemonRequest,
    // response parameters:
    ns6__startFailoverDaemonResponse*   ns6__StartFailoverDaemonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__startFailoverDaemonRequest(
    struct soap *soap,
    // request parameters:
    ns6__startFailoverDaemonRequest*    ns6__StartFailoverDaemonRequest,
    // response parameters:
    ns6__startFailoverDaemonResponse*   ns6__StartFailoverDaemonResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	startFailoverDaemonRequest document
//gsoap ns1  service method-encoding:	startFailoverDaemonRequest literal
//gsoap ns1  service method-action:	startFailoverDaemonRequest urn:zimbraRepl/StartFailoverDaemon
//gsoap ns1  service method-input-header-part:	startFailoverDaemonRequest ns3__context
int __ns1__startFailoverDaemonRequest(
    ns6__startFailoverDaemonRequest*    ns6__StartFailoverDaemonRequest,	///< Request parameter
    ns6__startFailoverDaemonResponse*   ns6__StartFailoverDaemonResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__stopFailoverClientRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__stopFailoverClientRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/StopFailoverClient"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__stopFailoverClientRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__stopFailoverClientRequest*     ns6__StopFailoverClientRequest,
    // response parameters:
    ns6__stopFailoverClientResponse*    ns6__StopFailoverClientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__stopFailoverClientRequest(
    struct soap *soap,
    // request parameters:
    ns6__stopFailoverClientRequest*     ns6__StopFailoverClientRequest,
    // response parameters:
    ns6__stopFailoverClientResponse*    ns6__StopFailoverClientResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	stopFailoverClientRequest document
//gsoap ns1  service method-encoding:	stopFailoverClientRequest literal
//gsoap ns1  service method-action:	stopFailoverClientRequest urn:zimbraRepl/StopFailoverClient
//gsoap ns1  service method-input-header-part:	stopFailoverClientRequest ns3__context
int __ns1__stopFailoverClientRequest(
    ns6__stopFailoverClientRequest*     ns6__StopFailoverClientRequest,	///< Request parameter
    ns6__stopFailoverClientResponse*    ns6__StopFailoverClientResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__stopFailoverDaemonRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__stopFailoverDaemonRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraRepl/StopFailoverDaemon"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__stopFailoverDaemonRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns6__stopFailoverDaemonRequest*     ns6__StopFailoverDaemonRequest,
    // response parameters:
    ns6__stopFailoverDaemonResponse*    ns6__StopFailoverDaemonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__stopFailoverDaemonRequest(
    struct soap *soap,
    // request parameters:
    ns6__stopFailoverDaemonRequest*     ns6__StopFailoverDaemonRequest,
    // response parameters:
    ns6__stopFailoverDaemonResponse*    ns6__StopFailoverDaemonResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	stopFailoverDaemonRequest document
//gsoap ns1  service method-encoding:	stopFailoverDaemonRequest literal
//gsoap ns1  service method-action:	stopFailoverDaemonRequest urn:zimbraRepl/StopFailoverDaemon
//gsoap ns1  service method-input-header-part:	stopFailoverDaemonRequest ns3__context
int __ns1__stopFailoverDaemonRequest(
    ns6__stopFailoverDaemonRequest*     ns6__StopFailoverDaemonRequest,	///< Request parameter
    ns6__stopFailoverDaemonResponse*    ns6__StopFailoverDaemonResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cancelPendingRemoteWipeRequest                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__cancelPendingRemoteWipeRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraSync/CancelPendingRemoteWipe"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cancelPendingRemoteWipeRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns7__cancelPendingRemoteWipeRequest* ns7__CancelPendingRemoteWipeRequest,
    // response parameters:
    ns7__cancelPendingRemoteWipeResponse* ns7__CancelPendingRemoteWipeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cancelPendingRemoteWipeRequest(
    struct soap *soap,
    // request parameters:
    ns7__cancelPendingRemoteWipeRequest* ns7__CancelPendingRemoteWipeRequest,
    // response parameters:
    ns7__cancelPendingRemoteWipeResponse* ns7__CancelPendingRemoteWipeResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	cancelPendingRemoteWipeRequest document
//gsoap ns1  service method-encoding:	cancelPendingRemoteWipeRequest literal
//gsoap ns1  service method-action:	cancelPendingRemoteWipeRequest urn:zimbraSync/CancelPendingRemoteWipe
//gsoap ns1  service method-input-header-part:	cancelPendingRemoteWipeRequest ns3__context
int __ns1__cancelPendingRemoteWipeRequest(
    ns7__cancelPendingRemoteWipeRequest* ns7__CancelPendingRemoteWipeRequest,	///< Request parameter
    ns7__cancelPendingRemoteWipeResponse* ns7__CancelPendingRemoteWipeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDeviceStatusRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getDeviceStatusRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraSync/GetDeviceStatus"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDeviceStatusRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns7__getDeviceStatusRequest*        ns7__GetDeviceStatusRequest,
    // response parameters:
    ns7__getDeviceStatusResponse*       ns7__GetDeviceStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDeviceStatusRequest(
    struct soap *soap,
    // request parameters:
    ns7__getDeviceStatusRequest*        ns7__GetDeviceStatusRequest,
    // response parameters:
    ns7__getDeviceStatusResponse*       ns7__GetDeviceStatusResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDeviceStatusRequest document
//gsoap ns1  service method-encoding:	getDeviceStatusRequest literal
//gsoap ns1  service method-action:	getDeviceStatusRequest urn:zimbraSync/GetDeviceStatus
//gsoap ns1  service method-input-header-part:	getDeviceStatusRequest ns3__context
int __ns1__getDeviceStatusRequest(
    ns7__getDeviceStatusRequest*        ns7__GetDeviceStatusRequest,	///< Request parameter
    ns7__getDeviceStatusResponse*       ns7__GetDeviceStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__remoteWipeRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__remoteWipeRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraSync/RemoteWipe"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__remoteWipeRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns7__remoteWipeRequest*             ns7__RemoteWipeRequest,
    // response parameters:
    ns7__remoteWipeResponse*            ns7__RemoteWipeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__remoteWipeRequest(
    struct soap *soap,
    // request parameters:
    ns7__remoteWipeRequest*             ns7__RemoteWipeRequest,
    // response parameters:
    ns7__remoteWipeResponse*            ns7__RemoteWipeResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	remoteWipeRequest document
//gsoap ns1  service method-encoding:	remoteWipeRequest literal
//gsoap ns1  service method-action:	remoteWipeRequest urn:zimbraSync/RemoteWipe
//gsoap ns1  service method-input-header-part:	remoteWipeRequest ns3__context
int __ns1__remoteWipeRequest(
    ns7__remoteWipeRequest*             ns7__RemoteWipeRequest,	///< Request parameter
    ns7__remoteWipeResponse*            ns7__RemoteWipeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeDeviceRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__removeDeviceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraSync/RemoveDevice"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeDeviceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns7__removeDeviceRequest*           ns7__RemoveDeviceRequest,
    // response parameters:
    ns7__removeDeviceResponse*          ns7__RemoveDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeDeviceRequest(
    struct soap *soap,
    // request parameters:
    ns7__removeDeviceRequest*           ns7__RemoveDeviceRequest,
    // response parameters:
    ns7__removeDeviceResponse*          ns7__RemoveDeviceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	removeDeviceRequest document
//gsoap ns1  service method-encoding:	removeDeviceRequest literal
//gsoap ns1  service method-action:	removeDeviceRequest urn:zimbraSync/RemoveDevice
//gsoap ns1  service method-input-header-part:	removeDeviceRequest ns3__context
int __ns1__removeDeviceRequest(
    ns7__removeDeviceRequest*           ns7__RemoveDeviceRequest,	///< Request parameter
    ns7__removeDeviceResponse*          ns7__RemoveDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__resumeDeviceRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__resumeDeviceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraSync/ResumeDevice"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__resumeDeviceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns7__resumeDeviceRequest*           ns7__ResumeDeviceRequest,
    // response parameters:
    ns7__resumeDeviceResponse*          ns7__ResumeDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__resumeDeviceRequest(
    struct soap *soap,
    // request parameters:
    ns7__resumeDeviceRequest*           ns7__ResumeDeviceRequest,
    // response parameters:
    ns7__resumeDeviceResponse*          ns7__ResumeDeviceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	resumeDeviceRequest document
//gsoap ns1  service method-encoding:	resumeDeviceRequest literal
//gsoap ns1  service method-action:	resumeDeviceRequest urn:zimbraSync/ResumeDevice
//gsoap ns1  service method-input-header-part:	resumeDeviceRequest ns3__context
int __ns1__resumeDeviceRequest(
    ns7__resumeDeviceRequest*           ns7__ResumeDeviceRequest,	///< Request parameter
    ns7__resumeDeviceResponse*          ns7__ResumeDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__suspendDeviceRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__suspendDeviceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraSync/SuspendDevice"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__suspendDeviceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns7__suspendDeviceRequest*          ns7__SuspendDeviceRequest,
    // response parameters:
    ns7__suspendDeviceResponse*         ns7__SuspendDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__suspendDeviceRequest(
    struct soap *soap,
    // request parameters:
    ns7__suspendDeviceRequest*          ns7__SuspendDeviceRequest,
    // response parameters:
    ns7__suspendDeviceResponse*         ns7__SuspendDeviceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	suspendDeviceRequest document
//gsoap ns1  service method-encoding:	suspendDeviceRequest literal
//gsoap ns1  service method-action:	suspendDeviceRequest urn:zimbraSync/SuspendDevice
//gsoap ns1  service method-input-header-part:	suspendDeviceRequest ns3__context
int __ns1__suspendDeviceRequest(
    ns7__suspendDeviceRequest*          ns7__SuspendDeviceRequest,	///< Request parameter
    ns7__suspendDeviceResponse*         ns7__SuspendDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__changeUCPasswordRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__changeUCPasswordRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/ChangeUCPassword"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__changeUCPasswordRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__changeUCPasswordRequest*       ns8__ChangeUCPasswordRequest,
    // response parameters:
    ns8__changeUCPasswordResponse*      ns8__ChangeUCPasswordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__changeUCPasswordRequest(
    struct soap *soap,
    // request parameters:
    ns8__changeUCPasswordRequest*       ns8__ChangeUCPasswordRequest,
    // response parameters:
    ns8__changeUCPasswordResponse*      ns8__ChangeUCPasswordResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	changeUCPasswordRequest document
//gsoap ns1  service method-encoding:	changeUCPasswordRequest literal
//gsoap ns1  service method-action:	changeUCPasswordRequest urn:zimbraVoice/ChangeUCPassword
//gsoap ns1  service method-input-header-part:	changeUCPasswordRequest ns3__context
int __ns1__changeUCPasswordRequest(
    ns8__changeUCPasswordRequest*       ns8__ChangeUCPasswordRequest,	///< Request parameter
    ns8__changeUCPasswordResponse*      ns8__ChangeUCPasswordResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getUCInfoRequest                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getUCInfoRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/GetUCInfo"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getUCInfoRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__getUCInfoRequest*              ns8__GetUCInfoRequest,
    // response parameters:
    ns8__getUCInfoResponse*             ns8__GetUCInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getUCInfoRequest(
    struct soap *soap,
    // request parameters:
    ns8__getUCInfoRequest*              ns8__GetUCInfoRequest,
    // response parameters:
    ns8__getUCInfoResponse*             ns8__GetUCInfoResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getUCInfoRequest document
//gsoap ns1  service method-encoding:	getUCInfoRequest literal
//gsoap ns1  service method-action:	getUCInfoRequest urn:zimbraVoice/GetUCInfo
//gsoap ns1  service method-input-header-part:	getUCInfoRequest ns3__context
int __ns1__getUCInfoRequest(
    ns8__getUCInfoRequest*              ns8__GetUCInfoRequest,	///< Request parameter
    ns8__getUCInfoResponse*             ns8__GetUCInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getVoiceFeaturesRequest                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getVoiceFeaturesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/GetVoiceFeatures"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getVoiceFeaturesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__getVoiceFeaturesRequest*       ns8__GetVoiceFeaturesRequest,
    // response parameters:
    ns8__getVoiceFeaturesResponse*      ns8__GetVoiceFeaturesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getVoiceFeaturesRequest(
    struct soap *soap,
    // request parameters:
    ns8__getVoiceFeaturesRequest*       ns8__GetVoiceFeaturesRequest,
    // response parameters:
    ns8__getVoiceFeaturesResponse*      ns8__GetVoiceFeaturesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getVoiceFeaturesRequest document
//gsoap ns1  service method-encoding:	getVoiceFeaturesRequest literal
//gsoap ns1  service method-action:	getVoiceFeaturesRequest urn:zimbraVoice/GetVoiceFeatures
//gsoap ns1  service method-input-header-part:	getVoiceFeaturesRequest ns3__context
int __ns1__getVoiceFeaturesRequest(
    ns8__getVoiceFeaturesRequest*       ns8__GetVoiceFeaturesRequest,	///< Request parameter
    ns8__getVoiceFeaturesResponse*      ns8__GetVoiceFeaturesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getVoiceFolderRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getVoiceFolderRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/GetVoiceFolder"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getVoiceFolderRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__getVoiceFolderRequest*         ns8__GetVoiceFolderRequest,
    // response parameters:
    ns8__getVoiceFolderResponse*        ns8__GetVoiceFolderResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getVoiceFolderRequest(
    struct soap *soap,
    // request parameters:
    ns8__getVoiceFolderRequest*         ns8__GetVoiceFolderRequest,
    // response parameters:
    ns8__getVoiceFolderResponse*        ns8__GetVoiceFolderResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getVoiceFolderRequest document
//gsoap ns1  service method-encoding:	getVoiceFolderRequest literal
//gsoap ns1  service method-action:	getVoiceFolderRequest urn:zimbraVoice/GetVoiceFolder
//gsoap ns1  service method-input-header-part:	getVoiceFolderRequest ns3__context
int __ns1__getVoiceFolderRequest(
    ns8__getVoiceFolderRequest*         ns8__GetVoiceFolderRequest,	///< Request parameter
    ns8__getVoiceFolderResponse*        ns8__GetVoiceFolderResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getVoiceInfoRequest                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getVoiceInfoRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/GetVoiceInfo"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getVoiceInfoRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__getVoiceInfoRequest*           ns8__GetVoiceInfoRequest,
    // response parameters:
    ns8__getVoiceInfoResponse*          ns8__GetVoiceInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getVoiceInfoRequest(
    struct soap *soap,
    // request parameters:
    ns8__getVoiceInfoRequest*           ns8__GetVoiceInfoRequest,
    // response parameters:
    ns8__getVoiceInfoResponse*          ns8__GetVoiceInfoResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getVoiceInfoRequest document
//gsoap ns1  service method-encoding:	getVoiceInfoRequest literal
//gsoap ns1  service method-action:	getVoiceInfoRequest urn:zimbraVoice/GetVoiceInfo
//gsoap ns1  service method-input-header-part:	getVoiceInfoRequest ns3__context
int __ns1__getVoiceInfoRequest(
    ns8__getVoiceInfoRequest*           ns8__GetVoiceInfoRequest,	///< Request parameter
    ns8__getVoiceInfoResponse*          ns8__GetVoiceInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getVoiceMailPrefsRequest                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getVoiceMailPrefsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/GetVoiceMailPrefs"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getVoiceMailPrefsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__getVoiceMailPrefsRequest*      ns8__GetVoiceMailPrefsRequest,
    // response parameters:
    ns8__getVoiceMailPrefsResponse*     ns8__GetVoiceMailPrefsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getVoiceMailPrefsRequest(
    struct soap *soap,
    // request parameters:
    ns8__getVoiceMailPrefsRequest*      ns8__GetVoiceMailPrefsRequest,
    // response parameters:
    ns8__getVoiceMailPrefsResponse*     ns8__GetVoiceMailPrefsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getVoiceMailPrefsRequest document
//gsoap ns1  service method-encoding:	getVoiceMailPrefsRequest literal
//gsoap ns1  service method-action:	getVoiceMailPrefsRequest urn:zimbraVoice/GetVoiceMailPrefs
//gsoap ns1  service method-input-header-part:	getVoiceMailPrefsRequest ns3__context
int __ns1__getVoiceMailPrefsRequest(
    ns8__getVoiceMailPrefsRequest*      ns8__GetVoiceMailPrefsRequest,	///< Request parameter
    ns8__getVoiceMailPrefsResponse*     ns8__GetVoiceMailPrefsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyFromNumRequest                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyFromNumRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/ModifyFromNum"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyFromNumRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__modifyFromNumRequest*          ns8__ModifyFromNumRequest,
    // response parameters:
    ns8__modifyFromNumResponse*         ns8__ModifyFromNumResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyFromNumRequest(
    struct soap *soap,
    // request parameters:
    ns8__modifyFromNumRequest*          ns8__ModifyFromNumRequest,
    // response parameters:
    ns8__modifyFromNumResponse*         ns8__ModifyFromNumResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyFromNumRequest document
//gsoap ns1  service method-encoding:	modifyFromNumRequest literal
//gsoap ns1  service method-action:	modifyFromNumRequest urn:zimbraVoice/ModifyFromNum
//gsoap ns1  service method-input-header-part:	modifyFromNumRequest ns3__context
int __ns1__modifyFromNumRequest(
    ns8__modifyFromNumRequest*          ns8__ModifyFromNumRequest,	///< Request parameter
    ns8__modifyFromNumResponse*         ns8__ModifyFromNumResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyVoiceFeaturesRequest                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyVoiceFeaturesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/ModifyVoiceFeatures"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyVoiceFeaturesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__modifyVoiceFeaturesRequest*    ns8__ModifyVoiceFeaturesRequest,
    // response parameters:
    ns8__modifyVoiceFeaturesResponse*   ns8__ModifyVoiceFeaturesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyVoiceFeaturesRequest(
    struct soap *soap,
    // request parameters:
    ns8__modifyVoiceFeaturesRequest*    ns8__ModifyVoiceFeaturesRequest,
    // response parameters:
    ns8__modifyVoiceFeaturesResponse*   ns8__ModifyVoiceFeaturesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyVoiceFeaturesRequest document
//gsoap ns1  service method-encoding:	modifyVoiceFeaturesRequest literal
//gsoap ns1  service method-action:	modifyVoiceFeaturesRequest urn:zimbraVoice/ModifyVoiceFeatures
//gsoap ns1  service method-input-header-part:	modifyVoiceFeaturesRequest ns3__context
int __ns1__modifyVoiceFeaturesRequest(
    ns8__modifyVoiceFeaturesRequest*    ns8__ModifyVoiceFeaturesRequest,	///< Request parameter
    ns8__modifyVoiceFeaturesResponse*   ns8__ModifyVoiceFeaturesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyVoiceMailPinRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyVoiceMailPinRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/ModifyVoiceMailPin"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyVoiceMailPinRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__modifyVoiceMailPinRequest*     ns8__ModifyVoiceMailPinRequest,
    // response parameters:
    ns8__modifyVoiceMailPinResponse*    ns8__ModifyVoiceMailPinResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyVoiceMailPinRequest(
    struct soap *soap,
    // request parameters:
    ns8__modifyVoiceMailPinRequest*     ns8__ModifyVoiceMailPinRequest,
    // response parameters:
    ns8__modifyVoiceMailPinResponse*    ns8__ModifyVoiceMailPinResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyVoiceMailPinRequest document
//gsoap ns1  service method-encoding:	modifyVoiceMailPinRequest literal
//gsoap ns1  service method-action:	modifyVoiceMailPinRequest urn:zimbraVoice/ModifyVoiceMailPin
//gsoap ns1  service method-input-header-part:	modifyVoiceMailPinRequest ns3__context
int __ns1__modifyVoiceMailPinRequest(
    ns8__modifyVoiceMailPinRequest*     ns8__ModifyVoiceMailPinRequest,	///< Request parameter
    ns8__modifyVoiceMailPinResponse*    ns8__ModifyVoiceMailPinResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyVoiceMailPrefsRequest                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__modifyVoiceMailPrefsRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/ModifyVoiceMailPrefs"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyVoiceMailPrefsRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__modifyVoiceMailPrefsRequest*   ns8__ModifyVoiceMailPrefsRequest,
    // response parameters:
    ns8__modifyVoiceMailPrefsResponse*  ns8__ModifyVoiceMailPrefsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyVoiceMailPrefsRequest(
    struct soap *soap,
    // request parameters:
    ns8__modifyVoiceMailPrefsRequest*   ns8__ModifyVoiceMailPrefsRequest,
    // response parameters:
    ns8__modifyVoiceMailPrefsResponse*  ns8__ModifyVoiceMailPrefsResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	modifyVoiceMailPrefsRequest document
//gsoap ns1  service method-encoding:	modifyVoiceMailPrefsRequest literal
//gsoap ns1  service method-action:	modifyVoiceMailPrefsRequest urn:zimbraVoice/ModifyVoiceMailPrefs
//gsoap ns1  service method-input-header-part:	modifyVoiceMailPrefsRequest ns3__context
int __ns1__modifyVoiceMailPrefsRequest(
    ns8__modifyVoiceMailPrefsRequest*   ns8__ModifyVoiceMailPrefsRequest,	///< Request parameter
    ns8__modifyVoiceMailPrefsResponse*  ns8__ModifyVoiceMailPrefsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__resetVoiceFeaturesRequest                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__resetVoiceFeaturesRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/ResetVoiceFeatures"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__resetVoiceFeaturesRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__resetVoiceFeaturesRequest*     ns8__ResetVoiceFeaturesRequest,
    // response parameters:
    ns8__resetVoiceFeaturesResponse*    ns8__ResetVoiceFeaturesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__resetVoiceFeaturesRequest(
    struct soap *soap,
    // request parameters:
    ns8__resetVoiceFeaturesRequest*     ns8__ResetVoiceFeaturesRequest,
    // response parameters:
    ns8__resetVoiceFeaturesResponse*    ns8__ResetVoiceFeaturesResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	resetVoiceFeaturesRequest document
//gsoap ns1  service method-encoding:	resetVoiceFeaturesRequest literal
//gsoap ns1  service method-action:	resetVoiceFeaturesRequest urn:zimbraVoice/ResetVoiceFeatures
//gsoap ns1  service method-input-header-part:	resetVoiceFeaturesRequest ns3__context
int __ns1__resetVoiceFeaturesRequest(
    ns8__resetVoiceFeaturesRequest*     ns8__ResetVoiceFeaturesRequest,	///< Request parameter
    ns8__resetVoiceFeaturesResponse*    ns8__ResetVoiceFeaturesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchVoiceRequest                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__searchVoiceRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/SearchVoice"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchVoiceRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__searchVoiceRequest*            ns8__SearchVoiceRequest,
    // response parameters:
    ns8__searchVoiceResponse*           ns8__SearchVoiceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchVoiceRequest(
    struct soap *soap,
    // request parameters:
    ns8__searchVoiceRequest*            ns8__SearchVoiceRequest,
    // response parameters:
    ns8__searchVoiceResponse*           ns8__SearchVoiceResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	searchVoiceRequest document
//gsoap ns1  service method-encoding:	searchVoiceRequest literal
//gsoap ns1  service method-action:	searchVoiceRequest urn:zimbraVoice/SearchVoice
//gsoap ns1  service method-input-header-part:	searchVoiceRequest ns3__context
int __ns1__searchVoiceRequest(
    ns8__searchVoiceRequest*            ns8__SearchVoiceRequest,	///< Request parameter
    ns8__searchVoiceResponse*           ns8__SearchVoiceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__uploadVoiceMailRequest                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__uploadVoiceMailRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/UploadVoiceMail"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__uploadVoiceMailRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__uploadVoiceMailRequest*        ns8__UploadVoiceMailRequest,
    // response parameters:
    ns8__uploadVoiceMailResponse*       ns8__UploadVoiceMailResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__uploadVoiceMailRequest(
    struct soap *soap,
    // request parameters:
    ns8__uploadVoiceMailRequest*        ns8__UploadVoiceMailRequest,
    // response parameters:
    ns8__uploadVoiceMailResponse*       ns8__UploadVoiceMailResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	uploadVoiceMailRequest document
//gsoap ns1  service method-encoding:	uploadVoiceMailRequest literal
//gsoap ns1  service method-action:	uploadVoiceMailRequest urn:zimbraVoice/UploadVoiceMail
//gsoap ns1  service method-input-header-part:	uploadVoiceMailRequest ns3__context
int __ns1__uploadVoiceMailRequest(
    ns8__uploadVoiceMailRequest*        ns8__UploadVoiceMailRequest,	///< Request parameter
    ns8__uploadVoiceMailResponse*       ns8__UploadVoiceMailResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__voiceMsgActionRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__voiceMsgActionRequest" of service binding "zcsPortBinding"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action="urn:zimbraVoice/VoiceMsgAction"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns3__context

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__voiceMsgActionRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns8__voiceMsgActionRequest*         ns8__VoiceMsgActionRequest,
    // response parameters:
    ns8__voiceMsgActionResponse*        ns8__VoiceMsgActionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__voiceMsgActionRequest(
    struct soap *soap,
    // request parameters:
    ns8__voiceMsgActionRequest*         ns8__VoiceMsgActionRequest,
    // response parameters:
    ns8__voiceMsgActionResponse*        ns8__VoiceMsgActionResponse
  );
@endcode

C++ proxy class (defined in soapzcsPortBindingProxy.h):
@code
  class zcsPortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapzcsPortBindingService.h):
@code
  class zcsPortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	voiceMsgActionRequest document
//gsoap ns1  service method-encoding:	voiceMsgActionRequest literal
//gsoap ns1  service method-action:	voiceMsgActionRequest urn:zimbraVoice/VoiceMsgAction
//gsoap ns1  service method-input-header-part:	voiceMsgActionRequest ns3__context
int __ns1__voiceMsgActionRequest(
    ns8__voiceMsgActionRequest*         ns8__VoiceMsgActionRequest,	///< Request parameter
    ns8__voiceMsgActionResponse*        ns8__VoiceMsgActionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema ""

@section ns3 Top-level root elements of schema "urn:zimbra"

  - <ns3:context> (use wsdl2h option -g to auto-generate)

@section ns4 Top-level root elements of schema "urn:zimbraAccount"

  - <ns4:AuthRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:AuthResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:AutoCompleteGalRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:AutoCompleteGalResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:ChangePasswordRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:ChangePasswordResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:CheckLicenseRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:CheckLicenseResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:CheckRightsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:CheckRightsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:CreateDistributionListRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:CreateDistributionListResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:CreateIdentityRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:CreateIdentityResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:CreateSignatureRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:CreateSignatureResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:DeleteIdentityRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:DeleteIdentityResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:DeleteSignatureRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:DeleteSignatureResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:DiscoverRightsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:DiscoverRightsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:DistributionListActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:DistributionListActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:EndSessionRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:EndSessionResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAccountDistributionListsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAccountDistributionListsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAccountInfoRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAccountInfoResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAllLocalesRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAllLocalesResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAvailableCsvFormatsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAvailableCsvFormatsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAvailableLocalesRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAvailableLocalesResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAvailableSkinsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetAvailableSkinsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetDistributionListMembersRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetDistributionListMembersResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetDistributionListRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetDistributionListResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetIdentitiesRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetIdentitiesResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetInfoRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetInfoResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetPrefsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetPrefsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetRightsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetRightsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetSMIMEPublicCertsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetSMIMEPublicCertsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetShareInfoRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetShareInfoResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetSignaturesRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetSignaturesResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetVersionInfoRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetVersionInfoResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GetWhiteBlackListRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GetWhiteBlackListResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:GrantRightsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:GrantRightsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyIdentityRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyIdentityResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyPrefsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyPrefsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyPropertiesRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyPropertiesResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifySignatureRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifySignatureResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyWhiteBlackListRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyWhiteBlackListResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyZimletPrefsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:ModifyZimletPrefsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:RevokeRightsRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:RevokeRightsResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:SearchCalendarResourcesRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:SearchCalendarResourcesResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:SearchGalRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:SearchGalResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:SubscribeDistributionListRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:SubscribeDistributionListResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:SyncGalRequest> (use wsdl2h option -g to auto-generate)

  - <ns4:SyncGalResponse> (use wsdl2h option -g to auto-generate)

  - <ns4:accountDataSource> (use wsdl2h option -g to auto-generate)

  - <ns4:contacts> (use wsdl2h option -g to auto-generate)

  - <ns4:cos> (use wsdl2h option -g to auto-generate)

  - <ns4:dl> (use wsdl2h option -g to auto-generate)

  - <ns4:include> (use wsdl2h option -g to auto-generate)

  - <ns4:includeCSS> (use wsdl2h option -g to auto-generate)

  - <ns4:meta> (use wsdl2h option -g to auto-generate)

  - <ns4:serverExtension> (use wsdl2h option -g to auto-generate)

  - <ns4:signature> (use wsdl2h option -g to auto-generate)

  - <ns4:subsReq> (use wsdl2h option -g to auto-generate)

  - <ns4:target> (use wsdl2h option -g to auto-generate)

@section ns5 Top-level root elements of schema "urn:zimbraMail"

  - <ns5:AddAppointmentInviteRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:AddAppointmentInviteResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:AddCommentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:AddCommentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:AddMsgRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:AddMsgResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:AddTaskInviteRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:AddTaskInviteResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:AnnounceOrganizerChangeRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:AnnounceOrganizerChangeResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ApplyFilterRulesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ApplyFilterRulesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ApplyOutgoingFilterRulesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ApplyOutgoingFilterRulesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:AutoCompleteRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:AutoCompleteResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:BounceMsgRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:BounceMsgResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:BrowseRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:BrowseResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CancelAppointmentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CancelAppointmentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CancelTaskRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CancelTaskResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CheckDeviceStatusRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CheckDeviceStatusResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CheckPermissionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CheckPermissionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CheckRecurConflictsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CheckRecurConflictsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CheckSpellingRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CheckSpellingResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CompleteTaskInstanceRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CompleteTaskInstanceResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ContactActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ContactActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ConvActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ConvActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CounterAppointmentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CounterAppointmentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateAppointmentExceptionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateAppointmentExceptionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateAppointmentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateAppointmentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateContactRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateContactResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateDataSourceRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateDataSourceResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateFolderRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateFolderResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateMountpointRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateMountpointResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateNoteRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateNoteResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateSearchFolderRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateSearchFolderResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateTagRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateTagResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateTaskExceptionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateTaskExceptionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateTaskRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateTaskResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateWaitSetRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:CreateWaitSetResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:DeclineCounterAppointmentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:DeclineCounterAppointmentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:DeleteDataSourceRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:DeleteDataSourceResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:DeleteDeviceRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:DeleteDeviceResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:DestroyWaitSetRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:DestroyWaitSetResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:DiffDocumentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:DiffDocumentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:DismissCalendarItemAlarmRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:DismissCalendarItemAlarmResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:DocumentActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:DocumentActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:EmptyDumpsterRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:EmptyDumpsterResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:EnableSharedReminderRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:EnableSharedReminderResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ExpandRecurRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ExpandRecurResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ExportContactsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ExportContactsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:FolderActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:FolderActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ForwardAppointmentInviteRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ForwardAppointmentInviteResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ForwardAppointmentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ForwardAppointmentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GenerateUUIDRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GenerateUUIDResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetActivityStreamRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetActivityStreamResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetAllDevicesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetAllDevicesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetAppointmentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetAppointmentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetApptSummariesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetApptSummariesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetCalendarItemSummariesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetCalendarItemSummariesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetCommentsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetCommentsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetContactsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetContactsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetConvRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetConvResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetCustomMetadataRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetCustomMetadataResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetDataSourcesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetDataSourcesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetDocumentShareURLRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetDocumentShareURLResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetEffectiveFolderPermsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetEffectiveFolderPermsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetFilterRulesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetFilterRulesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetFolderRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetFolderResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetFreeBusyRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetFreeBusyResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetICalRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetICalResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetImportStatusRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetImportStatusResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetItemRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetItemResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetMailboxMetadataRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetMailboxMetadataResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetMiniCalRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetMiniCalResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetMsgMetadataRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetMsgMetadataResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetMsgRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetMsgResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetNoteRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetNoteResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetNotificationsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetNotificationsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetOutgoingFilterRulesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetOutgoingFilterRulesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetPermissionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetPermissionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetRecurRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetRecurResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetSearchFolderRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetSearchFolderResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetShareDetailsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetShareDetailsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetShareNotificationsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetShareNotificationsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetSpellDictionariesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetSpellDictionariesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetSystemRetentionPolicyRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetSystemRetentionPolicyResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetTagRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetTagResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetTaskRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetTaskResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetTaskSummariesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetTaskSummariesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetWatchersRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetWatchersResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetWatchingItemsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetWatchingItemsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetWorkingHoursRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetWorkingHoursResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetYahooAuthTokenRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetYahooAuthTokenResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GetYahooCookieRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GetYahooCookieResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:GrantPermissionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:GrantPermissionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ICalReplyRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ICalReplyResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ImportAppointmentsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ImportAppointmentsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ImportContactsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ImportContactsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ImportDataRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ImportDataResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:InvalidateReminderDeviceRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:InvalidateReminderDeviceResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ItemActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ItemActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ListDocumentRevisionsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ListDocumentRevisionsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyAppointmentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyAppointmentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyContactRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyContactResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyDataSourceRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyDataSourceResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyFilterRulesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyFilterRulesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyMailboxMetadataRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyMailboxMetadataResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyOutgoingFilterRulesRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyOutgoingFilterRulesResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifySearchFolderRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifySearchFolderResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyTaskRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:ModifyTaskResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:MsgActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:MsgActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:NoOpRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:NoOpResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:NoteActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:NoteActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:PurgeRevisionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:PurgeRevisionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:RankingActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:RankingActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:RegisterDeviceRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:RegisterDeviceResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:RemoveAttachmentsRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:RemoveAttachmentsResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:RevokePermissionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:RevokePermissionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SaveDocumentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SaveDocumentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SaveDraftRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SaveDraftResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SearchConvRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SearchConvResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SearchRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SearchResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SendDeliveryReportRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SendDeliveryReportResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SendInviteReplyRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SendInviteReplyResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SendMsgRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SendMsgResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SendShareNotificationRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SendShareNotificationResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SendVerificationCodeRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SendVerificationCodeResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SetAppointmentRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SetAppointmentResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SetCustomMetadataRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SetCustomMetadataResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SetMailboxMetadataRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SetMailboxMetadataResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SetTaskRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SetTaskResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SnoozeCalendarItemAlarmRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SnoozeCalendarItemAlarmResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:SyncRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:SyncResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:TagActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:TagActionResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:TestDataSourceRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:TestDataSourceResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:UpdateDeviceStatusRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:UpdateDeviceStatusResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:VerifyCodeRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:VerifyCodeResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:WaitSetRequest> (use wsdl2h option -g to auto-generate)

  - <ns5:WaitSetResponse> (use wsdl2h option -g to auto-generate)

  - <ns5:cn> (use wsdl2h option -g to auto-generate)

  - <ns5:content> (use wsdl2h option -g to auto-generate)

  - <ns5:doc> (use wsdl2h option -g to auto-generate)

  - <ns5:folder> (use wsdl2h option -g to auto-generate)

  - <ns5:link> (use wsdl2h option -g to auto-generate)

  - <ns5:m> (use wsdl2h option -g to auto-generate)

  - <ns5:meta> (use wsdl2h option -g to auto-generate)

  - <ns5:mp> (use wsdl2h option -g to auto-generate)

  - <ns5:policy> (use wsdl2h option -g to auto-generate)

  - <ns5:retentionPolicy> (use wsdl2h option -g to auto-generate)

  - <ns5:search> (use wsdl2h option -g to auto-generate)

@section ns6 Top-level root elements of schema "urn:zimbraRepl"

  - <ns6:BecomeMasterRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:BecomeMasterResponse> (use wsdl2h option -g to auto-generate)

  - <ns6:BringDownServiceIPRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:BringDownServiceIPResponse> (use wsdl2h option -g to auto-generate)

  - <ns6:BringUpServiceIPRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:BringUpServiceIPResponse> (use wsdl2h option -g to auto-generate)

  - <ns6:ReplicationStatusRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:ReplicationStatusResponse> (use wsdl2h option -g to auto-generate)

  - <ns6:StartCatchupRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:StartCatchupResponse> (use wsdl2h option -g to auto-generate)

  - <ns6:StartFailoverClientRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:StartFailoverClientResponse> (use wsdl2h option -g to auto-generate)

  - <ns6:StartFailoverDaemonRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:StartFailoverDaemonResponse> (use wsdl2h option -g to auto-generate)

  - <ns6:StopFailoverClientRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:StopFailoverClientResponse> (use wsdl2h option -g to auto-generate)

  - <ns6:StopFailoverDaemonRequest> (use wsdl2h option -g to auto-generate)

  - <ns6:StopFailoverDaemonResponse> (use wsdl2h option -g to auto-generate)

@section ns7 Top-level root elements of schema "urn:zimbraSync"

  - <ns7:CancelPendingRemoteWipeRequest> (use wsdl2h option -g to auto-generate)

  - <ns7:CancelPendingRemoteWipeResponse> (use wsdl2h option -g to auto-generate)

  - <ns7:GetDeviceStatusRequest> (use wsdl2h option -g to auto-generate)

  - <ns7:GetDeviceStatusResponse> (use wsdl2h option -g to auto-generate)

  - <ns7:RemoteWipeRequest> (use wsdl2h option -g to auto-generate)

  - <ns7:RemoteWipeResponse> (use wsdl2h option -g to auto-generate)

  - <ns7:RemoveDeviceRequest> (use wsdl2h option -g to auto-generate)

  - <ns7:RemoveDeviceResponse> (use wsdl2h option -g to auto-generate)

  - <ns7:ResumeDeviceRequest> (use wsdl2h option -g to auto-generate)

  - <ns7:ResumeDeviceResponse> (use wsdl2h option -g to auto-generate)

  - <ns7:SuspendDeviceRequest> (use wsdl2h option -g to auto-generate)

  - <ns7:SuspendDeviceResponse> (use wsdl2h option -g to auto-generate)

@section ns8 Top-level root elements of schema "urn:zimbraVoice"

  - <ns8:ChangeUCPasswordRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:ChangeUCPasswordResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:GetUCInfoRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:GetUCInfoResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:GetVoiceFeaturesRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:GetVoiceFeaturesResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:GetVoiceFolderRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:GetVoiceFolderResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:GetVoiceInfoRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:GetVoiceInfoResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:GetVoiceMailPrefsRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:GetVoiceMailPrefsResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:ModifyFromNumRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:ModifyFromNumResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:ModifyVoiceFeaturesRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:ModifyVoiceFeaturesResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:ModifyVoiceMailPinRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:ModifyVoiceMailPinResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:ModifyVoiceMailPrefsRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:ModifyVoiceMailPrefsResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:ResetVoiceFeaturesRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:ResetVoiceFeaturesResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:SearchVoiceRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:SearchVoiceResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:UploadVoiceMailRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:UploadVoiceMailResponse> (use wsdl2h option -g to auto-generate)

  - <ns8:VoiceMsgActionRequest> (use wsdl2h option -g to auto-generate)

  - <ns8:VoiceMsgActionResponse> (use wsdl2h option -g to auto-generate)

*/

/* End of ./z_soap/z_soap.h */
